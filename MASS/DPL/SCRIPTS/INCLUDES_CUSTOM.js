/* TST2 as of 11:30AM 1/24/2018
//CHANGE LOG
// 03/07/2016 mark Fahey modified fieldInspectionPayment and fieldInspectionfee
// 03/07/2016 mark Fahey, modified CWM_ELP_WTUB_DPL_denialReasonsEmptyBlockWF as per defect 9524
// 03/07/2016 Srish Kumar, added eval for Speech_Audiology Functions
// 03/07/2016 Srish Kumar, updated processRenewal (Allied Health Renewals)
// 03/08/2016 mark Fahey modified assignedToByShortNotes
// 03/08/2016 mark Fahey, modified CWM_ELP_Defect_3679_DPL_RemoveContactsToLicenseRecord
// 03/08/2016 mark Fahey, modified adddplapplicationfee
// 03/09/2016 debashish.barik, added new function getBoardRecordFromCapId and include "ALL_DPL_FUNCTIONS"
// 03/09/2016 mark Fahey, modified createLicense, createRefLicense and calculateDplexpirationdate
// 03/10/2016 mark Fahey, modified getBoard
// 03/10/2016 mark Fahey, updated IsDPLLicenseFormat to accommodate boards with 5 digit type classes
// 03/11/2016 Bhargavi Yellapu, updated createLicense() and calculateDPLExpirationDate for Barber Instructor
// 03/12/2016 Srish Kumar, updated createLicense, calculateDPLExpirationDate and CWM_ELP_Defect4975_WTUA_DPL_setExpDateForHO for Barbers School & Instructor
// 03/14/2016 Mark Fahey, updated process renewals for barber shop
// 03/14/2016 Ankush Kshirsagar, updated addDPLApplicationFee() for Script#767
// 03/15/2016 Ankush Kshirsagar, updated createLicense() for Script#751
// 03/15/2016 Ankush Kshirsagar, Added CWM_751_WTUA_DPL_setExpDateForOSsalesRepLic() for Script#751
// 03/15/2016 Ankush Kshirsagar, Added CWM_751_WTUA_updateLicenseLPAndContact() for Script#751
// 03/15/2016 Ankush Kshirsagar, updated CWM_ELP_Defect_3679_DPL_RemoveContactsToLicenseRecord() for Script#636
// 03/15, 03/16/2016 Srish Kumar, updated addDPLApplicationFee for Scripts #502 and #221
// 3/21/2016 getBoard() modified , added occupational school board
//3/21/2016 - Bhargavi Yellapu - modified createLicense, calculateDPLExpirationDate
//3/22/2016 - mark Fahey - modified CWM_ELP_Defect_3679_DPL_RemoveContactsToLicenseRecord , CWM_ELP_DPL_addAmendmentToLicenseRecord
//3/23/2016 - Srish Kumar, updated addDPLApplicationFee for Script# 226 and 297
//4/06/2016 Srish Kumar, updated processRenewal (Funeral Type3, Type 6 and Embalmer Apprentice Renewals)
//4/14/2016 CLOJE added CWM_ELP_DPL_Defect10621_addEmployeeInfo
//4/15/2016 - CLOJE added updateDBAforOS and replaceAddress
//4/25/16 - CLOJE added expirationHasPassed
//Swati Pekam (04/28/2016)updated viewCondInvestigativeIntakePendingRecordIdASI for defect 10667
//8/17/16 jaime shear - updated getBoardForVerifcation
//Emmett T. Wylam (12/27/2018) - Added copyAddress, getAddress, copyASIInfo, copyAppSpecificRenewal, copyContacts3_0, getPeople3_0, getAppName, isMatchPeople3_0

*/

function getScriptText(vScriptName){ 
  var servProvCode = aa.getServiceProviderCode(); 
  if (arguments.length > 1) 
    servProvCode = arguments[1]; 
  vScriptName = vScriptName.toUpperCase(); 
  var emseBiz = aa.proxyInvoker.newInstance("com.accela.aa.emse.emse.EMSEBusiness").getOutput(); 
  try{ 
    var emseScript = emseBiz.getScriptByPK(servProvCode,vScriptName,"ADMIN"); 
    return emseScript.getScriptText() + ""; 
  }catch(err){ 
    return ""; 
  }
} 

eval(getScriptText("DRINKING_WATER_FUNCTIONS"));
eval(getScriptText("PODIATRY_FUNCTIONS"));
eval(getScriptText("ELECTROLOGY_FUNCTIONS"));
eval(getScriptText("DISPENSING_OPTICIAN_FUNCTIONS"));
eval(getScriptText("HOME_INSPECTOR_FUNCTIONS"));
eval(getScriptText("FUNERAL_DIRECTORS_FUNCTIONS"));
eval(getScriptText("ARCHITECT_FUNCTIONS"));
eval(getScriptText("ALLIED_HEALTH_FUNCTIONS"));
eval(getScriptText("ALLIED_MENTAL_HEALTH_FUNCTIONS"));
eval(getScriptText("SANITARIANS_FUNCTIONS"));
eval(getScriptText("LANDSCAPE_ARCHITECT_FUNCTIONS"));
eval(getScriptText("SOCIAL_WORK_FUNCTIONS"));
eval(getScriptText("HEARING_INSTRUMENT_FUNCTIONS"));
eval(getScriptText("MASSAGE_THERAPY_FUNCTIONS"));
eval(getScriptText("BARBER_FUNCTIONS"));
eval(getScriptText("COSMETOLOGY_FUNCTIONS"));
eval(getScriptText("CHIROPRACTOR_FUNCTIONS"));
eval(getScriptText("PUBLIC_ACCOUNTANCY_FUNCTIONS"));
eval(getScriptText("SPEECH_AUDIOLOGY_FUNCTIONS"));
eval(getScriptText("BUSINESS_AMENDMENT_FUNCTIONS"));
eval(getScriptText("OCCUPATIONAL_SCHOOLS_FUNCTIONS"));
eval(getScriptText("OPTOMETRY_FUNCTIONS"));
eval(getScriptText("ALL_DPL_FUNCTIONS"));

function addConditionsToSheetMetalRenewal(parentCapId) {
  var activeMasterLicense = isRenewalMasterLicenseActive();
  if (!activeMasterLicense) {
    logDebug("Active Master License not found for " + capId.getCustomID());
    //aa.capCondition.addCapCondition(parentCapId, "Notice", "Inactive Master Licensee", "Inactive or missing Master License", null, null, null, null, null, "", null, null, "Pending", "", "A","N");
    
      var vAppliedTo = parentCapId;
      var refLP = getRefLicenseProf(parentCapId);
      if (refLP && refLP != null) {
        var vAppliedTo = parentCapId +":"+refLP.getContactFirstName() +" "+ refLP.getContactLastName();
      }
        addLicenseCondition("Notice", "Applied", "Inactive Master Licensee", vAppliedTo, "Notice", parentCapId);

    }
  return activeMasterLicense;
}

function addCond_InvestigativeIntakePending(altId) {
   var contactResult = aa.people.getCapContactByCapID(capId).getOutput();
   for ( var index in contactResult)
   {
    var thisCapContact = contactResult[index];
    var thispeople = thisCapContact.getPeople();
    if ((thispeople.contactType == 'Respondent') || (thispeople.contactType == 'Respondent Business') || (thispeople.contactType == 'Business') || (thispeople.contactType == 'Licensed Individual')) {
      var capContactModel = thisCapContact.getCapContactModel();
      var vrefNumber = capContactModel.refContactNumber;
      aa.print(vrefNumber);
    if(capContactModel.getContactName() != null){
      vrefAppliedTo = "Ref Contact: "+capContactModel.getContactName();
        }
    else {
    vrefAppliedTo = "Ref Contact: "+thispeople.getBusinessName();
    }
  logDebug("applied to:"+vrefAppliedTo);
      
      var conditionResult = addContactStdConditionforBoston(vrefNumber, "Notice", "Investigative Intake Pending");
      
  logDebug("condition result:" + conditionResult);
  if (conditionResult) 
      {
        var conditionNumber = conditionResult.getOutput();
        var contactCondArray = getContactCondutions(vrefNumber);
        var vCond = isMatchedNotice(contactCondArray, "Notice", "Investigative Intake Pending", conditionNumber);
        aa.print(vCond);
        if(vCond!=null) {
          var asiTemplate = aa.genericTemplate.getTemplateStructureByGroupName("RECORD INFO").getOutput();
          setasiTemplate = setTemplateValueByForm(asiTemplate, "RECORD DETAILS", "Record ID", altId);
          
          var e = vCond.condition.getEntityPK();
          asiTemplate.setEntityPKModel(e);
          vCond.condition.setTemplateModel(asiTemplate);
      vCond.condition.setConditionComment(vrefAppliedTo);
          var editContactConditionResult = aa.commonCondition.editCommonCondition(vCond.condition);
          if (editContactConditionResult.getSuccess()) {
            aa.print("Successfully edited");
          } else {
            aa.print("**ERROR: editing condition: " + editContactConditionResult.getErrorMessage());
          }
        }
      } else {
        aa.print("**ERROR: adding reference contact (" + vrefNumber + ") condition: " + conditionResult.getErrorMessage());
      }           
    }
   }
}
//Adding condition
function addContactStdConditionforBoston(contSeqNum, cType, cDesc) {
  var addContactConditionResult = null;
  var foundCondition = false;
  var javascriptDate = new Date()
    var javautilDate = aa.date.transToJavaUtilDate(javascriptDate.getTime());
  cStatus = "Applied";
  if (arguments.length > 3)
    cStatus = arguments[3]; // use condition status in args
  if (!aa.capCondition.getStandardConditions) {
    logDebug("addAddressStdCondition function is not available in this version of Accela Automation.");
  } else {
    standardConditions = aa.capCondition.getStandardConditions(cType, cDesc).getOutput();
    for (i = 0; i < standardConditions.length; i++)
      if (standardConditions[i].getConditionType().toUpperCase() == cType.toUpperCase() && standardConditions[i].getConditionDesc().toUpperCase() == cDesc.toUpperCase()) //EMSE Dom function does like search, needed for exact match
      {
        standardCondition = standardConditions[i]; // add the last one found
        foundCondition = true;
        if (!contSeqNum) // add to all reference address on the current capId
        {
          var capContactResult = aa.people.getCapContactByCapID(capId);
          if (capContactResult.getSuccess()) {
            var Contacts = capContactResult.getOutput();
            for (var contactIdx in Contacts) {
              var contactNbr = Contacts[contactIdx].getCapContactModel().getPeople().getContactSeqNumber();
              if (contactNbr) {
                var newCondition = aa.commonCondition.getNewCommonConditionModel().getOutput();
                newCondition.setServiceProviderCode(aa.getServiceProviderCode());
                newCondition.setEntityType("CONTACT");
                newCondition.setEntityID(contactNbr);
                newCondition.setConditionDescription(standardCondition.getConditionDesc());
                newCondition.setConditionGroup(standardCondition.getConditionGroup());
                newCondition.setConditionType(standardCondition.getConditionType());
                newCondition.setConditionComment(standardCondition.getConditionComment());
                newCondition.setImpactCode(standardCondition.getImpactCode());
                newCondition.setConditionStatus(cStatus)
                newCondition.setAuditStatus("A");
                newCondition.setIssuedByUser(systemUserObj);
                newCondition.setIssuedDate(javautilDate);
                newCondition.setEffectDate(javautilDate);
                newCondition.setAuditID(currentUserID);
                var addContactConditionResult = aa.commonCondition.addCommonCondition(newCondition);
                if (addContactConditionResult.getSuccess()) {
                  logDebug("Successfully added reference contact (" + contactNbr + ") condition: " + cDesc);
                } else {
                  logDebug("**ERROR: adding reference contact (" + contactNbr + ") condition: " + addContactConditionResult.getErrorMessage());
                }
              }
            }
          }
        } else {
          var newCondition = aa.commonCondition.getNewCommonConditionModel().getOutput();
          newCondition.setServiceProviderCode(aa.getServiceProviderCode());
          newCondition.setEntityType("CONTACT");
          newCondition.setEntityID(contSeqNum);
          newCondition.setConditionDescription(standardCondition.getConditionDesc());
          newCondition.setConditionGroup(standardCondition.getConditionGroup());
          newCondition.setConditionType(standardCondition.getConditionType());
          newCondition.setConditionComment(standardCondition.getConditionComment());
          newCondition.setImpactCode(standardCondition.getImpactCode());
          newCondition.setConditionStatus(cStatus)
          newCondition.setAuditStatus("A");
          newCondition.setIssuedByUser(systemUserObj);
          newCondition.setIssuedDate(javautilDate);
          newCondition.setEffectDate(javautilDate);
          newCondition.setAuditID(currentUserID);
          addContactConditionResult = aa.commonCondition.addCommonCondition(newCondition);
          if (addContactConditionResult.getSuccess()) {
            logDebug("Successfully added reference contact (" + contSeqNum + ") condition: " + cDesc);
          } else {
            logDebug("**ERROR: adding reference contact (" + contSeqNum + ") condition: " + addContactConditionResult.getErrorMessage());
          }
        }
      }
  }
  if (!foundCondition)
    {
    logDebug("**WARNING: couldn't find standard condition for " + cType + " / " + cDesc);
    }
  return addContactConditionResult;
}

function addReferenceContactFromMasterLicense() {
    var newLicenseType = null;
    var boardName = getBoard(capId);
  var licType = "";
  var contactType = "Master Licensee";
    if (arguments.length == 1) {
    licType = arguments[0];
    contactType = "Instructor";
  }

  if(!licType) {
    var refLP = getRefLicenseProf(AInfo["License Number"], "SM", "M1");
    if (!refLP)
      refLP = getRefLicenseProf(AInfo["License Number"], "SM", "M2");
    }
  else {
     refLP = getRefLicenseProf(AInfo["License Number"], "SM", licType);
  }
    if (refLP) {
        var fvAddResult = aa.licenseScript.associateLpWithCap(capId, refLP);

        // get the license number and licensee name
        var licNum = refLP.stateLicense + "-SM-" + refLP.businessLicense;
        var refLPFirstName = refLP.contactFirstName;
        var refLPLastName = refLP.contactLastName;

        logDebug("Master License: " + licNum);
        logDebug("Master Licensee: " + refLPFirstName + " " + refLPLastName);

        if (isDPLLicenseFormat(licNum) && refLPFirstName && refLPLastName) {
            // get the contacts from the master license record
            var licCapId = aa.cap.getCapID(licNum).getOutput();
            var licContacts = getPeople(licCapId); 
            for (c in licContacts) {
                var licContact = licContacts[c];
                var licContactModel = licContact.getCapContactModel();
                var refContactNumber = licContactModel.refContactNumber;
                var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput();
                logDebug(">> " + licContact.firstName + " " + licContact.lastName + " ref:" + refContactNumber);

                if (licContact.firstName && licContact.lastName &&
                    licContact.firstName.toUpperCase().equals(refLPFirstName.toUpperCase()) &&
                    licContact.lastName.toUpperCase().equals(refLPLastName.toUpperCase())) {

                    var getResult = aa.people.getPeople(refContactNumber);
                    if (getResult.getSuccess()) {
                        var peopleObj = getResult.getOutput();
                        // add the reference contact from the people object to the application record
                        var contactNbr = addReferenceContactFromPeopleModel(peopleObj);
                        var appContacts = aa.people.getCapContactByCapID(capId).getOutput();

                        for (c in appContacts) {
                            var appContact = appContacts[c];
                            if (appContact.getPeople().getContactSeqNumber() == contactNbr) {
                                
                                // change the contact type of the newly added contact
                                appContact.getPeople().setContactType(contactType);
                                var updateResult = aa.people.editCapContact(appContact.getCapContactModel());
                                if (updateResult.getSuccess()) {
                                    logDebug("Contact " + contactNbr + " updated successfully");
                                } else {
                                    logDebug("Contact " + contactNbr + " update failed: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                                }

                                // copy addresses
                                for (add in contactAddressList) {
                                    var transactionAddress = false;
                                    contactAddressModel = contactAddressList[add].getContactAddressModel();
                                    if (contactAddressModel.getEntityType() == "CAP_CONTACT") {
                                        transactionAddress = true;
                                        contactAddressModel.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                                    }
                                    // Commit if transaction contact address
                                    if (transactionAddress) {
                                        var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                                        contactAddressModel.setContactAddressPK(newPK);
                                        aa.address.createCapContactAddress(capId, contactAddressModel);
                                    }
                                    // Commit if reference contact address
                                    else {
                                        // build model
                                        var Xref = aa.address.createXRefContactAddressModel().getOutput();
                                        Xref.setContactAddressModel(contactAddressModel);
                                        Xref.setAddressID(contactAddressList[add].getAddressID());
                                        Xref.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                                        Xref.setEntityType(contactAddressModel.getEntityType());
                                        Xref.setCapID(capId);
                                        // commit address
                                        aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                                    }
                                }
                                break;
                            }
                        }
                        break;
                    } else {
                        logDebug("Can't find " + refLPFirstName + " " + refLPLastName + " reference contact number: " + refContactNumber + " : " + getResult.getErrorType() + ":" + getResult.getErrorMessage());
                    }
                }
            }
        }
    } else return null;
}
function addReferenceContactFromPeopleModel(peopleObj) {
    //Add the reference contact record to the current CAP
  if (arguments.length == 2) {
    var vcapId = arguments[1];
  }
  else {
  var vcapId = capId;
  }
    var contactAddResult = aa.people.createCapContactWithRefPeopleModel(vcapId, peopleObj);
    if (contactAddResult.getSuccess()) {
        logDebug("Contact successfully added to CAP.");
        var capContactResult = aa.people.getCapContactByCapID(vcapId);
        if (capContactResult.getSuccess()) {
            var Contacts = capContactResult.getOutput();
            var csnArray = new Array();
            for (c in Contacts)
                csnArray.push(Contacts[c].getCapContactModel().getPeople().getContactSeqNumber());

            var contactNbr = Math.max.apply(Math, csnArray);
            logDebug("Contact Nbr = " + contactNbr);
            return contactNbr;
        } else {
            logDebug("**ERROR: Failed to get Contact Nbr: " + capContactResult.getErrorMessage());
            return false;
        }
    } else {
        logDebug("**ERROR: Cannot add contact: " + contactAddResult.getErrorMessage());
        return false;
    }
}
function addToLicensePrintSet(addToSetCapId) {
    var setCap = aa.cap.getCap(addToSetCapId).getOutput();
    var licTypeResult = setCap.getCapType();
    var licTypeString = licTypeResult.toString();
    var licTypeArray = licTypeString.split("/");

    var setPrefix = lookup("Lookup:LicensePrintSetPrefix", licTypeArray[1]);
    var setExists = false;
    if (setPrefix != undefined) {
        var sDateMMDDYYYY = dateFormatted(sysDate.getMonth(), sysDate.getDayOfMonth(), sysDate.getYear(), "");
        var sysDateArray = sDateMMDDYYYY.split("/");
        var setName = setPrefix.substr(0, 5) + sysDateArray[2] + sysDateArray[0] + sysDateArray[1];
        setGetResult = aa.set.getSetByPK(setName);
        if (setGetResult.getSuccess()) setExists = true;
    }

    if (!setExists && setPrefix != undefined) {
        setDescription = setName;
        setType = "Print - License";
        setStatus = "Pending";
        setExists = createSet(setName, setDescription, setType, setStatus);
    }

    if (setExists) {
        var setObj = new capSet(setName);
        var memberExists = false;
        for (var i in setObj.members) {
            var mCapId = aa.cap.getCapID(setObj.members[i].ID1, setObj.members[i].ID2, setObj.members[i].ID3).getOutput();
            if (mCapId.getCustomID() == addToSetCapId.getCustomID()) {
                memberExists = true;
                break;
            }

        }
        if (!memberExists) {
            aa.set.add(setName, addToSetCapId);
            logDebug("Added " + addToSetCapId.getCustomID() + " to set " + setName);
        }
    }
}
function addToLicenseSyncSet(addToSetCapId) {
  var setCap = aa.cap.getCap(addToSetCapId).getOutput();

    var setName = lookup("Lookup:LicenseSync", "SET_NAME");
    
    if (matches(setName,null,"",undefined)) setName = "SYNCSET";

    
  var setExists = false;
  var setGetResult = aa.set.getSetByPK(setName);
  if (setGetResult.getSuccess()) setExists = true;


  if (!setExists) {
    logDebug("Set doesn't exists.");
    setDescription = setName;
    setType = "License Sync";
    setStatus = "Pending";
    setExists = createSet(setName, setDescription, setType, setStatus);
  }

  if (setExists) {
    logDebug("Set exists. Adding "+addToSetCapId);
    var setObj = new capSet(setName);
    var memberExists = false;
    for (var i in setObj.members) {
      var mCapId = aa.cap.getCapID(setObj.members[i].ID1, setObj.members[i].ID2, setObj.members[i].ID3).getOutput();
      if (mCapId.getCustomID() == addToSetCapId.getCustomID()) {
        memberExists = true;
        logDebug("Cap already exists on "+setName);
        break;
      }

    }
    if (!memberExists)
      aa.set.add(setName, addToSetCapId);
  }
}/*
 * Add a newly created Transaction license to set
 * 
 */
function addTransLictoSet(newLicId)
{
  var parentRecId = newLicId.getCustomID();
  logDebug(newLicId);
  logDebug(parentRecId);

  //Get Set and Check for set members
  var setId = "SYNCSET";
  var set = aa.set.getSetByPK(setId);
  if(set.getSuccess())
  {
    //Add Parent License to set
    set=set.getOutput();
    addResult= aa.set.addCapSetMember((set.getSetID()),newLicId); 
    
    //Check the set members after addition
    var setMembers=aa.set.getCAPSetMembersByPK(set.getSetID());
    var array=new Array();
    array=setMembers.getOutput();
    /* for(i=0;i<array.size();i++)
    {
      var setMember=array.get(i);
      setMember=setMember.toString();
      logDebug(setMember);
    } */
  }
}/*
 * WTUA;License!Veterinarian!~!Application.js
 *
 * Apply the license fee after the applicant has passed their exam
 *
 */

function appendRefContactASITable(ipPeopleModel,ipASITGroupName,ipASITSubgroupName,ipRows)
{
  var fvTemplate = ipPeopleModel.getTemplate();
  if (!fvTemplate)
    return "ERROR: ASIT Template not found.";
  var fvASITGroups = fvTemplate.getTemplateTables();
  if (!fvASITGroups)
    return "ERROR: No ASIT Group found.";
  if (fvASITGroups.size() < 1)
    return  "ERROR: No ASIT Group found.";
  if (ipASITSubgroupName == null || ipASITSubgroupName == "")
    return  "ERROR: No ASIT Sub-Group provided.";
  var fvASITGroup = null;
  var fvASITGroupIndex = 0;
  if (ipASITGroupName == null || ipASITGroupName == "")
  {
    fvASITGroup = fvASITGroups.get(0);
    ipASITGroupName = fvASITGroup.getGroupName();
  }
  else
  {
    for (var fvCounter1 = 0; fvCounter1 < fvASITGroups.size(); fvCounter1++)
    {
      if (fvASITGroups.get(fvCounter1).getGroupName() != ipASITGroupName)
        continue;
      fvASITGroup = fvASITGroups.get(fvCounter1);
      fvASITGroupIndex = fvCounter1;
    }
    if (fvASITGroup == null)
      return "ERROR: ASIT Group provided not found.";
  }
  var fvASITSubgroups = fvASITGroup.getSubgroups();
  if (!fvASITSubgroups)
    return "ERROR: No ASIT Sub-Group found.";
  if (fvASITSubgroups.size() < 1)
    return "ERROR: No ASIT Sub-Group found.";
  var fvASITSubgroup = null;
  var fvASITSubGroupIndex = 0;
  for (var fvCounter1 = 0; fvCounter1 < fvASITSubgroups.size(); fvCounter1++)
  {
    if (fvASITSubgroups.get(fvCounter1).getSubgroupName() != ipASITSubgroupName)
      continue;
    fvASITSubgroup = fvASITSubgroups.get(fvCounter1);
    fvASITSubGroupIndex = fvCounter1;
  }
  if (fvASITSubgroup == null)
    return "ERROR: ASIT Sub-Group provided not found.";
    
  var fvASITFields = fvASITSubgroup.getFields();
  var fvASITRows = fvASITSubgroup.getRows();
  var fvCurrentRowCount = 1;
  if (fvASITRows)
    fvCurrentRowCount = fvASITRows.size() + 1;
  else
    fvASITRows = aa.util.newArrayList();

  for (var fvCounter1 in ipRows)
  {
    var fvRow = ipRows[fvCounter1];
    var fvArrayValues = aa.util.newArrayList();
    for (var fvFieldIndex = 0; fvFieldIndex < fvASITFields.size(); fvFieldIndex++)
    {
      var fvField = fvASITFields.get(fvFieldIndex);
      var fvGenericTempTable = aa.proxyInvoker.newInstance("com.accela.aa.template.field.GenericTemplateTableValue").getOutput();
      fvGenericTempTable.setRowIndex(fvCurrentRowCount);
      fvGenericTempTable.setGroupName(ipASITGroupName);
      fvGenericTempTable.setSubgroupName(ipASITSubgroupName);
      fvGenericTempTable.setFieldName(fvField.getFieldName());
      if (fvRow[fvField.getFieldName()])
        fvGenericTempTable.setValue(fvRow[fvField.getFieldName()]);
      fvArrayValues.add(fvGenericTempTable);
    }
    var fvSubTempRow = aa.proxyInvoker.newInstance("com.accela.aa.template.subgroup.TemplateRow").getOutput();
        fvSubTempRow.setRowIndex(fvCurrentRowCount);
    fvSubTempRow.setValues(fvArrayValues);
    fvASITRows.add(fvSubTempRow);
    fvCurrentRowCount++;
  }
  fvASITSubgroup.setRows(fvASITRows);
  fvASITSubgroups.set(fvASITSubGroupIndex,fvASITSubgroup);
  fvASITGroup.setSubgroups(fvASITSubgroups);
  fvASITGroups.set(fvASITGroupIndex,fvASITGroup);
  fvTemplate.setTemplateTables(fvASITGroups);
  ipPeopleModel.setTemplate(fvTemplate);
  
  var fvResult = aa.people.editPeople(ipPeopleModel);
  if (fvResult.getSuccess())
    return ("Successfully added " + ipRows.length + " rows.");
  else
    return fvResult.getErrorMessage();
}

/*
 * The new record has violations and there are 2 previous field inspection records with the same Business contact or
 * Licensed Individual contact type  with a status of Complaint Closed
 * 1. Apply a Repeat Offender condition to the reference contact"
 * 
 */
function applyRepeaterOffenderCondition() {
  // var contactTypesArray = new Array("Business", "Licensed Individual");
  var contactTypesArray = new Array("Respondent Business", "Respondent");
   if (isRecordHasViolations()) {
      logDebug("This record has a violation.");
      for (i in contactTypesArray) {
         var thisBusContact = getContactByTypeXXX(contactTypesArray[i],capId);
     if(thisBusContact){
         var contObjRefSeqNumber = thisBusContact.refContactNumber;
     logDebug("thisBusContact:"+thisBusContact);
     logDebug("contObjRefSeqNumber:"+contObjRefSeqNumber);
     var vrefNumber = thisBusContact.refContactNumber;
         if (contObjRefSeqNumber) {
            var contacts = getContactsByTypeAndSeqNumber(contactTypesArray[i], contObjRefSeqNumber);
            if (contacts >= 2) {
               if (!isContactConditionExist("Compliance", "Repeat Complaints", contObjRefSeqNumber)) {
                  logDebug("Adding Repeat Complaints condition to user with Reference Contact ID: " + contObjRefSeqNumber);

          if(thisBusContact.getContactName() != null){
            vrefAppliedTo = "Ref Contact: "+thisBusContact.getContactName();
              }
          else {
          vrefAppliedTo = "Ref Contact: "+thisBusContact.getBusinessName();
          }
        logDebug("applied to:"+vrefAppliedTo);
          
          //addContactStdCondition(contObjRefSeqNumber, "Compliance", "Repeat Offender");
          var conditionResult = addContactStdConditionforBoston(vrefNumber, "Compliance", "Repeat Complaints");
      logDebug("condition result:" + conditionResult);
  if (conditionResult) 
      {
        var conditionNumber = conditionResult.getOutput();
        var contactCondArray = getContactCondutions(vrefNumber);
        var vCond = isMatchedNotice(contactCondArray, "Notice", "Investigative Intake Pending", conditionNumber);
        logDebug("vCond"+vCond);
        if(vCond!=null) {
          var asiTemplate = aa.genericTemplate.getTemplateStructureByGroupName("RECORD INFO").getOutput();
          setasiTemplate = setTemplateValueByForm(asiTemplate, "RECORD DETAILS", "Record ID", altId);
          
          var e = vCond.condition.getEntityPK();
          asiTemplate.setEntityPKModel(e);
          vCond.condition.setTemplateModel(asiTemplate);
      vCond.condition.setConditionComment(vrefAppliedTo);
          var editContactConditionResult = aa.commonCondition.editCommonCondition(vCond.condition);
          if (editContactConditionResult.getSuccess()) {
            logDebug("Successfully edited");
          } else {
            logDebug("**ERROR: editing condition: " + editContactConditionResult.getErrorMessage());
          }
        }
      } else {
        logDebug("**ERROR: adding reference contact (" + vrefNumber + ") condition: " + conditionResult.getErrorMessage());
      } 
               }            
            }
         }
      }
    }
   }
}


/*
 * This function is used to Assigned To 1st task based on Short Notes field value of
 * application and renewal records.
 */
function assignedToByShortNotes(wfTask, boardShortNotes) {
  logDebug("inside assignedToByShortNotes func");
var ceFlag = true; // CR 472

if(appMatch("License/DPL/Continuing Education/CE Submission")) {  
var vRole = "CE_SUBMISSION";

//set the value of ceFlag to the result from the new function checkActiveCEAudit// CR 472 
if(boardShortNotes!="PL" && boardShortNotes!="FA" && boardShortNotes!="GF" && boardShortNotes!="EL"){
ceFlag = checkActiveCEAudit(capId);
}

}
else if(appMatch("License/DPL/Amendments/License Verification")){
var vRole = "VERIFICATIONS";
}
else if(appMatch("License/Trade Boards/Appeal/NA")){
var vRole = "APPEAL";
} 
else if(appMatch("License/*/*/Renewal")){
var vRole = "ED";
}
else if(appMatch("License/DPL/Amendments/Request for Wall Certificate")){
var vRole = "WALLCERT";
}
else if(appMatch("License/DPL/Amendments/Business Amendment")){
var vRole = "BUSAMEND";
}
else {
var vRole = "BOARDSTAFF";
logDebug("inside assignedToByShortNotes and vrole is boardstaff");
}
  logDebug("Board:"+boardShortNotes)
  
   if (boardShortNotes != undefined && boardShortNotes != null && boardShortNotes != "" && ceFlag) {
    var assignToUser = null;// modifed for CR#333
     if(!appMatch("License/DPL/Amendments/Amendment")) 
      assignToUser = lookup("TASK_ASSIGNMENT", appTypeString);
    if (!assignToUser) {
      var assignToUser = lookup("TASK_ASSIGNMENT", boardShortNotes + "|"+vRole);  
      logDebug("assign to:"+assignToUser)
    }
    if( assignToUser )
      dplTaskAssign(wfTask, assignToUser);
   }
}
/*
 * This function is used to set Assigned To based on previous task Assigned To
 * wfTask: current task
 * previousTask: previous task
 *
 */
function assignedToWithPreviousUser(wfTask, previousTask) {
   dplTaskAssign(wfTask, getTaskAssignedTo(previousTask));

   /*if (wfTask == "Validate") {
      assignedToWithPreviousUser("Validate", "Intake");
   } else if (wfTask == "Exam") {
      assignedToWithPreviousUser("Exam", "Validate");
   } else if (wfTask == "Issuance") {
      assignedToWithPreviousUser("Issuance", "Exam");
   }
   
   if (wfTask == "Validate") {
      assignTask(wfTask, getTaskAssignedTo("Intake"));
   } else if (wfTask == "Issuance") {
      assignTask(wfTask, getTaskAssignedTo("Validate"));
   }*/
}
/*
 * A list of the records and tasks that need a user assigned by the system.
 *
 */
function assignTaskToByRecordType(wfTask) {
   if (appMatch("Enforce/Adjudication/*/*")) {
      if (wfTask == "Board Sanctions" || wfTask == "Reconsideration") {
         var vBoardASI = AInfo["Board"];
         if (vBoardASI != undefined && vBoardASI != null && vBoardASI != "") {
            var deptUser = lookup("TASK_ASSIGNMENT", lookup("BOARDS", vBoardASI) + "|ED");
            if (deptUser != undefined && deptUser != null && deptUser != "") {
               dplTaskAssign(wfTask, deptUser);
            }
         }
      }
   } else if (appMatch("Enforce/Investigation/Intake/*")) {
      if (wfTask == "Triage") {
         var tradeProfessionASI = AInfo["Trade/Profession"];
         if (tradeProfessionASI != undefined && tradeProfessionASI != null && tradeProfessionASI != "") {
            var deptUser = lookup("TASK_ASSIGNMENT", lookup("APPEAL_TRADE_PROFESSION", tradeProfessionASI) + "|SUP");
            if (deptUser != undefined && deptUser != null && deptUser != "") {
               dplTaskAssign(wfTask, deptUser);
            }
         }
      } else if (wfTask == "Board Review" || wfTask == "Board Consent Agreement" || wfTask == "Complaint Closure") {
         var vBoardASI = AInfo["Board"];
         if (vBoardASI != undefined && vBoardASI != null && vBoardASI != "") {
            var deptUser = lookup("TASK_ASSIGNMENT", lookup("BOARDS", vBoardASI) + "|ED");
            if (deptUser != undefined && deptUser != null && deptUser != "") {
               dplTaskAssign(wfTask, deptUser);
            }
         }
      } else if (wfTask == "Consent Agreement Distribution" || wfTask == "Post Decision Notification" || wfTask =="Order Issuance") {
         var prosecutionReviewUser = getTaskAssignedTo("Prosecution Review");
         if (prosecutionReviewUser != undefined && prosecutionReviewUser != null && prosecutionReviewUser != "") {
            dplTaskAssign(wfTask, previousTaskUser);
         }
      }
   } else if (appMatch("Enforce/Investigation/Field Inspection/*")) {
      if (wfTask == "Inspection") {
         // task: assign to the creator of the record
         dplTaskAssign(wfTask, cap.getAuditID());
      } 
      }
   }


function associateLpWithCap(refLP, itemCapId) {
  //add the LP to the CAP
  var asCapResult = aa.licenseScript.associateLpWithCap(itemCapId, refLP);
  if (!asCapResult.getSuccess()) {
    logDebug("**WARNING error associating CAP to LP: " + asCapResult.getErrorMessage())
  } else {
    logDebug("Associated the CAP to the new LP")
  }
}// This function automatically approves all CE on a record
function autoApproveCE(CEcap){
  var capIDModel = new com.accela.aa.emse.dom.CapIDScriptModel(CEcap);
  var CERes = aa.continuingEducation.getContEducationList(capIDModel).getOutput();
  if (CERes){
    for (var c in CERes) {
      var CEModel = CERes[c].getContinuingEducationModel();
      if (!CEModel.getApprovedFlag() == "Y"){
        CEModel.setApprovedFlag("Y");
        CEModel.setSyncFlag("Y");
        var approveModel = new com.accela.aa.emse.dom.ContinuingEducationScriptModel(CEModel, CERes[c].getServiceProviderCode());
        aa.continuingEducation.updateContinuingEducationModel(approveModel);
      }
    }
  }
}//This function will auto assign a task to a user in a department based on a round robin methodology
//wfTask: Workflow Task Name that need to be auto assigned
//Department: The department containing the users that will be used for assignment in the format "LICENSING/DPL/LIC/SM/NA/SUPV/NA"
//Depends on the standard choice WorkflowAutoAssign to store the index values

function autoAssign(wfTask, department)
{
   var stdChoiceVal = wfTask + "|" + department;
   var assignTo = null;
   try {
      assignTo = parseInt(lookup("WorkflowAutoAssign", stdChoiceVal));
   } catch(ex) {
      addLookup("WorkflowAutoAssign", stdChoiceVal, "1");
      assignTo = "1";
   }

   var assignNext = 0;
   var userList = new Array();

   // get the users in the system
   var peop = aa.people.getSysUserList(null).getOutput();
   for(x in peop)
   {
      if( peop[x].getDeptOfUser() == department)
      {
         userList.push(peop[x].getUserID());
      }
   }
   // make sure we're still in the bounds of the array and assign
   if (userList.length > assignTo)
   {
      // assign the task
      assignTask(wfTask, userList[assignTo]);
      // update the standard choice value
      editLookup("WorkflowAutoAssign", stdChoiceVal, parseInt(assignTo) + 1);
   }
   // if outside the bounds of the array, return to the beginning.
   else
   {
      // assign the task
      assignTask(wfTask, userList[0]);
      // update the standard choice value
      editLookup("WorkflowAutoAssign", stdChoiceVal, 1);
   }
}
// This function automatically disapproves all CE on a record
function autoDisapproveCE(CEcap){
  var capIDModel = new com.accela.aa.emse.dom.CapIDScriptModel(CEcap);
  var CERes = aa.continuingEducation.getContEducationList(capIDModel).getOutput();
  if (CERes){
    for (var c in CERes) {
      var CEModel = CERes[c].getContinuingEducationModel();
      if (!CEModel.getApprovedFlag() == "N"){
        CEModel.setApprovedFlag("N");
        CEModel.setSyncFlag("Y");
        var approveModel = new com.accela.aa.emse.dom.ContinuingEducationScriptModel(CEModel, CERes[c].getServiceProviderCode());
        aa.continuingEducation.updateContinuingEducationModel(approveModel);
      }
    }
  }
}
function buildContactTypeArrayFromException(ipExceptTypes)
{
  var opContactTypes = new Array();
  var fvExceptTypes = ipExceptTypes.split(",");
  var fvContactsTypeBD = aa.bizDomain.getBizDomain("CONTACT TYPE").getOutput();
  var fvContactTypesBDV = fvContactsTypeBD.toArray();
  for (var fvCounter in fvContactTypesBDV)
  {
    var fvContactTypeBDV = fvContactTypesBDV[fvCounter];
    
    var fvStatus = fvContactTypeBDV.auditStatus;
    if (fvStatus != "A")
      continue;
    var fvContactType = fvContactTypeBDV.bizdomainValue;
    if (existsInArray(opContactTypes,fvContactType) || existsInArray(fvExceptTypes,fvContactType))
      continue;
    opContactTypes.push(fvContactType);
  }
  return opContactTypes;
}

function calculateDPLExpirationDate(itemCap)
{
  logDebug("Calculating expiration date for : "+itemCap);
  /*-------------------------------------------------------------------------------------------------------/
                Logic for calculation of Expiration date
  --------------------------------------------------------------------------------------------------------*/

  //Variables
  var bDateObj;
  var issueDateObj;
  var expDate = new Date();

  //Get the issue date from workflow
  var workflowResult = aa.workflow.getTasks(capId);
  if (workflowResult.getSuccess())
  {
    wfObj = workflowResult.getOutput();
    for (i in wfObj)
    { 
      var fTask = wfObj[i]; 
      var desc = fTask.getTaskDescription(); 
      var disp = fTask.getDisposition(); 
      var taskDate = fTask.getStatusDate();
      
      if((desc == "Validate" && (disp == "Approved" || disp == "Approved with Conditions")) || (desc == "Exam" && (disp == "Approved" || disp == "Approved with Conditions")))
      {
        issueDateObj = new Date(taskDate.getTime());
        logDebug("License issue date:" + (issueDateObj.getMonth() + 1) + "/" + issueDateObj.getDate() + "/" + issueDateObj.getFullYear());
      }
    }   
  }

  //Check for Record Type
  var vCapModel = aa.cap.getCap(capId).getOutput();
  var vType = vCapModel.capType;
  vType = vType.toString();
  var ids=new Array();
  ids = vType.split("/");
  logDebug("Record Type: " + ids[1]);
/*
   // Added for Scrpt 156 : Neel patel
  var licCustID = capId.getCustomID();
  //aa.print("Parent ID: " + licCustID + " " + itemCap);
  thisLic=new licenseObject(licCustID,itemCap);
  var Status = "";
  if(thisLic != null){
     Status = thisLic.getStatus();
   }
   
   var OutstandingFee = aa.fee.isFullPaid4Renewal(itemCap).getOutput() ;
   if (ids[1] == "Cosmetology" && OutstandingFee == true && Status == "Expired") {
      CWM_ELP_COS_A_APP_4_setExpDateForCosmoSchool(itemCap);
   }
   // Added for Scrpt 156 : Neel patel
  */ 
   if (ids[1] == "Cosmetology") {
      if (ids[2] == "Instructor") {
        CWM_ELP_COS_APP_4_setExpDateForCosmoInstructor(itemCap);
      }else if(ids[2] == "Jr Instructor") {
          CWM_ELP_COS_APP_4_setExpDateForCosmoJrInstructor(itemCap);
      }else if(ids[2] == "Shop"){
        CWM_ELP_COS_A_APP_4_setExpDateForCosmoShop(itemCap);    
                  } 
   }
  /*---------------------------------------------------
   Logic for calculation of Sheet Metal Expiration date
  ----------------------------------------------------*/
  if (ids[1] == "Sheet Metal")
  {
    //aa.print("Record SubType: " + ids[2]);
    
    //SM Business Logic
    if(ids[2] == "Business License" || ids[2] == "School")
    {
      setLicExpirationDate(itemCap, issueDateObj);
    }
       

    //SM Individual Logic
    if(ids[2] == "Apprentice" || ids[2] == "Instructor" || ids[2] == "Journeyperson" || ids[2] == "Master")
    {
      var capContactResult=aa.people.getCapContactByCapID(capId);
      if(capContactResult.getSuccess())
      {
        capContactResult=capContactResult.getOutput();
        for(i in capContactResult)
        {
          var peopleModel= capContactResult[i].getPeople();
          if(peopleModel.getContactType()=="Applicant" )
          {
            var capContactScriptModel= capContactResult[i];
            var capContactModel= capContactScriptModel.getCapContactModel();
            var bDate = capContactModel.getBirthDate();
            if(bDate != null)  //added for 625 defect
            {
             bDateObj = new Date(bDate.getTime());
            logDebug("Birth date:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
            }
            
          }
        }
        
        if(issueDateObj && bDateObj)
        {
          var issueDateYear = issueDateObj.getFullYear();
          if(bDateObj.getMonth() > issueDateObj.getMonth())
          {
            expDate.setFullYear((issueDateYear-1));
            expDate.setDate(28);
            expDate.setMonth(bDateObj.getMonth());

          }
          else
          {
            expDate.setFullYear(issueDateYear);
            expDate.setDate(28);
            expDate.setMonth(bDateObj.getMonth());
          }
        }
        logDebug("Expiration date to pass: " + (expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear());
        setLicExpirationDate(itemCap, expDate);
      }
    }
    
  }

  /*-----------------------------------------------------
   Logic for calculation of Veterinarian Expiration date
  ----------------------------------------------------*/

  if(ids[1] == "Veterinarian")
  {
    if(issueDateObj)
    {
      var issueMonth = issueDateObj.getMonth();
      var issueDate = issueDateObj.getDate();
      var issueDateYear = issueDateObj.getFullYear();
      logDebug("issueMonth: " + issueMonth + " issueDate: " + issueDate);
      
      if (issueMonth > 9 || (issueMonth == 9 && issueDate >= 28)) 
      {
        expDate.setFullYear((issueDateYear+1));
        expDate.setDate(28); 
        expDate.setMonth(1);
       }
      
      else
      {
        expDate.setFullYear(issueDateYear);
        expDate.setDate(28);
        expDate.setMonth(1);
      }
      logDebug("Expiration date to pass: " + (expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear());
      setLicExpirationDate(itemCap, expDate);
    }
  } 

    if(ids[1] == "Plumbers and Gas Fitters")
  {
  /* Release B Master Script List.xlsx
 * id: 753
 */
CWM_ELP_753_WTUA_DPL_initialAppExpirationDate(itemCap);
/* end changes for id 753 */
  }
  
     if(ids[1] == "Psychologist")
  { 
  /* Release B Master Script List.xlsx
 * id: 930
 */
CWM_ELP_930_WTUA_DPL_initialAppExpirationDate();
//end Script id 930
  }
       if(ids[1] == "Real Estate" && (ids[2] == "Attorney Broker" || ids[2] == "Reciprocal Broker"))
      
     {  // licenseCapId is not in use, using itemCap For defect#4079
      /* CWM_ELP_1349_DPL_WTUA_setExpDateForREBroker(licenseCapId); */
      CWM_ELP_1349_DPL_WTUA_setExpDateForREBroker(itemCap,ids[2]);
     }
       if(ids[1] == "Real Estate Appraiser" && (ids[2] == "Reciprocal Appraiser"))
      
     {     
         /* Defect 
    *  id: 3468
    */
    CWM_ELP_Defect3468_setExpDateForREReciprocalAppraiser(itemCap);
    // end changes for defect 3468
     }
  
   if(ids[1] == "Real Estate" && (ids[2] == "Reciprocal Salesperson"))
      
     {     
        /* Defect 
      *  id: 3452
      */
      CWM_ELP_Defect3452_setExpDateForREReciprocalSalesperson();
      // end changes for defect 3452
     }
  if(ids[1] == "Real Estate" && (ids[2] == "Business"))
      
     {     
         /* Defect 
    *  id: 4070
    */
    CWM_ELP_Defect4070_setExpDateForREBusiness();
    // end changes for defect 4070
     }
    if(ids[1] == "Real Estate Appraiser" && ids[2] == "Trainee")
      
     {
      CWM_ELP_767_WTUA_DPL_ApprovedUpdateLicExpDate(itemCap);
     }
  
        if(ids[1] == "Real Estate" && (ids[2] == "School"))
      
     {
            CWM_ELP_761_DPL_WTUA_setExpDateForRE("app",capId);
   }
  
      if(ids[1] == "Real Estate Appraiser" && (ids[2] == "Course"))
      
     {

          //setLicExpirationDate(newLicId);
        if(appMatch("License/Real Estate Appraiser/Course/USPAP Course Application"))
        {
          CWM_ELP_773_DPL_WTUA_setExpDateForUSPAP(itemCap);
        }
        else
        {
          CWM_ELP_761_DPL_WTUA_setExpDateForRE("app",capId);
        }

     }
  
    if(ids[1] == "Dietitians and Nutritionists" )
      
     {
         CWM_ELP_Defect4279_WTUA_DPL_setExpDateForDietAndNU(itemCap,issueDateObj);
     }
   
     if(ids[1] == "Health Officers" )
      
     {
      CWM_ELP_Defect4975_WTUA_DPL_setExpDateForHO(itemCap);
     }
   
   
 if(ids[1] == "Electricians" && (ids[2] == "Master Electrician" ||ids[2] == "Journeyman Electrician"))
  { 
    CWM_ELP_Defect5688_setExpDateForRecipElec();
  }
 if(ids[1] == "Engineers and Land Surveyors" && (ids[2] == "Temporary Permit"))
  { 
    CWM_ELP_808_ASA_DPL_SetExpDateThirtyDaysAfter(itemCap);
  }
//Rel C: Script ID: 3 - LBulgin
   if(ids[1] == "Architect" && (ids[2] == "Architect"))
  {
       CWM_ELP_DPL_3_WTUA_setExpDateForArchitects (itemCap);
  }

   //REMOVED AS PART OF 4398
/*   if(ids[1] == "Plumbers and Gas Fitters" && ids[2] == "Apprentice")
  {
    CWM_ELP_Defect4394_setExpDateForPlumbersApprenticeLicense();
  } */
  
  //Rel C: Script ID: 285 - Byellapu
  if(ids[1] == "Hearing Instrument" && ids[2] == "Specialist")
  {
      logDebug("calling HE exp date calc method...");  
    CWM_ELP_285_DPL_WTUA_HearingSpecialistExpDate(itemCap);
  }

 //Rel C: Script ID: 714 - Byellapu
    if(ids[1] =="Allied Mental Health" && ids[2] == "Applied Behavior Analyst")
    {
      CWM_ELP_714_DPL_WTUA_setExpDateForAlliedMentalHealth(itemCap);
    }

  // DPL Release C: Script ID: 181 (added by skumar)
  if (ids[1] == "Landscape Architects" && ids[2] == "Landscape Architect")
  {
    CWM_ELP_181_DPL_WTUA_setExpDateForLandscapeArchitects(itemCap);
  }

   //Rel C: Script ID: 281.0 - Byellapu
   if(ids[1] == "Hearing Instrument" && ids[2] == "Apprentice")
   {
       CWM_ELP_281_DPL_WTUA_setExpDateForHEApprentice(itemCap);
   }
  //Rel C: Script ID: 338 - LBulgin
  if(ids[1] == "Dispensing Opticians" && ids[2] == "Dispensing Optician")
  {
     CWM_ELP_DPL_338_WTUA_setExpDateForDO (itemCap);
  }
  
  //Rel C: Script ID: 327.0 - Byellapu
  // Rel C: Script ID: 432 (SKumar) checking for the correct sub-types: Instructor and School
  // calling the common function 
  if(ids[1] == "Barbers"  && (ids[2] == "Instructor" || ids[2] == "School"))
        {
       //CWM_ELP_327_DPL_setExpDateForBarberInstructor(itemCap);
       CWM_ELP_Defect4975_WTUA_DPL_setExpDateForHO(itemCap);
        }

  // DPL Release C: Script ID: 360 (added by skumar)
  if (ids[1] == "Electrology")
  {
    CWM_ELP_DPL_360_WTUA_setExpDateForElectrologist(itemCap);
  }
  //Rel C: Script ID: 123 - LBulgin
  if(ids[1] == "Podiatry" && ids[2] == "Podiatrist Limited License")
  {
      CWM_ELP_DPL_123_WTUA_setExpDateForPD_LL(itemCap);
  }  
//added by Preeti for script# 681

  if(ids[1] == "Funeral Directors" && ids[2] == "Funeral Assistant")
  {
    CWM_ELP_DPL_681_WTUA_setExpDateForFuneralAssistant(itemCap);
  }
  
  // DPL Release C: Script ID: 609 (added by jledezma)
  if(ids[1] == "Massage Therapy" && ids[2] == "Multiple Massage Establishment")
  {
    CWM_ELP_609_WTUA_DPL_setExpDateForMTMultimpleMassageEst(itemCap);
  }

        // DPL Release C: Script ID: 576 (added by tkahn)
  if(ids[1] == "Massage Therapy" && ids[2] == "Massage Therapist")
  {
    CWM_ELP_576_WTUA_DPL_setExpDateForMTMassageTherapist(itemCap);
  }

  // DPL Release C: Script ID: 272 (added by Ankush Kshirsagar)
  if(ids[1] == "Funeral Directors" && ids[2] == "Embalmer Apprentice")
  {
    CWM_ELP_DPL_272_WTUA_setExpDateForEmbamlerApprentice(itemCap);
  }

        // DPL Release C: Script ID: 408 (added by tofek)
  if(ids[1] == "Speech and Audiology" && ids[2] == "Speech Language Pathologist")
  {
    CWM_ELP_408_DPL_WTUA_SpeechLanguagePathologistExpDate(itemCap);
  }
//DPL Release C Scripting: Script ID: 276 (added by: kpreeti)
  if(ids[1] == "Drinking Water" && ids[2] == "Drinking Water Operator")
  {
    CWM_ELP_DPL_276_WTUA_setExpDateForDrinkingWater(itemCap);
  }  

  // DPL Release C: Script ID: 191 (added by skumar)
  if (ids[1] == "Home Inspector" && ids[2] == "Home Inspector Associate")
  {
    CWM_ELP_DPL_191_WTUA_setExpDateForHomeInspectorAssociate(itemCap);
  }

        // DPL Release C: Script ID: 398 (added by tofek)
  if(ids[1] == "Speech and Audiology" && ids[2] == "Audiologist")
  {
    CWM_ELP_398_DPL_WTUA_AudiologistExpDate(itemCap);
  }
      
       // DPL Release C: Script ID: 404 (added by tofek)
  if(ids[1] == "Speech and Audiology" && (ids[2] == "Speech Language Pathology Asst" || ids[2] == "Audiology Assistant"))
  {
                // Re-using the common functionality.
    CWM_ELP_404_WTUA_DPL_setExpDateForSpeechPathologistAsst(itemCap);
  }
     
       // DPL Release C: Script ID: 323 (added by tofek)
  if(ids[1] == "Barbers" && ids[2] == "Assistant Instructor")
  {
    CWM_ELP_323_WTUA_DPL_setExpDateForBarbersAssistantInstructor(itemCap);
  }
   if(ids[1] == "Barbers"  && ids[2] == "Reciprocal")
     {
      CWM_ELP_1500_WTUA_DPL_barberRecipExpDate(itemCap);
     }
  // DPL Release C: Script ID: 187 (added by skumar)
  if (ids[1] == "Home Inspector" && ids[2] == "Home Inspector")
  {
    CWM_ELP_187_DPL_setExpDateForHomeInspector(itemCap);
  }

       // DPL Release C: Script ID: 449 (added by tofek)
  if(ids[1] == "Barbers" && ids[2] == "Shop")
  {
    CWM_ELP_449_WTUA_DPL_setExpDateForBarbersShop(itemCap);
  }
        // DPL Release C: Script ID: 263 (added by kpreeti)
  if(ids[1] == "Cosmetology" && ids[2] == "Type 5")
  {
    CWM_ELP_263_WTUA_DPL_setExpDateForCosmoType5(itemCap);
  }
        // DPL Release C: Script ID: 704 (added by tofek)
        // removed "Applied Behavior Analyst" from below due to defect JIRA 3742 it is already handled in function CWM_ELP_714_DPL_WTUA_setExpDateForAlliedMentalHealth
  if(ids[1] == "Allied Mental Health" && (ids[2] == "Educational Psychologist" || ids[2] == "Marriage and Family Therapist" || ids[2] == "Mental Health Counselor" || ids[2] == "Rehabilitation Counselor" || ids[2] == "Asst Applied Behavior Analyst"))//|| ids[2] == "Applied Behavior Analyst" 
  {
    CWM_ELP_704_DPL_WTUA_setExpDateForAlliedMentalHealth(itemCap);
  }
  // DPL Release C: Script ID: 211 (added by Ankush Kshirsagar)
  if(ids[1] == "Cosmetology" && ids[2] == "Type 1")
  {
    CWM_ELP_WTUA_DPL_setExpDateBasedOnBirthDate(itemCap);
  }
  // DPL Release C: Script ID: 213 (added by debashish)
  if(ids[1] == "Cosmetology" && ids[2] == "Type 6")
  {
    logDebug("Seting exp date started.");
    CWM_ELP_WTUA_DPL_setExpDateBasedOnBirthDate(itemCap);
  }

        // DPL Release C : Script#333, Added by tofek
  if(ids[1] == "Cosmetology" && (ids[2] == "Manicuring School" || ids[2] == "Aesthetician School" ||
        ids[2] == "Advanced Training Institute" || ids[2] == "School")) {
    CWM_ELP_333_DPL_WTUA_setExpDateForCosmetologySchool(itemCap);
  }
  // DPL Release C: Script ID: 200 (added by debashish.barik)
  if(ids[1] == "Chiropractor" && ids[2] == "Chiropractor Facility")
  {
    logDebug("Seting exp date for Chiropractor/Chiropractor Facility started.");
    CWM_ELP_WTUA_DPL_setExpDateForChiroFacility(itemCap);
    logDebug("Seting exp date for Chiropractor/Chiropractor Facility ended.");
  }
 //Rel C: Script ID: 30 (BYellapu)
     if(ids[1] =="Allied Health" && ids[2] == "Physical Therapy Facility")
     {  
       setLicExpirationDate(itemCap, issueDateObj);
     }
     if(ids[1] =="Massage Therapy" && ids[2] == "Solo Massage Establishment")
     {  
       setLicExpirationDate(itemCap, issueDateObj);
     }
     // DPL Release C : Script#219,294,300, Added by tofek
     //updated to include CPA Firm for Partnership - Script#298 - BYellapu
  if(ids[1] == "Public Accountancy" && (ids[2] == "CPA" || ids[2] == "CPA Firm for LLC"|| ids[2] == "CPA Firm for Professional Corp" ||ids[2] == "CPA Firm for Business Corp" || ids[2] == "CPA Firm License for LLP"|| ids[2]== "CPA Firm for Partnership"))        
        {
    CWM_ELP_219_DPL_WTUA_setExpDateForPublicAccountancyCPA(itemCap);
  }
  // DPL Release C: Script ID: 751 (added by Ankush Kshirsagar)
  if(ids[1] == "Occupational Schools" && ids[2] == "Sales Representative")
  {
    CWM_751_WTUA_DPL_setExpDateForOSsalesRepLic(itemCap);
  }
       // DPL Release C : Script#765, Added by tofek
  if(ids[1] == "Occupational Schools" && ids[2] == "School" )        
        {
    CWM_ELP_765_WTUA_DPL_setExpDateForOSschoolLic(itemCap);
     }
     // commented for JIRA 3896 and handled in CWM_ELP_COS_A_APP_4_setExpDateForCosmoShop
     // JIRA 2560 : Code added to calculate expiration date.
/*
    if(ids[1] == "Cosmetology" && ids[2] == "Shop")
    { 
        var bDateObj = new Date();
        var year = bDateObj.getFullYear();
        
        if ((year % 2) == 0)
        {
            expDate.setFullYear((year));
            expDate.setDate(31);
            expDate.setMonth(11);

        }
        else
        {
            expDate.setFullYear(year - 1);
            expDate.setDate(31);
            expDate.setMonth(11);
        }
      
        aa.print("Expiration date to pass: " + (expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear());
        setLicExpirationDate(itemCap, expDate);
  }
*/
      
/*-------------------------------------------------------------------------------------------------------/
             End of Logic for calculation of Expiration date
  --------------------------------------------------------------------------------------------------------*/
}


function calculateDPLExpirationDateForRenewal(itemCap)
{
  /*-------------------------------------------------------------------------------------------------------/
                Logic for calculation of Expiration date
  --------------------------------------------------------------------------------------------------------*/

  //Variables
  var bDateObj;
  var issueDateObj;
  var expDate = new Date();

  //Get the issue date from workflow
  var workflowResult = aa.workflow.getTasks(capId);
  if (workflowResult.getSuccess())
  {
    wfObj = workflowResult.getOutput();
    for (i in wfObj)
    { 
      var fTask = wfObj[i]; 
      var desc = fTask.getTaskDescription(); 
      var disp = fTask.getDisposition(); 
      var taskDate = fTask.getStatusDate();
      
      if((desc == "Validate" && (disp == "Approved" || disp == "Approved with Conditions")) || 
      (desc == "Exam" && (disp == "Approved" || disp == "Approved with Conditions")) ||
      (desc == "License" && (disp == "Current" && taskDate)))
      {
        issueDateObj = new Date(taskDate.getTime());
        logDebug("License issue date:" + (issueDateObj.getMonth() + 1) + "/" + issueDateObj.getDate() + "/" + issueDateObj.getFullYear());
      }
    }   
  }

  //Check for Record Type
  var vCapModel = aa.cap.getCap(capId).getOutput();
  var vType = vCapModel.capType;
  vType = vType.toString();
  var ids=new Array();
  ids = vType.split("/");
  logDebug("Record Type: " + ids[1]);

  /*---------------------------------------------------
   Logic for calculation of Sheet Metal Expiration date
  ----------------------------------------------------*/
  if (ids[1] == "Sheet Metal")
  {
    //aa.print("Record SubType: " + ids[2]);
    
    //SM Business Logic
    if(ids[2] == "Business License" || ids[2] == "School")
    {
      setLicExpirationDate(itemCap, issueDateObj);
    }
    
    //SM Individual Logic
    if(ids[2] == "Apprentice" || ids[2] == "Instructor" || ids[2] == "Journeyperson" || ids[2] == "Master")
    {
      var capContactResult=aa.people.getCapContactByCapID(capId);
      if(capContactResult.getSuccess())
      {
        capContactResult=capContactResult.getOutput();
        for(i in capContactResult)
        {
          var peopleModel= capContactResult[i].getPeople();
          if(peopleModel.getContactType()=="Licensed Individual" )
          {
            var capContactScriptModel= capContactResult[i];
            var capContactModel= capContactScriptModel.getCapContactModel();
            var bDate = capContactModel.getBirthDate();
            if(bDate)   //added for defect 625
            {
            bDateObj = new Date(bDate.getTime());
            logDebug("Birth date:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
            }
            
          }
        }
        
        if(issueDateObj && bDateObj)
        {
          var issueDateYear = issueDateObj.getFullYear();
          if(bDateObj.getMonth() > issueDateObj.getMonth())
          {
            //expDate.setFullYear((issueDateYear-1));
            expDate.setFullYear(issueDateYear);
            expDate.setMonth(bDateObj.getMonth());
            expDate.setDate(28);
          }
          else
          {
            expDate.setFullYear(issueDateYear);
            expDate.setMonth(bDateObj.getMonth());
            expDate.setDate(28);
          }
        }
        logDebug("Expiration date to pass: " + (expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear());
        setLicExpirationDate(itemCap, expDate);
      }
    }
    
  }

  /*-----------------------------------------------------
   Logic for calculation of Veterinarian Expiration date
  ----------------------------------------------------*/

  if(ids[1] == "Veterinarian")
  {
    if(issueDateObj)
    {
      var issueMonth = issueDateObj.getMonth();
      var issueDate = issueDateObj.getDate();
      var issueDateYear = issueDateObj.getFullYear();
      //aa.print("issueMonth: " + issueMonth + " issueDate: " + issueDate);
      
      if (issueMonth > 9 || (issueMonth == 9 && issueDate >= 28)) 
      {
        expDate.setFullYear((issueDateYear+1));
        expDate.setMonth(1);
        expDate.setDate(28);  
      }
      
      else
      {
        expDate.setFullYear(issueDateYear);
        expDate.setMonth(1);
        expDate.setDate(28);
      }
      logDebug("Expiration date to pass: " + (expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear());
      setLicExpirationDate(itemCap, expDate);
    }
  } 
  
  /*-----------------------------------------------------
   Logic for calculation of Expiration date for all other license types
  ----------------------------------------------------*/

  if ( ids[1] != "Veterinarian" || ids[1] != "Sheet Metal")
  {
    b1ExpResult = aa.expiration.getLicensesByCapID(capId);

    if (b1ExpResult.getSuccess()) 
    {

      try 
      {
        this.b1Exp = b1ExpResult.getOutput();
        //Get expiration details
        var expUnit = this.b1Exp.getExpUnit();
        var expInterval = this.b1Exp.getExpInterval();
        var expCode = this.b1Exp.getExpCode();
        var expDateObj = convertDate(this.b1Exp.getExpDate());
        aa.print("License expCode " + expCode);
        if (expCode)
        {
          if(expCode == "30 JUN EVEN YEAR")
          {
            expDate.setFullYear(expDateObj.getFullYear());
            expDate.setMonth(6);
            expDate.setDate(30);
            setLicExpirationDate(itemCap, expDate);
          }
          
          if(expCode == "ISSUE DATE 2YR")
          {
            setLicExpirationDate(itemCap, issueDateObj);
          }
          
          if(expCode == "28TH BIRTH MONTH 2YR")
          {
            licensedInvBirthDate = getBirthDateForLicensedIndividual(itemCap);
            if(licensedInvBirthDate)
            {
              expDate.setFullYear(expDateObj.getFullYear());
              expDate.setMonth(licensedInvBirthDate.getMonth());
              expDate.setDate(28);    
              setLicExpirationDate(itemCap, expDate);       
            }
          }
          if(expCode == "BIRTHDATE 2YR")
          {
            licensedInvBirthDate = getBirthDateForLicensedIndividual(itemCap);
            if(licensedInvBirthDate)
            {
              expDate.setFullYear(expDateObj.getFullYear());
              expDate.setMonth(licensedInvBirthDate.getMonth());
              expDate.setDate(licensedInvBirthDate.getDate());    
              setLicExpirationDate(itemCap, expDate);       
            }
          }
          
        } 
          
      } catch (err) {
        logDebug("Could not set the expiration date, no expiration unit defined for expiration code: " + itemCap + " Error: "+err);
        return false;
      }
    }
  }

  /*-------------------------------------------------------------------------------------------------------/
             End of Logic for calculation of Expiration date
  --------------------------------------------------------------------------------------------------------*/
}function callCoverSheetReportAndSendToEmail(reportToBe) {
  var itemcap = capId;
  if (arguments.length > 1)
    itemcap = arguments[1];

  var fvToday = new Date();
  fvToday.setHours(0);
  fvToday.setMinutes(0);
  fvToday.setSeconds(0);
  fvToday.setMilliseconds(0);

  var lkupReport = String(lookup("LKUP_SetName_To_Correspondence", reportToBe));
  var emailTemplate = "ACA_COVER_SHEET_EMAIL";

  if (lkupReport == 'undefined') {
    logDebug("Set Name: " + reportToBe + " is not tied to a correspondence.  No printing was done, please see administrator for help.");
    // If this error happens check LKUP_SetName_To_Correspondence and ensure the setName is correct
    return false;
  }

  reportToBe = lkupReport.split("|");

  if (reportToBe[0] != "NULL") {
    var sendEmail = false;

    if (reportToBe.length >= 3)
      sendEmail = reportToBe[2];

    if (reportToBe.length >= 4)
      emailToWho = String(reportToBe[3]);

    if (reportToBe.length >= 5)
      versionValue = String(reportToBe[4]);

    var contactsToEmail = new Array();
    var emailed = null;
    var stillPrint = false;

    if (sendEmail && sendEmail.toUpperCase() == "TRUE") {
      // only email if the correspondence can be emailed
      switch (emailToWho) {
        case "ALL":
          logDebug("Getting ALL CAP contacts.");
          var co = getContactObjs(capId);
          for (i in co) {
            var cc = co[i].capContact;
            if (cc.email != null && validEmail(cc.email)) {
              contactsToEmail.push(co[i]);
            } else
              stillPrint = true;
          }
          break;

        case "PRIMARY":
          logDebug("Getting PRIMARY CAP contact.")
          var co = getContactObjs(capId);
          for (i in co) {
            var cc = co[i].capContact;
            if (cc.email != null && validEmail(cc.email) && cc.primaryFlag == "Y") {
              logDebug("Primary contact with valid email found. " + cc.getContactName());
              contactsToEmail.push(co[i]);
            } else
              stillPrint = true;
          }
          break;

        default:
          if (emailToWho) {
            logDebug("Getting CAP contact type " + emailToWho);
            var co = getContactObjs(capId);
            for (i in co) {
              var cc = co[i].capContact;
              if (cc.getContactType() != null && String(cc.getContactType()).toUpperCase().equals(emailToWho.toUpperCase())) {
                if (cc.email != null) {
                  if (validEmail(cc.email)) {
                    logDebug("Contact type " + cc.getContactType() + " found with valid email. " + cc.getContactName() + " email:" + cc.email);
                    contactsToEmail.push(co[i]);
                  } else
                    emailNotifTo = null;
                } else
                  stillPrint = true;
              }
            }
          }
          break;
      }
      // end determing email addresses

      var fvReports = new Array();

      var myHashMap = aa.util.newHashMap();
      //myHashMap.put("Receipt_NBR", String(receiptnumber));
      myHashMap.put("ALT_ID", String(capId.getCustomID()));
      // myHashMap.put("receiptnbr", String(receiptnumber));
      // myHashMap.put("capID", String(capId.getCustomID()));
      if (versionValue) {
        var vSplit = versionValue.split(":");
        var varName = String(vSplit[0]);
        var vValue = String(vSplit[1]);
        myHashMap.put(varName, vValue);
        // for the paymentDue / pastDue Notices  Scale & Collections, adjournment disposition letters
      }
      var fvReport = generateReportAndSave(reportToBe[0], myHashMap, capId);
      if (fvReport)
        fvReports.push(fvReport);
      if (fvReports.length == 0) {
        logDebug("No Document Submission Cover Sheet for Today.");
        return;
      }

      var generatedCompletely = true;
      if (contactsToEmail.length > 0 && emailToWho != "SPECIAL") {
        for (c in contactsToEmail) {
          var cc = contactsToEmail[c].capContact;
          var emailParameters = getEmailTemplateParams(contactsToEmail[c]);
          if (!emailReports(fvReports, emailTemplate, emailParameters, String(cc.email), capId))
            generatedCompletely = false;
          if (generatedCompletely)
            logDebug("Document Submission Cover Letter sent to " + cc.getContactName() + " - " + cc.getContactType() + " " + cc.email);
        }
      }

      if (!generatedCompletely) {
        logDebug("**WARNING: Document Submission Cover Letter not sent to all contacts.");
      }
    }
  }
}function callReceiptReportAndSendToEmail(reportToBe) { //optional capId parameter
  var itemcap = capId;
  if (arguments.length > 2)
    itemcap = arguments[2];

  var fvToday = new Date();
  fvToday.setHours(0);
  fvToday.setMinutes(0);
  fvToday.setSeconds(0);
  fvToday.setMilliseconds(0);

  var lkupReport = String(lookup("LKUP_SetName_To_Correspondence", reportToBe));
  var emailTemplate = "EMAIL RECEIPT";

  if (lkupReport == 'undefined') {
    logDebug("Set Name: " + reportToBe + " is not tied to a correspondence.  No printing was done, please see administrator for help.");
    // If this error happens check LKUP_SetName_To_Correspondence and ensure the setName is correct
    return false;
  }

  reportToBe = lkupReport.split("|");

  if (reportToBe[0] != "NULL") {
    var sendEmail = false;

    if (reportToBe.length >= 3)
      sendEmail = reportToBe[2];

    if (reportToBe.length >= 4)
      emailToWho = String(reportToBe[3]);

    if (reportToBe.length >= 5)
      versionValue = String(reportToBe[4]);

    var contactsToEmail = new Array();
    var emailed = null;
    var stillPrint = false;

    if (sendEmail && sendEmail.toUpperCase() == "TRUE") {
      // only email if the correspondence can be emailed
      switch (emailToWho) {
        case "ALL":
          logDebug("Getting ALL CAP contacts.");
          var co = getContactObjs(capId);
          for (i in co) {
            var cc = co[i].capContact;
            if (cc.email != null && validEmail(cc.email)) {
              contactsToEmail.push(co[i]);
            } else
              stillPrint = true;
          }
          break;

        case "PRIMARY":
          logDebug("Getting PRIMARY CAP contact.")
          var co = getContactObjs(capId);
          for (i in co) {
            var cc = co[i].capContact;
            if (cc.email != null && validEmail(cc.email) && cc.primaryFlag == "Y") {
              logDebug("Primary contact with valid email found. " + cc.getContactName());
              contactsToEmail.push(co[i]);
            } else
              stillPrint = true;
          }
          break;

        default:
          if (emailToWho) {
            var contactsToMail = emailToWho.split(",");
            for (c in contactsToMail) {
              logDebug("Getting CAP contact type " + contactsToMail[c]);
              var co = getContactObjs(capId);
              for (i in co) {
                var cc = co[i].capContact;
                if (cc.getContactType() != null && String(cc.getContactType()).toUpperCase().equals(contactsToMail[c].toUpperCase())) {
                  if (cc.email != null) {
                    if (validEmail(cc.email)) {
                      logDebug("Contact type " + cc.getContactType() + " found with valid email. " + cc.getContactName());
                      contactsToEmail.push(co[i]);
                    } else
                      emailNotifTo = null;
                  } else
                    stillPrint = true;
                }
              }
            }
          }
          break;
      }
      // end determing email addresses

      var fvReports = new Array();
      var fvReceiptsSR = aa.finance.getReceiptByCapID(capId, null);
      if (!fvReceiptsSR || !fvReceiptsSR.getSuccess()) {
        logDebug("**INFO: No receipts found.");
        return;
      }
      var fvReceipts = fvReceiptsSR.getOutput();
      if (!fvReceipts || fvReceipts.length == 0) {
        logDebug("**INFO: No receipts found.");
        return;
      }
      var fvTotalAmtPaid = 0;
      for (var fvRcptCnt in fvReceipts) {
        var fvReceipt = fvReceipts[fvRcptCnt];
        var receiptnumber = fvReceipt.getReceiptNbr();
        var fvRcptDt = fvReceipt.getReceiptDate();
        var fvReceiptDate = new Date(fvRcptDt.getMonth() + "/" + fvRcptDt.getDayOfMonth() + "/" + fvRcptDt.getYear());
        logDebug("Receipt: " + receiptnumber + " Dt.: " + fvReceiptDate);
        if (fvReceiptDate.getTime() != fvToday.getTime())
        // continue;

          var myHashMap = aa.util.newHashMap();
        fvTotalAmtPaid = fvTotalAmtPaid + fvReceipt.getReceiptAmount();
        //myHashMap.put("Receipt_NBR", String(receiptnumber));
        //myHashMap.put("ALT_ID", String(capId.getCustomID()));
        myHashMap.put("receiptnbr", String(receiptnumber));
        myHashMap.put("capID", String(capId.getCustomID()));
        if (versionValue) {
          var vSplit = versionValue.split(":");
          var varName = String(vSplit[0]);
          var vValue = String(vSplit[1]);
          myHashMap.put(varName, vValue);
          // for the paymentDue / pastDue Notices  Scale & Collections, adjournment disposition letters
        }
        var fvReport = generateReportAndSave(reportToBe[0], myHashMap, capId);
        if (fvReport)
          fvReports.push(fvReport);
      }
      if (fvReports.length == 0) {
        logDebug("No Receipts forund for Today.");
        return;
      }

      var generatedCompletely = true;
      if (contactsToEmail.length > 0 && emailToWho != "SPECIAL") {
        for (c in contactsToEmail) {
          var cc = contactsToEmail[c].capContact;
          var emailParameters = getEmailTemplateParams(contactsToEmail[c]);
          addParameter(emailParameters, "$$TotalAmtPaid$$", fvTotalAmtPaid.toString());
          if (!emailReports(fvReports, emailTemplate, emailParameters, String(cc.email), capId))
            generatedCompletely = false;
          if (generatedCompletely)
            logDebug("Receipts sent to " + cc.getContactName() + " - " + cc.getContactType() + " " + cc.email);
        }
      }

      if (!generatedCompletely) {
        logDebug("**WARNING: Receipt not sent to all contacts.");
      }
    }
  }
}/*------------------------------------------------------------------------------------------------------/
| This fuction is used to call a report for printing
| Parameters
|           reportToBe: The "fieldly name of the report to be called; example: "DPL.Corr.SM.Lic.RenewalLetter";
|           sendToInline: true/false; controls if the report pops to the screen
|           addToPrintBatch: true/false; controls if the record is added to a set for batch printing
/------------------------------------------------------------------------------------------------------*/

function callReport(reportToBe,sendToInline,addToPrintBatch, setType) //Optional Parameter for CAPID.
{
  var itemcap = capId;
  if (arguments.length > 4)
    itemcap = arguments[4];
  
  var myHashMap=aa.util.newHashMap();
  var dDate=new Date();
  var dateString =null;
  var setToBePrinted=null;
  var setName=null;
  var dateString=null;
  var lkupResult = null;
  var setFrequency =null;
  var setDate=null;

  myHashMap.put("ALT_ID", itemcap.getCustomID());

  if (addToPrintBatch && reportToBe!=null){ 
    setName=generateBatchPrintSetName(reportToBe);
  }
  if (setName!='undefined' && setName!=null) {
    setToBePrinted = new capSet(setName.toUpperCase());
  }
  if (setType == 'undefined') {
    setType = "Batch Print";
  }
  if (setToBePrinted){
    setToBePrinted.add(itemcap,false);
    setToBePrinted.updateRecordSetType(setType);
    setToBePrinted.updateSetStatus("Created");
  }
  if (sendToInline) {
    //aa.print("Inline: " + reportToBe);
    //aa.print("inLine: " + itemcap.toString());
    message="";
    InlinePrint(reportToBe,itemcap);
  }
}
function generateReportAndSave(reportName, hashMapReportParameters) {
  var itemCap = capId;
  if (arguments.length > 2) // assume capId was passed
    itemCap = arguments[2];

  if (String(hashMapReportParameters.getClass()) !== "class java.util.HashMap") {
    logDebug("Function generateReportAndSave parameter hashMapReportParameters must be of class java.util.HashMap.  Usage: var myHashMap = aa.util.newHashMap()");
    return false;
  }

  var capIdStr = String(itemCap.getID1() + "-" + itemCap.getID2() + "-" + itemCap.getID3());

  var report = aa.reportManager.getReportInfoModelByName(reportName);
  var reportResult = null;

  if (report.getSuccess()) {
    report = report.getOutput();
    report.setModule("*");
    report.setCapId(capIdStr);

    // specific to * Licensing
    report.setReportParameters(hashMapReportParameters);
    var ed1 = report.getEDMSEntityIdModel();
    ed1.setCapId(capIdStr);
    // Needed to determine which record the document is attached
    ed1.setAltId(itemCap.getCustomID());
    // Needed to determine which record the document is attached
    report.setEDMSEntityIdModel(ed1);

    reportResult = aa.reportManager.getReportResult(report);
  }
  if (reportResult) {
    reportResult = reportResult.getOutput();
    if (reportResult != null) {
      var reportFile = aa.reportManager.storeReportToDisk(reportResult);
      reportFile = reportFile.getOutput();
    } else {
      logDebug("Report Result is null in function generateReportAndSave with reportName: " + reportName);
      return false;
    }
  } else {
    logDebug("Unable to retrieve report result in function generateReportAndSave with reportName: " + reportName);
    return false;
  }

  return reportFile;
}

function emailReports(Reports, emailTemplate, hashTableEmailTemplateParameters, emailTo) {
  var itemCap = capId;
  var fvCC = "";

  if (arguments.length > 4) // assume capId was passed
    itemCap = arguments[4];

  if (arguments.length > 5) // assume CC was passed
    fvCC = arguments[5];

  if (emailTemplate == null || emailTemplate == "") {
    logDebug("function emailReports parameter emailTemplate is required");
    return false;
  }

  if (String(hashTableEmailTemplateParameters.getClass()) !== "class java.util.Hashtable") {
    logDebug("Function emailReports parameter hashTableEmailTemplateParameters must be of class java.util.newHashtable.  Usage: var myHashtable = aa.util.newHashtable()");
    return false;
  }

  if (emailTo && emailTo.indexOf("@") == -1) {
    logDebug("Function emailReports parameter emailTo must be a valid email address.");
    return false;
  }

  if (fvCC && fvCC != "" && fvCC.indexOf("@") == -1) {
    logDebug("Function emailReports parameter CC must be a valid email address.");
    return false;
  }

  if (Reports.length == 0) {
    logDebug("Function emailReports parameter Reports should have at least one report.");
    return false;
  }

  var capIdStr = String(itemCap.getID1() + "-" + itemCap.getID2() + "-" + itemCap.getID3());
  if (emailTo) {
    var capIDScriptModel = aa.cap.createCapIDScriptModel(itemCap.getID1(), itemCap.getID2(), itemCap.getID3());
    var sendNotificationResult = null;
    sendNotificationResult = aa.document.sendEmailAndSaveAsDocument(sysFromEmail, emailTo, fvCC, emailTemplate, hashTableEmailTemplateParameters, capIDScriptModel, Reports);
    if (sendNotificationResult.getSuccess()) logDebug("SendNotification is: " + sendNotificationResult.getSuccess());
  }
  return true;
}// This function loads CE Information into an array of associative arrays
function capCEtoArray(CEcap){
  var capIDModel = new com.accela.aa.emse.dom.CapIDScriptModel(CEcap);
  var CEArr = new Array();
  var CERes = aa.continuingEducation.getContEducationList(capIDModel).getOutput();
  if (CERes){
    for (var c in CERes) {
      var rowArr = new Array();
      var CEModel = CERes[c].getContinuingEducationModel();
      //for (var z in CEModel) aa.print(CEModel[z]);
      rowArr["Status"] = CEModel.getApprovedFlag(); 
      rowArr["Class"] = CERes[c].getClassName(); 
      rowArr["Name"] = CERes[c].getContEduName();
      rowArr["Date"] = CERes[c].getDateOfClass();
      rowArr["Hours"] = CERes[c].getHoursCompleted();
      rowArr["GradingStyle"] = CERes[c].getGradingStyle();
      if (rowArr["GradingStyle"] == "Pass/Fail" || rowArr["GradingStyle"] == "passfail") {
        rowArr["FinalScore"] = 0;
        rowArr["PassingScore"] = 0;
      }
      else {
        rowArr["FinalScore"] = CERes[c].getFinalScore();
        rowArr["PassingScore"] = CERes[c].getPassingScore();
      }
      rowArr["ProviderName"] = CERes[c].getProviderName();
      rowArr["ProviderNumber"] = CERes[c].getProviderNo();
      rowArr["Comments"] = CERes[c].getComments();
      rowArr["Required"] = CERes[c].getRequiredFlag();
      rowArr["ASI"] = CERes[c].getTemplate();
      CEArr.push(rowArr);
    }
  }
  return CEArr;
}
function capSet(desiredSetId)
{
   this.refresh = function()
   {
      var theSet = aa.set.getSetByPK(this.id).getOutput();
      this.setId = theSet.getSetID();
      this.name = theSet.getSetTitle();
      this.comment = theSet.getSetComment();

      var memberResult = aa.set.getCAPSetMembersByPK(this.id);

      if ( ! memberResult.getSuccess())
      {
         logDebug("**WARNING** error retrieving set members " + memberResult.getErrorMessage());

      }
      else
      {
         this.members = memberResult.getOutput().toArray();
         this.size = this.members.length;
         if (this.members.length > 0) this.empty = false;
         logDebug("capSet: loaded set " + this.id + " with " + this.size + " records");
      }
   }


   this.add = function(addCapId)  // modified function to allow for override determining if allowing sets to contain duplicates
   {
      var allowDupes = true;
      // default state was to allow duplicate members in a set.
      var capIdStr = String(addCapId.getID1() + "-" + addCapId.getID2() + "-" + addCapId.getID3());
      if(arguments.length == 2) // override argument should be boolean true or false
      allowDupes = arguments[1];
      if( ! exists(capIdStr, this.members) || allowDupes)
      {
         var addResult = aa.set.add(this.id, addCapId)
         if ( ! addResult.getSuccess())
         {
            logDebug("**WARNING** error adding record to set " + this.id + " : " + addResult.getErrorMessage() );
            return false;
         }
         else
         {
            logDebug("capSet: added record " + addCapId + " to set " + this.id);
            return true;
         }
         return false;
      }
      return false;
   }


   this.remove = function(removeCapId)
   {
      var removeResult = aa.set.removeSetHeadersListByCap(this.id, removeCapId)
      if ( ! removeResult.getSuccess())
      {
         logDebug("**WARNING** error removing record from set " + this.id + " : " + removeResult.getErrorMessage() );
      }
      else
      {
         logDebug("capSet: removed record " + removeCapId + " from set " + this.id);
      }
   }

   this.update = function()
   {
      updateResult = aa.set.updateSet(this.id, this.name, this.comment);
      if ( ! updateResult.getSuccess())
      {
         logDebug("**WARNING** error updating set header " + this.id + " : " + updateResult.getErrorMessage() );
      }
      else
      {
         logDebug("capSet: updated set header information");
      }
   }

   // JavaScript Document
   this.updateSetStatus = function(newSetStatus) // if the setStatus does not exist in the V360 configuration the dropdown will be blank
   {
      var theSet = aa.set.getSetByPK(this.id).getOutput();
      theSet.setSetStatus(newSetStatus);
      var setStatusUpdateResult = aa.set.updateSetHeader(theSet);
      if ( ! setStatusUpdateResult.getSuccess())
      {
         logDebug("**WARNING** error updating set header " + this.id + " : " + setStatusUpdateResult.getErrorMessage() );
      }
      else
      {
         logDebug("capSet: updated set header information");
      }
   }

   this.updateRecordSetType = function(newSetType) // if the setType does not exist in the V360 configuration the dropdown will blank
   {
      var theSet = aa.set.getSetByPK(this.id).getOutput();
      theSet.setRecordSetType(newSetType);
      var setTypeUpdateResult = aa.set.updateSetHeader(theSet);
      if ( ! setTypeUpdateResult.getSuccess())
      {
         logDebug("**WARNING** error updating set header " + this.id + " : " + setTypeUpdateResult.getErrorMessage() );
      }
      else
      {
         logDebug("capSet: updated set header information");
      }
   }



   this.id = desiredSetId;
   this.name = desiredSetId;
   if (arguments.length > 1 && arguments[1]) this.name = arguments[1];

   this.comment = null;

   this.size = 0;
   this.empty = true;
   this.members = new Array();

   var theSetResult = aa.set.getSetByPK(this.id);

   if (theSetResult.getSuccess())
   {
      this.refresh();
   }

   else  // add the set
   {
      theSetResult = aa.set.createSet(this.id, this.name);
      if ( ! theSetResult.getSuccess())
      {
         logDebug("**WARNING** error creating set " + this.id + " : " + theSetResult.getErrorMessage());
      }
      else
      {
         logDebug("capSet: Created new set " + this.id);
         this.refresh();
      }
   }
}

/*
 * This function is used to validate the table rows.
 *
 * tableName: table name
 * minRows: minimum rows to be checked
 * chkFieldName: checkbox field name - enter field name or ""
 *
 */
function checkASIT(tableName, minRows, ckbFieldName) {
   var myTable = loadASITable(tableName);
   var ckbFieldValue = AInfo[ckbFieldName];

   if (myTable != "undefined" && myTable.length < minRows) {
      // Check to see only field name is empty or field name value is not null.
      if (ckbFieldName == "" || ckbFieldValue != null) {
         var varMessage = "You must enter at least " + minRows + " row(s) on this table.";
         aa.env.setValue("ScriptReturnCode", "0");
         aa.env.setValue("ScriptReturnMessage", varMessage);
      }
   }
}
// Filename: WTUB;License!~!~!Application.js
// Event: WTUB:LICENSE/*/*/APPLICATION
// Event: WTUB:License/*/*/Application
/*
 *
 * Upon Application Approval, check if the CORI run date is over a year old.  
 * If it is over a year old then add a condition to the application or contact
 * that a CORI check needs to be re-run.  Allow the condition to be waived.
 */
function checkCORIDate() {
   // Current Date
   var currentDate = new Date();
   var day = currentDate.getDate();
   var month = currentDate.getMonth() + 1;
   var year = currentDate.getFullYear();
   var dTodaysDate = month + "/" + day + "/" + year;
   aa.print("Current date: " + dTodaysDate);
   
   var contactArray = getContactArray();
   aa.print("There are " + contactArray.length + " contact(s).");

   for (cc in contactArray) {
      thisContact = contactArray[cc];
      if (thisContact["contactType"] == "Applicant") {
         var CORIRunDate = getContactTemplateFormFieldValue("Applicant", "CORI", "CORI Run Date");

         if (getDateDiff(CORIRunDate, dTodaysDate) > 365) {
            // re-apply condition
            var condArr = aa.capCondition.getCapConditions(capId).getOutput();
            for (ca in condArr) {
               var condType = condArr[ca].getConditionType();
               var condDesc = condArr[ca].getConditionDescription();
               if (condType == "Application Checklist" && condDesc == "Verification of CORI") {
                  condArr[ca].setConditionStatus("Pending");
                  condArr[ca].setConditionStatusType("Applied");
                  condArr[ca].setImpactCode("Required");
                  aa.capCondition.editCapCondition(condArr[ca]) ;
                  logDebug("Re-applying condition '" + condType + "' type and '" + condDesc + "' description since it's over 365 days.");
               }
            }
         }
      }
   }
}
function checkLegRefFormDoc()
{
  var opValid = false;
  var fvCurrentUserID = aa.person.getCurrentUser().getOutput().userID;
  var fvCapDocSR = aa.document.getCapDocumentList(capId,fvCurrentUserID);
  if (fvCapDocSR && fvCapDocSR.getSuccess())
  {
    var fvCapDocList = fvCapDocSR.getOutput();
    if (fvCapDocList && fvCapDocList.length > 0)
    {
      for (var vCounter in fvCapDocList)
      {
        var fvCapDoc = fvCapDocList[vCounter];
        if (fvCapDoc.docCategory == "Legal Referral Form")
        {
          opValid = true;
          break;
        }
      }
    } 
  }
  return opValid;
}
/*
 * 120 days after the workflow is set to Decision Distribution/Decision Mailed,
 * advance the workflow to Close and set the record status to Decision
 *
 */
function closeAdjCase() {
   if (appMatch("Enforce/Adjudication/*/*")) {
      var wfTaskResult = aa.workflow.getTasks(capId);
      var taskArray = "";
      if (wfTaskResult.getSuccess()) {
         taskArray = wfTaskResult.getOutput();
      } else {
         logDebug("**ERROR: Failed to get workflow object: " + wfTaskResult.getErrorMessage());
         return false;
      }

      // Current Date
      var currentDate = new Date();
      var day = currentDate.getDate();
      var month = currentDate.getMonth() + 1;
      var year = currentDate.getFullYear();
      var dTodaysDate = month + "/" + day + "/" + year;

      for (var i in taskArray) {
         // Get task and status
         var wFlowTask = taskArray[i];
         var desc = wFlowTask.getTaskDescription(); 
         var disp = wFlowTask.getDisposition(); 
         logDebug("Description: " + desc + ", " + "Status:" + disp); 

         // Check to see if task and status equal to required values. 
         if (desc == "Decision Distribution" && disp == "Decision Mailed") {
            var statusDate = taskStatusDate(desc);
            //var diffDate = getDateDiff("1/19/2014", dTodaysDate);
            aa.print("Description: " + desc + ", " + "Status:" + disp + ", Status Date: " + statusDate + ", Diff Date: " + diffDate);
            logDebug("Description: " + desc + ", " + "Status:" + disp + ", Status Date: " + statusDate + ", Diff Date: " + diffDate);
            // If status date >= 120, advance to Close and set status to Decision
            //if (diffDate > 120) {
            if ((getDateDiff(taskStatusDate(desc), dTodaysDate) > 120)) {
               var wFlowTask = "Case Closed";
         //var wNewflowStatus = "Decision";
               closeTask(desc, wFlowTask, "Closed via script", "");
            }
         }
      }
   }
}
function closeAllActiveTasks(wfstat, wfcomment, pCapId) // optional process name
{
   var useProcess = false;
   var processName = "";
   if (arguments.length == 4)
   {
      processName = arguments[3];
      // subprocess
      useProcess = true;
   }

   var workflowResult = aa.workflow.getTasks(pCapId);
   if (workflowResult.getSuccess())
   wfObj = workflowResult.getOutput();
   else
   {
      logMessage("**ERROR: Failed to get workflow object: " + s_capResult.getErrorMessage());
      return false;

   }

   for (i in wfObj)
   {
      fTask = wfObj[i];
      if (fTask.getActiveFlag().equals("Y") && ( ! useProcess || fTask.getProcessCode().equals(processName)))
      {
         logDebug(fTask.getTaskDescription() + " is Active");
         var stepnumber = fTask.getStepNumber();
         var processID = fTask.getProcessID();
         var dispositionDate = aa.date.getCurrentDate();
         var completeFlag = fTask.getCompleteFlag();
         if (useProcess)
         {
            aa.workflow.handleDisposition(pCapId, stepnumber, processID, wfstat, dispositionDate, "", wfcomment, systemUserObj , "U");
            aa.workflow.adjustTask(pCapId, stepnumber, processID, "N", completeFlag, null, null);
         }
         else
         {
            aa.workflow.handleDisposition(pCapId, stepnumber, wfstat, dispositionDate, "", wfcomment, systemUserObj , "U");
            aa.workflow.adjustTask(pCapId, stepnumber, "N", completeFlag, null, null);
         }
      }
   }
}
/* Added by NPHON on 7/24/14
 *
 * This function is used to get all cap children, close the workflow and update the record status.
 *
 */
function closeChildAdjudicationCase(capId) {
   // 1. Get all cap children.
   var childAdjudicationArray = new Array();
   childAdjudicationArray = getChildren("Enforce/Adjudication/*/*", capId);

   if (childAdjudicationArray) {
      if (childAdjudicationArray.length > 0 ) {
         for (ca in childAdjudicationArray) {
            thisChildAdjudication = childAdjudicationArray[ca];
      var thisCap = aa.cap.getCap(thisChildAdjudication).getOutput();

            // 2. Close all tasks
            closeAllActiveTasks("", "Closed via script", thisCap.capID);

            // 3. Update the adjudication record status.
            updateAppStatus("Consent Agreement","closed by automation", thisChildAdjudication);
         }
      }
   }
}
function closeLicWorkflow(wstatus, associatedCapId)
{
  //Variables defined
  var sysDate = aa.date.getCurrentDate();
  var userId = "admin"
  var systemUserObjResult = aa.person.getUser(userId.toUpperCase());
  if (systemUserObjResult.getSuccess()) 
  {
    var systemUserObj = systemUserObjResult.getOutput();
  }
  
  //Access workflow
  var workflowResult = aa.workflow.getTasks(associatedCapId);
  if (workflowResult.getSuccess())
  {
    wfObj = workflowResult.getOutput();
    for (var i=0; i< wfObj.length; i++)
    { 
      var fTask = wfObj[i]; 
      var desc = fTask.getTaskDescription(); 
      var activeFlag = fTask.getActiveFlag();
      var stepnumber = fTask.getStepNumber();
      var processID = fTask.getProcessID();
      logDebug("RecordId:"+ associatedCapId.getCustomID() + " DESC: " + desc+ " Active Flag: " + fTask.getActiveFlag() + " Step no: " + stepnumber + " Process ID: " + processID);
      
      //Closing workflow
      if(desc == "License" && activeFlag == "Y")
      {
        var updateWorkflowTaskResult = aa.workflow.handleDisposition(associatedCapId,stepnumber,processID,wstatus,sysDate, "","Updated via script",systemUserObj ,"Y");
        logDebug("Updated status: " + fTask.getDisposition() + " " + "Succeeded: " +updateWorkflowTaskResult.getSuccess());
      }
    } 
  } 
}
function closeLimitedPracticeOrTuftsLicense() {
  logDebug("closeLimitedPracticeOrTuftsLicense - Working with capId:" + capId);

  var newExpStatus = "Inactive";

  logDebug("Checking Caps related to Applicant.");
  var co = getContactObj(capId, "Applicant");

  if (co != null) {
    cc = co.getCaps("License/*/*/License");
    if (cc != null) {
      for (i in cc) {
        var thisCapId = cc[i];

        if ((appMatch("License/Veterinarian/Veterinarian License/License", thisCapId) && getAppSpecific("Type Class", thisCapId) == "LP") 
          || appMatch("License/Veterinarian/Tufts Individual/License", thisCapId)) {
          var thisCap = aa.cap.getCap(thisCapId).getOutput();
          var thisCapStatus = thisCap.getCapStatus();
          var thisCapAInfo = [];

          // added by bhandhavya to change the status of LP record to INACTIVE to resolve defect # 382

          var profArr = getLicenseProfessional(thisCapId);

             for (y in profArr) 
              {
                    if (getRefLicenseProf(profArr[y].getLicenseNbr()))
                     {
                              var licNumStr = profArr[y].getLicenseNbr().toString();
                              aa.print(licNumStr);
                              var refLP = getRefLicenseProf(profArr[y].getLicenseNbr());
                              //refLP.setAuditStatus("I");
                          refLP.setWcExempt("N");
                          refLP.setPolicy("Upgraded");
                              aa.licenseScript.editRefLicenseProf(refLP);
                                         }
              }

          //if (thisCapStatus == "Active") {
          if (thisCapStatus == "Current") {

            //logDebug("Previous active license found. " + thisCapId.customID + " type " + thisCap.getCapType());

            //updateAppStatus("Inactive", "Made inactive by automation", thisCapId);
            updateAppStatus("Upgraded", "Made upgraded by automation", thisCapId);
            //updateTask("License", "Upgraded", "Made upgraded by automation", "", "DPL_LICENSE", thisCapId);
            closeLicWorkflow("Upgraded", thisCapId);
            //aa.cap.updateAccessByACA(thisCapId, "N");

            b1ExpResult = aa.expiration.getLicensesByCapID(thisCapId);

            try {
              if (b1ExpResult != null && b1ExpResult.getSuccess()) {
                var b1Exp = b1ExpResult.getOutput();
                if (b1Exp != null) {
                  var b1Status = b1Exp.getExpStatus();
                  if (b1Status == "Active") {
                    b1Exp.setExpStatus(newExpStatus);
                    logDebug("License : " + thisCapId.customID + " status changed from " + b1Status + " to " + newExpStatus);
                  }
                }
              }
            } catch (err) {
              logDebug("No license found.");
            }
          }
        } else {
          logDebug("No license found matching criteria.");
        }
      }
    } else {
      logDebug("No license found.");
    }
  }
}
function compareAddresses(ipAddr1,ipAddr2)
{
  if (ipAddr1 == null && ipAddr2 == null)
    return true;
  if (ipAddr1 == null || ipAddr2 == null)
    return false;
  var opSame = false;
  var fv1HouseNumberAlphaStart = ipAddr1.houseNumberAlphaStart;
  if (fv1HouseNumberAlphaStart == null)
    fv1HouseNumberAlphaStart = "";
  var fv1AddressLine1 = ipAddr1.addressLine1;
  if (fv1AddressLine1 == null)
    fv1AddressLine1 = "";
  var fv1AddressLine2 = ipAddr1.addressLine2;
  if (fv1AddressLine2 == null)
    fv1AddressLine2 = "";
  var fv1AddressLine3 = ipAddr1.addressLine2;
  if (fv1AddressLine3 == null)
    fv1AddressLine3 = "";
  var fv1City = ipAddr1.city;
  if (fv1City == null)
    fv1City = "";
  var fv1State = ipAddr1.state;
  if (fv1State == null)
    fv1State = "";
  var fv1Zip = ipAddr1.zip;
  if (fv1Zip == null)
    fv1Zip = "";
  var fv1CountryCode = ipAddr1.countryCode;
  if (fv1CountryCode == null)
    fv1CountryCode = "";
  var fv1Recipient = ipAddr1.recipient;
  if (fv1Recipient == null)
    fv1Recipient = "";

  var fv2HouseNumberAlphaStart = ipAddr2.houseNumberAlphaStart;
  if (fv2HouseNumberAlphaStart == null)
    fv2HouseNumberAlphaStart = "";
  var fv2AddressLine1 = ipAddr2.addressLine1;
  if (fv2AddressLine1 == null)
    fv2AddressLine1 = "";
  var fv2AddressLine2 = ipAddr2.addressLine2;
  if (fv2AddressLine2 == null)
    fv2AddressLine2 = "";
  var fv2AddressLine3 = ipAddr2.addressLine2;
  if (fv2AddressLine3 == null)
    fv2AddressLine3 = "";
  var fv2City = ipAddr2.city;
  if (fv2City == null)
    fv2City = "";
  var fv2State = ipAddr2.state;
  if (fv2State == null)
    fv2State = "";
  var fv2Zip = ipAddr2.zip;
  if (fv2Zip == null)
    fv2Zip = "";
  var fv2CountryCode = ipAddr2.countryCode;
  if (fv2CountryCode == null)
    fv2CountryCode = "";
  var fv2Recipient = ipAddr2.recipient;
  if (fv2Recipient == null)
    fv2Recipient = "";

  opSame = fv1HouseNumberAlphaStart.toString().toUpperCase() == fv2HouseNumberAlphaStart.toString().toUpperCase() &&
           fv1AddressLine1.toString().toUpperCase() == fv2AddressLine1.toString().toUpperCase() &&
           fv1AddressLine2.toString().toUpperCase() == fv2AddressLine2.toString().toUpperCase() &&
           fv1AddressLine3.toString().toUpperCase() == fv2AddressLine3.toString().toUpperCase() &&
           fv1City.toString().toUpperCase() == fv2City.toString().toUpperCase() &&
           fv1State.toString().toUpperCase() == fv2State.toString().toUpperCase() &&
           fv1Zip.toString().toUpperCase() == fv2Zip.toString().toUpperCase() &&
           fv1CountryCode.toString().toUpperCase() == fv2CountryCode.toString().toUpperCase() &&
           fv1Recipient.toString().toUpperCase() == fv2Recipient.toString().toUpperCase();
  return opSame;
}
function completeRenewal(pLicCapId) {
    
    var parentLicenseCAPID = pLicCapId;

    //field repurposed to represent the current term effective date
    //editScheduledDate(sysDateMMDDYYYY,parentLicenseCAPID);

    logDebug("parent capid :" + parentLicenseCAPID);
    var partialCapID = getPartialCapID(capId);

    logDebug("partialCapID :" + partialCapID);
    var result = aa.cap.updateRenewalCapStatus(parentLicenseCAPID, capId);

    logDebug("Renewal Cap Status updated. capId:" + capId);

    if (parentLicenseCAPID != null)
    {

        //3.1 Get projectScriptModel of renewal CAP.    
        renewalCapProject = getRenewalCapByParentCapIDForReview(parentLicenseCAPID);
        if (renewalCapProject != null) {
            //4. Set B1PERMIT.B1_ACCESS_BY_ACA to "N" for partial CAP to not allow that it is searched by ACA user.
                    //removed as part of defect 2712
       // aa.cap.updateAccessByACA(capId, "N");           
            //5. Set parent license to "Active"

            //6. Set renewal CAP status to "Complete"
            renewalCapProject.setStatus("Complete");
            logDebug("license(" + parentLicenseCAPID + ") is activated.");
            aa.cap.updateProject(renewalCapProject);

            //8. move renew document to parent cap
      //removed statement for defect 3704. no need to copy attached documents to licenses.
/*      if(wfStatus){
      if (wfStatus != "Opened in Error" && wfStatus != "Abandoned" && wfStatus != "Denied or Rejected" && wfStatus != "Withdrawn") {
            aa.cap.transferRenewCapDocument(partialCapID, parentLicenseCAPID, false);
            logDebug("Transfer document for renew cap. Source Cap: " + partialCapID + ", target Cap: " + parentLicenseCAPID);
            }
      }
      else{
      aa.cap.transferRenewCapDocument(partialCapID, parentLicenseCAPID, false);
            logDebug("Transfer document for renew cap. Source Cap: " + partialCapID + ", target Cap: " + parentLicenseCAPID);
      } */
        }
    }
}
//Helper
function condMatchObjEx() {
  this.condition = null;
    this.objType = null;
    this.object = null;
    this.contactObj = null;
    this.addressObj = null;
    this.licenseObj = null;
    this.parcelObj = null;
    this.status = null;
    this.statusType = null;
    this.type = null;
    this.impact = null;
    this.description = null;
    this.comment = null;
    this.arObject = null;
    this.arDescription = null;
    this.arComment = null;
    this.effiectDate = null;
    this.expireDate = null;
    this.expireDate = null;
  this.conditionNumber = null;
}
function copyASITable(pFromCapId, pToCapId, tableName) {
  var itemCap = pFromCapId;

  var gm = aa.appSpecificTableScript.getAppSpecificTableGroupModel(itemCap).getOutput();
  var ta = gm.getTablesArray()
  var tai = ta.iterator();
  var tableArr = new Array();
  var ignoreArr = new Array();

  while (tai.hasNext()) {
    var tsm = tai.next();

    var tempObject = new Array();
    var tempArray = new Array();
    var tn = tsm.getTableName() + "";
    var numrows = 0;

    if (tn != tableName)
      continue;

    if (!tsm.rowIndex.isEmpty()) {
      var tsmfldi = tsm.getTableField().iterator();
      var tsmcoli = tsm.getColumns().iterator();
      var readOnlyi = tsm.getAppSpecificTableModel().getReadonlyField().iterator(); // get Readonly filed
      var numrows = 1;

      while (tsmfldi.hasNext()) // cycle through fields
      {
        if (!tsmcoli.hasNext()) // cycle through columns
        {
          var tsmcoli = tsm.getColumns().iterator();
          tempArray.push(tempObject); // end of record
          var tempObject = new Array(); // clear the temp obj
          numrows++;
        }
        var tcol = tsmcoli.next();
        var tval = tsmfldi.next();

        var readOnly = 'N';
        if (readOnlyi.hasNext()) {
          readOnly = readOnlyi.next();
        }

        var fieldInfo = new asiTableValObj(tcol.getColumnName(), tval ? tval : "", readOnly);
        tempObject[tcol.getColumnName()] = fieldInfo;
        //tempObject[tcol.getColumnName()] = tval;
      }

      tempArray.push(tempObject); // end of record
    }
    addASITable(tn, tempArray, pToCapId);

    logDebug("ASI Table Array : " + tn + " (" + numrows + " Rows)");
  }
}function copyContacts(srcCapId, targetCapId, ignoreContactTypeArr)
{
  //1. Get people with source CAPID.
  var capPeoples = getPeople(srcCapId);
  if (capPeoples == null || capPeoples.length == 0)
    {
    return;
  }
  //2. Get people with target CAPID.
  var targetPeople = getPeople(targetCapId);
  //3. Check to see which people is matched in both source and target.
  for (loopk in capPeoples)
    {
    sourcePeopleModel = capPeoples[loopk];
    
    //Check if contact type should be ignored
    doCopy = true;
    for(kk in ignoreContactTypeArr)
    {
      if( ignoreContactTypeArr[kk] == sourcePeopleModel.getCapContactModel().getContactType());
        doCopy=false;
    }
    
    if( doCopy )
    {
      //3.1 Set target CAPID to source people.
      sourcePeopleModel.getCapContactModel().setCapID(targetCapId);
      targetPeopleModel = null;
      //3.2 Check to see if sourcePeople exist.
      if (targetPeople != null && targetPeople.length > 0)
        {
        for (loop2 in targetPeople)
          {
          if (isMatchPeople(sourcePeopleModel, targetPeople[loop2]))
            {
            targetPeopleModel = targetPeople[loop2];
            break;
          }
        }
      }
      //3.3 It is a matched people model.
      if (targetPeopleModel != null)
        {
        //3.3.1 Copy information from source to target.
        aa.people.copyCapContactModel(sourcePeopleModel.getCapContactModel(), targetPeopleModel.getCapContactModel());
        //3.3.2 Copy contact address from source to target.
        if (targetPeopleModel.getCapContactModel().getPeople() != null && sourcePeopleModel.getCapContactModel().getPeople())
          {
          targetPeopleModel.getCapContactModel().getPeople().setContactAddressList(sourcePeopleModel.getCapContactModel().getPeople().getContactAddressList());
        }
        //3.3.3 Edit People with source People information.
        aa.people.editCapContactWithAttribute(targetPeopleModel.getCapContactModel());
      }
      //3.4 It is new People model.
      else
        {
        //3.4.1 Create new people.
        aa.people.createCapContactWithAttribute(sourcePeopleModel.getCapContactModel());
      }
    }
  }
}
function copyContactsByTypeWithAddress(pFromCapId, pToCapId, pContactType)

{

   // Copies all contacts from pFromCapId to pToCapId

   // where type == pContactType

   if (pToCapId == null)

   var vToCapId = capId;

   else

   var vToCapId = pToCapId;

 

   var capContactResult = aa.people.getCapContactByCapID(pFromCapId);

   var copied = 0;

   if (capContactResult.getSuccess())

   {

      var Contacts = capContactResult.getOutput();

      for (yy in Contacts)

      {

         if(Contacts[yy].getCapContactModel().getContactType() == pContactType)

         {

            var newContact = Contacts[yy].getCapContactModel();

 

            var newPeople = newContact.getPeople();

            var addressList = aa.address.getContactAddressListByCapContact(newContact).getOutput();

            newContact.setCapID(vToCapId);
            newContact.setPrimaryFlag("N");
            aa.people.createCapContact(newContact);

            newerPeople = newContact.getPeople();

            // contact address copying

            if (addressList)

            {

               for (add in addressList)

               {

                  var transactionAddress = false;

                  contactAddressModel = addressList[add].getContactAddressModel();

                  if (contactAddressModel.getEntityType() == "CAP_CONTACT")

                  {

                     transactionAddress = true;

                     contactAddressModel.setEntityID(parseInt(newerPeople.getContactSeqNumber()));

                  }

                  // Commit if transaction contact address

                  if(transactionAddress)

                  {

                     var newPK = new com.accela.orm.model.address.ContactAddressPKModel();

                     contactAddressModel.setContactAddressPK(newPK);

                     aa.address.createCapContactAddress(vToCapId, contactAddressModel);

                  }

                  // Commit if reference contact address

                  else

                  {

                     // build model

                     var Xref = aa.address.createXRefContactAddressModel().getOutput();

                     Xref.setContactAddressModel(contactAddressModel);

                     Xref.setAddressID(addressList[add].getAddressID());

                     Xref.setEntityID(parseInt(newerPeople.getContactSeqNumber()));

                     Xref.setEntityType(contactAddressModel.getEntityType());

                     Xref.setCapID(vToCapId);

                     // commit address

                     aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());

                  }

               }

               // end for

            }

            // end if

         }

 

      }

   }

   else

   {

      logMessage("**ERROR: Failed to get contacts: " + capContactResult.getErrorMessage());

      return false;

   }

   return copied;

}function copyContactsWithAddress(pFromCapId, pToCapId)
{
   // Copies all contacts from pFromCapId to pToCapId and includes Contact Address objects
   //
   if (pToCapId == null)
   var vToCapId = capId;
   else
   var vToCapId = pToCapId;

   var capContactResult = aa.people.getCapContactByCapID(pFromCapId);
   var copied = 0;
   if (capContactResult.getSuccess())
   {
      var Contacts = capContactResult.getOutput();
      for (yy in Contacts)
      {
         var newContact = Contacts[yy].getCapContactModel();

         var newPeople = newContact.getPeople();
         // aa.print("Seq " + newPeople.getContactSeqNumber());

         var addressList = aa.address.getContactAddressListByCapContact(newContact).getOutput();
         newContact.setCapID(vToCapId);
         aa.people.createCapContact(newContact);
         newerPeople = newContact.getPeople();
         // contact address copying
         if (addressList)
         {
            for (add in addressList)
            {
               var transactionAddress = false;
               contactAddressModel = addressList[add].getContactAddressModel();
               if (contactAddressModel.getEntityType() == "CAP_CONTACT")
               {
                  transactionAddress = true;
                  contactAddressModel.setEntityID(parseInt(newerPeople.getContactSeqNumber()));
               }
               // Commit if transaction contact address
               if(transactionAddress)
               {
                  var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                  contactAddressModel.setContactAddressPK(newPK);
                  aa.address.createCapContactAddress(vToCapId, contactAddressModel);
               }
               // Commit if reference contact address
               else
               {
                  // build model
                  var Xref = aa.address.createXRefContactAddressModel().getOutput();
                  Xref.setContactAddressModel(contactAddressModel);
                  Xref.setAddressID(addressList[add].getAddressID());
                  Xref.setEntityID(parseInt(newerPeople.getContactSeqNumber()));
                  Xref.setEntityType(contactAddressModel.getEntityType());
                  Xref.setCapID(vToCapId);
                  // commit address
                  aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
               }

            }
         }
         // end if
         copied ++ ;
         logDebug("Copied contact from " + pFromCapId.getCustomID() + " to " + vToCapId.getCustomID());
      }
   }
   else
   {
      logMessage("**ERROR: Failed to get contacts: " + capContactResult.getErrorMessage());
      return false;
   }
   return copied;
}
function copySingleASITable(tableName, sourceCapId, targetCapId) {
  logDebug("Copying table " + tableName + " from " + sourceCapId + " to " + targetCapId);
  var tblSource = loadASITable(tableName, sourceCapId);
  if (tblSource) {
    removeASITable(tableName, targetCapId);
    copyASITable(sourceCapId, targetCapId, tableName);
  } else {
    logDebug("**WARNING: Table " + tableName + " not found on " + sourceCapId);
  }
}function countContactsByType(contactTypes) {        
// for All Contact Types use "*"
// For Multiple Contact Types use "," to seperate each on.
    if (contactTypes == null || contactTypes == "") {
        logDebug("No contact types specified to count.");
        return 0;
    }
    var contactTypeArr = contactTypes.split(",");
    var contactCount = 0;

    var capContactResult = aa.people.getCapContactByCapID(capId);
    if (capContactResult.getSuccess()) {
        capContactResult = capContactResult.getOutput();
        for (yy in capContactResult) {
            thisCapContact = capContactResult[yy];
            thisPeople = thisCapContact.getPeople();
            logDebug("Contact type: " + thisPeople.contactType);

            if (contactTypes == "*" || exists(thisPeople.contactType, contactTypeArr)) {
                contactCount++;
            }
        }
    }
    logDebug(contactType + " contacts: " + contactCount);
}
function createChildOne(grp, typ, stype, cat, desc) // optional parent capId
{
    //
    // creates the new application and returns the capID object
    //
    var itemCap = capId;
    if (arguments.length > 5) {
       itemCap = arguments[5]; // use cap ID specified in args
    }
    var appCreateResult = aa.cap.createApp(grp, typ, stype, cat, desc);
    logDebug("creating cap " + grp + "/" + typ + "/" + stype + "/" + cat);
    if (appCreateResult.getSuccess()) {
        var childCap = appCreateResult.getOutput();
        logDebug("cap " + grp + "/" + typ + "/" + stype + "/" + cat + " created successfully ");
        // create Detail Record
        capModel = aa.cap.newCapScriptModel().getOutput();
        capDetailModel = capModel.getCapModel().getCapDetailModel();
        capDetailModel.setCapID(childCap);
        aa.cap.createCapDetail(capDetailModel);
        var newObj = aa.cap.getCap(childCap).getOutput(); //Cap object
        var result = aa.cap.createAppHierarchy(itemCap, childCap);
        if (result.getSuccess())
            logDebug("Child application successfully linked");
        else{
            logDebug("Could not link applications");
            result.getErrorMessage();
        }

        // Copy Contacts
     /*   capContactResult = aa.people.getCapContactByCapID(itemCap);
        if (capContactResult.getSuccess()) 
        {
      Contacts = capContactResult.getOutput();
      for (var yy in Contacts) 
      {
        var x = Contacts[yy];
        var z = x.getPeople();
        if(z.getContactType() == "Respondent" || z.getContactType() == "Respondent Business") 
        {
          var newContact = Contacts[yy].getCapContactModel();
          newContact.setCapID(childCap);
          aa.people.createCapContact(newContact);
          logDebug("added contact");
        }
      }
        }
 
      // Copy Addresses
      capAddressResult = aa.address.getAddressByCapId(itemCap);
      if (capAddressResult.getSuccess()) 
      {
          Address = capAddressResult.getOutput();
          for (var yy in Address) 
          {
              newAddress = Address[yy];
              newAddress.setCapID(childCap);
              aa.address.createAddress(newAddress);
              logDebug("added address");
          }
      } */

      
      return childCap;
  } else {
      logDebug("**ERROR: adding child App: " + appCreateResult.getErrorMessage());
  }
}


function createLicense(initStatus, copyASI, createRefLP, contactType, licHolderSwitch, licHolderType) {
    //initStatus - record status to set the license to initially
    //copyASI - copy ASI from Application to License? (true/false)
    //createRefLP - create the reference LP (true/false)
    //licHolderSwitch - switch the applicant to license holder

    var newLic = null;
    var newLicId = null;
    var newLicIdString = null;
    var newLicenseType = null;
    var boardName = getLicensingBoard(capId);
  logDebug("BoardName: " + boardName);
    var oldAltID = null;
    var AltIDChanged = false;
  var isNewSchool = null;
    //var timeOutInSec = 10;



    //create the license record
    //start a new transaction
    //aa.batchJob.beginTransaction(timeOutInSec);

    //CREATE THE APPROPRIATE LICENSE RECORD
    if (appMatch("License/Engineers and Land Surveyors/Temporary Permit/Application"))
    {
        newLicId = createParent(appTypeArray[0], appTypeArray[1], appTypeArray[2], "Permit", null);
    }
        //CREATE THE APPROPRIATE LICENSE RECORD
  else if(appMatch("License/Real Estate Appraiser/Course/Primary Course Application") || appMatch("License/Real Estate Appraiser/Course/CE Course Application") || appMatch("License/Real Estate Appraiser/Course/Seminar Course Application") || appMatch("License/Real Estate Appraiser/Course/USPAP Course Application")) {
    
        newLicId = createParent(appTypeArray[0], appTypeArray[1], appTypeArray[2], "Approval", null);
    }
    /* @desc Added license structure that needs to be created for Reciprocal Salesperson Application.
     * Release B Master Script List ID: 1208 - START     
    */

    else if (appMatch("License/Real Estate/Reciprocal Salesperson/Application"))
    {
        newLicId = createParent(appTypeArray[0], appTypeArray[1], "Salesperson", "License", null);
    }
    
    /* @desc Added license structure that needs to be created for Real Estate Instructor Application.
     * Release B Master Script List ID: 1379 - START     
    */

    else if (appMatch("License/Real Estate/Instructor/Application"))
    {
        newLicId = createParent(appTypeArray[0], appTypeArray[1], appTypeArray[2], "Approval", null);
    }
    else if (appMatch("License/Occupational Schools/Program-Course/Application"))
    {
        newLicId = createParent(appTypeArray[0], appTypeArray[1], appTypeArray[2], "Approval", null);
    }
  //added by kpreeti for script 335
  else if (appMatch("License/Cosmetology/Mobile Manicuring/Application"))
    {
        newLicId = createParent(appTypeArray[0], appTypeArray[1], appTypeArray[2], "Registration", null);
    }

    // Release B Master Script List ID: 1379 - END     
    
    /* @desc Added license structure that needs to be created for Real Estate Instructor Application.
     * Release B Master Script List ID: 1198 - START     
    */

    else if (appMatch("License/Real Estate/Business/Application"))
    {
        newLicId = createParent(appTypeArray[0], appTypeArray[1], appTypeArray[2], "License", null);
    }
    // Release B Master Script List ID: 1198 - END 

     /* @desc  Create Real Estate Broker License.
     * Release B Master Script List ID: 1349 - START     
     */

    else if ((appMatch("License/Real Estate/Attorney Broker/Application")) || (appMatch("License/Real Estate/Reciprocal Broker/Application")))
    {   
        newLicId = createParent(appTypeArray[0], "Real Estate", "Broker", "License", null);
    }
    // Release B Master Script List ID: 1349 - END 

    /* @desc Added license structure that needs to be created for Real Estate Reciprocal Appraiser Application.
     * Release B Master Script List ID: 1356 - START     
    */

    else if (appMatch("License/Real Estate Appraiser/Reciprocal Appraiser/Application"))
    {
        newLicId = createParent(appTypeArray[0], appTypeArray[1], "Appraiser", "License", null);
    }
    // Release B Master Script List ID: 1356 - END         
        else if (appMatch("License/Barbers/Reciprocal/Application")){
  var barberLicType = getAppSpecific("What type of Barber license are you applying for?", capId);
    if(barberLicType =="Master License"){
      newLicId = createParent(appTypeArray[0], appTypeArray[1], "Master", "License", null);
    }
      else{
        newLicId = createParent(appTypeArray[0], appTypeArray[1], "Apprentice", "License", null);
      }
  }
    else if (appMatch("License/Cosmetology/Instructor/Application")){
    var vLicenseTypeReq = getAppSpecific("Type of License Requested");
      if (vLicenseTypeReq == "cosmetology instructor") {
        newLicId = createParent(appTypeArray[0], appTypeArray[1], "Type 4", "License", null);
      }
      if (vLicenseTypeReq == "aestetician instructor") {
        newLicId = createParent(appTypeArray[0], appTypeArray[1], "Type 8", "License", null);
      }
     } 
    else if (appMatch("License/Cosmetology/School/Application")) {
    // set the type class ASI on the license record
    var vSchoolType =  getAppSpecific("What type of school is being applied for?", capId);
    if (vSchoolType == "Aesthetic School") {
    newLicId = createParent(appTypeArray[0], appTypeArray[1], "Aesthetician School", "License", null);    
    } else if (vSchoolType == "Advanced Training Institute") {
    newLicId = createParent(appTypeArray[0], appTypeArray[1], "Advanced Training Institute", "License", null);    
    } else if (vSchoolType == "Manicuring School") {
    newLicId = createParent(appTypeArray[0], appTypeArray[1], "Manicuring School", "License", null);    
    }else {
    newLicId = createParent(appTypeArray[0], appTypeArray[1], "School", "License", null);   
    }
  }
    else
    {
        newLicId = createParent(appTypeArray[0], appTypeArray[1], appTypeArray[2], "License", null);    
    }
if (appMatch("License/Allied Health/Physical Therapy Facility/Application")){
  //Added By Vishakha for Defect#12254
  //CWM_ELP_DPL_Defect12254_addEmployeeInfo(capId,newLicId);
  //debashish.barik
  CWM_ELP_DPL_WTUA_updateStratDateForAhFacility(newLicId);

  }


    //commit
    //aa.batchJob.commitTransaction();

    //field repurposed to represent the current term effective date
    // editScheduledDate(sysDateMMDDYYYY, newLicId);
    //field repurposed to represent the original effective date
    //editFirstIssuedDate(sysDateMMDDYYYY, newLicId);
    if(appMatch("License/Barbers/Shop/Application")){
    var date = AInfo["License Issue Date"];
    logDebug("Date "+date);
    if(date != null){
                   editFirstIssuedDate(date, newLicId);
    }else{
       editFirstIssuedDate(sysDateMMDDYYYY, newLicId);
    }
  }else{
    editFirstIssuedDate(sysDateMMDDYYYY, newLicId);
  }
    oldAltID = newLicId.getCustomID();
    logDebug("==> oldAltID: " + oldAltID);
  //  if (appMatch("License/Veterinarian/*/Application") ||
  //      appMatch("License/Sheet Metal/*/Application")) {

        if (appMatch("License/Veterinarian/Veterinarian License/License", newLicId)) {
            if (AInfo["Are you applying for a limited license?"] == "Yes") {
                tempPermitDesignation(newLicId);
            }
        }
//START SETTING THE TYPE CLASS BASED ON RECORD, ASI AND OTHER RULES
        var newLicAInfo = new Array();
        loadAppSpecific(newLicAInfo, newLicId);

        var asiTypeClass = newLicAInfo["Type Class"];
        //var asiTypeClass = getAppSpecific("Type Class", newLicId);
        //var asiTypeClass = AInfo["Type Class"];

        logDebug("Type Class : " + asiTypeClass);

        if (asiTypeClass && asiTypeClass != null && asiTypeClass != "")
            newLicenseType = asiTypeClass;
        else
            newLicenseType = boardName;

        //change license Alt ID
        if (appMatch("License/Real Estate Appraiser/Course/Primary Course Application")) {

                newLicenseType = "CA";
        var isNewSchool = CWM_ELP_DEFECT_5363_WTUA_AddNewSchool();
        if(isNewSchool !=null) {
          var cSchool = isNewSchool;
        }
        else {
          var cSchool = AInfo["Approved School"];
        }
        editAppSpecific("Course Category", "Primary", newLicId);
        
            
        }
  if(appMatch("License/Real Estate Appraiser/Course/CE Course Application"))
  {

                newLicenseType = "CA";
        var isNewSchool = CWM_ELP_DEFECT_5363_WTUA_AddNewSchool();
        if(isNewSchool !=null) {
          var cSchool = isNewSchool;
        }
        else {
          var cSchool = AInfo["Approved School"];
        }
        editAppSpecific("Course Category", "Continuing Education", newLicId);
        
            
        } 
    
      if(appMatch("License/Real Estate Appraiser/Course/Seminar Course Application")) 
  {

                newLicenseType = "CA";
        var isNewSchool = CWM_ELP_DEFECT_5363_WTUA_AddNewSchool();
        if(isNewSchool !=null) {
          var cSchool = isNewSchool;
        }
        else {
          var cSchool = AInfo["Approved School"];
        }
        editAppSpecific("Course Category", "Seminar", newLicId);
        
            
        } 
    if (appMatch("License/Real Estate Appraiser/Course/USPAP Course Application")) 
  {

                newLicenseType = "CA";
        var isNewSchool = CWM_ELP_DEFECT_5363_WTUA_AddNewSchool();
        if(isNewSchool !=null) {
          var cSchool = isNewSchool;
        }
        else {
          var cSchool = AInfo["Approved School"];
        }
        editAppSpecific("Course Category", "USPAP", newLicId);
        
            
        } 
  // Code added by Vishakha for Defect#10559
  if (appMatch("License/Barbers/Master/Application")) 
  {
    newLicenseType = "M";
  }

        //Added for defect#13100
        if (appMatch("License/Sheet Metal/Business License/Application")) {
            
                    newLicenseType = "B";
           }

    
        //change license Alt ID
        if (appMatch("License/Sheet Metal/Master/Application")) {
            var type = AInfo['What type of license do you currently hold?'];
            if (type == "J2") {
                newLicenseType = "M2";
            }
        }
        if (appMatch("License/Sheet Metal/Journeyperson/Application")) {
            var type = AInfo['Apply for a Journeyperson type:'];
            if (type == "J-2 ( restricted )") {
                newLicenseType = "J2";
            }
        }
        if (appMatch("License/Sheet Metal/School/Application")) {
            var type = AInfo['School Type'];
            if (type == "Public") {
                editAppSpecific("School Type", "S-2", newLicId);
                newLicenseType = "S2";
            } else {
                editAppSpecific("School Type", "S-1", newLicId);
            }
        }
    if (appMatch("License/Plumbers and Gas Fitters/Business/Application") || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Business/Application")) {
      var corpStruc;
      corpStruc = CWM_ELP_1210_DPL_WTUA_SetTypeClassASI();
      logDebug("Corporate Structure is: " + corpStruc);
      if(corpStruc == "Partnership" || corpStruc == "LLP")
      {
                  newLicenseType = "P";
      }
      else
      {
               newLicenseType = "C";      
      }

    }

    
     /* Release B Master Script List.xlsx
    * id: 964
    */
        //defect 4326
  if (appMatch("License/Plumbers and Gas Fitters/Journeyman/Application") || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Journeyman/Application"))
  {
    editAppSpecific("Continuing Education Waiver", "Temporary", newLicId);
  }
    //end 4326
                    
     if(appMatch("License/Psychologist/Psychologist/Application"))
    {
    if(AInfo["Licensure as Psychologist with Health Service Provider Certification"] == "CHECKED")
    {
                newLicenseType = "PR";
    }
    else {
         newLicenseType = "PY";
    }
    }
    //defect 4520
  if (appMatch("License/Real Estate/Reciprocal Broker/Application"))
  {
    newLicenseType = "RB";
  }
  if(appMatch("License/Real Estate/Attorney Broker/Application"))
  {
    newLicenseType = "AB";
  }   

  //end 4520
  if (appMatch("License/Real Estate Appraiser/Trainee/Application"))
    {
     var useAppSpecificGroupName = true
     var AppType = getAppSpecific("APPRAISER INFORMATION.Please Select Application Type", capId);

     if(AppType && AppType != "" && AppType == "State-Certified Residential Real Estate Appraiser")
     newLicenseType =  "CR";

     if(AppType && AppType != "" && AppType == "State-Certified General Real Estate Appraiser")
     newLicenseType = "CG";

    }

   if (appMatch("License/Real Estate Appraiser/Reciprocal Appraiser/Application"))
    {
     var useAppSpecificGroupName = true
     var state = AInfo["Please select the State"];
    var asiApplicationType = AInfo["Please select application type"];
      if(asiApplicationType == "State-Licensed Real Estate Appraiser"){ //|| asiApplicationType == "State-Certified Residential Real Estate Appraiser"){
        newLicenseType = "LA";
      }
      else if (asiApplicationType == "State-Certified Residential Real Estate Appraiser"){
        newLicenseType = "CR";
      }
      else if (asiApplicationType == "State-Certified General Real Estate Appraiser"){
        newLicenseType = "CG";
      }

     if(state && state != "")
     editAppSpecific("Reciprocal State", state, newLicId);
    }
  
  if (appMatch("License/Real Estate Appraiser/Appraiser/Application")){
    var asiApplicationType = AInfo["Please select application type"];
      if(asiApplicationType == "State-Licensed Real Estate Appraiser"){ //|| asiApplicationType == "State-Certified Residential Real Estate Appraiser"){
        newLicenseType = "LA";
      }
      else if (asiApplicationType == "State-Certified Residential Real Estate Appraiser"){
        newLicenseType = "CR";
      }
      else if (asiApplicationType == "State-Certified General Real Estate Appraiser"){
        newLicenseType = "CG";
      }
  }
  
  
    /* @desc Code to set the license record for Reciprocal Salesperson Application.
     * Release B Master Script List ID: 1208 - START     
    */
    if (appMatch("License/Real Estate/Reciprocal Salesperson/Application"))
    {
        var newLicAInfo = new Array();
        loadAppSpecific(newLicAInfo, newLicId);

        var asiTypeClass = newLicAInfo["Type Class"];
        
        logDebug("Type Class : " + asiTypeClass);

        if (asiTypeClass && asiTypeClass != null && asiTypeClass != "")
            newLicenseType = asiTypeClass;
        else
            newLicenseType = "RS";
        
        //editAppSpecific("Type Class", newLicenseType, newLicId);
    }
    //Release B Master Script List ID: 1208 - END 
    //Defect ID: 3506
    //Release B Master Script List ID: 1356 - END

    /* @desc Code to set the license record for Real Estate Temporary Appraiser Application.
    * Defect 3371 - START     
    */
    if (appMatch("License/Real Estate Appraiser/Temporary Appraiser/Application")) {
        var newLicAInfo = new Array();
        loadAppSpecific(newLicAInfo, newLicId);

        var asiTypeClass = newLicAInfo["Type Class"];

        logDebug("Type Class : " + asiTypeClass);

        if (asiTypeClass && asiTypeClass != null && asiTypeClass != "")
            newLicenseType = asiTypeClass;
        else
            newLicenseType = "CG";

       /*  editAppSpecific("Type Class", newLicenseType, newLicId);
        //change license Alt ID
        var thisCustomID = newLicId.getCustomID();
        var newAltID = thisCustomID.replace("AP", "CG");
        var updateCapAltIDResult = aa.cap.updateCapAltID(newLicId, newAltID);
        if (updateCapAltIDResult.getSuccess()) {
            logDebug(newLicId + " AltID changed from " + oldAltID + " to " + newAltID);
        }

        else {
            logDebug("**WARNING: AltID was not changed from " + oldAltID + " to " + newAltID + ": " + updateCapAltIDResult.getErrorMessage());

        }
        newLicId = aa.cap.getCapID(newAltID).getOutput();
        AltIDChanged = true; */
    }
    //Defect 3371 - END
    
    /* @desc Code to set the license record for Real Estate Instructor Application.
     * Release B Master Script List ID: 1379 - START     
    */
    if (appMatch("License/Real Estate/Instructor/Application"))
    {
        var newLicAInfo = new Array();
        loadAppSpecific(newLicAInfo, newLicId);

        var asiTypeClass = newLicAInfo["Type Class"];
        
        logDebug("Type Class : " + asiTypeClass);

        if (asiTypeClass && asiTypeClass != null && asiTypeClass != "")
            newLicenseType = asiTypeClass;
        else
            newLicenseType = "SI";
        
       // editAppSpecific("Type Class", newLicenseType, newLicId);
    }
    /* @desc Code to set the license record for Real Estate Business Application.
     * Release B Master Script List ID: 1198 - START     
    */
    if (appMatch("License/Real Estate/Business/Application"))
    {
        var newLicAInfo = new Array();
        loadAppSpecific(newLicAInfo, newLicId);

        useAppSpecificGroupName = true;
       // var businessType = getAppSpecific("DOING BUSINESS AS.What is the business type?",capId);
     var businessType = AInfo["What is the business type?"];
        var asiTypeClass = newLicAInfo["Type Class"];
        
        logDebug("Type Class : " + asiTypeClass);
        logDebug("What is the business Type? : " + businessType);

        

        if(businessType != null && businessType == "LLP"){
            newLicenseType = "LP";
        }

        if(businessType != null && businessType == "LLC"){
            newLicenseType = "LC";
        }
        
        if(businessType != null && businessType == "Corporation"){
            newLicenseType = "C";
        }
        
        if(businessType != null && businessType == "General Partnership"){
            newLicenseType = "PG";
        }

        if(businessType != null && businessType == "Limited Partnership"){
            newLicenseType = "PL";
        }
        
      //  editAppSpecific("TYPE CLASS.Type Class", newLicenseType, newLicId);
        logDebug("Type Class is " + getAppSpecific("TYPE CLASS.Type Class", newLicId));

    }
    //Release B Master Script List ID: 1198 - END
     if (appMatch("License/Real Estate/Broker/Application"))
       newLicenseType = "B";
   
    if (appMatch("License/Real Estate Appraiser/Appraiser/Application"))
        newLicenseType = "TR";   

     if (appMatch("License/Plumbers and Gas Fitters/Inspector/Application")) {
        newLicenseType = "IN";
    //added for defect 4675
    //If either Journeyman GF license number ASI or Master GF license number ASI has a value, and both the PL license number ASI are blank, then board code is GF, ELSE the board code is PL.
    var plj = AInfo["Journeyman Plumber License Number"];
    var plm = AInfo["Master Plumber License Number"];
    var gfj = AInfo["Journeyman Gas Fitter License Number"];
    var gfm = AInfo["Master Gas Fitter License Number"];    
    if (plj == null && plm == null && (gfj != null || gfm != null)) {
      boardName = "GF";
      updateShortNotes(boardName,capId);
    }
    else {
      boardName = "PL";
    }
   }
    
     if (appMatch("License/Electricians/Master Electrician/Application")){
     if(AInfo["Source"] == "Reciprocity"){
       newLicenseType = "MR";
     } 
     else {
      newLicenseType = "A";
     }
   }
  
   if (appMatch("License/Electricians/Journeyman Electrician/Application")){
     // FA 09/03/2018 Ticket# 7547. Source is returning null for those submitted on ACA. If source is null create JR license
     if(AInfo["Source"] == "Reciprocity" || AInfo["Source"] == null){
       newLicenseType = "JR";
     } 
     else {
      newLicenseType = "B";
     }

   }
//Rel C Scripting: Script ID: 3 - By LBulgin
   if (appMatch("License/Architect/Architect/Application")){
             vSource = getAppSpecific("Are you applying for this license via reciprocity?", capId);
    if(vSource == "Yes"){
      newLicenseType = "R";
    } 
    else {
      newLicenseType = "AR";
    }
   }
//Rel C Scripting: Script ID: 13 - By LBulgin  
  if (appMatch("License/Architect/Architect Emeritus/Application")){
    newLicenseType = "E";
    logDebug("Added type class for Architect Emeritus");
    }

//Rel C Scripting: Script ID: 338 - By LBulgin
  if (appMatch("License/Dispensing Opticians/Dispensing Optician/Application")){
    newLicenseType = "DO";


    logDebug("Added type class for Dispensing Optician");
  }
//Rel C Scripting: Script ID: 123 - By LBulgin
  if (appMatch("License/Podiatry/Podiatrist Limited License/Application")){
    newLicenseType = "LL";
    logDebug("Added type class for PD LL");
  }
//Rel C Scripting: Script ID: 298 - By Byellapu
    if (appMatch("License/Public Accountancy/CPA Firm - Partnership/Application"))
  {
    newLicenseType = "P";
    logDebug("Added type class for Public Acc/CPA Firm-Partnership Appl");
    }

//Rel C Scripting: Script ID: 285 - By Byellapu
  
  if (appMatch("License/Hearing Instrument/Specialist/Application"))
  {
    newLicenseType = "1";
    logDebug("Added type class for Hearing Instrument Specialist");
    }
  
//Rel C Scripting: Script ID: 281.0 - By Byellapu

    if (appMatch("License/Hearing Instrument/Apprentice/Application"))
  {
    newLicenseType = "A";
    logDebug("Added type class for Hearing Instrument Apprentice");
    }
//Rel C Scripting: Script ID: 714 - By Byellapu
    if (appMatch("License/Allied Mental Health/Applied Behavior Analyst/Application"))
  {
    newLicenseType = "B1";
    logDebug("Added type class for Allied Mental Healht/Applied Behavior Analyst");
    }

//Rel C Scripting: Script ID: 327 - By Byellapu
//Modified by SKumar (Script ID: 327 and 432)
    //if (appMatch("License/Barbers/Barber Instructor/Application")|| appMatch("License/Barbers/Barber School/Application"))
    if (appMatch("License/Barbers/Instructor/Application")|| appMatch("License/Barbers/School/Application"))
    {
         newLicenseType = "1";
    }

  // DPL Release C Scripting: Script ID: 181 (added by: SKumar)
  if (appMatch("License/Landscape Architects/Landscape Architect/Application")) {
    // set the license type
    newLicenseType = "LA";
    
    // set ASI field::Applied through reciprocity?
    var appType = AInfo["Application Type"];
    if (appType.toUpperCase().equals("REGISTRATION/LICENSURE BY RECIPROCITY APPLICANTS")) {
      editAppSpecific("Applied through reciprocity?", "Yes", newLicId);
      logDebug("Set ASI field::Applied through reciprocity?");
    }
  }

  // DPL Release C Scripting: Script ID: 360 (added by: SKumar)    
  if (appMatch("License/Electrology/Electrologist/Application") || appMatch("License/Electrology/Electrologist/Out of State Application")){
    newLicenseType = "1";
  }

  // DPL Release C Scripting: Script ID: 378 (added by: SKumar) 
  if (appMatch("License/Electrology/Electrology Lecturer/Application")){
    newLicenseType = "2";
  }

  // DPL Release C Scripting: Script ID: 377 (added by: SKumar) 
  if (appMatch("License/Electrology/Electrology Instructor/Application")){
    newLicenseType = "3";
  }

  // DPL Release C Scripting: Script ID: 366 (added by: SKumar) 
  if (appMatch("License/Electrology/Electrology School/Application")){
    newLicenseType = "4";
  }

// DPL Release C Scripting: Script ID: 681 (added by: kpreeti) 
  if (appMatch("License/Funeral Directors/Funeral Assistant/Application")){
    newLicenseType = "FA";
}

        // DPL Release C Scripting: Script ID: 272 (added by: Ankush Kshirsagar) 
  if (appMatch("License/Funeral Directors/Embalmer Apprentice/Application")){
    newLicenseType = "A";
  }
        
        // DPL Release C Scripting: Script ID: 795 (added by: Nilkanth Patel) 
  if (appMatch("License/Occupational Schools/Program-Course/Application")){
    newLicenseType = "PC";
  }
        // DPL Release C Scripting: Script ID: 209 (added by: Nilkanth Patel)   
  if (appMatch("License/Cosmetology/Shop/Application")) {
    // set the type class ASI on the license record
    // this can also be done using a standard choice list by lookup: SalonType
    var vShopType =  getAppSpecific("Type of Shop applying for", capId);
    if (vShopType == "Type 1 - Cosmetology (full service salon)") {
    newLicenseType = "1";
    } else if (vShopType == "Type 2 - Booth Shop (renting a space in a salon)" ) {
    newLicenseType = "2";
    } else if (vShopType == "Type 3 - Manicure Only") {
    newLicenseType = "3";
    } else if (vShopType == "Type 4 - Booth Renter (owner of entire salon)") {
    newLicenseType = "4";
    } else if (vShopType == "Type 5 - Aesthetic Salon Only") {//RTC#12484
    newLicenseType = "5";
    } else {
    vShopType = "";
    }
  }
        
        // DPL Release C Scripting: Script ID: 208 (added by: Nilkanth Patel)   
  if (appMatch("License/Cosmetology/Instructor/Application")) {
    // set the type class ASI on the license record based on the requested license type
    var vLicenseTypeReq = getAppSpecific("Type of License Requested");
      if (vLicenseTypeReq == "cosmetology instructor") {
        newLicenseType = "4";
      }
      if (vLicenseTypeReq == "aestetician instructor") {
        newLicenseType = "8";
      }
  }
        // DPL Release C Scripting: Script ID: 600 (added by: Nilkanth Patel) 
  if (appMatch("License/Speech and Audiology/Audiology Assistant/Application")){
    newLicenseType = "AA";
  }

    //DPL Release C Scripting: Script ID: 609 (added by: jledezma)
  if (appMatch("License/Massage Therapy/Multiple Massage Establishment/Application")){
        newLicenseType = "MM";
    }
  // DPL Release C Scripting: Script ID: 554 (added by: tkhan) 
  if (appMatch("License/Massage Therapy/Solo Massage Establishment/Application")){
    newLicenseType = "MF";
  }
    // DPL Release C Scripting: Script ID: 576 (added by: tkhan) 
  if (appMatch("License/Massage Therapy/Massage Therapist/Application")){
    newLicenseType = "MT";
  }
      //DPL Release C Scripting: Script ID: 679 (added by: kpreeti)
  if (appMatch("License/Funeral Directors/Funeral Establishment/Application")){
        newLicenseType = "FE";
    }

       //DPL Release C Scripting: Script ID: 408 (added by: Tofek)
  if (appMatch("License/Speech and Audiology/Speech Language Pathologist/Application")){
        newLicenseType = "SL";
        }
        //Sagar :  Added for Script 296
  if (appMatch("License/Public Accountancy/CPA Firm License for LLP/Application"))
  {
            newLicenseType = "LP";
        }

        //DPL Release C Scripting: Script ID: 276 (added by: kpreeti)
  if (appMatch("License/Drinking Water/Drinking Water Operator/Application"))
  {
    vFinalType = getAppSpecific("Final board decision - License Type", capId);
    logDebug("vFinalType  : "+vFinalType);    
    newLicenseType = lookup("lookup:DW Operator Type", vFinalType );
      if(!newLicenseType){
      newLicenseType = "DW";
      }

  }

//added by kpreeti script 335 on 3/18/2016
    if (appMatch("License/Cosmetology/Mobile Manicuring/Application")) {
    // set the type class ASI on the license record
    newLicenseType = "MM";
  } 

  // DPL Release C Scripting: Script ID: 191 (added by: SKumar) 
  if (appMatch("License/Home Inspector/Home Inspector Associate/Application")){
    newLicenseType = "2";
  }
        
        //DPL Release C Scripting: Script ID: 398 (added by: Tofek),For Audiologist
  if (appMatch("License/Speech and Audiology/Audiologist/Application")){
        newLicenseType = "AU";
    }
  
  //DPL Release C Scripting: Script ID: 404 (added by: Tofek),For Speech Language Pathology Asst Record
  if (appMatch("License/Speech and Audiology/Speech Language Pathology Asst/Application")){
        newLicenseType = "SA";
    }

    //DPL Release C Scripting: Script ID: 323 (added by: Tofek),For Barber Assistant Instructor.
  if (appMatch("License/Barbers/Assistant Instructor/Application")){
        newLicenseType = "2";
         }
    //DPL Release C Scripting: Script ID: 449 (added by: Tofek),For Barber Shop.
  if (appMatch("License/Barbers/Shop/Application")){
        newLicenseType = "S";
    }

  // DPL Release C Scripting: Script ID: 187 (added by: SKumar) 
  if (appMatch("License/Home Inspector/Home Inspector/Application")){
    newLicenseType = "1";
  }
       // DPL Release C Scripting: Script ID: 263 (added by: kpreeti)
  if (appMatch("License/Cosmetology/Type 5/Application")){
    newLicenseType = "5";
  }
       // DPL Release C Scripting: Script ID: 704 (added by: tofek)
  if (appMatch("License/Allied Mental Health/Educational Psychologist/Application")){
    newLicenseType = "ED";
  }

  // DPL Release C Scripting: Script ID: 738 (added by: SKumar)
  if (appMatch("License/Allied Mental Health/Mental Health Counselor/Application")){
    newLicenseType = "CC";
  }

  // DPL Release C Scripting: Script ID: 735 (added by: SKumar)
  if (appMatch("License/Allied Mental Health/Marriage and Family Therapist/Application")){
    newLicenseType = "MF";
  }

       // DPL Release C Scripting: Script ID: 600 (added by: tofek)
  if (appMatch("License/Speech and Audiology/Audiology Assistant/Application")){
    newLicenseType = "AA";
  }
  // DPL Release C Scripting: Script ID: 213 (added by: debashish.barik, Dt:2/25/2016)
  if (appMatch("License/Cosmetology/Type 6/Application")){
    newLicenseType = "6";
  }
  // DPL Release C Scripting: Script ID: 211 (added by: ankush Kshirsagar, Dt:2/25/2016)
  if (appMatch("License/Cosmetology/Type 1/Application")){
    newLicenseType = "1";
  }
         if (appMatch("License/Funeral Directors/Type 3/Application")){
    newLicenseType = "3";
  }

       // DPL Release C Scripting: Script ID: 733 (added by: tofek)
  if (appMatch("License/Allied Mental Health/Asst Applied Behavior Analyst/Application")){
    newLicenseType = "B2";
  }
  
  // DPL Release C Scripting: Script ID: 740 (added by: tofek)
  if (appMatch("License/Allied Mental Health/Rehabilitation Counselor/Application")){
    newLicenseType = "RT";
  }
  
  // DPL Release C Scripting: Script ID: 735 (added by: tofek)
  if (appMatch("License/Allied Mental Health/Marriage and Family Therapist/Application")){
    newLicenseType = "MF";
  }
// DPL Release C Scripting: Script ID: 208 (added by: debashish.barik, Dt:2/29/2016)
  if (appMatch("License/Cosmetology/Jr Instructor/Application")){
    newLicenseType = "JR";
  }
  if (appMatch("License/Allied Health/Physical Therapy Facility/Application")){
    newLicenseType = "PF";
  }

      // DPL Release C Scripting: Script ID: 333, For Cosmetology School (added by: Tofek Khan)   
  if (appMatch("License/Cosmetology/School/Application")) {
    // set the type class ASI on the license record
    // this can also be done using a standard choice list by lookup: SalonType
    var vSchoolType =  getAppSpecific("What type of school is being applied for?", capId);
    if (vSchoolType == "Cosmetology School") {
    newLicenseType = "9";
    } else if (vSchoolType == "Aesthetic School") {
    newLicenseType = "10";
    } else if (vSchoolType == "Advanced Training Institute") {
    newLicenseType = "11";
    } else if (vSchoolType == "Manicuring School") {
    newLicenseType = "12";
    }else {
    newLicenseType = "";
    }
  }
        
        if (appMatch("License/Occupational Schools/School/Application")){
             var typeOfSchool = getAppSpecific("Type of School");
        if(typeOfSchool.toUpperCase().equals("PROFIT"))
            newLicenseType = "P";
        else
            if(typeOfSchool.toUpperCase().equals("NON-PROFIT"))
                newLicenseType = "NP";
  }
  // DPL Release C Scripting: Script ID: 200 (added by: debashish.barik, Dt:3/3/2016)
  if (appMatch("License/Chiropractor/Chiropractor Facility/Application")){
    newLicenseType = "CF";
  }
      // DPL Release C Scripting:Script ID 219, For Public Accountancy/CPA, Added by tofek
      //Sagar : Added for script 220
//BYellapu: Added for script# 301
  if (appMatch("License/Public Accountancy/CPA/Full Reporting Application")|| appMatch("License/Public Accountancy/CPA/Short Form Application")|| appMatch("License/Public Accountancy/CPA/Non-Reporting Application"))
  {
    newLicenseType = "CA";
  }
       // DPL Release C Scripting:Script ID 294, For Public Accountancy/CPA Firm For LLC, Added by tofek
  if (appMatch("License/Public Accountancy/CPA Firm for LLC/Application")){
    newLicenseType = "LC";
  }
  
  // DPL Release C Scripting:Script ID 300, For Public Accountancy/CPA Firm for Professional Corp, Added by tofek
  if (appMatch("License/Public Accountancy/CPA Firm for Professional Corp/Application")){
    newLicenseType = "C";
  }
        // DPL Release C Scripting:Script ID 229, For Public Accountancy/CPA Firm for Business Corp, Added by tofek
  if (appMatch("License/Public Accountancy/CPA Firm for Business Corp/Application")){
    newLicenseType = "BC";
  }
  if (appMatch("License/Barbers/Reciprocal/Application")){
    if(barberLicType =="Master License"){
        newLicenseType = "M";
    }
      else{
        newLicenseType = "A";
      }
  }
  // DPL Release C Scripting: Script ID: 751 (added by: Ankush Kshirsagar, Dt:3/14/2016)
  if (appMatch("License/Occupational Schools/Sales Representative/Application")){
    newLicenseType = "SR";
  }
        if(appMatch("License/Occupational Schools/Program-Course/Application")){
    newLicenseType = getAppSpecific("Program Abbreviation",capId);
  }
  // DPL Release C Scripting: Script ID: 765, For Occupational School (added by: Tofek Khan)  
  if (appMatch("License/Occupational Schools/School/Application")) {
    logDebug("Inside License/Occupational Schools/School/Application");
    // get the type of school value
    var typeOfSchool = AInfo["Type of School"];
    
    //TODO: getting null pointer exception.
    if(typeOfSchool!=null && typeOfSchool.toUpperCase().equals("PROFIT")){
            newLicenseType = "P";
        }else{ //if(typeOfSchool.toUpperCase().equals("NON-PROFIT"))
                newLicenseType = "NP";
        }

    //Added by Ankush Kshirsagar for Script#775
                //CWM_ELP_775_WTUA_generateSchoolLicBranchSerial(newLicId);
       }

// Remove the ASI and Template tables from all contacts as they do not belong on the reference contact
/*    if(appMatch("License/Occupational Schools/School/*")){
      removeContactTemplateFromContactExcept(newLicId, "Occupational School");
    }
    else if(appMatch("License/Allied Health/Physical Therapy Facility/*")){
      removeContactTemplateFromContactExcept(newLicId, "PT Compliance Officer");
    }
    else if(appMatch("License/Cosmetology/Shop/*")){
      removeContactTemplateFromContactExcept(newLicId, "Manager");
    }
    else {
      removeContactTemplateFromContactExcept(newLicId, "Business");
    } */
    //new function added by Mark Fahey on 6/15/2016//this function will remove the contact asi from the contacts on the new license and then re-add the template and specific values as needed.
    
removeContactASI(newLicId); 
        logDebug("newLicenseType : " + newLicenseType);

    if(appMatch("License/Real Estate Appraiser/Course/Primary Course Application") || appMatch("License/Real Estate Appraiser/Course/CE Course Application") || appMatch("License/Real Estate Appraiser/Course/Seminar Course Application") || appMatch("License/Real Estate Appraiser/Course/USPAP Course Application")) {
    var newAltID = generateCourseAltID (newLicId, boardName, newLicenseType, cSchool);
    //var newAltID = generateAltID(newLicId, boardName, newLicenseType);
    }
    /* FA 09/07/2018. Ticket# 7547. The reciprocity apps should all result in the usage of the correct 100XXX sequence.
	Issue was the AInfo["Source"]==null when submit an application online. Added another condition AInfo["Source"] == null to fix this issue*/
    else if((appMatch("License/Electricians/Master Electrician/Application") || appMatch("License/Electricians/Journeyman Electrician/Application")) && (AInfo["Source"] == "Reciprocity" || AInfo["Source"] == null)){
         var newAltID = generateEL_AltID(newLicId, boardName, newLicenseType);
    }

    else if(appMatch("License/Real Estate/Reciprocal Broker/Application") || appMatch("License/Real Estate/Reciprocal Salesperson/Application") || appMatch("License/Real Estate Appraiser/Reciprocal Appraiser/Application")){
        var newAltID = generateRE_AltID(newLicId, boardName, newLicenseType);
    }
    else if(appMatch("License/Barbers/Reciprocal/Application")){
        var newAltID = generateBA_AltID(newLicId, boardName, newLicenseType);
    }
                else if (appMatch("License/Occupational Schools/Program-Course/Application"))
                {
        var newAltID = generateOSprogramApprovalAltID(boardName, newLicenseType);
                }
    else {
              logDebug("insuide esle "+newLicId+" Board Name "+boardName+" newLicenseType"+newLicenseType);
        var newAltID = generateAltID(newLicId, boardName, newLicenseType);
    }
    
        var updateCapAltIDResult = aa.cap.updateCapAltID(newLicId, newAltID);
        if (updateCapAltIDResult.getSuccess()){
            logDebug(newLicId + " AltID changed from " + oldAltID + " to " + newAltID);
        }else{
            logDebug("**WARNING: AltID was not changed from " + oldAltID + " to " + newAltID + ": " + updateCapAltIDResult.getErrorMessage());
        
      //debashish.barik JIRA#505 handling for duplicate ID
      if(appMatch("License/Real Estate Appraiser/Course/Primary Course Application") || appMatch("License/Real Estate Appraiser/Course/CE Course Application") || appMatch("License/Real Estate Appraiser/Course/Seminar Course Application") || appMatch("License/Real Estate Appraiser/Course/USPAP Course Application")) {
        
                                  while(true){
  
          logDebug("Trying for next available license sequence number on system.");
          var licSchoolNum = lookup("Real Estate Appraiser Schools", cSchool);
          logDebug("Value of Std Choice :"+licSchoolNum);
          var newAltID1 = generateCourseAltID (newLicId, boardName, newLicenseType, cSchool);
          var updateCapAltIDResult = aa.cap.updateCapAltID(newLicId, newAltID1);
          if(updateCapAltIDResult.getSuccess()){
            logDebug("Found a license Sequence number :"+newLicId + " AltID changed from " + oldAltID + " to " + newAltID1);
newAltID = newAltID1;
            break;
          }
        }//while
      }
         }
newLicId = aa.cap.getCapID(newAltID).getOutput();
        
    
    editAppSpecific("Type Class", newLicenseType, newLicId);
        AltIDChanged = true;
  //  }


    
    /* @desc Code to set the license record for Real Estate Instructor Application.
     * Release B Master Script List ID: 1356 - START     
    */
/*     if (appMatch("License/Real Estate Appraiser/Reciprocal Appraiser/Application"))
    {
        var newLicAInfo = new Array();
        loadAppSpecific(newLicAInfo, newLicId);

        //var asiTypeClass = newLicAInfo["Type Class"];
        useAppSpecificGroupName = true;
        var asiAppType = getAppSpecific("APPRAISER INFORMATION.Please select application type");
        logDebug("==> asiAppType: " + asiAppType);
        //logDebug("Type Class : " + asiTypeClass);

        //Defect ID: 3506
        if (asiAppType && asiAppType != null && asiAppType != ""){
            if(asiAppType == "State-Certified General Real Estate Appraiser"){
                newLicenseType = "CG";
            }
            if(asiAppType == "State-Certified Residential Real Estate Appraiser"){
                newLicenseType = "CR";
            }
            if(asiAppType == "State-Licensed Real Estate Appraiser"){
                newLicenseType = "LA";
            }
        }
            //newLicenseType = asiTypeClass;
        else {
            newLicenseType = "CG";
        }
  } */
       /*  editAppSpecific("TYPE CLASS.Type Class", newLicenseType, newLicId);
        
        //change license Alt ID
        var thisCustomID = newLicId.getCustomID();

        var newAltIDArray = thisCustomID.split("-");
        var newLicIdString = newAltIDArray[2];
        newLicIdString = newLicenseType;        
        //var newAltID = thisCustomID.replace("TR",newLicenseType);
        newAltID = (newAltIDArray[0] +"-"+newAltIDArray[1]+"-"+newLicIdString);
        logDebug("==>old custom id: " + thisCustomID + " newALTID: " + newAltID );
        var updateCapAltIDResult = aa.cap.updateCapAltID(newLicId, newAltID);
        if (updateCapAltIDResult.getSuccess())
        {
            logDebug(newLicId + " AltID changed from " + oldAltID + " to " + newAltID);
        }
            
        else
        {
            logDebug("**WARNING: AltID was not changed from " + oldAltID + " to " + newAltID + ": " + updateCapAltIDResult.getErrorMessage());

        }
        newLicId = aa.cap.getCapID(newAltID).getOutput();
        AltIDChanged = true;
        useAppSpecificGroupName = false; */
    //}

    //Release B Master Script List ID: 1379 - END


//SET THE ALT ID OF THE TRANSACTION LICENSE PROPERLY BASED ON THE CHANGE TO THE TYPE CLASS BEFORE WE CREATE THE LP
    newCap = aa.cap.getCap(newLicId).getOutput();
    logDebug("AltID:" + newCap.capModel.altID);

    updateAppStatus(initStatus, "", newLicId);
  updateTask("License", initStatus, "", "","", newLicId);
    newLicIdString = newLicId.getCustomID();
        
        if (isNaN(newLicIdString))
        {
        var newAltIDArray = newLicIdString.split("-");
        newLicIdString = newAltIDArray[0];      
        }

    if (AltIDChanged) {
        var newAltIDArray = newAltID.split("-");
        newLicIdString = newAltIDArray[0];
    }

    logDebug("newLicIdString:" + newLicIdString);

    //copy all ASI
    if (copyASI && newLicId) 
  {
    //Sagar: Added Changes for script #296
    if(appMatch("License/Public Accountancy/*/Application")){
      
      if((appMatch("License/Public Accountancy/CPA Firm License for LLP/Application")) || (appMatch("License/Public Accountancy/CPA Firm for Partnership/Application"))){
        var ASITtableName = "CURRENT PARTNER INFORMATION";
      }else if(appMatch("License/Public Accountancy/CPA Firm for LLC/Application")){ // Script#294
        var ASITtableName = "CURRENT MEMBER INFORMATION";
      }else if(appMatch("License/Public Accountancy/CPA Firm for Professional Corp/Application")){ // Script#300
        var ASITtableName = "CURRENT SHAREHOLDER INFO";
      }else if(appMatch("License/Public Accountancy/CPA Firm for Business Corp/Application")){ // Script#229
        var ASITtableName = "CURRENT SHAREHOLDER INFO";
      }else{
        var ASITtableName = "";
      }
      
      updateASITIfTableNameDiff(capId, newLicId, ASITtableName);
      if(appMatch("License/Public Accountancy/CPA Firm for Partnership/Application") || appMatch("License/Public Accountancy/CPA Firm for LLC/Application")){
        //Copy the "CPA Officer" ASI field group into the "CPA Officer" ASIT on the license record 
      updateCPAOfficerASItoASITPartnership(newLicId);
      }
}
//Added by Prateek for defect 13230
if(appMatch("License/Public Accountancy/CPA Firm for Professional Corp/Application")){
      logDebug("calling updateASITIfTableCPAOfficer");
                         updateASITIfTableCPAOfficer(capId, newLicId);
   }

    /* if(appMatch("License/Public Accountancy/CPA Firm License for LLP/Application"))
    {
      //Copy the "Partner Information" ASIT field group  label to the "Current Partner Information" ASIT on the license record      
      var ASITtableName = "CURRENT PARTNER INFORMATION";
      updateASITIfTableNameDiff(capId, newLicId, ASITtableName);
      
      //Copy the "CPA Officer" ASI field group into the "CPA Officer" ASIT on the license record 
      updateCPAOfficerASItoASIT(capId, newLicId);
    }else if(appMatch("License/Public Accountancy/CPA Firm License for LLC/Application")){
      //Copy the "Member Information" ASIT field group  label to "Current Member Information" ASIT of the license record      
      var ASITtableName = "CURRENT MEMBER INFORMATION";
      updateASITIfTableNameDiff(capId, newLicId, ASITtableName);
      
      //Copy the "CPA Officer" ASI field group into the "CPA Officer" ASIT on the license record 
      updateCPAOfficerASIInfo(capId, newLicId);
    }else if(appMatch("License/Public Accountancy/CPA Firm License for LLC/Application")){
      
      //Copy the "Shareholder Information" ASIT field group  label to "Current Shareholder Info" ASIT on the license record     
      var ASITtableName = "CURRENT SHAREHOLDER INFO";
      updateASITIfTableNameDiff(capId, newLicId, ASITtableName);
      
      //Copy the "CPA Officer" ASI field group into the "CPA Officer" ASIT on the license record 
      updateCPAOfficerASIInfo(capId, newLicId);
    } */
    else if(appMatch("License/Chiropractor/Chiropractor Facility/Application")){
      var ASITtableName = "CURRENT EMPLOYEE INFORMATION";
      copyDiffASITforChiroFacility(capId, newLicId, ASITtableName);
    }
    else
    {
      copyAppSpecific(newLicId);
      copyASITables(capId, newLicId);
    }
    }
if(appMatch("License/Allied Mental Health/Marriage and Family Therapist/Application") || appMatch("License/Allied Mental Health/Mental Health Counselor/Application") ) {
  
  aa.examination.copyExaminationList(capId, newLicId);
}
  if (appMatch("License/Occupational Schools/School/Application")) {

    //Added by Ankush Kshirsagar for Script#775
                logDebug("calling CWM_ELP_775_WTUA_generateSchoolLicBranchSerial");

    CWM_ELP_775_WTUA_generateSchoolLicBranchSerial(newLicId);
       }

  if(appMatch("License/Cosmetology/Mobile Manicuring/Application")){
logDebug("Maobile MUn::");
    
    var vContName = getAppSpecific("Name");
logDebug("newLicId::"+newLicId.getCustomID());
    logDebug("value of contact person name in the application form is :"+vContName);
useAppSpecificGroupName = true;   
editAppSpecific("CONTACT PERSON.Name",vContName,newLicId);
    useAppSpecificGroupName = false;
    
  }
if(false){
    var vContName = getAppSpecific("Name", capId);
    logDebug("value of contact person name in the application form is :"+vContName+newLicId);
var newLicId1 = aa.cap.getCapID(newAltID).getOutput();
logDebug("newLicId1 "+newLicId1 );
    var appSpecInfoResult = aa.appSpecificInfo.editSingleAppSpecific(newLicId1, "Name", vContName, null);
  if (appSpecInfoResult.getSuccess()) 
  {
    logDebug("Successfully updated Name ASI");
  } else {
    logDebug("WARNING: Name was not updated.");
  }   }
if(appMatch("License/Funeral Directors/Funeral Establishment/Application")){
    var dba = getAppSpecific("New Establishment Doing Business As",capId);
    logDebug("bda value is: "+dba);
    editAppSpecific("Doing Business As Name",dba, newLicId);
    if(editAppSpecific){
      logDebug("edited ASI New Establishment Doing Business As for "+newLicId);
    }
    }//update the approved school value on the real estate appraiser course


  if(isNewSchool !=null) {
    editAppSpecific("Approved School", isNewSchool, newLicId); 
  }
         //Sagar : Added for script #220
  if(appMatch("License/Public Accountancy/CPA/Non-Reporting Application")){
    editAppSpecific("Type of License","Non-Reporting", newLicId);
    if(editAppSpecific)
    {
      logDebug("Updated ASI Type of License for : "+newLicId);
    }
  }
         // For the script#219
  if(appMatch("License/Public Accountancy/CPA/Full Reporting Application")){
    
    editAppSpecific("Type of License","Full Reporting", newLicId);
    if(editAppSpecific){
      logDebug("edited ASI Type of License for "+newLicId);
        }
    }
    //BYellapu : Added for script #301
  if(appMatch("License/Public Accountancy/CPA/Short Form Application")){
    editAppSpecific("Type of License","Full Reporting", newLicId);
    if(editAppSpecific)
    {
      logDebug("Updated ASI Type of License for : "+newLicId);
    }

  }
//CALCULATE THE EXPIRATION DATE OF THE LICENSE BEFORE WE CREATE THE LP. ALL CALLS TO EXPIRATION CALCULATIONS BELONG IN  calculateDPLExpirationDate()
    if (appMatch("License/*/*/Application", capId) || appMatch("License/Real Estate Appraiser/Course/Primary Course Application") || appMatch("License/Real Estate Appraiser/Course/CE Course Application") || appMatch("License/Real Estate Appraiser/Course/Seminar Course Application") || appMatch("License/Real Estate Appraiser/Course/USPAP Course Application") || appMatch("License/Public Accountancy/CPA/Full Reporting Application")|| appMatch("License/Public Accountancy/CPA/Short Form Application") || appMatch("License/Public Accountancy/CPA/Non-Reporting Application")||appMatch("License/Electrology/Electrologist/Out of State Application"))    {
        if (!appMatch("License/Veterinarian/Tufts Individual/Application", capId) && !appMatch("License/Plumbers and Gas Fitters/Inspector/Application", capId))
        {
             logDebug("inhere expdate");
            calculateDPLExpirationDate(newLicId);
        }
        //Add license to set
        //addTransLictoSet(newLicId);

    }
    else
    {
        setLicExpirationDate(newLicId);
    }

    var vExpDate = null;
    if (!appMatch("License/Veterinarian/Tufts Individual/Application", capId))
    {
        // Defect 3371 - START
        try {
            vExpDate = aa.expiration.getLicensesByCapID(newLicId).getOutput().getExpDate();
        } catch (err) {
            logDebug("Expiration date is not set: " + newLicId);
        }
        // Defect 3371 - END
    }


//CREATE THE ASSOCIATED LP IF NEEDED
    if (createRefLP && newLicId) {
            if ( newLicenseType == null)
            {
                //Sagar: Added for script #220
    if(appMatch("License/Public Accountancy/CPA/Non-Reporting Application"))
    {
            newLicenseType = lookup("LICSUBTYPE_TO_TYPECLASS", appTypeArray[1]+"/"+appTypeArray[2]+"/"+appTypeArray[3]);
      editAppSpecific("Type Class", newLicenseType, newLicId);  
    }
    else
    {
      newLicenseType = lookup("LICSUBTYPE_TO_TYPECLASS", appTypeArray[1]+"/"+appTypeArray[2]);
      editAppSpecific("Type Class", newLicenseType, newLicId);  
    }
            }
        logDebug("Creating Ref LP.");
        createRefLicProf(newLicIdString, boardName, newLicenseType, contactType, initStatus, vExpDate);
  //Sagar : EPLACE-2359 : Syncing of B3CONTRA and RSTATE_LIC table for ACA Event scripts
  updateB3contraForCreateLic(newLicId,vExpDate);
        logDebug("License Type passed: " + newLicenseType);
        newLic = getRefLicenseProf(newLicIdString, boardName, newLicenseType);

        if (newLic) {
            logDebug("Reference LP successfully created");
            associateLpWithCap(newLic, newLicId);
        } else {
            logDebug("Reference LP not created");
        }

    //test for kristin
    var peopleattribute = null;
      try
      {
        peopleattribute = newLic.peopleAttributeScriptModels;
    logDebug("getting people attribute");
      }
      catch(err)
      {
        peopleattribute = null;
      }
      if(peopleattribute != null && peopleattribute.length > 0)
      {
        for (var J in peopleattribute)
        {
          var a = peopleattribute[J];
          if (a.attributeName != "MASTER LICENSEE")
            continue;

          a.setAttributeValue("George Catstanza(123-PL-M) - Current");
    logDebug("master licensee set");      
    peopleattribute[J] = a;
        }

        newLic.setAttributes(peopleattribute);
      }

    var res = aa.licenseScript.editRefLicenseProf(newLic);
            if (res.getSuccess()) logDebug("Ref LP master updated.");
            else logDebug("Ref LP master not updated. " + res.getErrorMessage());
            
            //end test
  
    //commented out the below line. all licenses should be added to the syncset if they have an LP
       // if(!appMatch("License/Occupational Schools/Sales Representative/Application") && !appMatch("License/Funeral Directors/Funeral Establishment/Application"))
             addToLicenseSyncSet(newLicId);
    }

  
//CHANGE THE APPLICANT CONTACT TO THE PROPER LICENSE TYPE CONTACT 
    if (licHolderSwitch && newLicId) {
        conToChange = null;
        cons = aa.people.getCapContactByCapID(newLicId).getOutput();
        logDebug("Contacts:" + cons);
        logDebug("Contact Length:" + cons.length);

        for (thisCon in cons) {
            if (cons[thisCon].getCapContactModel().getPeople().getContactType() == contactType) {
                conToChange = cons[thisCon].getCapContactModel();
                p = conToChange.getPeople();
                p.setContactType(licHolderType);
                conToChange.setPeople(p);
                aa.people.editCapContact(conToChange);
                logDebug("Contact type successfully switched to " + licHolderType);

                //added by thp to copy contact-Addres
                var source = getPeople(capId);
                //source = aa.people.getCapContactByCapID(capId).getOutput();
                for (zz in source) {
                    sourcePeopleModel = source[zz].getCapContactModel();
                    if (sourcePeopleModel.getPeople().getContactType() == contactType) {
                        p.setContactAddressList(sourcePeopleModel.getPeople().getContactAddressList());
                        aa.people.editCapContactWithAttribute(conToChange);
                        logDebug("ContactAddress Updated Successfully");
                    }
                }
            }
        }
    }

  // DPL Release C Scripting: Script ID: 234 (added by: Ankush Kshirsagar)
  if(appMatch("License/Funeral Directors/Embalmer Apprentice/Application")) {
    //CWM_ELP_DPL_234_WTUA_copyLPAndContact(capId, newLicId);
  }// END OF SCRIPT: Script ID: 234 (added by: Ankush Kshirsagar)
  
  if (appMatch("License/Allied Mental Health/*/Application")){
    CWM_ELP_DPL_709_wtua_relateMHLicenses(newLicId);
  }
  if (appMatch("License/Allied Health/Physical Therapy Facility/Application")){
      logDebug("newLicId: "+newLicId);
            logDebug("capId: "+capId);
            CWM_ELP_Defect_10731_DPL_WTUA_AddPT(newLicId, capId);
        }
  if (appMatch("License/Funeral Directors/Funeral Assistant/Application")){
  CWM_ELP_DPL_WTUA_440_addFEcontact(newLicId, newLicIdString);
  } 
        if (appMatch("License/Chiropractor/Chiropractor Facility/Application")){
    //9. Set the "Start Date" ASIT of the "Employee Information" ASIT field group on the License record to the issue date of the license-need to be done
    logDebug("Set the Start Date ASIT of the Employee Information start...");
    var vTname = "CURRENT EMPLOYEE INFORMATION";
    var vColName = "Start Date";
    var vCurrentDate = new Date();
    var vColValue = vCurrentDate.getMonth() + 1 + "/" + vCurrentDate.getDate() + "/" + vCurrentDate.getFullYear();
    CWM_ELP_WTUA_DPL_XXX_editColumnOnASIT(newLicId,vTname,vColName,vColValue);
//copy this contatct in the license records aswell.
    //Create a Chiropractor of Record transaction contact to this application record from the License number entered on the "License Number of the proposed Chiropractor of Record" ASI field
    //Copy ALL contacts on this applications to the License record--> THough all contacts are copy in create license the new contatcts added to application(from above Business Logic) is not coping to the 
    //the license so coping this new license coping to 
    CWM_ELP_WTUA_DPL_200_createChiroContact(newLicId);
    //7. Set the "Start Date" ASI field on all the transactional contact records associated to the License record to the current date issue date of the license-done
    var vStartDate = new Date();
    var vCapContactModel = getCapContactModelArray(newLicId);
    for(x in vCapContactModel ){
      var vConMod = vCapContactModel[x];
      logDebug("Seting startdate to current date:"+vStartDate);
      vConMod.setStartDate(vStartDate);
                        aa.people.editCapContact(vConMod);
    }

  }
  // DPL Release C Scripting: Script ID: 751 (added by: Ankush Kshirsagar)
  if(appMatch("License/Occupational Schools/Sales Representative/Application")) {
    CWM_751_WTUA_updateLicenseLPAndContact(newLic, newLicId);
  }
  //debashish.barik ,Script#230,Dt:3/22/2016
  if (appMatch("License/Cosmetology/Shop/Application")) {
    CWM_230_WTUA_updateLicenseLP(newLicId);
  }
        // Created by Prateek Shinde for Defect#11457
        if(appMatch("License/Occupational Schools/Program-Course/Application")) {
                logDebug("calling CWM_CR_11457_WTUA_ChildRecord_OS");
    CWM_CR_11457_WTUA_ChildRecord_OS(newLicId);
  }
        // Created by Vishakha for Defect#11881 
  if(appMatch("License/Occupational Schools/Sales Representative/Application")) {
    logDebug("calling CWM_CR_11881_WTUA_ChildRecord_OS");
    CWM_CR_11881_WTUA_ChildRecord_OS(newLicId);
  }
  //debashish.barik ,RTC#11796
  if(appMatch("License/Chiropractor/Chiropractor Facility/Application")) {
    logDebug("calling CWM_ELP_DPL_WTUA_linkChiropractorLic2ChiropractorFacility()");
    CWM_ELP_DPL_WTUA_linkChiropractorLic2ChiropractorFacility(newLicId);
  }
  //debashish.barik ,RTC#10554
  if(appMatch("License/Barbers/Shop/Application")) {
    logDebug("calling CWM_ELP_WTUA_associatedLPToLicenseBarberCopyContacts()");
    CWM_ELP_WTUA_associatedLPToLicenseBarberCopyContacts(newLicId);
  }
         
        // Tofek, Defect#12736
        if(appMatch("License/Hearing Instrument/Apprentice/Application")) {
    //logDebug("calling CWM_ELP_WTUA_associatedLPToLicenseHearingInstrument()");
    //CWM_ELP_WTUA_associatedLPToLicenseHearingInstrument(newLicId);
  }
  
   if (appMatch("License/Dispensing Opticians/Dispensing Optician/Application")){
    //Added by Evan Cai for EPALCE-1530 05-16-2
    calculateDOexpirationDateForLicense(newLicId);
  }
    return newLicId;
}
// END OF FUNCTION: createLicense

/*-------------------------------------------------------------------------------------------------------/
  Functions to update the contact ASI template based on Contact type - START
  --------------------------------------------------------------------------------------------------------*/

function createRefContactsFromCapContactsAndLinkForMA(pCapId, contactTypeArray, ignoreAttributeArray, replaceCapContact, overwriteRefContact, refContactExists)
{ 
  //showDebug = 3;
  // contactTypeArray is either null (all), or an array or contact types to process
  //
  // ignoreAttributeArray is either null (none), or an array of attributes to ignore when creating a REF contact
  //
  // replaceCapContact not implemented yet
  //
  // overwriteRefContact -- if true, will refresh linked ref contact with CAP contact data
  //
  // refContactExists is a function for REF contact comparisons.
  //
  // Version 2.0 Update:   This function will now check for the presence of a standard choice "REF_CONTACT_CREATION_RULES".
  // This setting will determine if the reference contact will be created, as well as the contact type that the reference contact will
  // be created with.  If this setting is configured, the contactTypeArray parameter will be ignored.   The "Default" in this standard
  // choice determines the default action of all contact types.   Other types can be configured separately.
  // Each contact type can be set to "I" (create ref as individual), "O" (create ref as organization),
  // "F" (follow the indiv/org flag on the cap contact), "D" (Do not create a ref contact), and "U" (create ref using transaction contact type).

  var standardChoiceForBusinessRules = "REF_CONTACT_CREATION_RULES";
  var ingoreArray = new Array();
  if (arguments.length > 1)
    ignoreArray = arguments[1];
  var defaultContactFlag = lookup(standardChoiceForBusinessRules, "Default");
  var c = aa.people.getCapContactByCapID(pCapId).getOutput();
  var cCopy = aa.people.getCapContactByCapID(pCapId).getOutput(); // must have two working datasets
  var vTempCC = aa.people.getCapContactByCapID(pCapId).getOutput(); // One More Copy
var ipPeopleModel = "";
var ipASITGroupName = "SORB-ASIT";
var ipASITSubgroupName = "SORB";
var vTable = "";
var mySorbTable = new Array();
  mySorbTable["SORB_LEVEL"] = "0";
  mySorbTable["PROCESSING_DATE"] = "01/01/2015";


  
  
  
  for (var i in c)
  {
    var ruleForRefContactType = "U"; // default behavior is create the ref contact using transaction contact type
    var con = c[i];
    var p = con.getPeople();
    var contactFlagForType = lookup(standardChoiceForBusinessRules, p.getContactType());
    var addressList = aa.address.getContactAddressListByCapContact(con.getCapContactModel()).getOutput();
    if (!defaultContactFlag && !contactFlagForType) // standard choice not used for rules, check the array passed
    {
      if (contactTypeArray && !exists(p.getContactType(), contactTypeArray))
        continue; // not in the contact type list.  Move along.
    }
    if (!contactFlagForType && defaultContactFlag) // explicit contact type not used, use the default
    {
      ruleForRefContactType = defaultContactFlag;
    }
    if (contactFlagForType) // explicit contact type is indicated
    {
      ruleForRefContactType = contactFlagForType;
    }
    if (ruleForRefContactType.equals("D"))
      continue;
    var refContactType = "";
    switch (ruleForRefContactType)
    {
      case "U":
        refContactType = p.getContactType();
        break;
      case "I":
        refContactType = "Individual";
        break;
      case "O":
        refContactType = "Organization";
        break;
      case "F":
        if (p.getContactTypeFlag() && p.getContactTypeFlag().equals("organization"))
          refContactType = "Organization";
        else
          refContactType = "Individual";
        break;
    }
    var refContactNum = con.getCapContactModel().getRefContactNumber();
    if (refContactNum) // This is a reference contact.   Let's refresh or overwrite as requested in parms.
    {
      if (overwriteRefContact)
      {
        //need to grab the existing sorb data off the reference contact and save as a var and then re-add to updated ref contact
        //as we do not want to overwrite sorb information.
        ipPeopleModel = aa.people.getPeople(refContactNum).getOutput();
        //logDebug("people model: " + ipPeopleModel);
        //logDebug("group name: " + ipASITGroupName);
        //logDebug("sub group: " + ipASITSubgroupName);
                                var vSorbTable = getRefContactASITable(ipPeopleModel,"SORB-ASIT","SORB");

/* if (typeof(vSorbTable) == "string")
  logDebug(vSorbTable);
else
{
  aa.print("Table SORB successfully loaded with " + vSorbTable.length + " rows.");
  for (var vCounter1 in vSorbTable)
  {
    var vRow = vSorbTable[vCounter1];
    for (var vField in vRow)
      logDebug("Row: " + (parseInt(vCounter1) + 1) + " Field: " + vField + ": " + vRow[vField]);
  }
} */

        p.setContactSeqNumber(refContactNum); // set the ref seq# to refresh
        p.setContactType(refContactType);
        var a = p.getAttributes();
        if (a)
        {
          var ai = a.iterator();
          while (ai.hasNext())
          {
            var xx = ai.next();
            xx.setContactNo(refContactNum);
          }
        }
        var r = aa.people.editPeopleWithAttribute(p, p.getAttributes());
        if (!r.getSuccess())
        {
          logDebug("WARNING: couldn't refresh reference people : " + r.getErrorMessage());
        }
        else
        {
          logDebug("Successfully refreshed ref contact #" + refContactNum + " with CAP contact data");
          //------Function to update the ASI templatebased on contact type------
          p = cCopy[i].getPeople();
          updateRefContactASI(refContactNum,p);
          pl = aa.people.getPeople(refContactNum).getOutput();
          aa.people.syncCapContactToReference(cCopy[i].getCapContactModel(),pl);
          //go ahead and re-copy sorb information from variable and store with updated ref contact
          //vTable = appendRefContactASITable(ipPeopleModel,ipASITGroupName,ipASITSubgroupName,vSorbTable)
          //addRefContactASITTableRow(pl, ipASITGroupName, ipASITSubgroupName, vSorbTable)
          //logDebug("append result: " + vTable);
          setContactsSyncFlag("N",pCapId);
                                        appendRefContactASITable(pl,"SORB-ASIT","SORB",vSorbTable);
          
          //--------------------------------------------------------------------
        }

      }
      if (replaceCapContact)
      {
        // To Be Implemented later.   Is there a use case?
      }
    }
    else // user entered the contact freehand.   Let's create or link to ref contact.
    {
      var ccmSeq = p.getContactSeqNumber();
      var existingContact = refContactExists(p);
      var p = cCopy[i].getPeople(); // get a fresh version, had to mangle the first for the search
      if (existingContact) // we found a match with our custom function.  Use this one.
      {
        refPeopleId = existingContact;
      }
      else
      {
        var a = p.getAttributes();
        if (a)
        {
          //
          // Clear unwanted attributes
          var ai = a.iterator();
          while (ai.hasNext())
          {
            var xx = ai.next();
            if (ignoreAttributeArray && exists(xx.getAttributeName().toUpperCase(), ignoreAttributeArray))
              ai.remove();
          }
        }
        p.setContactType(refContactType);
        var r = aa.people.createPeopleWithAttribute(p, a);
        if (!r.getSuccess())
        {
          logDebug("WARNING: couldn't create reference people : " + r.getErrorMessage());
          continue;
        }
        //
        // createPeople is nice and updates the sequence number to the ref seq
        //

        var p = cCopy[i].getPeople();
        var refPeopleId = p.getContactSeqNumber();
        logDebug("Successfully created reference contact #" + refPeopleId);

        //------Function to update the ASI templatebased on contact type------
        updateRefContactASI(refPeopleId,p);
        //--------------------------------------------------------------------

        // Need to link to an existing public user.
        var getUserResult = aa.publicUser.getPublicUserByEmail(con.getEmail())
        if (getUserResult.getSuccess() && getUserResult.getOutput())
        {
          var userModel = getUserResult.getOutput();
          logDebug("createRefContactsFromCapContactsAndLink: Found an existing public user: " + userModel.getUserID());
          if (refPeopleId)
          {
            logDebug("createRefContactsFromCapContactsAndLink: Linking this public user with new reference contact : " + refPeopleId);
            aa.licenseScript.associateContactWithPublicUser(userModel.getUserSeqNum(), refPeopleId);
          }
        }
      }
      //
      // now that we have the reference Id, we can link back to reference
      //
      var ccm = vTempCC[i].getCapContactModel();
      ccm.setRefContactNumber(refPeopleId);
      r = aa.people.editCapContact(ccm);

      //showDebug = true;
      logDebug(addressList.length);
      logDebug(vTempCC[i].getPeople().getContactSeqNumber());
      //contactAddressModel.setEntityID(parseInt(vTempCC[i].getPeople().getContactSeqNumber()));
      for (add in addressList)
      {
        var transactionAddress = false;
        contactAddressModel = addressList[add].getContactAddressModel();
        if (contactAddressModel.getEntityType() == "CAP_CONTACT")
        {
          //This is a transaction contact address.  We need to update the entity ID
          //and then create and XREF entry for the transaction.
          transactionAddress = true;
          //Update the Contact ID on the address object
          contactAddressModel.setEntityID(parseInt(refPeopleId));
          logDebug("Set ID on Address to " + parseInt(refPeopleId) );
          //Update the entity type to be appropriate
          contactAddressModel.setEntityType("CONTACT");
          //commit the edits and establish link to the ref contact
          aa.address.editContactAddress(contactAddressModel);

          // build Xref model for linking the transaction ccontact to the reference address
          var Xref = aa.address.createXRefContactAddressModel().getOutput();
          Xref.setContactAddressModel(contactAddressModel);
          Xref.setAddressID(addressList[add].getAddressID());
          Xref.setEntityID(parseInt(vTempCC[i].getPeople().getContactSeqNumber()));
          Xref.setEntityType("CONTACT");
          Xref.setCapID(pCapId);
          // commit address link to ref contact
          aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
          logDebug("Committed Contact Address");
        }
            }
      if (!r.getSuccess())
      {
        logDebug("WARNING: error updating cap contact model : " + r.getErrorMessage());
      }
      else
      {
        logDebug("Successfully linked ref contact " + refPeopleId + " to cap contact.");
        pl = aa.people.getPeople(refPeopleId).getOutput();
        aa.people.syncCapContactToReference(vTempCC[i].getCapContactModel(),pl);
        setContactsSyncFlag("N",pCapId);
      }
    } // end if user hand entered contact
  } // end for each CAP contact
}

function createRefLicProf(rlpId, ipBoadName, rlpType, pContactType, initStatus, expDate) {
  //
  //Creates/updates a reference licensed prof from a Contact
  //06SSP-00074, modified for 06SSP-00238

  var rlpBoadName = getLegalBoardName(ipBoadName);

  var updating = false;
  conArr = getPeople(capId);
  if (!conArr.length) {
    logDebug("**WARNING: No contact available");
    return false;
  }
  var newLic = getRefLicenseProf(rlpId, ipBoadName, rlpType);
  if (newLic)
   {
    updating = true;
    logDebug("Updating existing Ref Lic Prof : " + rlpId);
  } 
  else
    var newLic = aa.licenseScript.createLicenseScriptModel();
  //get contact record
  var cont = null;
  var contBus = null;
  var contFound = false;
  var contBusFound = false;
    for (yy in conArr)
  {
    if (contFound == false && (pContactType != "Business" && pContactType != "Funeral Establishment" && pContactType != "Massage Therapy Establishment" && pContactType != "Occupational School") && pContactType == conArr[yy].getCapContactModel().getPeople().getContactType())
     {
        cont = conArr[yy];
        contFound = true;
      }
  if (contBusFound == false && (conArr[yy].getCapContactModel().getPeople().getContactType() == "Business" || conArr[yy].getCapContactModel().getPeople().getContactType() == "Funeral Establishment" || conArr[yy].getCapContactModel().getPeople().getContactType() == "Massage Therapy Establishment" || conArr[yy].getCapContactModel().getPeople().getContactType() == "Occupational School"))
    {
            contBus = conArr[yy];
            contBusFound = true;
      }
    if (contFound && contBusFound)
      break;

  }

  if (pContactType != "Business" && !contFound) 
  {
      logDebug("**WARNING: No Contact found of type: " + pContactType);
  }
  if (!contBusFound) 
  {
        logDebug("**WARNING: No Contact found of type: Business");
  }
  var addr = null;
  if (cont) addr = getCapContactAddressByType(cont, "Mailing Address");
  else if (contBus) {// added below if for JIRA 3880
            addr = getCapContactAddressByType(contBus, "Business Address");
    if(!addr)
      addr = getCapContactAddressByType(contBus, "Mailing Address");
    
    }
  if (ipBoadName == "EM" && (rlpType == "3" || rlpType == "6"))
  {
    addr = getCapContactAddressByType(cont, "Business Address");
  }

  var vAL3 = "";
  if (addr) vAL3 = addr.getAddressLine3();

  var vLicType  = appTypeArray[1]+"/"+appTypeArray[2];
  if (vLicType == "Engineers and Land Surveyors/Professional Engineer") {
    vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+getASI("Based on education, experience & exams, which branch/discipline best matches your qualifications?",capId)+" Engineer");  
  }
  else if(vLicType == "Engineers and Land Surveyors/Temporary Permit")
  {
    vLicType = lookup("Lookup:LP to Record Type",appTypeArray[2]);
  }
  else if ((vLicType == "Cosmetology/Forfeiture") || (vLicType == "Cosmetology/Out of Country") || (vLicType == "Cosmetology/Out of State"))
  {
    //Sagar: Added changes for Pearson Vue interface for HD board
    if((ipBoadName == "HD") && (rlpType == "1"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Type 1");
    }
    else if((ipBoadName == "HD") && (rlpType == "2"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Type 2");
    }
    else if((ipBoadName == "HD") && (rlpType == "3"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Type 3");
    }
    else if((ipBoadName == "HD") && (rlpType == "4"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Type 4");
    }
    else if((ipBoadName == "HD") && (rlpType == "6"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Type 6");
    }
      else if((ipBoadName == "HD") && (rlpType == "7"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Type 7");
    }
      else if((ipBoadName == "HD") && (rlpType == "8"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Type 8");
    }
    else if((ipBoadName == "HD") && (rlpType == "Forfeiture"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Forfeiture");
    }
  }
  else if (vLicType == "Cosmetology/Instructor")
  {
    if((ipBoadName == "HD") && (rlpType == "4"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Type 4");
    }
    else if((ipBoadName == "HD") && (rlpType == "8"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Type 8");
    }
  }
  else if (vLicType == "Cosmetology/School")
  {
    if((ipBoadName == "HS") && (rlpType == "12"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Manicuring School");
    }
    else if((ipBoadName == "HS") && (rlpType == "10"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Aesthetician School");
    }
    else if((ipBoadName == "HS") && (rlpType == "11"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Advanced Training Institute");
    }
    else {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"School");     
    }
  }
  //Rishi - Defect 12675: Adding condition for Barbers Out of Country Application.
  else if ((vLicType == "Barbers/Out of Country Apprentice") || (vLicType == "Barbers/Out of State") || (vLicType == "Barbers/Lapsed"))
  {
        if((ipBoadName == "BR") && (rlpType == "A"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Apprentice");
    }
        else if((ipBoadName == "BR") && (rlpType == "M"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Master");
    }

  }
  else if ((vLicType == "Barbers/Out of Country Master") || (vLicType == "Barbers/Out of State") || (vLicType == "Barbers/Lapsed"))
  {
        if((ipBoadName == "BR") && (rlpType == "M"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Master");
    }
        else if((ipBoadName == "BR") && (rlpType == "A"))
    {
      vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+"Apprentice");
    }
  }
  
  else if (vLicType == "Barbers/Reciprocal") {
    vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+ getAppSpecific("What type of Barber license are you applying for?", capId));  
  }

  else
  {
    vLicType = lookup("Lookup:LP to Record Type",appTypeArray[1]+"/"+appTypeArray[2]);
  }
  /* 
  var vLicType = appTypeArray[1] + " " + appTypeArray[2];
  if (vLicType == "Sheet Metal Business License") vLicType = "Sheet Metal Business";
  if (vLicType == "Veterinarian Tufts Individual") vLicType = "Veterinarian Tufts Practitioner";
    if (vLicType == "Veterinarian Veterinarian License") vLicType = "Veterinarian";
    if (vLicType == "Plumbers and Gas Fitters Business") vLicType = appTypeArray[2];
    if (vLicType == "Plumbers and Gas Fitters Apprentice") vLicType = "Apprentice Plumber"; 
    if (vLicType == "Plumbers and Gas Fitters Inspector") vLicType = appTypeArray[2]; 
    if (vLicType == "Plumbers and Gas Fitters Journeyman") vLicType = appTypeArray[2];  
    if (vLicType == "Plumbers and Gas Fitters LP Installer") vLicType = appTypeArray[2];  
    if (vLicType == "Plumbers and Gas Fitters LTD LP Installer") vLicType = appTypeArray[2];    
    if (vLicType == "Plumbers and Gas Fitters Master") vLicType = appTypeArray[2];    
  if (vLicType == "Plumbers and Gas Fitters Gas Fitters Business") vLicType = appTypeArray[2];
  if (vLicType == "Plumbers and Gas Fitters Gas Fitter Master") vLicType = appTypeArray[2];
  if (vLicType == "Plumbers and Gas Fitters Gas Fitter Apprentice") vLicType = "Apprentice Gas Fitter";
    if (vLicType == "Psychologist Psychologist") vLicType = appTypeArray[2];
    if (vLicType == "Dietitians and Nutritionists Dietitians and Nutritionists") vLicType = appTypeArray[2]; 
    if (vLicType == "Health Officers Certified Health Officer") vLicType = appTypeArray[2];  */
  if (vLicType == "Private Occupational School" || vLicType == "Funeral Establishment License" || vLicType == "Massage Therapy Facility - Multiple Therapist Facility" || vLicType == "Massage Therapy Facility - Solo Therapist Facility"  || vLicType == "Sheet Metal Business" || vLicType == "Sheet Metal School" || vLicType == "Veterinarian Tufts Institution" || vLicType == "Business" || vLicType == "Gas Fitting Business" || vLicType == "Real Estate Business" || vLicType == "Plumbing Business")
  {

    addr = null;
    addrResult = aa.address.getAddressByCapId(capId);
    if (addrResult.getSuccess()) {
      var addrs = addrResult.getOutput();
      if (addrs && addrs.length > 0)
        addr = addrs[0];
    }
  }

  newLic.setServiceProviderCode(aa.getServiceProviderCode());
  newLic.setAgencyCode(aa.getServiceProviderCode());
  newLic.setAuditDate(sysDate);
  newLic.setAuditID(currentUserID);
  newLic.setAuditStatus("A");
  newLic.setStateLicense(rlpId);
  newLic.setBusinessLicense(rlpType);
  newLic.setLicenseBoard(rlpBoadName);
  newLic.setLicenseType(vLicType);
  newLic.setLicOrigIssDate(sysDate);
  newLic.setLicenseIssueDate(sysDate);
  newLic.setLicenseExpirationDate(expDate);
  if (contBus)
  {
    var peopBus = contBus.getPeople();
    newLic.setBusinessName(peopBus.getBusinessName());
    if(AInfo["Doing Business As Name"]){
    newLic.setBusinessName2(AInfo["Doing Business As Name"]);
    }
    else if(AInfo["Doing Business As"]){
    newLic.setBusinessName2(AInfo["Doing Business As"]);
    }     
    newLic.setFein(peopBus.getFein());
    newLic.setPhone1CountryCode(peopBus.getPhone1CountryCode());
    newLic.setPhone1(peopBus.getPhone1());
    newLic.setEMailAddress(peopBus.getEmail());     
  }

  if (cont)
  {
    var peop = cont.getPeople();
    newLic.setFein(peop.getFein());
    newLic.setContactFirstName(peop.getFirstName());
    newLic.setContactMiddleName(peop.getMiddleName());
    newLic.setContactLastName(peop.getLastName());
    newLic.setSuffixName(peop.getNamesuffix());
    newLic.setSocialSecurityNumber(peop.getSocialSecurityNumber());
    newLic.setMaskedSsn(peop.getMaskedSsn())
    newLic.setEMailAddress(peop.getEmail())
    newLic.setPhone1CountryCode(peop.getPhone1CountryCode());
    newLic.setPhone1(peop.getPhone1());
    newLic.setPhone2CountryCode(peop.getPhone2CountryCode());
    newLic.setPhone2(peop.getPhone2());
    newLic.setPhone3CountryCode(peop.getPhone3CountryCode());
    newLic.setPhone3(peop.getPhone3());
    newLic.setFaxCountryCode(peop.getFaxCountryCode());
    newLic.setFax(peop.getFax());
        newLic.getLicenseModel().setBirthDate(cont.getCapContactModel().getBirthDate());
  }


  if (addr)
  {
    //Sagar : PRD Defect 4160 Fix - START
    if (addr.getHouseNumberAlphaStart() == null)
    {
      newLic.setAddress1(" " + addr.getAddressLine1());
    }
    else
    {
      newLic.setAddress1(addr.getHouseNumberAlphaStart() + " " + addr.getAddressLine1());
    }
    //Sagar : PRD Defect 4160 Fix - END
    
    newLic.setAddress2(addr.getAddressLine2());
    newLic.setAddress3(vAL3);
    newLic.setCity(addr.getCity());
    newLic.setState(addr.getState());
    newLic.setZip(addr.getZip());
    newLic.setContryCode(addr.getCountryCode());
    // Added below line to fix defect 2841. Country was not set on Ref license
        newLic.getLicenseModel().setCountryCode(addr.getCountryCode());
    newLic.setCountry(addr.getCountryCode());
  }
  newLic.setLicState(licenseState);
  newLic.setPolicy(initStatus);
  newLic.setWcExempt("Y");
  //made change to store the board code in the comments field and not the full board name
  //newLic.setComment(rlpBoadName);
  newLic.setComment(ipBoadName);
  if (AInfo["Insurance Amount"])
      newLic.setInsuranceAmount(parseFloat(AInfo["Insurance Amount"]));
  if (AInfo["Insurance Exp Date"])
      newLic.setInsuranceExpDate(aa.date.parseDate(AInfo["Insurance Exp Date"]));
  if (AInfo["Business License Exp Date"])
    newLic.setBusinessLicExpDate(aa.date.parseDate(AInfo["Business License Exp Date"]));

  if (updating)
    myResult = aa.licenseScript.editRefLicenseProf(newLic);
  else
    myResult = aa.licenseScript.createRefLicenseProf(newLic);
  if (myResult.getSuccess()) {
    logDebug("Successfully added/updated License No. " + newLic.getStateLicense() + ", License Board: " + newLic.getLicenseBoard() + ", Type: " + newLic.getLicenseType());
    logMessage("Successfully added/updated License No. " + newLic.getStateLicense() + ", License Board: " + newLic.getLicenseBoard() + ", Type: " + newLic.getLicenseType());
    return true;
  } else {
    logDebug("**ERROR: can't create ref lic prof: " + myResult.getErrorMessage());
    logMessage("**ERROR: can't create ref lic prof: " + myResult.getErrorMessage());
    return false;
  }
}

/* @desc This method performs the following when an application/renewal is approved:
*   1. Check if discipline background questions are all No. 
*   2. If so then waive Background Questions Conditions
* Release B Master Script List ID: 854
* Based on 
*       waiveConditionNotNameChange()
*       CWM_ELP_912_DPL_ASA_addConditionForTemporaryAppraiser
*/
function CWM_DEFECT_4215_ASA_DPL_waiveConditionVerifyBackgroundQuestions() {
try{
logDebug("Inside Conditions Function");   
var vContact = "Applicant";

if(arguments.length == 1){
  var vContact = arguments[0];
} 
var funcName = "CWM_DEFECT_4215_ASA_DPL_waiveConditionVerifyBackgroundQuestions";
    var CondType = "Application Checklist";
    var CondDesc = "Verification of Background Questions";


    // logDebug("Checking if '" + CondDesc + "' condition can be waived based on discipline Background Questions.");
    var answer = "N";
    var capContactResult = aa.people.getCapContactByCapID(capId);
    if (capContactResult.getSuccess()) {
        capContactResult = capContactResult.getOutput();
        for (yy in capContactResult) {
            thisCapContact = capContactResult[yy];
            thisPeople = thisCapContact.getPeople();
            if (thisPeople.contactType == vContact) {
                var asiTemplate = thisPeople.template;
                if (asiTemplate != null) {
                    var templategroup = asiTemplate.getTemplateForms();
                    if (answer == "N") {
                        var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "1. Has disciplinary action been taken against you by a licensing board in any jurisdiction?");
                        if (question)
                            answer = question.getDefaultValue();
              
                    }
                    if (answer == "N") {
                        var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "2. Are you the subject of pending disciplinary action by a licensing board in any jurisdiction?");
                        if (question)
                            answer = question.getDefaultValue();
              
          }
                    if (answer == "N") {
                        var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "3. Have you voluntarily surrendered a professional license to a licensing board in any jurisdiction?");
                        if (question)
                            answer = question.getDefaultValue();
          }
                    if (answer == "N") {
                        var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "4. Have you ever applied for and been denied a professional license in any jurisdiction?");
                        if (question)
                            answer = question.getDefaultValue();

          }
                    if (answer == "N") {
                        var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "5. Have you been convicted of a felony or misdemeanor in any jurisdiction?");
                        if (question) 
                            answer = question.getDefaultValue();
          }
          

                }
            }
        }
    }
  
logDebug("END value of answer: "+answer);
    if (answer == "N") {
        if (appHasCondition(CondType, null, CondDesc, null)) {
            conditionUpdated = editCapConditionStatus(CondType, CondDesc, "Met", "Not Applied");
            if (conditionUpdated)
                logDebug(CondDesc + " was updated to Met & Not Applied.");
            else
                logDebug(CondDesc + " was not updated with Met & Not Applied.");
        } else {
            logDebug(CondDesc + " was not found so it could not be waived.");
        }
    } else {
        logDebug(CondDesc + " was not waived. Discipline History has items to be reviewed.");
    }
  }catch(err){
  if(true){
  cancel = true;
  showMessage = true;
  comment("Error Catched: "+err.message);
  }
}
}




function cwm_dpl_defect4352_waiveLicenseEquivCon(){
if (appMatch("License/Plumbers and Gas Fitters/Master/Application") || appMatch("License/Plumbers and Gas Fitters/Journeyman/Application") || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Journeyman/Application") || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Master/Application") || appMatch("License/Plumbers and Gas Fitters/LP Installer/Application"))
{
  var licInOtherState = AInfo["Do you have a substantially equivalent license in Massachusetts, another state or country?"];
  logDebug("ASI value: " + licInOtherState);

  if (licInOtherState == "Yes")
  {
    waiveCondition("Verification of Education");
    waiveCondition("Verification of Work Experience");
  }

  if (licInOtherState == "No")
  {
    waiveCondition("Record of Standing");
  }
}
}/* Release B Script List ID: 1009
*  CRCA Event
*/
function CWM_ELP_1009_CRCA_DPL_updateContEducWaiveronLicense(){
  try{
    useAppSpecificGroupName = true;

    var vParentCapID = getParentCapID4Renewal(capId);
    logDebug("vParentCapID: " + vParentCapID.getCustomID());
    if(vParentCapID){
      var vParentContEducWaiver = getAppSpecific("CONTINUING EDUCATION.Continuing Education Waiver", vParentCapID);
      if(vParentContEducWaiver == "Temporary"){
        editAppSpecific("CONTINUING EDUCATION.Continuing Education Waiver", "Not Applicable", vParentCapID);
        logDebug("ASI updated to: " + getAppSpecific("CONTINUING EDUCATION.Continuing Education Waiver", vParentCapID));
      }
    }
  }
  catch(err){
    logDebug("Error on function CWM_ELP_1009_CRCA_DPL_updateContEducWaiveronLicense. Please contact system administrator. " + err.stack) ;
  }
}
/* @desc This function sets the expiration date on the license
 * Release B Master Script List ID: 1013
 */
function CWM_ELP_1013_WTUA_DPL_SetContinueEducationWaiver()
{
  try{
    var newValue = "Not Applicable";
    var asiValue = getAppSpecificValue("Continuing Education Waiver", capId);
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions") && asiValue == "Temporary"){
        var vParentCapID = getParentLicenseCapID(capId);
            if(vParentCapID){
                editAppSpecific("CONTINUING EDUCATION WAIVER.Continuing Education Waiver", newValue, vParentCapID);
            }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1013_WTUA_DPL_SetContinueEducationWaiver, Please contact administrator");
  }
}
/* @desc 1. Close the workflow of Amendment record.
2. On the associated transnational license record, if the Current Employer contact does not exists, then:
           a. Create a new CapContact using the 'Present Employer/Business' ASI group of Amendment.
           b. Add address to this capContact from the above ASI group.
           c. Sync this capContact with Refrence contact.
3. If Current Employer contact exists, then delete that capContact and follow steps a, b, c from the Step 2 above.
 * Release B Master Script List ID: 715
 */
function CWM_ELP_1030_ASA_DPL_EmpChangeAmendUpdateWFCopytoLic(capId)
{
  //Close workflow of Amendments
  closeTask("Intake", "Ready for Validation", "Updated via script.", "Updated via script.");
  closeTask("Validate", "Completed", "Updated via script.", "Updated via script.");
  
  //Access ASI fields of Amendment
  var companyName   = getAppSpecific("Company Name");
  var buildingNo   = getAppSpecific("Building Number");
  var stAddr1   = getAppSpecific("Street 1 Address");
  var stAddr2   = getAppSpecific("Street 2 Address");
  var city   = getAppSpecific("City/Town");
  var state   = getAppSpecific("State");
  var zip   = getAppSpecific("Zip Code");
  var email   = getAppSpecific("Email");
  
  logDebug("ASI fields on amendment: " + companyName + " "+ buildingNo+ " "+ stAddr1 + " "+ stAddr1 + " "+ city + " "+ state + " "+ zip + " "+ email);
  
  //Identify parent license of amendment
  var vParentCapID = getParent();
  
  //Find if Current employer Contact exists. If exists, then delete from Cap
  if (vParentCapID)
  {     
    var parentRecordId = vParentCapID.getCustomID();
    logDebug("Parent License Alt id: " + parentRecordId);
    var capContactResult=aa.people.getCapContactByCapID(vParentCapID);
    if(capContactResult.getSuccess())
    {
      capContactResult=capContactResult.getOutput();
      for(i in capContactResult)
      {   
        var peopleModel= capContactResult[i].getPeople();
        logDebug("Contact type on license: " + peopleModel.getContactType());       
        if(peopleModel.getContactType()=="Current Employer" )
        {
          var capContactId = peopleModel.getContactSeqNumber();       
          var delResult = aa.people.removeCapContact(vParentCapID, capContactId);
          if(!delResult.getSuccess())
          {
            logDebug("Deletion unsuccessful");          
          }
          else
          {
            logDebug("Deletion successful");            
          }
        }
      }
    }
    
    //Create a new cap Contact using the ASI values obtained from the Amendment.
    var fvCapContactModel = new com.accela.aa.aamain.people.CapContactModel();
    var fvPeople = fvCapContactModel.getPeople();
    fvPeople.setAuditStatus("A");
    fvCapContactModel.setPeople(fvPeople);
    fvCapContactModel.setContactType("Current Employer");
// commented for defect JIRA 3845    
//fvCapContactModel.setPrimaryFlag("Y");
    fvCapContactModel.setBusinessName(companyName);
    fvCapContactModel.setEmail(email);
    fvCapContactModel.setCapID(vParentCapID);

    var fvResult = aa.people.createCapContactWithAttribute(fvCapContactModel);
    if (!fvResult)
    {
      logDebug("Contact creation unsuccessful");          
    }
    else
    {
      logDebug("Contact creation successful");            
    }
    var fvContactID = fvCapContactModel.getContactSeqNumber();
    logDebug("Sequence number of the new contact:" + fvContactID);
    
    //Add Address to the Contact
    var fvCapContactAddressModel = new com.accela.orm.model.address.ContactAddressModel();
    
    fvCapContactAddressModel.setHouseNumberAlphaStart(buildingNo);
    fvCapContactAddressModel.setAddressLine1(stAddr1);
    fvCapContactAddressModel.setAddressLine2(stAddr2);
    fvCapContactAddressModel.setCity(city);
    fvCapContactAddressModel.setState(state);
    fvCapContactAddressModel.setZip(zip);
    fvCapContactAddressModel.setEntityType("CAP_CONTACT");
    fvCapContactAddressModel.setEntityID(parseInt(fvContactID));
    var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
    fvCapContactAddressModel.setContactAddressPK(newPK);
    aa.address.createCapContactAddress(vParentCapID, fvCapContactAddressModel);   
  
  //Sync CapContact and Ref Contact
  syncContacts(vParentCapID);
      //update the reference license
  var licProfObj = getRefLicenseProf(parentRecordId);
  //Sagar : EPLACE-2359 : Syncing of B3CONTRA and RSTATE_LIC table for ACA Event scripts
  if (!licProfObj) {
    licProfObj = getRefLicenseProfWithLicNbrAndTypeClass(vParentCapID.getCustomID());
  }
     if (licProfObj) {
    licProfObj.setBusinessName(companyName);
    myResult = aa.licenseScript.editRefLicenseProf(licProfObj);
    addToLicenseSyncSet(vParentCapID);
    logDebug("reference license updated")
    }
    var licenseRecordId = vParentCapID.getCustomID();
    if(licenseRecordId)
    {
      var scanner = licenseRecordId.split("-");
      var b1LicNbr = scanner[0];
      var boardCode = scanner[1];
      var typeClass = scanner[2];

      var capLpsB3contra = getLicenseProfessional(vParentCapID);
      for (var thisCapLpNum in capLpsB3contra) 
      {
        var licenseProfessionalScriptModel = capLpsB3contra[thisCapLpNum];  
        
        var licNbrB3contra = capLpsB3contra[thisCapLpNum].getLicenseNbr();
        var boardCodeB3contra = capLpsB3contra[thisCapLpNum].getComment();
        var typeClassB3Contra = capLpsB3contra[thisCapLpNum].getBusinessLicense();
        
        if(((b1LicNbr == licNbrB3contra) && (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra) )||
        ((b1LicNbr+"-"+typeClass == licNbrB3contra+"-"+typeClassB3Contra) && 
        (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra) ))
        {
          licenseProfessionalScriptModel.setBusinessName(companyName);
          
          var result = aa.licenseProfessional.editLicensedProfessional(licenseProfessionalScriptModel);
          if(result.getSuccess())
          {
            logDebug("license professional in B3CONTRA table updated successfully ");
          }
          else
          {
            logDebug("license professional in B3CONTRA table updated successfully ?  "+result.getErrorMessage());
          }
        } 
      } 
    }
    }
}
function CWM_ELP_1050_DPL_ASA_SetWorkflowBasedOnFieldGroup(){
var ceCompliance = AInfo["A. I AM IN COMPLIANCE WITH G.L.c.62C 47A & 49A."];
var disciplineReported = AInfo["C. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME."];
var convictionsReported = AInfo["D. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS."];
var legalObligation = AInfo["E. I UNDERSTAND MY LEGAL OBLIGATION TO REPORT ABUSE/NEGLECT OF CHILDREN, DISABLED PERSONS & ELDERLY."];
var ssnReported = AInfo["F.  AS REQUIRED BY M.G.L. C. 30A, 13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER."];
var admissionsReported = AInfo["G. I HAVE REPORTED TO THE BOARD ALL  ADMISSIONS TO SUFFICIENT FACTS."];
var affirmation = AInfo["I attest under the pains and penalties of perjury that the above responses are truthful & accurate."];

  if(ceCompliance=="No"||disciplineReported=="No"||convictionsReported=="No"||legalObligation=="No"||ssnReported=="No"||admissionsReported=="No"||affirmation=="No"){
    updateTask("Issuance","Renewal Attestation","Updated by script","Updated by script");
    CWM_ELP_Generic_DPL_addConditionOnCap("Renewal","Positive Renewal Attestation");
  }
}
function CWM_ELP_1050_EXP_DPL_SetWorkflowBasedOnFieldGroup(){
var ceCompliance = AInfo["A. I AM IN COMPLIANCE WITH G.L.c.62C 47A & 49A."];
var disciplineReported = AInfo["C. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME."];
var convictionsReported = AInfo["D. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS."];
var legalObligation = AInfo["E. I UNDERSTAND MY LEGAL OBLIGATION TO REPORT ABUSE/NEGLECT OF CHILDREN, DISABLED PERSONS & ELDERLY."];
var ssnReported = AInfo["F.  AS REQUIRED BY M.G.L. C. 30A, 13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER."];
var admissionsReported = AInfo["G. I HAVE REPORTED TO THE BOARD ALL  ADMISSIONS TO SUFFICIENT FACTS."];
var affirmation = AInfo["I attest under the pains and penalties of perjury that the above responses are truthful & accurate."];

  if(ceCompliance=="No"&&disciplineReported=="No"&&convictionsReported=="No"&&legalObligation=="No"&&ssnReported=="No"&&admissionsReported=="No"&&affirmation=="No"){
    updateTask("Issuance","Renewal Attestation","Updated by script","Updated by script");
    CWM_ELP_Generic_DPL_addConditionOnCap("Renewal","Positive Renewal Attestation");
  }
}
function CWM_ELP_1051_DPL_WTUA_CopyPSasiToParent(){
  try
  {
    useAppSpecificGroupName = true;
    var asi = new Array();
    var copyField = false;
    var response;
    loadAppSpecific(asi);
    for(asiLabel in asi)
    {
      if(asiLabel=="RE-SPECIALIZATION PROGRAM.If yes, where?")
      {
        if(asi[asiLabel]!= ""){
          copyField = true;
          response = asi[asiLabel];
          break;
        }
      } 
    }
    if((wfStatus == "Approved")&& copyField)     
    {
      var pCapId = getParent();
      if(pCapId){
        editAppSpecific("RE-SPECIALIZATION PROGRAM.Location of Re-specialization Program" ,response,pCapId);
      }
      else{
        logDebug("***There was an error retrieving the license associated with this application***");
      }
    }
  }
  catch(err){
    logDebug("There is an error in CWM_ELP_1051_DPL_WTUA_CopyPSasiToParent. Please contact administrator.");
  }
  finally{
    useAppSpecificGroupName = false;
  }
}
function CWM_ELP_1052_DPL_ASA_CheckJourneymanLic(){
   var response = getAppSpecific("Have you ever applied for and/or taken the MA Electrician/Systems exam(s)?",capId);
   var source = getAppSpecific("Source",capId);
   var cType = "Application Checklist";
   var cStatusType = "";
   var cDesc = "Check Journeyman License";
   
   CWM_ELP_Generic_DPL_addConditionOnCap(cType,cDesc);
   if(response == "Yes" && source == "Reciprocity"){
    cStatusType = "Applied";  
    if(!editCapConditionStatus(cType, cDesc, "Pending", cStatusType)){
      logDebug("Failed to apply the condition, or the condition is already applied.");
    }
   }
   else{
    cStatusType = "Not Applied";
    if(!editCapConditionStatus(cType, cDesc, "Pending", cStatusType)){
      logDebug("Failed to disable the condition, or the condition is already not applied.");
    }
   }
}
function CWM_ELP_1052_EXP_DPL_CheckJourneymanLic(){
   var response = getAppSpecific("Have you ever applied for and/or taken the MA Electrician/Systems exam(s)?",capID);
   var source = getAppSpecific("Source",capID);
   var cType = "Application Checklist";
   var cStatusType = "";
   var cDesc = "Check Journeyman License";
   
   CWM_ELP_Generic_DPL_addConditionOnCap(cType,cDesc);
   if(response == "Yes" && source == "Reciprocity"){
    cStatusType = "Applied";  
    if(!editCapConditionStatus(cType, cDesc, "Pending", cStatusType)){
      logDebug("Failed to apply the condition, or the condition is already applied.");
    }
   }
   else{
    cStatusType = "Not Applied";
    if(!editCapConditionStatus(cType, cDesc, "Pending", cStatusType)){
      logDebug("Failed to disable the condition, or the condition is already not applied.");
    }
   }
}
/* @desc This method Adds condition if the legal structure is LLC or LLP.
 * Release B Master Script List ID: 1056
 * Event: ASA
 */
function CWM_ELP_1056_DPL_ASA_addConditionLegalStructure(){
  try{
    var fieldValue;
    var masterLicCount = 0;

    var capContactResult = aa.people.getCapContactByCapID(capId);
    if(capContactResult.getSuccess()){
      capContactResult=capContactResult.getOutput();
      for(yy in capContactResult){
        thisCapContact = capContactResult[yy];
        thisPeople = thisCapContact.getPeople();
        logDebug("Contact type: " + thisPeople.contactType);
        
        if (thisPeople.contactType == "Master Licensee"){
          masterLicCount++;
        }
        // If the given contact is not "Applicant", continue
        if (thisPeople.contactType == "Business"){
          // For "Applicant", get  getCapContactModel
          capContactModel = thisCapContact.getCapContactModel();
          var capContactTemplate = capContactModel.template;
          var templateForms = capContactTemplate.getTemplateForms();
          for (i=0; i< templateForms.size(); i++){
            var template = templateForms.get(i);
            var subGroups = template.getSubgroups();
            for (j=0; j< subGroups.size(); j++){
              var subGroup = subGroups.get(j);
              var fields = subGroup.fields;
              for (k=0; k< fields.size(); k++){
                var field = fields.get(k);
                fieldValue = field.defaultValue;  
              }        
            }
          }
        }   
      }
    }
    logDebug("Template field value:" + fieldValue);   
    logDebug("Master licensee count: " + masterLicCount);

    if((fieldValue == "LLC" || fieldValue == "LLP") && masterLicCount >= 1){
      var cType = "Application Checklist";
      var cDesc = "Verification of Errors and Omissions Policy"; 
      //CWM_ELP_Generic_DPL_addConditionOnCap(cType, cDesc);
      aa.capCondition.addCapCondition(capId, "Notice", cDesc, "Verification of Errors and Omissions Policy", null, null, null, null, null, "", null, null, "", "", "A","Y");
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on ASA function CWM_ELP_1056_DPL_ASA_addConditionLegalStructure, Please contact administrator");
  }
}
/* @desc This function checks only one master licensee when legal structure is LLC or Corporation
 * Release B Master Script List ID: 1062
 */
function CWM_ELP_1062_WTUB_DPL_checkTotalMasterLics()
{
    try
    {
        if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
        {
            var fieldValue;
            var masterLicCount = 0;
            var masterLicSSN = "";
            var correctLicense = false;
        
            var capContactResult = aa.people.getCapContactByCapID(capId);
            if(capContactResult.getSuccess())
            {
                capContactResult=capContactResult.getOutput();
                for(yy in capContactResult)
                {
                    thisCapContact = capContactResult[yy];
                    thisPeople = thisCapContact.getPeople();
                    logDebug("Contact type: " + thisPeople.contactType);
                    
                    if (thisPeople.contactType == "Master Licensee")
                    {
                        masterLicCount++;
                        refLicense = aa.licenseScript.getRefLicensesProfByName(aa.getServiceProviderCode(),thisCapContact.getPeople().firstName,thisCapContact.getPeople().middleName,thisCapContact.getPeople().lastName);
                        masterLicSSN = thisCapContact.getPeople().getSocialSecurityNumber();
                    }
                    // If the given contact is not "Applicant", continue
                    if (thisPeople.contactType == "Business")
                    {
                        // For "Applicant", get  getCapContactModel
                        capContactModel = thisCapContact.getCapContactModel();
                        var capContactTemplate = capContactModel.template;
                        var templateForms = capContactTemplate.getTemplateForms();
                        for (i=0; i< templateForms.size(); i++)
                        {
                            var template = templateForms.get(i);
                            var subGroups = template.getSubgroups();
                            for (j=0; j< subGroups.size(); j++)
                            {
                                var subGroup = subGroups.get(j);
                                var fields = subGroup.fields;
                                for (k=0; k< fields.size(); k++)
                                {
                                    var field = fields.get(k);
                                    fieldValue = field.defaultValue;    
                                }                
                            }
                        }
                    }       
                }
            }
            logDebug("Template field value:" + fieldValue);     
            logDebug("Master licensee count: " + masterLicCount);
        
            if((fieldValue == "LLC" || fieldValue == "Corporation") && masterLicCount != 1)
            {
                cancel = true;
                showMessage = true;
                comment("If legal Structure is LLC or Corporation, then there should be only one Master Licensee Contact.");
            }
      
      //check to see if the master licenses are active and are the right type
    var fvMasterLicenseActive = false;
    var fvBoard = getBoard(capId);
    var fvCapIDLicenseProfessionals = aa.licenseProfessional.getLicensedProfessionalsByCapID(capId).getOutput();
    var fvMaster = true;
    for (var fvCounter in fvCapIDLicenseProfessionals)
    {
      var fvCapIDLicenseProfessional = fvCapIDLicenseProfessionals[fvCounter];
      var fvLicenseNbr =  fvCapIDLicenseProfessional.getLicenseNbr();
      var fvActive = isLicenseActive(fvLicenseNbr, fvBoard, "M");
      if (!fvActive)
      {
      fvMaster = false;
      }
    }
      if (!fvMaster)
      {
      cancel = true;
      showMessage = true;
      comment("The master licensee "+fvLicenseNbr+" is not active/valid. All master licensees on the application must be active before the application can be approved.");
      }

         }
        
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUB function CWM_ELP_1062_WTUB_DPL_checkTotalMasterLics, Please contact administrator");
    }
}// end CWM_ELP_1062_WTUB_DPL_checkTotalMasterLics

/* @desc This method check the number of Master Licensee contacts if the legal structure is LLC or Corporation.
 * Release B Master Script List ID: 1063
 * Event: WTUB
 */
function CWM_ELP_1063_DPL_WTUB_CheckMasterLicContactNum()
{
  if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
  {
    var fieldValue;
    var masterLicCount = 0;

    var capContactResult = aa.people.getCapContactByCapID(capId);
    if(capContactResult.getSuccess())
    {
      capContactResult=capContactResult.getOutput();
      for(yy in capContactResult)
      {
        thisCapContact = capContactResult[yy];
        thisPeople = thisCapContact.getPeople();
        logDebug("Contact type: " + thisPeople.contactType);
        
        if (thisPeople.contactType == "Master Licensee")
        {
          masterLicCount++;
        }
        // If the given contact is not "Applicant", continue
        if (thisPeople.contactType == "Business")
        {
          // For "Applicant", get  getCapContactModel
          capContactModel = thisCapContact.getCapContactModel();
          var capContactTemplate = capContactModel.template;
          var templateForms = capContactTemplate.getTemplateForms();
          for (i=0; i< templateForms.size(); i++)
          {
            var template = templateForms.get(i);
            var subGroups = template.getSubgroups();
            for (j=0; j< subGroups.size(); j++)
            {
              var subGroup = subGroups.get(j);
              var fields = subGroup.fields;
              for (k=0; k< fields.size(); k++)
              {
                var field = fields.get(k);
                fieldValue = field.defaultValue;  
              }        
            }
          }
        }   
      }
    }
    logDebug("Template field value:" + fieldValue);   
    logDebug("Master licensee count: " + masterLicCount);

    if((fieldValue == "LLC" || fieldValue == "Private Corporation" || fieldValue == "Public Corporation") && masterLicCount > 1)
    {
      cancel = true;
      showMessage = true;
      comment("If legal Structure is LLC or Corporation, then there should be only one Master Licensee Contact.");
    }
  }
}
/* @desc This method check the number of Master Licensee contacts if the legal structure is LLP or Partnership.
 * Release B Master Script List ID: 1067
 * Event: WTUB
 */
function CWM_ELP_1067_DPL_WTUB_CheckMasterLicContactNum()
{
  if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
  {
    var fieldValue;
    var masterLicCount = 0;

    var capContactResult = aa.people.getCapContactByCapID(capId);
    if(capContactResult.getSuccess())
    {
      capContactResult=capContactResult.getOutput();
      for(yy in capContactResult)
      {
        thisCapContact = capContactResult[yy];
        thisPeople = thisCapContact.getPeople();
        logDebug("Contact type: " + thisPeople.contactType);
        
        if (thisPeople.contactType == "Master Licensee")
        {
          masterLicCount++;
        }
        // If the given contact is not "Applicant", continue
        if (thisPeople.contactType == "Business")
        {
          // For "Applicant", get  getCapContactModel
          capContactModel = thisCapContact.getCapContactModel();
          var capContactTemplate = capContactModel.template;
          var templateForms = capContactTemplate.getTemplateForms();
          for (i=0; i< templateForms.size(); i++)
          {
            var template = templateForms.get(i);
            var subGroups = template.getSubgroups();
            for (j=0; j< subGroups.size(); j++)
            {
              var subGroup = subGroups.get(j);
              var fields = subGroup.fields;
              for (k=0; k< fields.size(); k++)
              {
                var field = fields.get(k);
                fieldValue = field.defaultValue;  
              }        
            }
          }
        }   
      }
    }
    logDebug("Template field value:" + fieldValue);   
    logDebug("Master licensee count: " + masterLicCount);

    if((fieldValue == "LLP" || fieldValue == "Partnership") && (masterLicCount <= 0 || masterLicCount > 2))
    {
      cancel = true;
      showMessage = true;
      comment("If legal Structure is LLP or Partnership, then there should be Minimun one or Maximum two Master Licensee Contact.");
    }
    
    //check to see if the master licenses are active and are the right type
    var fvMasterLicenseActive = false;
    var fvBoard = getBoard(capId);
    var fvCapIDLicenseProfessionals = aa.licenseProfessional.getLicensedProfessionalsByCapID(capId).getOutput();
  for (var fvCounter in fvCapIDLicenseProfessionals)
  {
    var fvCapIDLicenseProfessional = fvCapIDLicenseProfessionals[fvCounter];
    var fvLicenseNbr =  fvCapIDLicenseProfessional.getLicenseNbr();
    var fvActive = isLicenseActive(fvLicenseNbr, fvBoard, "M");
    if (!fvActive)
    {
    cancel = true;
    showMessage = true;
    comment("The master licensee "+fvLicenseNbr+" is not active/valid. All master licensees on the application must be active before the application can be approved.");
    }
  }

  }
}
/* @desc This function checks the number of master licensees
 * Release B Master Script List ID: 1068
 */
function CWM_ELP_1068_CUB_DPL_checkTotalMasterLics()
{
  try
  {
    var fieldValue;
        var masterLicCount = 0;
        
        var capContactResult = aa.people.getCapContactByCapID(capId);
        if(capContactResult.getSuccess())
        {
            capContactResult=capContactResult.getOutput();
            for(yy in capContactResult)
            {
                thisCapContact = capContactResult[yy];
                thisPeople = thisCapContact.getPeople();
                logDebug("Contact type: " + thisPeople.contactType);
                
                if (thisPeople.contactType == "Master Licensee")
                {
                    masterLicCount++;
                }
                
        // For "Applicant", get  getCapContactModel
                capContactModel = thisCapContact.getCapContactModel();
                var capContactTemplate = capContactModel.template;
                var templateForms = capContactTemplate.getTemplateForms();
                for (i=0; i< templateForms.size(); i++)
                {
                    var template = templateForms.get(i);
                    var subGroups = template.getSubgroups();
                    for (j=0; j< subGroups.size(); j++)
                    {
                        var subGroup = subGroups.get(j);
                        var fields = subGroup.fields;
                        for (k=0; k< fields.size(); k++)
                        {
                            var field = fields.get(k);
                            fieldValue = field.defaultValue;    
                        }                
                    }
                }       
            }
        }
        logDebug("Template field value:" + fieldValue);     
        logDebug("Master licensee count: " + masterLicCount);
        
        if((fieldValue == "LLC" || fieldValue == "Partnership") && masterLicCount != 2)
        {
            cancel = true;
            showMessage = true;
            comment("If legal Structure is LLC or Partnership, then there should be exactly two Master Licensee Contacts.");
        }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on CUB function CWM_ELP_1068_CUB_DPL_checkTotalMasterLics, Please contact administrator");
  }
} //end CWM_ELP_1068_CUB_DPL_checkTotalMasterLics
function CWM_ELP_1069_DPL_ASA_RequireLicenseNo(){
  var jPlumberNo = AInfo["Journeyman Plumber License Number"];
  var mPlumberNo = AInfo["Master Plumber License Number"];
  var jGasFitNo = AInfo["Journeyman Gas Fitter License Number"];
  var mGasFitNo = AInfo["Master Gas Fitter License Number"];
  
  if(jPlumberNo==""&&mPlumberNo==""&&jGasFitNo==""&&mGasFitNo==""){
    showMessage = true;
    cancel = true;
    comment("At least one license number must be provided in order to proceed with this application." );
  }
}

/* @desc when the license is generated, use the creation date of the application record as the issued date of the new license record
 * Release B Master Script List ID: 1080
*/

function CWM_ELP_1080_DPL_WTUA_SetLicIssueDate()
{
  try
  {
    if(wfTask == "Exam" && matches(wfStatus, "Approved", "Approved with Conditions"))
    {
      //Get Application creation date
      var app = aa.cap.getCap(capId).getOutput();
      var openDate = app.getFileDate();
      if(openDate)
      {
        var openDateStr = openDate.getMonth() + "/" + openDate.getDayOfMonth() + "/" + openDate.getYear();
        var openDateObj = new Date(Date.parse(openDateStr));
      }
      logDebug("Application creation date:" + openDateStr);

      //Set License issue date
      var vParentCapID = getParent(capId);
      var recId = vParentCapID.getCustomID();
      logDebug("License record:" + recId);  

      editFirstIssuedDate(openDateObj, vParentCapID);
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1080_DPL_WTUA_SetLicIssueDate, Please contact administrator");
  }
}
/* @desc This method completes the RE Appraiser Renewal.
 * Release B Master Script List ID: 1090
 */
function CWM_ELP_1090_DPL_CRCA_renewREAppraiserLicense(itemCapId)
{  useAppSpecificGroupName = false;
    var result = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
  
   
  //----------------------------------------------------------------------------------------------
  //Get  Attestation ASI field - START
  //----------------------------------------------------------------------------------------------
    // this to avoid a script error from special character.
  //var splChar = String.fromCharCode(167);
  //  var asiName = "A. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
    //var educationAsi = getAppSpecific("B. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS.");

  //  var inComplianceGLC = getAppSpecific(asiName);
  //  var reportedDicipline = getAppSpecific("B. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
    var reportedPleas = getAppSpecific("2. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS");
    //var legalObligation = getAppSpecific("D. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS.");

   // asiName = "E.  AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
   // var reportedSSN = getAppSpecific(asiName);
    //var admissionFacts = getAppSpecific("G. I HAVE REPORTED TO THE BOARD ALL ADMISSIONS TO SUFFICIENT FACTS");
  var attestPain = getAppSpecific("3. I ATTEST UNDER THE PAINS & PENALTIES OF PERJURY THAT I HAVE COMPLIED WITH TAX LAWS STATED ABOVE");
  
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - END
  //----------------------------------------------------------------------------------------------  
        //added for defect 625

       // if (educationAsi != undefined && educationAsi != null && educationAsi != "") {
            var haveCompleted = getAppSpecific("1. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/ REGULATIONS")

            if (haveCompleted && haveCompleted.toUpperCase().equals("NO")) {
        //CWM_ELP_Generic_DPL_addConditionOnCap("Renewal","Positive Renewal Attestation");
                logDebug("Have not completed.");
                closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                updateTask("Validate", "CE Attestation Review", "Updated via script.", "Updated via script.");
                activateTask("Validate");
                assignedToByShortNotes("Validate", getBoard(capId));
            }
     //   }
   else {
      if ((reportedPleas && reportedPleas.toUpperCase().equals("NO")) ||
        (attestPain && attestPain.toUpperCase().equals("NO"))) {
        if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
      } else {
        if (renewalApproval(capId)) {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
    
   }



  //----------------------------------------------------------------------------------------------
  //Modification to account for SM Attestation fields available in different record types - END
  //----------------------------------------------------------------------------------------------
  
    capId = tmpCapId;
    return result;
}
function CWM_ELP_1113_DPL_ASA_EnforceCredMin(){
  var edTheoryCredit = AInfo["Do you have a minimum of 330 hours of Plumbing and Gas Fitting educational theory credit?"];
  if(edTheoryCredit == "No"){
    showMessage = true;
    cancel = true;
    comment("This requirement must be met to be eligible for this license. Please contact the board office or refer to 248CMR 11.00 for additional information.");
  }
}
/* @desc This method performs the following when an application/renewal submitted:
*   1. Check if Out of State License is No. 
*   2. If so then waive Record of Standing Condition
* Release B Master Script List ID: 1124
*/
function CWM_ELP_1124_ASA_DPL_waiveConditionRecordofStanding() {
    var funcName = "CWM_ELP_1124_ASA_DPL_waiveConditionRecordofStanding";
    var CondType = "Application Checklist";
    var CondDesc = "Record of Standing";

    // logDebug("Checking if '" + CondDesc + "' condition can be waived based on discipline Background Questions.");
    var OSLic = AInfo["Do you have a substantially equivalent license in Massachusetts, another state or country?"];
    logDebug("Out of State License Answer :" + OSLic);
    var answer = OSLic;
    if (answer == "No") {
        if (appHasCondition(CondType, null, CondDesc, null)) {
            conditionUpdated = editCapConditionStatus(CondType, CondDesc, "Met", "Not Applied");
            if (conditionUpdated)
                logDebug(CondDesc + " was updated to Met & Not Applied.");
            else
                logDebug(CondDesc + " was not updated with Met & Not Applied.");
        } else {
            logDebug(CondDesc + " was not found so it could not be waived.");
        }
    } else {
        logDebug(CondDesc + " was not waived. Out of State License has to be reviewed.");
    }
}
function CWM_ELP_1124_ASA_WaiveConditionForPLJA(){
  //function determines if certain conditions should be waived based on asi answer to questions
  
  //confirm we have the right record
  if (appMatch("License/Plumbers and Gas Fitters/Journeyman/Application")) {
  //get the asi to check

  var OSLic = AInfo["Do you have a substantially equivalent license in Massachusetts, another state or country?"];
  aa.print("Out of State License Answer :" + OSLic);
  
  var condResult = aa.capCondition.getCapConditions(capId);

  var capConds = condResult.getOutput();
  var cStatusType;

  for (cc in capConds)
  {
          var thisCond = capConds[cc];
      //logDebug("thiscond: " + thisCond);
      var cStatusType = thisCond.getConditionStatusType();
      var cDesc = thisCond.getConditionDescription();
  if (OSLic == "No" && cDesc == "Record of Standing") {
    editCapConditionStatus("Application Checklist", "Record of Standing", "Met", "Not Applied");
  }
    if (OSLic == "Yes" && cDesc == "Verification of Education") {
    editCapConditionStatus("Application Checklist", "Verification of Education", "Met", "Not Applied");
  }
   if (OSLic == "Yes" && cDesc == "Verification of Work Experience") {
    editCapConditionStatus("Application Checklist", "Verification of Work Experience", "Met", "Not Applied");
  }
  
  
  
  }
  }  
}// end of CWM_ELP_1124_ASA_WaiveConditionForPLJA()
/* @desc This method method adds condition if Disciplinary History questions have been answered as Yes.
 * Release B Master Script List ID: 1141
 */

function CWM_ELP_1141_DPL_ASA_addConditionForELTechnician()
{
  var answer = "N";
  
  //Get the contact template values
  var capContactResult = aa.people.getCapContactByCapID(capId);
  if (capContactResult.getSuccess()) 
  {
    capContactResult = capContactResult.getOutput();
    for (yy in capContactResult) 
    {
      thisCapContact = capContactResult[yy];
      thisPeople = thisCapContact.getPeople();
      if (thisPeople.contactType == "Applicant")
      {
        var asiTemplate = thisPeople.template;
        if (asiTemplate != null) 
        {
          var templategroup = asiTemplate.getTemplateForms();
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "1. Has disciplinary action been taken against you by a licensing board in any jurisdiction?");
            if (question)
            {
              answer = question.getDefaultValue();
              logDebug(answer);
            }           
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "2. Are you the subject of pending disciplinary action by a licensing board in any jurisdiction?");
            if (question)
            {
              answer = question.getDefaultValue();
              logDebug(answer);
            }
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "3. Have you voluntarily surrendered a professional license to a licensing board in any jurisdiction?");
            if (question)
            {
              answer = question.getDefaultValue();
              logDebug(answer);
            }
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "4. Have you ever applied for and been denied a professional license in any jurisdiction?");
            if (question)
            {
              answer = question.getDefaultValue();
              logDebug(answer);
            }
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "5. Have you been convicted of a felony or misdemeanor in any jurisdiction?");
            if (question)
            {
              answer = question.getDefaultValue();
              logDebug(answer);
            }
          }
        }
      }
    }
  }

  //Add Condition
  var CondType = "Application Checklist";
  var CondDesc = "Verification of Disciplinary Questions";
  if (answer == "Y")
  {
    if (appHasCondition(CondType, null, CondDesc, null))
    {
      editCapConditionStatus(CondType, CondDesc, "Pending", "Applied");
        logDebug("Condition edited.");
    }
      
    else
    {
      CWM_ELP_Generic_DPL_addConditionOnCap(CondType, CondDesc, capId); 
      logDebug("Condition added.");
    }     
  }
  else if (appHasCondition(CondType, "Pending", CondDesc, null))
  {
    editCapConditionStatus(CondType, CondDesc, "Met", "Not Applied");
    logDebug("Condition edited.");
  }   
}
//gets all of the specific plumbing and gas fitting licenses by ref contact id
  function CWM_ELP_1182_WTUA_DPL_getPlGFLicenseCapsByRefContact(ipRefContact)
{
  var licArray = new Array();
  var fvPeople = aa.people.createPeopleModel().getOutput().getPeopleModel();
  var fvCcb = aa.proxyInvoker.newInstance("com.accela.aa.aamain.people.CapContactDAOOracle").getOutput();
  fvPeople.setServiceProviderCode(aa.getServiceProviderCode());
  fvPeople.setContactSeqNumber(ipRefContact);
  var fvCapsQry = fvCcb.getCapContactsByRefContactModel(fvPeople);
  if (!fvCapsQry)
    return licArray;
  var fvCaps = fvCapsQry.toArray();
  if (!fvCaps)
    return licArray;
  for (var fvCounter in fvCaps)
  {
    var fvCap = fvCaps[fvCounter];
    if (!fvCap)
      continue;
    var fvCapIDTmp = fvCap.getCapID();
    if (!fvCapIDTmp)
      continue;
    var fvCapIDQry = aa.cap.getCapID(fvCapIDTmp.getID1(), fvCapIDTmp.getID2(), fvCapIDTmp.getID3());
    if (!fvCapIDQry || !fvCapIDQry.getSuccess())
      continue;
    var fvCapID = fvCapIDQry.getOutput();
    if(!fvCapID)
      continue;
    var fvCapMQry = aa.cap.getCap(fvCapID);
    if (!fvCapMQry || !fvCapMQry.getSuccess())
      continue;
    var fvCapM = fvCapMQry.getOutput();
    if (!fvCapM)
      continue;
    var fvCapType = fvCapM.getCapType();
    if (!fvCapType)
      continue;
    if ( fvCapType.getCategory() == "License" && fvCapType.getType() == "Plumbers and Gas Fitters" && (fvCapType.getSubType() == "Journeyman" || fvCapType.getSubType() == "Master" || fvCapType.getSubType() == "Gas Fitter Journeyman" || fvCapType.getSubType() == "Gas Fitter Master" || fvCapType.getSubType() == "LP Installer" || fvCapType.getSubType() == "LTD LP Installer"))
    {
      licArray.push(fvCapID);
    }
  }
  logDebug("Found " + licArray.length + " License records with references contact "+ ipRefContact);
  return licArray;
}
function CWM_ELP_1182_WTUA_DPL_UpdateInspectorLicenses() {
      try
    {
var capContactResult = aa.people.getCapContactByCapID(capId);
  if (capContactResult && capContactResult.getSuccess())
  {
    capContacts = capContactResult.getOutput();
    logDebug("Cap Contacts for capid: " + capId.getCustomID() + " = " + capContacts.length);
    for (var vCounter1 in capContacts)
    {
      thisCapContact = capContacts[vCounter1];
      thisPeople = thisCapContact.getPeople();
      thisContactModel = thisCapContact.getCapContactModel();
      var contactType = thisPeople.contactType;
      
      if(contactType != "Applicant")
      {
        logDebug("Skipping contact type: " + contactType);
        continue;
      }
      
      logDebug("Cap Seq.: " + thisPeople.contactSeqNumber + " Cap Ref Num: " + thisCapContact.getCapContactModel().refContactNumber + " Contact Type: " + contactType);
      
      var RefContactNum = thisContactModel.refContactNumber;
      //get all the licenses with this refid
      var licCapsArray = CWM_ELP_1182_WTUA_DPL_getPlGFLicenseCapsByRefContact(RefContactNum);
                        
      // Update contact address on license records if the refid searched on is the licensed individual
      CWM_ELP_1182_WTUA_DPL_updateWaiver(thisContactModel, "Licensed Individual", licCapsArray);
       
      break;
    }
  }
   }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUA function CWM_ELP_1182_WTUA_DPL_UpdateInspectorLicenses, Please contact administrator");
    }
  
} 

  
// Updates the continuing education waiver field on the licenses in the array
// where the refid passed in = the licensed individual
function CWM_ELP_1182_WTUA_DPL_updateWaiver(iContact, pContactType, pLicenseCapsArray)
{
    for ( var capCount in pLicenseCapsArray )
    {
      var fvCapID = pLicenseCapsArray[capCount];
      var fvAltID = fvCapID.getCustomID();
      var capContactResult = aa.people.getCapContactByCapID(fvCapID);
      if (capContactResult && capContactResult.getSuccess())
      {
        var licContacts = capContactResult.getOutput();
        
        // Loop through contact in search for Licensed Individual 
        for (var contactCount in licContacts)
        {
          var fvCapContact = licContacts[contactCount];
          var fvCapContactModel = fvCapContact.getCapContactModel();
          var fvCapContactNbr = fvCapContactModel.getPeople().contactSeqNumber;
          var fvContactType = fvCapContactModel.getPeople().getContactType();
          var fvContactRefID =  fvCapContactModel.refContactNumber;

          if ( fvContactType == pContactType && fvContactRefID == iContact.refContactNumber )
          {
            logDebug(fvContactType + " with contact number " + fvCapContactNbr+ " found on License record: " +  fvAltID );
            //update the continuing education waiver
            var oldASIValue = getAppSpecific("Continuing Education Waiver", fvCapID);
            if(oldASIValue){
            logDebug("Value for waiver ASI is : " + oldASIValue);
            editAppSpecific("Continuing Education Waiver", "Inspector", fvCapID);
            var newASIValue = getAppSpecific("Continuing Education Waiver", fvCapID);
            logDebug("new value for waiver ASI is : " + newASIValue);
            }
            else{
              logDebug("The Continuing Education Waiver field does not exist record: " + fvCapID );
            }
            
          }
        }
      }
    }
}/* @desc This function will copy contacts to Parent License 
 * Release B Master Script List ID: 1190
 */
function CWM_ELP_1190_WTUA_DPL_copyContacts2License()
{
  if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
  {
    //get parent
    var vParentCapID = getParent();
        if(vParentCapID)
    {
      if(wfTask=="Validate" && (wfStatus=="Approved" || wfStatus=="Approved with Conditions"))
      {
        copyContactsByTypeWithAddress(capId,vParentCapID,"Business");
        copyContactsByTypeWithAddress(capId,vParentCapID,"Master Licensee");
        logDebug("Contacts updated");
        //editContactType("Business", "Licensed Individual", vParentCapID);
      }
    }
  }
}/* @desc This method copies the "Doing Business As" name from the application to the license
 * Release B Master Script List ID: 1192
 * Event: WTUA
 */
function CWM_ELP_1192_DPL_WTUA_CopyBusinessNameToParent(newLicId){
  if(wfStatus == "Approved"){
    var bizName = AInfo["Doing Business As"];
    var pCapId = getParent();
    logDebug("Parent CapId:" + pCapId);
    if(pCapId){
      editAppSpecific("Doing Business As",bizName,pCapId);
    }
    else{
      logDebug("***There was an error retrieving the license associated with this application***");
    }
  }
}
/* @desc This method updates ASI Type Class to TR.
 * Release B Master Script List ID: 1193
 * Event: WTUA
 */

function CWM_ELP_1193_WTUA_DPL_UpdateASITypeClass(){
  try{
    var newValue = "TR";
    
    if(wfTask == "Validate" && wfStatus == "Approved"){
      var vParentCapID = getParent();
            if(vParentCapID)
      {
        editAppSpecific("Type Class", newValue, vParentCapID);
          var newASIValue = getAppSpecificValue("Type Class", vParentCapID);
          logDebug("Value for license ASI is : " + newASIValue);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1193_WTUA_DPL_UpdateASITypeClass, Please contact administrator");
  }
}
/* @desc This method sets license Type Class field to 'TP'
 * Release B Master Script List ID: 1195
 */
function CWM_ELP_1195_WTUA_DPL_setTypeClass()
{
  try
  {   
      var newTypeClass = "TP";
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
    {
      var vParentCapID = getParent();
            if(vParentCapID)
        {
          editAppSpecific("Type Class", newTypeClass, vParentCapID);
        logDebug("Updating License Type Class field to " + newTypeClass);
        }
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1195_WTUA_DPL_setTypeClass, Please contact administrator");
  }
  
}
/* @desc This method set the wf status to 'Closed' and close the application record 
 * Release B Master Script List ID: 1196
 * Event: WTUA
 */

function CWM_ELP_1196_DPL_WTUA_CloseWorkflowAppraiserTempApp(){
  try{
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
    {
      //closeTask("Issuance", "Completed", "Updated via Script", "Updated via Script");
      updateTask("Issuance", "Completed", "Set status to Completed by script", "Set status to Completed by script", "", capId);
        updateAppStatus("Completed", "Updated via Script");
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1196_DPL_WTUA_CloseWorkflowAppraiserTempApp, please contact administrator");
  }
}
/* @Desc: This function will create the following
 * create Real Estate Instructor Approval parent record
 * Set Type Class to SI
 * Update ASIT
 * Release B Master Script List ID: 1198
 */
function CWM_ELP_1198_WTUA_DPL_createLicense(){
  try{
    var thisCap = aa.cap.getCap(capId).getOutput();
    var thisCapType = thisCap.getCapType().toString();
    var newLicense = null;
    var contactType = lookup("Lookup:CONTACT TYPE DEFAULT", thisCapType);
    var licHolderType = lookup("Lookup:CONTACT LICENSE HOLDER TYPE", thisCapType);
    var asitName = "BOND INFORMATION";
    if(wfTask=="Validate" && matches(wfStatus,"Approved","Approved with Conditions")){
      newLicense = createLicense("Active",true, false,contactType,false,"");
      copyASITable(capId, newLicense,asitName);
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on CWM_ELP_1198_WTUA_DPL_createLicense");
  }
}/* @desc This method updates ASI "Type Class" of Gas Fitter Business license record to "C" when Gas Fitter Business app
 * is approved and ASI "Legal Structure" is either "Corporation" or "LLC".
 * Release B Master Script List ID: 1209
 */
 
function CWM_ELP_1209_DPL_WTUA_setTypeClassToC(licID)
{
  //logDebug("Inside setTypeClassToC "+ licID);
  var fieldValue;
  /*var servProvCode = aa.getServiceProviderCode();
  var contactASIGroup = getContactASIGroup(servProvCode, "Business");
  logDebug("Contact ASI: " + contactASIGroup);
  var contactFieldValue = getContactTemplateFormFieldValue("Business", contactASIGroup, "Legal Structure");
  logDebug("Legal Structure: " + contactFieldValue);*/
  
  var capContactResult = aa.people.getCapContactByCapID(capId);
  if(capContactResult.getSuccess())
  {
    capContactResult=capContactResult.getOutput();
    for(yy in capContactResult)
    {
      capContact = capContactResult[yy];
      peopleModel = capContact.getPeople();
      if (peopleModel.getContactType() == "Business")
      {
        capContactModel = capContact.getCapContactModel();
        var capContactTemplate = capContactModel.template;
        var templateForms = capContactTemplate.getTemplateForms();
        for (i=0; i< templateForms.size(); i++)
        {
          var template = templateForms.get(i);
          var subGroups = template.getSubgroups();
          for (j=0; j< subGroups.size(); j++)
          {
            var subGroup = subGroups.get(j);
            //logDebug("Sub Group: " + subGroup);
            var fields = subGroup.fields;
            //logDebug("Size: " + fields.size());
            for (k=0; k< fields.size(); k++)
            {
              var field = fields.get(k);
              fieldValue = field.defaultValue;      
            }                
          }
        }
      }       
    }
  }
  
  if(fieldValue == "Corporation" || fieldValue == "LLC")
  {
    //logDebug("Inside if");
    editAppSpecific("Type Class", "C", licID);
  }
}/* @desc This method check the legal structure is LLC or Corporation and updates Type Class.
 * Release B Master Script List ID: 1209
 * Event: WTUA
 */
function CWM_ELP_1209_DPL_WTUA_updateASI_TypeClassFromLegalStructure()
{
  try{
    var newValue = "C"
    var vParentCapID = getParent();
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions") && vParentCapID)
    {
    
      var fieldValue;
      var masterLicCount = 0;

      var capContactResult = aa.people.getCapContactByCapID(capId);
      if(capContactResult.getSuccess())
      {
        capContactResult=capContactResult.getOutput();
        for(yy in capContactResult)
        {
          thisCapContact = capContactResult[yy];
          thisPeople = thisCapContact.getPeople();
          logDebug("Contact type: " + thisPeople.contactType);
        
          // If the given contact is not "Applicant", continue
          if (thisPeople.contactType == "Business")
          {
            // For "Applicant", get  getCapContactModel
            capContactModel = thisCapContact.getCapContactModel();
            var capContactTemplate = capContactModel.template;
            var templateForms = capContactTemplate.getTemplateForms();
            for (i=0; i< templateForms.size(); i++)
            {
              var template = templateForms.get(i);
              var subGroups = template.getSubgroups();
              for (j=0; j< subGroups.size(); j++)
              {
                var subGroup = subGroups.get(j);
                var fields = subGroup.fields;
                for (k=0; k< fields.size(); k++)
                {
                  var field = fields.get(k);
                  fieldValue = field.defaultValue;  
                }        
              }
            }
          }   
        }
      }
      logDebug("Template field value:" + fieldValue);   
      logDebug("Master licensee count: " + masterLicCount);

      if((fieldValue == "LLC" || fieldValue == "Private Corporation" || fieldValue == "Public Corporation")){
        editAppSpecific("Type Class", newValue, vParentCapID);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1329_WTUA_DPL_renewalApprovedUpdateLic, Please contact administrator");
  }
}
/* @desc This method sets the Type Class ASI field on License if the legal structure is Partnership.
 * Release B Master Script List ID: 1210
 * Event: WTUA
 */
function CWM_ELP_1210_DPL_WTUA_SetTypeClassASI()
{
  try
  {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
    {
      var capContactResult = aa.people.getCapContactByCapID(capId);
      if(capContactResult.getSuccess())
      {
        capContactResult=capContactResult.getOutput();
        for(yy in capContactResult)
        {
          thisCapContact = capContactResult[yy];
          thisPeople = thisCapContact.getPeople();
          logDebug("Contact type: " + thisPeople.contactType);
                  
          // Check Contact type
          if (thisPeople.contactType == "Business")
          {
            // For "Business", get  getCapContactModel
            capContactModel = thisCapContact.getCapContactModel();
            var capContactTemplate = capContactModel.template;
            var templateForms = capContactTemplate.getTemplateForms();
            for (i=0; i< templateForms.size(); i++)
            {
              var template = templateForms.get(i);
              var subGroups = template.getSubgroups();
              for (j=0; j< subGroups.size(); j++)
              {
                var subGroup = subGroups.get(j);
                var fields = subGroup.fields;
                for (k=0; k< fields.size(); k++)
                {
                  var field = fields.get(k);
                  fieldValue = field.defaultValue;  
                }        
              }
            }
          }   
        }
      }
      logDebug("Template field value:" + fieldValue);   
      return fieldValue;
/*      //Set the Errors and Omissions ASI field on the parent license record.
      if(fieldValue == "Partnership")
      {
        var vParentCapID = getParent(capId);
        var recId = vParentCapID.getCustomID();
        logDebug("License record:" + recId);  
        editAppSpecific("Type Class", "P", vParentCapID);
      }
      else if((fieldValue == "LLC" || fieldValue == "Private Corporation" || fieldValue == "Public Corporation")){
        editAppSpecific("Type Class", "C", vParentCapID);
      } */
    }
  }
  catch(err)
  {
    showMessage=true;
    return null;
    comment("Error on CWM_ELP_1210_DPL_WTUA_SetTypeClassASI function");
  }
}/* @desc This method sets the Errors and Omissions ASI field on License if the legal structure is LLC or Corporation.
 * Release B Master Script List ID: 1211
 * Event: WTUA
 */
function CWM_ELP_1211_DPL_WTUA_SetLicErrorAndOmissionsASI()
{
  try
  {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
    {
      var capContactResult = aa.people.getCapContactByCapID(capId);
      if(capContactResult.getSuccess())
      {
        capContactResult=capContactResult.getOutput();
        for(yy in capContactResult)
        {
          thisCapContact = capContactResult[yy];
          thisPeople = thisCapContact.getPeople();
          logDebug("Contact type: " + thisPeople.contactType);
                  
          // Check Contact type
          if (thisPeople.contactType == "Business")
          {
            // For "Business", get  getCapContactModel
            capContactModel = thisCapContact.getCapContactModel();
            var capContactTemplate = capContactModel.template;
            var templateForms = capContactTemplate.getTemplateForms();
            for (i=0; i< templateForms.size(); i++)
            {
              var template = templateForms.get(i);
              var subGroups = template.getSubgroups();
              for (j=0; j< subGroups.size(); j++)
              {
                var subGroup = subGroups.get(j);
                var fields = subGroup.fields;
                for (k=0; k< fields.size(); k++)
                {
                  var field = fields.get(k);
                  fieldValue = field.defaultValue;  
                }        
              }
            }
          }   
        }
      }
      logDebug("Template field value:" + fieldValue);   
      
      //Set the Errors and Omissions ASI field on the parent license record.
      if(fieldValue == "LLC" || fieldValue == "LLP")
      {
        var vParentCapID = getParent(capId);
        var recId = vParentCapID.getCustomID();
        logDebug("License record:" + recId);  
        editAppSpecific("ERRORS AND OMISSIONS.Errors and Omissions", "Yes", vParentCapID);
      }
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on CWM_ELP_1211_DPL_WTUA_SetLicErrorAndOmissionsASI function");
  }
}

/* @desc This method Check null value for ASI Subgroup
 * Release B Master Script List ID: 1212
 * Event: WTUB
 */

 function CWM_ELP_1212_WTUB_DPL_CheckForNullASIValues(){
  try{
    useAppSpecificGroupName = true; 
    var courseTitle = getAppSpecific("APPROVED COURSE INFORMATION.Course Title", capId);
    var totalCourseHours = getAppSpecific("APPROVED COURSE INFORMATION.Total Course Hours", capId);
    var courseType = getAppSpecific("APPROVED COURSE INFORMATION.Course Type", capId);
    var onlineCourse = getAppSpecific("APPROVED COURSE INFORMATION.Online Course", capId);
    //var ABQCriteria= getAppSpecific("APPROVED COURSE INFORMATION.Meets ABQ Criteria", capId);
    var AQBCriteria= getAppSpecific("APPROVED COURSE INFORMATION.Meets AQB Criteria", capId);
    //var AQBCriteriaUSPAP = getAppSpecific("APPROVED COURSE INFORMATION.Meets AQB Criteria?", capId);
    var boardApprovalDate = getAppSpecific("APPROVED COURSE INFORMATION.Board Approval Date", capId);
    var boardMember = getAppSpecific("APPROVED COURSE INFORMATION.Approving Board Member", capId);
    var approvedSchool = getAppSpecific("APPROVED COURSE INFORMATION.Approved School", capId);
    var newSchoolName = getAppSpecific("APPROVED COURSE INFORMATION.New School Name", capId);
    
    if(!newSchoolName) {
    if(appMatch("License/Real Estate Appraiser/Course/CE Course Application")){
      if(wfTask == "Validate" && (wfStatus == "Approved") || wfStatus == "Approved with Conditions"){
        if((!courseTitle) || (!totalCourseHours) || (!courseType) || (!onlineCourse) || (!AQBCriteria) || (!boardApprovalDate) || (!boardMember) || (!approvedSchool)){
          showMessage=true;
          comment("All Approved Course Information must be filled in for this application to be approved.");
          cancel=true;
        }
      }
    }

    if(appMatch("License/Real Estate Appraiser/Course/Primary Course Application")){
      if(wfTask == "Validate" && (wfStatus == "Approved") || wfStatus == "Approved with Conditions"){
        if((!courseTitle) || (!totalCourseHours) || (!courseType) || (!onlineCourse) || (!AQBCriteria) || (!boardApprovalDate) || (!boardMember) || (!approvedSchool)){
          showMessage=true;
          comment("All Approved Course Information must be filled in for this application to be approved.");
          cancel=true;
        }
      }
    }

    if(appMatch("License/Real Estate Appraiser/Course/Seminar Course Application")){
      if(wfTask == "Validate" && (wfStatus == "Approved") || wfStatus == "Approved with Conditions"){
        if((!courseTitle) || (!totalCourseHours) || (!courseType) || (!AQBCriteria) || (!boardApprovalDate) || (!boardMember) || (!approvedSchool)){
          showMessage=true;
          comment("All Approved Course Information must be filled in for this application to be approved.");
          cancel=true;
        }
      }
    }

    if(appMatch("License/Real Estate Appraiser/Course/USPAP Course Application")){
      if(wfTask == "Validate" && (wfStatus == "Approved") || wfStatus == "Approved with Conditions"){
        if((!courseTitle) || (!totalCourseHours) || (!courseType) || (!onlineCourse) || (!AQBCriteria) || (!boardApprovalDate) || (!boardMember) || (!approvedSchool)){
          showMessage=true;
          comment("All Approved Course Information must be filled in for this application to be approved.");
          cancel=true;
        }
      }
    }
    }
    else {
    {
    if(appMatch("License/Real Estate Appraiser/Course/CE Course Application")){
      if(wfTask == "Validate" && (wfStatus == "Approved") || wfStatus == "Approved with Conditions"){
        if((!courseTitle) || (!totalCourseHours) || (!courseType) || (!onlineCourse) || (!AQBCriteria) || (!boardApprovalDate) || (!boardMember)){
          showMessage=true;
          comment("All Approved Course Information must be filled in for this application to be approved.");
          cancel=true;
        }
      }
    }

    if(appMatch("License/Real Estate Appraiser/Course/Primary Course Application")){
      if(wfTask == "Validate" && (wfStatus == "Approved") || wfStatus == "Approved with Conditions"){
        if((!courseTitle) || (!totalCourseHours) || (!courseType) || (!onlineCourse) || (!AQBCriteria) || (!boardApprovalDate) || (!boardMember)){
          showMessage=true;
          comment("All Approved Course Information must be filled in for this application to be approved.");
          cancel=true;
        }
      }
    }

    if(appMatch("License/Real Estate Appraiser/Course/Seminar Course Application")){
      if(wfTask == "Validate" && (wfStatus == "Approved") || wfStatus == "Approved with Conditions"){
        if((!courseTitle) || (!totalCourseHours) || (!courseType) || (!AQBCriteria) || (!boardApprovalDate) || (!boardMember)){
          showMessage=true;
          comment("All Approved Course Information must be filled in for this application to be approved.");
          cancel=true;
        }
      }
    }

    if(appMatch("License/Real Estate Appraiser/Course/USPAP Course Application")){
      if(wfTask == "Validate" && (wfStatus == "Approved") || wfStatus == "Approved with Conditions"){
        if((!courseTitle) || (!totalCourseHours) || (!courseType) || (!onlineCourse) || (!AQBCriteria) || (!boardApprovalDate) || (!boardMember)){
          showMessage=true;
          comment("All Approved Course Information must be filled in for this application to be approved.");
          cancel=true;
        }
      }
    }
    } 
      
      
      
    }
  }
  
  catch(err){
    showMessage=true;
    comment("Error on WTUB function CWM_ELP_1212_WTUB_DPL_CheckForNullASIValues, Please contact administrator");
  }
}

/* @desc This method Copy ASI Subgroup Values to Parent
 * Release B Master Script List ID: 1213
 * Event: WTUA
 */

 function CWM_ELP_1213_WTUA_DPL_CopyASIValues(){
  try{
    var courseTitle = getAppSpecific("Course Title", capId);
    var totalCourseHours = getAppSpecific("Total Course Hours", capId);
    var courseType = getAppSpecific("Course Type", capId);
    var onlineCourse = getAppSpecific("Online Course", capId);
    var ABQCriteria= getAppSpecific("Meets ABQ Criteria", capId);
    var boardApprovalDate = getAppSpecific("Board Approval Date", capId);
    var boardMember = getAppSpecific("Approving Board Member", capId);
    var approvedSchool = getAppSpecific("Approved School", capId);
    var newSchoolName = getAppSpecific("New School Name", capId);
    var vParentCapID = getParent();
    if(vParentCapID)
    {
      if(wfTask == "Validate" && (wfStatus == "Approved" || wfStatus == "Approved with Conditions")){
        editAppSpecific("Course Title", courseTitle, vParentCapID);
        editAppSpecific("Total Course Hours", totalCourseHours, vParentCapID);
        editAppSpecific("Course Type", courseType, vParentCapID);
        editAppSpecific("Online Course", onlineCourse, vParentCapID);
        editAppSpecific("Meets ABQ Criteria", ABQCriteria, vParentCapID);
        editAppSpecific("Board Approval Date", boardApprovalDate, vParentCapID);
          editAppSpecific("Approving Board Member", boardMember, vParentCapID);
          editAppSpecific("Approved School", approvedSchool, vParentCapID);
          editAppSpecific("New School Name", newSchoolName, vParentCapID);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1213_WTUA_DPL_CopyASIValues, Please contact administrator");
  }
}


/* @desc This method Copy ASI Subgroup Values to Parent
* Release B Master Script List ID: 1214
* Event: WTUA
*/
function CWM_ELP_1214_WTUA_DPL_CopyASIValue_CourseTitle() {
    var s_useAppSpecificGroupName = useAppSpecificGroupName; // Save current setting for useAppSpecificGroupName
    try {
        useAppSpecificGroupName = true;
        var courseTitle = getAppSpecific("COURSE INFORMATION.Course Title", capId);
        var courseTitle = getAppSpecific("APPROVED COURSE INFORMATION.Course Title", capId);  // Use this instead.
        var vParentCapID = getParent();
        if (vParentCapID) {
            if (wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions")) {
                var vParentCapIDString = vParentCapID;
                if (vParentCapID.getCustomID) vParentCapIDString = vParentCapID.getCustomID();
                editAppSpecific("APPROVED COURSE INFORMATION.Course Title", courseTitle, vParentCapID);
                logDebug("For record: " + vParentCapIDString + " set APPROVED COURSE INFORMATION.Course Title = " + courseTitle);
            }
        }
    }
    catch (err) {
        showMessage = true;
        comment("Error on WTUA function CWM_ELP_1213_WTUA_DPL_CopyASIValues, Please contact administrator");
    }
    useAppSpecificGroupName = s_useAppSpecificGroupName;     // Restore current setting for useAppSpecificGroupName
}/* @desc This function sets ASI on License record
 * Release B Master Script List ID: 1215
 */
function CWM_ELP_1215_WTUA_DPL_setAfterApprovalASICourseCategoryOnLicense()
{
  var newValue = "Continuing Education";
  if (wfTask == "Validate" && (wfStatus == "Approved" || wfStatus == "Approved with Conditions"))
  {
    var fvLicenseCapID = getParent();
    if (fvLicenseCapID)
    {
      useAppSpecificGroupName = true;
      editAppSpecific("COURSE CATEGORY.Course Category", newValue, fvLicenseCapID);
    }
  }
}/* @desc This function sets ASI on License record
 * Release B Master Script List ID: 1215
 */
function CWM_ELP_1215_WTUA_DPL_setPrimaryCourseASICourseCatOnLic()
{
  var newValue = "Primary";
  if (wfTask == "Validate" && (wfStatus == "Approved" || wfStatus == "Approved with Conditions"))
  {
    var fvLicenseCapID = getParent();
    if (fvLicenseCapID)
    {
      useAppSpecificGroupName = true;
      editAppSpecific("COURSE CATEGORY.Course Category", newValue, fvLicenseCapID);
    }
  }
}
/* @desc This function will copy contacts to Parent License 
* Release B Master Script List ID: 1216
*/
function CWM_ELP_1216_WTUA_DPL_copyContacts2License() {
    try {
        if (wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions")) {
            //get parent
            var vParentCapID = getParent();
            if (vParentCapID) {
                var vParentCapIDString = vParentCapID;
                if (vParentCapID.getCustomID) vParentCapIDString = vParentCapID.getCustomID();
                copyContactsWithAddress(capId, vParentCapID);
                logDebug("Contact(s) copied from " + capIDString + " to " + vParentCapIDString);
            }
        }
    }
    catch (err) {
        showMessage = true;
        comment("Error on WTUA function CWM_ELP_1216_WTUA_DPL_copyContacts2License, Please contact administrator");
    }
}/* @desc This method updates ASI Type Class to CA.
 * Release B Master Script List ID: 1217
 * Event: WTUA
 */

function CWM_ELP_1217_WTUA_DPL_UpdateASITypeClass(){
  try{
    useAppSpecificGroupName = true;
    var newValue = "CA";
    if(wfTask == "Validate" && (wfStatus == "Approved" || wfStatus == "Approved with Conditions")){
      var vParentCapID = getParent();
            if(vParentCapID)
      {
        editAppSpecific("TYPE CLASS.Type Class", newValue, vParentCapID);
          var newASIValue = getAppSpecific("TYPE CLASS.Type Class", vParentCapID);
          logDebug("Value for license ASI is : " + newASIValue);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1217_WTUA_DPL_UpdateASITypeClass, Please contact administrator");
  }
}/* @desc This function sets Course Approval record 'Course Category' field to USPAP
 * Release B Master Script List ID: 1239
 */
function CWM_ELP_1239_WTUA_DPL_setUSPAPCourseCategory()
{
  try
  {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
      {
        //get parent
        var vParentCapID = getParent();
            if(vParentCapID)
        {
          //update ASI on License
        useAppSpecificGroupName = true;
          editAppSpecific("COURSE CATEGORY.Course Category", "USPAP", vParentCapID);
        }
      }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1239_WTUA_DPL_setUSPAPCourseCategory, Please contact administrator");
  }
}
// end CWM_ELP_1239_WTUA_DPL_setUSPAPCourseCategory 
/* @desc This method updates ASI Type Class to SC.
 * Release B Master Script List ID: 1245
 * Event: WTUA
 */

function CWM_ELP_1245_WTUA_DPL_UpdateASITypeClass(){
  try{
    var newValue = "SC";
    
    if(wfTask == "Validate" && matches(wfStatus,"Approved","Approved with Conditions")){
      var vParentCapID = getParent();
            if(vParentCapID)
      {
          editAppSpecific("TYPE CLASS.Type Class", newValue, vParentCapID);
          var newASIValue = getAppSpecificValue("Type Class", vParentCapID);
          logDebug("Value for license ASI is : " + newASIValue);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1245_WTUA_DPL_UpdateASITypeClass, Please contact administrator");
  }
}
/* @desc This method checks if a valid Master license number is entered.
 * Release B Master Script List ID: 1249
 */

function CWM_ELP_1249_DPL_ASB_GFACheckMasterLicNo()
{
  try
  {
    var isActive1 = false;
    var isActive2 = false;    
    var boardCode = lookup("BOARDS", "Gas Fitters");
    var licenseNum = AInfo["Master Gas Fitter License Number"];
    if (licenseNum != undefined && licenseNum != null && licenseNum != "") 
    {
      isActive1 = isLicenseActive(licenseNum, boardCode, "M"); 
      //isActive2 = isLicenseActive(licenseNum, boardCode, "MA");
      logDebug("Available Info:" + licenseNum + " " +isActive1 + " " + isActive2);  
      if (!isActive1) 
      {
        cancel = true;
        showMessage = true;
        message = "";
        comment("At least one Master Licensee with an Active license must exist for the application to be approved.");
      }
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASB function CWM_ELP_1249_DPL_ASB_GFACheckMasterLicNo, Please contact administrator");
  }
}
/* @desc This method checks if a valid Master license number is entered.
 * Release B Master Script List ID: 1249
 */

function CWM_ELP_1249_DPL_ASB_PCheckMasterLicNo()
{
  try
  {
    var isActive1 = false;
    var isActive2 = false;    
    var boardCode = lookup("BOARDS", "Plumbers");
    var licenseNum = AInfo["Master Plumber License Number"];
    if (licenseNum != undefined && licenseNum != null && licenseNum != "") 
    {
      isActive1 = isLicenseActive(licenseNum, boardCode, "M"); 
      //isActive2 = isLicenseActive(licenseNum, boardCode, "MA");
      logDebug("Available Info:" + licenseNum + " " +isActive1 + " " + isActive2);  
      if (!isActive1) 
      {
        cancel = true;
        showMessage = true;
        message = "";
        comment("At least one Master Licensee with an Active license must exist for the application to be approved.");
      }
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASB function CWM_ELP_1249_DPL_ASB_PCheckMasterLicNo, Please contact administrator");
  }
}
/* @desc This function sets the expiration date on the license
 * Release B Master Script List ID: 1260
 */
function CWM_ELP_1260_WTUA_DPL_renewalExpirationDate()
{
  try{
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions")){
      var today = new Date();
            var currentYear = today.getFullYear();
        var fromDate = "01/01/" + currentYear;
        var toDate = "04/30/" + currentYear;
        var newExpDate = new Date();
            newExpDate.setMonth(5);
            newExpDate.setDate(1);
        
        if(currentYear%2 == 0){
          newExpDate.setFullYear(newExpDate.getFullYear() + 1);
          
          var vParentCapID = getParentLicenseCapID(capId);
                if(vParentCapID){
                  if(wfDateMMDDYYYY >= fromDate && wfDateMMDDYYYY <= toDate){
                    var licNum = vParentCapID.getCustomID();
                    thisLic = new licenseObject(licNum,vParentCapID);
                    thisLic.setExpiration(dateAdd(newExpDate,0));
                  }
                }
        }
    }
    
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1260_WTUA_DPL_renewalExpirationDate, Please contact administrator");
  }
}
/* @desc This function checks if the balance is zero before approving
 * Release B Master Script List ID: 1261
 */
function CWM_ELP_1261_WTUB_DPL_checkBalanceIsZero()
{
  try
  {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions") && balanceDue > 0)
    {
      cancel = true;
      showMessage = true;
      comment("All fees must be paid prior to approval of the application.");
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUB function CWM_ELP_1261_WTUB_DPL_checkBalanceIsZero, Please contact administrator");
  }
}/* @desc This method adds the contact associated with the Broker license to the record as a transactional contact type of 'Broker of Record' and also add the link to the LP record in the 'Licenses' tab.  
 * Release B Master Script List ID: 1279
 */

function CWM_ELP_1279_DPL_ASA_AddReferenceContactFromBrokerLicense()
{
  var licNo = getAppSpecific("Broker of Record License Number");
  logDebug("License Number: " + licNo);
  var contactType = "Broker of Record";

  var refLP = getRefLicenseProf(licNo, "RE", "B");
  if (refLP) 
  {
    var fvAddResult = aa.licenseScript.associateLpWithCap(capId, refLP);
        
    // get the license number and licensee name
    var licNum = refLP.stateLicense + "-RE-B";
    var refLPFirstName = refLP.contactFirstName;
    var refLPLastName = refLP.contactLastName;

    logDebug("Broker License: " + licNum);
    logDebug("Broker Licensee: " + refLPFirstName + " " + refLPLastName); 
    if (refLPFirstName && refLPLastName) 
    {
      var licCapId = aa.cap.getCapID(licNum).getOutput();
      var licContacts = getPeople(licCapId); 
      for (c in licContacts) 
      {
        var licContact = licContacts[c];
        var licContactModel = licContact.getCapContactModel();
        var refContactNumber = licContactModel.refContactNumber;
        var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput();
        logDebug("Broker License Contact: " + licContact.firstName + " " + licContact.lastName + " ref:" + refContactNumber);
        if (licContact.firstName && licContact.lastName && licContact.firstName.toUpperCase().equals(refLPFirstName.toUpperCase()) && licContact.lastName.toUpperCase().equals(refLPLastName.toUpperCase())) 
        {
          var getResult = aa.people.getPeople(refContactNumber);
          if (getResult.getSuccess()) 
          {
            var peopleObj = getResult.getOutput();
            // add the reference contact from the people object to the application record
            var contactNbr = addReferenceContactFromPeopleModel(peopleObj);
            logDebug("contact Number of new Ref contact: " + contactNbr);
            var appContacts = aa.people.getCapContactByCapID(capId).getOutput();
            for (c in appContacts) 
            {
              var appContact = appContacts[c];
              if (appContact.getPeople().getContactSeqNumber() == contactNbr) 
              {
                // change the contact type of the newly added contact
                appContact.getPeople().setContactType(contactType);
                var updateResult = aa.people.editCapContact(appContact.getCapContactModel());
                if (updateResult.getSuccess()) 
                {
                  logDebug("Contact " + contactNbr + " updated successfully");
                } 
                else 
                {
                  logDebug("Contact " + contactNbr + " update failed: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                }
                // copy addresses
                for (add in contactAddressList) 
                {
                  var transactionAddress = false;
                  contactAddressModel = contactAddressList[add].getContactAddressModel();
                  if (contactAddressModel.getEntityType() == "CAP_CONTACT") 
                  {
                    transactionAddress = true;
                    contactAddressModel.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                  }
                  // Commit if transaction contact address
                  if (transactionAddress) 
                  {
                    var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                    contactAddressModel.setContactAddressPK(newPK);
                    aa.address.createCapContactAddress(capId, contactAddressModel);
                  }
                  // Commit if reference contact address
                  else 
                  {
                    // build model
                    var Xref = aa.address.createXRefContactAddressModel().getOutput();
                    Xref.setContactAddressModel(contactAddressModel);
                    Xref.setAddressID(contactAddressList[add].getAddressID());
                    Xref.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                    Xref.setEntityType(contactAddressModel.getEntityType());
                    Xref.setCapID(capId);
                    // commit address
                    aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                  }
                }
                break;
              }        
            }
            break;
          }
          else 
          {
            logDebug("Can't find " + refLPFirstName + " " + refLPLastName + " reference contact number: " + refContactNumber + " : " + getResult.getErrorType() + ":" + getResult.getErrorMessage());
          }
        }       
      }
    }   
  }
  else return null; 
}/* @desc This method checks if a vald broker license number is entered.
 * Release B Master Script List ID: 1279
 */

function CWM_ELP_1279_DPL_ASB_CheckBrokerLicNo()
{
  try
  {   
    var boardCode = lookup("BOARDS", "Real Estate Brokers & Salespersons");
    var licenseNum = AInfo["Broker of Record License Number"];
    if (licenseNum != undefined && licenseNum != null && licenseNum != "") 
    {
      var isActive = isLicenseActive(licenseNum, boardCode, "B");
                         var isABActive = isLicenseActive(licenseNum, boardCode, "AB");
                         var isRBActive = isLicenseActive(licenseNum, boardCode, "RB"); 
      if (!isActive && !isABActive && !isRBActive) 
      {
        cancel = true;
        showMessage = true;
        message = "";
        comment("The broker license # provided is not valid or is not an broker license. Please contact the board for further details.");
      }
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASB function CWM_ELP_1279_DPL_ASB_CheckBrokerLicNo, Please contact administrator");
  }
}
function CWM_ELP_1280_ASIUA_DPL_setStdChoiceRAApprovedSchool()
{
  useAppSpecificGroupName = true;
  var fvSchoolName = getAppSpecific("APPROVED COURSE INFORMATION.New School Name",capId);
  if (fvSchoolName && fvSchoolName != "")
  {
    var fvSchoolLookup = lookup("RA_APPROVED_SCHOOLS",fvSchoolName);
    if (fvSchoolLookup == undefined)
      addLookup("RA_APPROVED_SCHOOLS",fvSchoolName,null);
  }
}
/*
*Added by Chris Louis-Jean 6/2/15
* If the field 'New School Name' has a value, then Add this School Name to the Std. 
*Choice of RA Schools and set the School Code to the next available School code number. 
*Also may need to set the last Approval number for that school to a default value of 0001
*/
function CWM_ELP_1280_DPL_ADD_NewSchool(capId){
useAppSpecificGroupName  = false;
logDebug("useAppSpecificGroupName: " +useAppSpecificGroupName);
logDebug("Entering CWM_ELP_1280_DPL_ADD_NewSchool(capId)");
var myNewSchool = getAppSpecific("New School Name",capId);
logDebug("capId: " +capId);
logDebug("myNewSchool = "+myNewSchool);
  if(myNewSchool != "" && myNewSchool != null)
  {
      var schoolCode = lkupSchool_ApprovalCode("SeqNumber");
      ++schoolCode;
      schoolCode = "000" + schoolCode;
      var domain1 = "RA_School_Approval_Code_";
      var domain2 = "RA_APPROVED_SCHOOLS";
      setupSchool_ApprovalCode(domain1,"SeqNumber", schoolCode);
      var schoolLookup = lookup("RA_APPROVED_SCHOOLS", myNewSchool);
      logDebug("schoolLookup = "+schoolLookup);
      var newApprovalCode = myNewSchool + ".approvalNumber";
        if (schoolLookup == undefined){
        var defaultApproval = "0001";
        var description = schoolCode + "|" + defaultApproval;
        var bizDomScriptResult = aa.bizDomain.createBizDomain("RA_APPROVED_SCHOOLS", myNewSchool, "A", description);
        var approvalScriptResult = aa.bizDomain.createBizDomain("RA_School_Approval_Code_", newApprovalCode, "A", defaultApproval);
        logDebug("Is CWM_ELP_1280_DPL_ADD_NewSchool successful?: " + bizDomScriptResult.getSuccess());
      }
      else{
          var approvalCode = lkupSchool_ApprovalCode(newApprovalCode);
          ++approvalCode;
          var description = schoolCode + "|" + approvalCode;
          setupSchool_ApprovalCode(domain2,myNewSchool,description);
          setupSchool_ApprovalCode(domain1,newApprovalCode,approvalCode);
      }
  }
}

//param should be one of the two strings, SeqNumber or ApprovalNumber
function lkupSchool_ApprovalCode(desiredVal){
  var code = "";
  var biz = aa.bizDomain.getBizDomainByValue("RA_School_Approval_Code_", desiredVal);
  if(desiredVal == "ApprovalNumber" || desiredVal == "SeqNumber"){
    if(biz.getSuccess()){
      code = biz.getOutput().getDescription();
    }
    else{
      logDebug("There was an error retrieving the description from the biz model.");
    }
  }
  else{
    logDebug("Improper parameter value.");
  }

  return code;
}

function setupSchool_ApprovalCode(domain, descType, descValue){
  var biz = aa.bizDomain.getBizDomainByValue(domain, descType);
  if(biz.getSuccess()){
    biz.getOutput().setDescription(descValue);
    logDebug("setupSchool_ApprovalCode has updated "+descType+ " to " + biz.getOutput().getDescription());
    var newBiz = aa.bizDomain.editBizDomain(biz.getOutput().getBizDomain());
  }
  else{
    logDebug("There was an error retrieving the description from the biz model.");
  }

}


function CWM_ELP_1292_DPL_ASA_MasterExceedsApprenticeCount() {
  // Check to see if apprentices is greater than 6
//var licenseNum = AInfo["License Number"];
var boardName = getBoard(capId);
aa.print("board: " + boardName);
useAppSpecificGroupName = true;
var licenseNum;
aa.print("app type: " + appTypeString);
if (appMatch("License/Plumbers and Gas Fitters/Gas Fitter Apprentice/Application")){
 licenseNum = AInfo["Master Gas Fitter License Number"];
}
else {
 licenseNum = AInfo["Master Plumber License Number"];
}

if (licenseNum != undefined && licenseNum != null && licenseNum != "") {
  var profLicense = getRefLicenseProf(licenseNum, boardName, "M");
  aa.print("master: " + profLicense);
  if (profLicense != null) {
    var LicenseSeqNum2 = profLicense.getLicSeqNbr();
  var countOfApprentices = getCountOfApprenticesByLicSeqNum(LicenseSeqNum2);
   // aa.print(countOfApprentices);
    if (countOfApprentices > 5) {
      addStdCondition("Notice", "Number of Related Apprentices Warning");
      cancel = true;
      showMessage = true;
      comment("The Master Licensee already has at least 6 apprentices.");
    }
  }
}

}/* @desc This function adds the Licensure Fee when the exam is passed.
 * Release B Master Script List ID: 1294
 */
function CWM_ELP_1294_WTUA_DPL_addFeeOnExamPassed() 
{
  addFee("HOAP", "HO", "STANDARD", 1, "Y");
}/* @desc This method sends email to master licensee contact. If no Email stores the report onto record.
 * Event: WTUA
   Script: 1295
 */
function CWM_ELP_1295_DPL_WTUA_SendMasterLicnseeNotification()

{

if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
 {
 

    // showDebug = true;
var capContactResult = aa.people.getCapContactByCapID(capId);
  if (capContactResult.getSuccess())
  {
    capContactResult = capContactResult.getOutput();
    aa.print(capContactResult.length);
    for (yy in capContactResult) 
    {
      thisCapContact = capContactResult[yy];
      thisPeople = thisCapContact.getPeople();
                      
      
      var contacttype = thisPeople.getContactType();

                        if(contacttype == "Business")
                       var  businessname = thisPeople.businessName;
                       
                       if(contacttype == "Master Licensee")
                       var  FullName = thisPeople.firstName + " " + thisPeople.lastName;

                       var vCapModel = aa.cap.getCap(capId).getOutput();
                       var fvCapTypeObj = vCapModel.getCapType();
                       var fvAlias = fvCapTypeObj.getAlias();
                       
                       var servProvCode = aa.getServiceProviderCode();

                            
              if (thisPeople.email != null && validEmail(thisPeople.email) && contacttype == "Master Licensee")
        {
          var myHashMap=aa.util.newHashMap();
          myHashMap.put("ALT_ID", capId.getCustomID());
          var fvEmailParameters = aa.util.newHashtable();
          
            fvEmailParameters.put("$$TYPE$$",fvAlias);
                    fvEmailParameters.put("$$AGENCY$$",servProvCode);
                    fvEmailParameters.put("$$APPLICANTNAME$$",businessname);
                    fvEmailParameters.put("$$FULL_NAME$$",FullName);
            sendReportByEmailTemplate("Master_Licensee_Notification", myHashMap, sysFromEmail, thisPeople.email, "", "MASTER_LICENSEE_NOTIFICATION", fvEmailParameters, "License", "ADMIN");
        }

      else if (thisPeople.email == null && contacttype == "Master Licensee")
                {
                     var myHashMap=aa.util.newHashMap();
          myHashMap.put("ALT_ID", capId.getCustomID());
          var report = generateReportAndSave("Master_Licensee_Notification", myHashMap, capId);                        
                    if(!report)
                    logDebug("**WARNING Report not generated");
                
                }
                
            }
        }


    }
}/* @desc This method performs the following when a renewal is approved:
 *   1. Update the expiration date according to the expiration policy of the license 
 *   2. Update the Renewal status on the license record to be 'Active'
 *   3. Update the WF Task/Status to 'Issuance/Ready for Printing'
 * Release B Master Script List ID: 1329
 */
function CWM_ELP_1329_WTUA_DPL_renewalApprovedUpdateLic()
{
  try{
      //if renewal is approved
      if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
      {
        //get parent license
        var vParentCapID = getParentLicenseCapID(capId);
        if(vParentCapID)
        {
          // get expiration date
          var b1ExpResult = aa.expiration.getLicensesByCapID(vParentCapID);
          if(b1ExpResult.getSuccess())
          {
            var b1Exp = b1ExpResult.getOutput();
            if(b1Exp)
            {
              //update license expiration date according to policy
              var expDate=b1Exp.getExpDate();
                      if(expDate)
                  setLicExpirationDate(vParentCapID, expDate);
            }
          }
       }
     
        //update renewal workflow
        activateTask("Issuance");
        updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
      }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1329_WTUA_DPL_renewalApprovedUpdateLic, Please contact administrator");
  }
}
/* @desc This method performs the following when a renewal is approved:
 *   1. Update the expiration date according to the expiration policy of the license 
 *   2. Update the Renewal status on the license record to be 'Active'
 *   3. Update the WF Task/Status to 'Issuance/Ready for Printing'
 *   4. Copy any new rows added to the ASIT ""Professional Licenses/Registrations issued in other states"" from the renewal to the license record."
 * Release B Master Script List ID: 1330
 */
function CWM_ELP_1330_WTUA_DPL_renewalApprovedUpdateLic()
{


   //if renewal is approved
   if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
   {
     //get parent license
     var vParentCapID = getParentLicenseCapID(capId);
     if(vParentCapID)
     {
       // get expiration date
       var b1ExpResult = aa.expiration.getLicensesByCapID(vParentCapID);
       if(b1ExpResult.getSuccess())
       {
         var b1Exp = b1ExpResult.getOutput();
         if(b1Exp)
         {
           //update license expiration date according to policy
           var expDate=b1Exp.getExpDate();
              if(expDate){
                 setLicExpirationDate(vParentCapID, expDate);
              }
         }
         
         //Copy new ASIT rows here
                           copySingleASITable("LICENSE IN OTHER JURISDICTIONS", capId, vParentCapID); 
       }
       
     }
     
     //update renewal workflow
     activateTask("Issuance");
     updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");

   }
}

function CWM_ELP_1333_WTUA_DPL_CopyASITContEduToLic()
{
  //if renewal is approved
  if (wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
  {
    var vCap = aa.cap.getCap(capId).getOutput();
    var vCapModel = vCap.getCapModel();
    var vCreatedBy = vCapModel.getCreatedBy();
    if (vCreatedBy.length() > 9 && vCreatedBy.substring(0,10) == "PUBLICUSER")
    {
      var vParentCapID = getParentLicenseCapID(capId);
      if(vParentCapID)
      {
        aa.continuingEducation.copyContEducationList(capId,vParentCapID);
      }
    }
  }
} // End CWM_ELP_1333_WTUA_DPL_CopyASITContEduToLic
function CWM_ELP_1336_DPL_ASA_getCorpStructure(checkContactType) {
  var legalstructure;
  var capContactResult = aa.people.getCapContactByCapID(capId);
  if(capContactResult.getSuccess())
  {
    capContactResult=capContactResult.getOutput();
    for(yy in capContactResult)
    { 
      thisCapContact = capContactResult[yy];
      thisPeople = thisCapContact.getPeople();
      
       if (thisPeople.contactType == checkContactType)
        {
                var asiTemplate = thisPeople.template;
                if(asiTemplate)
                {
                  var templategroup = asiTemplate.getTemplateForms();
                  logDebug(templategroup.size());

                  var field1 = CWM_ELP_1336_DPL_ASA_getFieldAttributeByName(templategroup, "LEGAL STRUCTURE", "Legal Structure");
                  legalstructure = field1.getDefaultValue();
                  logDebug(legalstructure);
                  return legalstructure;
                }

       }
    }
  }
  return legalstructure;
}


function CWM_ELP_1336_DPL_ASA_getFieldAttributeByName(templateGroups, subGroupName, fieldName) {
    logDebug("ENTER: getFieldAttributeByName");
 
    if (templateGroups == null || templateGroups.size() == 0) {
        return null;
    }
    var subGroups = templateGroups.get(0).getSubgroups();
    for (var subGroupIndex = 0; subGroupIndex < subGroups.size(); subGroupIndex++) {
        var subGroup = subGroups.get(subGroupIndex);
        //logDebug(subGroup.getSubgroupName() + " " + subGroup.getFields().size());
        if (subGroupName == subGroup.getSubgroupName()) {
            var fields = subGroup.getFields();
            for (var fieldIndex = 0; fieldIndex < fields.size(); fieldIndex++) {
                var field = fields.get(fieldIndex);
                //logDebug(field.getDisplayFieldName());
                if (field.getDisplayFieldName() == fieldName) {
                   //aa.print(field);
                    return field;
                }
            }
        }
    }
 
    logDebug("EXIT: getFieldAttributeByName");
}

function CWM_ELP_1345_WTUA_DPL_notifyExamVendor(){
    if (wfTask == "Validate" && wfStatus == "Approved to Sit for Exam") {
    var params = aa.util.newHashtable();
    addParameter(params, "$$recordType$$", cap.getCapType().getAlias());
    getContactParams4Notification(params, "Applicant");
  var vendorEmail = lookup("LK_Vendor_Emails", getBoard(capId));
    getACARecordParam4Notification(params, acaUrl);
  var applicantname = params.get("$$applicantFirstName$$") + " " + params.get("$$applicantLastName$$");
    addParameter(params, "$$licAltID$$", capId.getCustomID());
  addParameter(params, "$$ApplicantName$$", applicantname);
    sendNotification(sysFromEmail, vendorEmail, "", "EXAM_VENDOR_EMAIL", params, null);
  }
}/* @desc This method sets the expiration date for Real Estate Broker License
 * Release B Master Script List ID: 1349
 */

function CWM_ELP_1349_DPL_WTUA_setExpDateForREBroker(licId)
{
  try
  {
    logDebug("Inside setExpDateForRE");
    var currDate = new Date();
    var expDate = new Date();
    var oneDay = 24*60*60*1000;
    var bDateObj;
    var firstDayOfNextMonth = new Date();
    
    var licCustId = licId.getCustomID();
    logDebug("Parent ID: " + licId + " " + licCustId);
  
    //Get applicant's birthday
    var capContactResult=aa.people.getCapContactByCapID(capId);
    if(capContactResult.getSuccess())
    {
      capContactResult=capContactResult.getOutput();
      for(i in capContactResult)
      {
        var peopleModel= capContactResult[i].getPeople();
        if(peopleModel.getContactType()=="Applicant" )
        {
          var capContactScriptModel= capContactResult[i];
          var capContactModel= capContactScriptModel.getCapContactModel();
          var bDate = capContactModel.getBirthDate();
          if(bDate != null) 
          {
            bDateObj = new Date(bDate.getTime());
            logDebug("Birth date of applicant:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
          }
        }
      }
    }

    if(bDateObj)
    {
      bDateObj.setFullYear(currDate.getFullYear());
      firstDayOfNextMonth.setFullYear(currDate.getFullYear());
      firstDayOfNextMonth.setMonth((currDate.getMonth()+1));
      firstDayOfNextMonth.setDate(1);
      
      if(bDateObj<firstDayOfNextMonth)
      {
        expDate.setFullYear((currDate.getFullYear() + 2));
      }
      else
      {
        expDate.setFullYear((currDate.getFullYear() + 1));
      }
      expDate.setMonth(bDateObj.getMonth());
      expDate.setDate(bDateObj.getDate());
      var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
      logDebug("Exp date: " + expDateString);

      thisLic= new licenseObject(licCustId,licId);
      thisLic.setExpiration(expDateString);
      thisLic.setStatus("Active");
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1349_DPL_WTUA_setExpDateForREBroker, Please contact administrator");
  }
}/* @desc This method adds fee to RE Reciprocal Salesperson application.
 * Release B Master Script List ID: 1353
 */
 
function CWM_ELP_1353_DPL_ASA_AddFeeOnRESalespersonApp(appID, licID)
{
  addFee("RSAP", "RE", "STANDARD", 1, "Y");
}/* @desc This method adds fee to RE Broker based on renewal date
 * Release B Master Script List ID: 1354
*/

/* @desc This method adds fee to RE Broker based on renewal date
 * Release B Master Script List ID: 1354
*/
function CWM_ELP_1354_DPL_ASA_AddProRatedFee(capId)
{
  
  //modified the function to only determine the qty and return it to the addDplApplicationfee function
  try
  {
    //if(getAppSpecific("Military Status")!="Active Duty")
    //{
      //Variables
      var bDateObj;
      var issueDateObj = new Date();
      var nextMonth = new Date(); 
      
      //Constant values to be used per the business logic
      var oneDay = 24*60*60*1000;
      var brokerLicenseFee = parseInt(lookup("lookup:RE App Fee", "RE-B-APP"));
      if(!brokerLicenseFee)
        brokerLicenseFee = 142;
      var monthlyBrokerLicenseFee = Math.floor(brokerLicenseFee/24);
      logDebug("Monthly Broker License Fee: " + monthlyBrokerLicenseFee);
      
      //Get the applicant contact's birth date
      var capContactResult=aa.people.getCapContactByCapID(capId);
      if(capContactResult.getSuccess())
      {
        capContactResult=capContactResult.getOutput();
        for(i in capContactResult)
        {
          var peopleModel= capContactResult[i].getPeople();
          if(peopleModel.getContactType()=="Applicant" )
          {
            var capContactScriptModel= capContactResult[i];
            var capContactModel= capContactScriptModel.getCapContactModel();
            var bDate = capContactModel.getBirthDate();
            if(bDate != null) 
            {
              bDateObj = new Date(bDate.getTime());
              logDebug("Birth date of applicant:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
            }
          }
        }
      }
      
      
      if(bDateObj)
      {    
        bDateObj.setFullYear(issueDateObj.getFullYear());
        
        if(bDateObj < issueDateObj)
        {
          bDateObj.setFullYear(issueDateObj.getFullYear()+1);     
        }
        
        logDebug("Birth date after updates:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
        
        var days = Math.round(Math.abs((bDateObj.getTime() - issueDateObj.getTime())/(oneDay)));
        var months = Math.round(days/30.43);
        logDebug("Months to next birthday: " + months);
        var feeQuantity = (months*monthlyBrokerLicenseFee) + brokerLicenseFee;
        logDebug("License Fee feeQuantity: " + feeQuantity);
        return feeQuantity;
        //addFee("RSOL","RE-SALESMAN-APP","STANDARD",feeQuantity,"Y",capId);
        //logDebug("Fee added");
      }
    }
  //}
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1354_DPL_ASA_AddProRatedFee, Please contact administrator");
  }
}
function CWM_ELP_1358_EXP_DPL_SMAADocCheck() {
   var pcapIdString = capId.getID1() + "-" + capId.getID2() + "-" + capId.getID3();
   var acaDocResult = getAcaDocumentList(pcapIdString);

   logDebug("CapID: " + capId.getCustomID()); 
   logDebug("Document Result:" + acaDocResult.size());

   var docAttached = false;
   if (acaDocResult.size() >0)
   {
      acaDocResult = acaDocResult.toArray();
      docAttached = checkForTTBPermit(acaDocResult);
   }

   if (!docAttached) {
      cancel = true;
      showMessage = true;
      comment("At least one document must be provided in order to proceed with this application.");
   }
}
function checkForTTBPermit(pacaDocResult)
{
   var bFound = false;
   var docTotal = 0;
   // Loop all the documents
   for (var counter in pacaDocResult)
   {
      var fvDocument = pacaDocResult[counter];
      // Check to see document exists
      if (fvDocument.getDocCategory() == "State/Municipal Appointing Authority Form")
      {
         bFound = true;
         break;
      }
   }

   return bFound;
} 
// end function checkForTTBPermit
function CWM_ELP_1359_ASB_DPL_Enter_At_Least_One_ASITRow() {

  loadASITablesBefore();
  var residentRows = 0;
  var generalRows = 0;
  var specialRows = 0;
  var minRows = 1;
  try {
    residentRows = RESIDENTIALSUBJECTPROPERTY.length;
  } catch (err) {}
  try {
    generalRows = GENERALSUBJECTPROPERTY.length;

  } catch (err) {}
  try {
    specialRows = SPECIALASSIGNMENTSUBJECTPRO.length;

  } catch (err) {}

  if (residentRows < minRows && generalRows < minRows && specialRows < minRows) {
    showMessage = true;
    comment("At least one of the Residential Subject Property, General Subject Property or Special Assignment Subject Property tables must be populated.");
    cancel = true;
  }
}

function CWM_ELP_1364_DPL_ADD_SET_ALT_ID(){
   useAppSpecificGroupName  = false;
   var myNewSchool = getAppSpecific("New School Name");
   var biz = aa.bizDomain.getBizDomainByValue("RA_APPROVED_SCHOOLS", myNewSchool);
   var alt_id = "";

    if(biz.getSuccess()){
      var description = biz.getOutput().getDescription();
      alt_id  = description.substr(0,4) + description.substr(5,8) + "-RA-CA" ;
      return alt_id;
    }
    else{
      logDebug("There was an error retrieving the description from the biz model.");
    }
   return alt_id;
}
/* @desc Associate record with license record.
* Release B Master Script List ID: 1376
*/
function CWM_ELP_1376_DPL_ASA_AssociateLicense() {
    var funcName = "CWM_ELP_1376_DPL_ASA_AssociateLicense";
    if (!wfTask == "Validate" && !matches(wfStatus, "Completed")) {
        logDebug("Skipped " + funcName + ": validation is not complete for " + capIDString);
        return false;
    }

    var boardName = getAppSpecific("Board");
  //  var licenseTypeClass = lookup("LICENSE_TYPE_CLASS", getAppSpecific("License Type Class"));
    var licenseNbr = getAppSpecific("License Number");
    var licenseeName = getAppSpecific("Licensee Name");
/*     if (boardName == null) boardName = "Real Estate Appraisers";
    if (licenseTypeClass == null) licenseTypeClass = "CG";
    var opBoard = lookup("BOARDS", boardName);
    
    // Check translation successs
    if (opBoard == null) {
        logDebug("**WARNING: Translating Board " + boardName);
        return false;
    }
    if (licenseTypeClass == null) {
        logDebug("**WARNING: Translating License Type Class" + licenseTypeClass);
        return false;
    } */

    // Check if record is valid License.
   // var licenseCapId = licenseNbr + "-" + opBoard + "-" + licenseTypeClass
    capResult = aa.cap.getCapID(licenseNbr);
    if (!capResult.getSuccess()) {
        logDebug("**WARNING: error getting cap " + licenseNbr + ": " + capResult.getErrorMessage());
        return false;
    }
    var licCapId = capResult.getOutput();
    if (!licCapId) {
        logDebug("**WARNING: error getting cap " + licenseNbr + ": ");
        return false;
    }

    // Check if record is valid License.
    if (!appMatch("License/*/*/License", licCapId)) {
        licCap = aa.cap.getCap(licCapId).getOutput();
        licTypeResult = cap.getCapType();
        logDebug("License Number is not a valid License: " + licCapId.getCustomID() + " " + licTypeResult);
        return false;
    }

    // Associate License with record.
    var result = aa.cap.createAppHierarchy(licCapId, capId);
    if (result.getSuccess())
        logDebug("Parent License " + licCapId.getCustomID() + " successfully linked to: " + capId.getCustomID());
    else
        logDebug("Could not link applications");

}
/* @Desc: This function will create the following
 * create Real Estate Instructor Approval parent record
 * Set Type Class to SI
 * Release B Master Script List ID: 1379
 */
function CWM_ELP_1379_WTUA_DPL_createLicense(){
  try{
    var thisCap = aa.cap.getCap(capId).getOutput();
    var thisCapType = thisCap.getCapType().toString();
    var newLicense = null;
    var contactType = lookup("Lookup:CONTACT TYPE DEFAULT", thisCapType);
    var licHolderType = lookup("Lookup:CONTACT LICENSE HOLDER TYPE", thisCapType);
    
    if(wfTask=="Validate" && matches(wfStatus,"Approved","Approved with Conditions")){
      newLicense = createLicense("Active",true, false,contactType,false,"");
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on CWM_ELP_1379_WTUA_DPL_createLicense");
  }
}/*   function will send notification when Bad Address condition is placed.
* Script ID: 1452
*/
function CWM_ELP_1452_SendNotificationWhenBadAddressCondIsPlaced(){
  try{
    var CondType = "Notice";
      var CondDesc = "Bad Address";
      var emailTemplate = "AA_BAD_ADDRESS_CONDITION_NOTIFICATION_EMAIL";
    var contactFullName = "";
        var contactEmailAddr = "";
        var contactPrefChnl  = "";
        var thisContactType = "";
        var reportToBe;
        var setName = "Complaint Received and Filed";
        var lkupReport = String(lookup("LKUP_SetName_To_Correspondence", setName));
        var CapTypeString = aa.cap.getCap(capId).getOutput().getCapType().toString();
        var CapTypeArray = CapTypeString.split("/");
        var LicPerType = CapTypeArray[1];
        var opBoard = lookup("LKUP_Board_Name",LicPerType);

    if(conditionDesc == "Bad Address" && conditionStatus == "Applied") {
      if (lkupReport == 'undefined') {
                logDebug("**WARNING Set Name: " + renewalSetName + " is not tied to a correspondence.  PLease see administrator for help.");
            }
            else{
                reportToBe = lkupReport.split("|");
            }


      var capContactResult = aa.people.getCapContactByCapID(capId);
            if (capContactResult.getSuccess())
            {
                capContactResult = capContactResult.getOutput();
                
                for (yy in capContactResult) 
                {
                    thisCapContact = capContactResult[yy];
                    thisPeople = thisCapContact.getPeople();
                    
                    thisContactType = thisPeople.getContactType();
                    
                    if(thisContactType == "Applicant")
                    {
                        contactFullName = thisPeople.getContactName();
                        contactEmailAddr = thisPeople.getEmail();
                        contactPrefChnl  = getContactPreferredChannelDesc(thisPeople.getPreferredChannel());
                    }
                }
            }

            if(contactPrefChnl == "Email")
            {
                var emailParameters = aa.util.newHashtable();
                emailParameters.put("$$FULL_NAME$$", contactFullName);
                emailParameters.put("$$BOARD_NAME$$", opBoard);
                emailParameters.put("$$licAltID$$", capId.getCustomID());
                var reportParameterHashMap = aa.util.newHashMap();
                reportParameterHashMap.put("ALT_ID", String(capId.getCustomID()));
                logDebug("Sending email to " + contactEmailAddr + " about record " + capId.getCustomID());
                if (!generateReportSaveAndEmail(reportToBe[0], reportParameterHashMap, emailTemplate, emailParameters, contactEmailAddr, capId)) {
                    logDebug("**WARNING Report not generated or sent for " + contactEmailAddr);
                }
            }
            else
            if(contactPrefChnl == "Postal Mail") {
                logDebug("Adding set to record " + capId.getCustomID());
                callReport(setName, false, true, "Batch Print", capId);
            }
    }
  }
  catch(err){
    logDebug("There is an error on function CWM_ELP_1452_SendNotificationWhenBadAddressCondIsPlaced. Please contact System Administrator.");
  }
}/* @desc This function send email to Prosecutor/Hearing Officer when there is a change in workflow status
 * Release B Master Script List ID: 1455
 */
function CWM_ELP_1455_WTUA_DPL_notifyProsHearOff()
{
    try{
    var capDetail = getCapDetailByID(capId);
        var asgnUser = capDetail.getAsgnStaff();
        var userObj  = aa.person.getUser(asgnUser);
        var user;
        var asgnUserEmail = undefined;
        var altid = capId.getCustomID();
        
        if(userObj.getSuccess())
        {
            user = userObj.getOutput();
            asgnUserEmail = user.getEmail();
            
            if(asgnUserEmail != undefined || asgnUserEmail != null)
            {
                var fvCapID4Email = aa.cap.createCapIDScriptModel(capId.getID1(),capId.getID2(),capId.getID3());
                logDebug("Sending email to " + asgnUserEmail);
                var fvFileNames = [];
                var fvEmailParameters = aa.util.newHashtable();
                fvEmailParameters.put("$$AltID$$",altid);
                if(!aa.document.sendEmailAndSaveAsDocument(sysFromEmail,asgnUserEmail,"","AA_COMPLAINT_STATUS_CHANGED",fvEmailParameters,fvCapID4Email,fvFileNames))
                    logDebug("WARNING: Email was not sent");
            }
            else
            {
                logDebug("WARNING: No email on file for assigned user");
            }
        }
        else
        {
            logDebug("WARNING: There is no user assigned to the Intake record");
        }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_1455_WTUA_DPL_notifyProsHearOff, Please contact administrator");
  }
}

/* @desc This function adds fee to USPAP Course Application
 * Release B Master Script List ID: 1457
 *   It was added as part of defect 3660
 */
function CWM_ELP_1457_ASA_DPL_addFee2USPAPCourseApp()
{
  try
  {
    useAppSpecificGroupName = true;
    var courseType = getAppSpecific("COURSE INFORMATION.Course Type");
    if(courseType.equals("7-hour USPAP Update"))
      udpateFee("RACO","RA-CECOURSE-APP", 1, "Y");
    else
      if(courseType.equals("15-hour USPAP"))
        updateFee("RACA","RA-CECOURSE-APP", 1, "Y");
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASA function CWM_ELP_1457_ASA_DPL_addFee2USPAPCourseApp, Please contact administrator");
  }
}/* @desc This method sets the RE Broker License Expiration Date and status on renewal approval.
 * Release B Master Script List ID: 1458 
 * Event: WTUA
 */
function CWM_ELP_1458_DPL_WTUA_SetREBrokerLicExpirationDate()
{
  try
  {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
    {
      var vParentCapID = getParentCapID4Renewal(capId);
      logDebug("License Record ID: " + vParentCapID.getCustomID());
      setLicExpirationDate(vParentCapID); 
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on CWM_ELP__DPL_WTUA_SetREBrokerLicExpirationDate function");
  }
}/* @desc This method checks if a vald broker license number is entered.
 * Release B Master Script List ID: 1461
 */

function CWM_ELP_1461_DPL_ASB_CheckBrokerLicNo()
{
  try
  {   
    var boardCode = lookup("BOARDS", "Real Estate Brokers & Salespersons");
    var licenseNum = AInfo["License Number"];
    if (licenseNum != undefined && licenseNum != null && licenseNum != "") 
    {
      var isActive = isLicenseActive(licenseNum, boardCode, "B"); 
      if (!isActive) 
      {
        cancel = true;
        showMessage = true;
        message = "";
        comment("The broker license # provided is not valid or is not an broker license. Please contact the board for further details.");
      }
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASB function CWM_ELP_1461_DPL_ASB_CheckBrokerLicNo, Please contact administrator");
  }
}/* @desc Release B Master Script List 
 *  Add conditions to Attorney Broker Application Verification of Broker Surety Bond, Record of Standing, Passport Type Photograph */
function CWM_ELP_1464_ASA_DPL_addConditionsAttBrokerApp()
{
  try
  {
    aa.capCondition.addCapCondition(capId, "Application Checklist", "Verification of Broker Surety Bond", "Bond is required.", null, null, null, null, null, "", null, null, "Pending", "", "A","Y");
    aa.capCondition.addCapCondition(capId, "Application Checklist", "Record of Standing", "Record of Standing is required.", null, null, null, null, null, "", null, null, "Pending", "", "A","Y");
    aa.capCondition.addCapCondition(capId, "Application Checklist", "Passport Type Photograph", "Passport type photograph must be submitted.", null, null, null, null, null, "", null, null, "Pending", "", "A","Y");

  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASA function CWM_ELP_1464_ASA_DPL_addConditionsAttBrokerApp, Please contact administrator");
  }
}/*
*Assign the workflow task to a user who's Department matches (based on record type) and who has the standard choice Inspection District matches the District from the Premise address.
*/
function CWM_ELP_1465_DPL_ASA_AssignInspectorWorkflow(capId){
  try
  {
      var allUserResult = aa.people.getSysUserList(null);
      var allUsers = allUserResult.getOutput();
      var inspectorStatus = "";
      var userId = "";
      var  inspectorExists = false;
      var boardName = getBoardType(capId);
      for(user in allUsers)
      {
        userId = allUsers[user].getUserID();
        inspectorStatus = allUsers[user].getIsInspector();
        if(inspectorStatus == "Y")
        {
            var userDept = getDepartmentName(userId);
            logDebug("userDept: "+userDept);
            logDebug("boardMatch: " + (boardMatch(userDept,boardName)));
            logDebug("amYourInspector: " +(amYourInspector(userId,capId)));
            if((boardMatch(userDept,boardName))&&(amYourInspector(userId,capId)))
            {
                logDebug("This inspector was assigned the workflow task: "+userId);
              dplTaskAssign("Validate",userId); 
              assignCap(userId,capId);
              inspectorExists = true;
              break;
            }   
        }  
      }
      if(!inspectorExists){
        var permitDept = getPermitDept(boardName);
        logDebug("Assigning workflow task to this dept: "+permitDept);
        dplTaskAssign("Validate",permitDept); //assign to department
        assignCap(userId,capId);
      }
  }
  catch(error)
  {
      logDebug("Error in CWM_ELP_1465_DPL_ASA_AssignInspectorWorkflow. Please contact administrator.");
      logDebug(error.name);
      logDebug(error.message);
  }
}
function amYourInspector(userId, capId){
  try
  {
        var insResult = aa.people.getUserDistricts(userId);
      var inspectorDistricts = insResult.getOutput();
      var adrResult = aa.address.getAddressByCapId(capId);
      var applicantAdr = adrResult.getOutput();
      logDebug("applicant address: " +applicantAdr[0].getCity());
      
      for(district in inspectorDistricts)
      {
        if(inspectorDistricts[district].getDistrict() == applicantAdr[0].getCity().toUpperCase())
        {
          return true;
        }
      }
      
      return false;
  }
  catch(error){   
      logDebug("Error in amYourInspector. Please contact administrator.");
      logDebug(error.name);
      logDebug(error.message);
  }
}
function amYourInspector(userId, capId){
  try
  {
        var insResult = aa.people.getUserDistricts(userId);
      var inspectorDistricts = insResult.getOutput();
      var adrResult = aa.address.getAddressByCapId(capId);
      var applicantAdr = adrResult.getOutput();
      logDebug("applicant address: " +applicantAdr[0].getCity());
      
      for(district in inspectorDistricts)
      {
        if(inspectorDistricts[district].getDistrict() == applicantAdr[0].getCity().toUpperCase())
        {
          return true;
        }
      }
      
      return false;
  }
  catch(error){   
      logDebug("Error in amYourInspector. Please contact administrator.");
      logDebug(error.name);
      logDebug(error.message);
  }
}
/*
*cross check with board code of the record
*/
function boardMatch(userDept, boardName) {
  if(boardName == "Sheet Metal")
  {
    return (userDept == "SM-OI-Permits");
  }
  else if(boardName == "Plumbers" || boardName == "Gas Fitters")
  {
    return(userDept == "PL-OI-Permits");
  }
  else
   return -1;
}

function updateTaskDept(wfstr, wfDepartment) // optional process name
{
    // Update the task assignment department
    //
    var useProcess = false;
    var processName = "";
    if (arguments.length == 3) {
        processName = arguments[2]; // subprocess
        useProcess = true;
    }


    var assignBureau = "" + wfDepartment.split("/")[2];
    var assignDivision = "" + wfDepartment.split("/")[3];
    var workflowResult = aa.workflow.getTasks(capId);
    if (workflowResult.getSuccess())
        wfObj = workflowResult.getOutput();
    else
    { logDebug("**ERROR: Failed to get workflow object: " + s_capResult.getErrorMessage()); return false; }

    for (var i in wfObj) {
        fTask = wfObj[i];
        if (fTask.getTaskDescription().toUpperCase().equals(wfstr.toUpperCase()) && (!useProcess || fTask.getProcessCode().equals(processName))) {
            if (wfDepartment) {
                var taskUserObj = fTask.getTaskItem().getAssignedUser()
                taskUserObj.setBureauCode(assignBureau);
                taskUserObj.setDivisionCode(assignDivision);
                fTask.setAssignedUser(taskUserObj);
                var taskItem = fTask.getTaskItem();

                var adjustResult = aa.workflow.assignTask(taskItem);
                if (adjustResult.getSuccess())
                    logDebug("Updated Workflow Task : " + wfstr + " Department Set to " + assignBureau);
                else
                    logDebug("Error updating wfTask : " + adjustResult.getErrorMessage());
            }
            else
                logDebug("Couldn't update Department.  Invalid department : " + assignBureau);
        }
    }
}
// Additional script to disallow the licensee to submit a renewal for a (SM, PL & GF, RE) business via ACA if the key individual is not current in their license status

function CWM_ELP_1467_DPL_ASB_stopRenewal(capId){

var smRecord = appMatch("License/Sheet Metal/Business License/Renewal") ;
var plRecord =  appMatch("License/Plumbers and Gas Fitters/Business/Renewal") ;
var gfRecord = appMatch("License/Plumbers and Gas Fitters/Gas Fitter Business/Renewal") ;
var reRecord = appMatch("License/Real Estate/Business/Renewal");
var masterType = null;
    if(smRecord){
    masterType = "Sheet Metal Master";
  }
  else if(plRecord){
    masterType = "Master Plumber";
  }
  else if(gfRecord){
    masterType = "Master Gas Fitter";
  }
  else if(reRecord){
    masterType = "Broker of Record";
  }
  
  if ((publicUser) && (smRecord || plRecord || gfRecord  || reRecord))
  { 
    try{
        if(!isValidLicensee(masterType,capId))
        {
          showMessage = true;
          cancel = true;
          comment("The key individual  associated with this business must be current in order to submit this renewal." );
        }   
      }
    catch(error){
      showMessage = true;
      comment("There is an error in CWM_ELP_1467_DPL_ASB_stopRenewal. Please contact the administrator.")
       comment(error.message);
       comment(error.name);
    }
  }
}

function expireLicensee(licNbr,contactFirstName){
  var proList = aa.licenseScript.getRefLicensesProfByLicNbr("DPL",licNbr).getOutput();
  var pro = null;
  for(x in proList){
    if(proList[x].getContactFirstName() == contactFirstName){
      pro = proList[x];
     }
  }
  var expYear= pro.getLicenseExpirationDate();
  expYear.setMonth(5);
  expYear.setYear(2015)
  logDebug("The licensee expiration date has been changed to " + expYear.getMonth() +"/"+ expYear.getDayOfMonth()+"/"+expYear.getYear());
  pro.setLicenseExpirationDate(expYear);
  aa.licenseScript.editRefLicenseProf(pro);
  logDebug("The first name of the licensee that was expired is: " + pro.getContactFirstName());
}

function isValidLicensee(masterType,capId){
  try{
      var expMonth = null;
      var expYear = null;
      var expDay = null;
      var today = new Date();
      var currentDay = today.getDate();
      var currentMonth = today.getMonth() + 1;
      var currentYear = today.getFullYear();
        var capContactResult = getContactArray(capId);
      var fname = null;
      var  lname = null;
      var mName = null;                     
      var smMasterLP;
      logDebug ("capContactResult length" + capContactResult.length );
       for(yy in capContactResult){
           thisContact = capContactResult[yy];                                          
           if (thisContact["contactType"].equals("Master Licensee")){
            fName = (thisContact["firstName"]);
            mName = (thisContact["middleName"]);
            lname = (thisContact["lastName"]);
           }
      }
      
      var profLicenses = aa.licenseProfessional.getLicensedProfessionalsByCapID(capId);
      if (profLicenses.getSuccess()) 
      {
        var profLicenses = profLicenses.getOutput();
        for (var counter in profLicenses) 
        {
          var thisProfLicense = profLicenses[counter];
          var profModel = thisProfLicense.getLicenseProfessionalModel();
          if(profModel.getLicenseType() == masterType)
          {
            smMasterLP = profModel.getLicSeqNbr();
          }
        }
      }
      logDebug("Master LP: " + smMasterLP);
        //get Licensed Profs on CAP
      var licProfResult = aa.licenseScript.getRefLicensesProfByName("DPL",fname,mName,lname);
      if (!licProfResult.getSuccess()) {
        logDebug("Error getting CAP's license professional: " + licProfResult.getErrorMessage());
      }
      var licProfList = licProfResult.getOutput();
      if (licProfList) {
        for (x in licProfList) {
          if (masterType.equals(licProfList[x].getLicenseType()) && smMasterLP == licProfList[x].getLicSeqNbr())  {
          
            //if(fName.equalsIgnoreCase(licProfList[x].getContactFirstName()) && mName.equalsIgnoreCase(licProfList[x].getContactMiddleName()) && lname.equalsIgnoreCase(licProfList[x].getContactLastName()))
            {
              //if(smMasterLP == licProfList[x].getLicSeqNbr())
              logDebug("Found match ");
              expYear = licProfList[x].getLicenseExpirationDate().getYear();
              expMonth = licProfList[x].getLicenseExpirationDate().getMonth();
              expDay = licProfList[x].getLicenseExpirationDate().getDayOfMonth();
            }
          }
        }
      } 
      else 
      {
        logDebug("No licensed professionals found on CAP");
      }
      
       if(expYear != currentYear)
       {
         return (expYear > currentYear);
       } 
       else if(expMonth != currentMonth)
       {
         return expMonth > currentMonth;
       }
       else if(expDay != currentDay){
         return expDay > currentDay;
       }
      else 
      {
        return false;
      } 
  }
  catch(error){
    showMessage = true;
    comment("There is an error in isValidLicensee. Please called administrator.");
    comment(error.name);
    comment(error.message);
  }
}
function CWM_ELP_1469_DPL_getEmailFromContact(contactType)
{
    try
    {
        var capContactResult = aa.people.getCapContactByCapID(capId);
        if (capContactResult.getSuccess())
        {
            capContactResult = capContactResult.getOutput();
            aa.print(capContactResult.length);
            for (yy in capContactResult) 
            {
                thisCapContact = capContactResult[yy];
                thisPeople = thisCapContact.getPeople();
                
                var thisContactType = thisPeople.getContactType();
                var thisContactTypeEmail = thisPeople.getEmail();
                
                if(thisContactType == contactType)
                {
                    return thisContactTypeEmail;
                }
            }
        }
        
        return "";
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUA function CWM_ELP_1469_DPL_getEmailFromContact, Please contact administrator");
    }
}/* Release B Master Script List ID: 1469
 * @desc This function gets the name of the master licensee
 */
function CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber)
{
    try
    {
        logDebug("Getting licensed professional for license: " + licenseNumber);
        var licProfObj = getRefLicenseProf(licenseNumber);
        
        if(licProfObj){
            return licProfObj;
        }
        else{
            showMessage = true;
            comment("Error getting Master Licensee name information");
            return "";
        }
        
        return "";
        
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUA function CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber, Please contact administrator");
    }
}/* Release B Master Script List ID: 1469
 * @desc This function gets the name of the applicant or business
 */
function CWM_ELP_1469_DPL_getFullNameFromContact(contactType)
{
    try
    {
        var capContactResult = aa.people.getCapContactByCapID(capId);
        if (capContactResult.getSuccess())
        {
            capContactResult = capContactResult.getOutput();
            aa.print(capContactResult.length);
            for (yy in capContactResult) 
            {
                thisCapContact = capContactResult[yy];
                thisPeople = thisCapContact.getPeople();
                
                var thisContactType = thisPeople.getContactType();
                
                if(thisContactType == contactType)
                {
                    return thisPeople.getContactName();
                    
                }
            }
        }
        
        return "";
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUA function CWM_ELP_1469_DPL_getFullNameFromContact, Please contact administrator");
    }
}
/* Release B Master Script List ID: 1469
 * @desc This function sends a notification to the master license if they are added to the following applications:
 * License/Plumbers and Gas Fitters/Apprentice/Application
 * License/Plumbers and Gas Fitters/Gas Fitter Apprentice/Application
 * License/Sheet Metal/Apprentice/Application 
 * License/Plumbers and Gas Fitters/Business/Application
 * License/Plumbers and Gas Fitters/Gas Fitter Business/Application
 * License/Sheet Metal/Business License/Application
 * If master licensee is the same as the applicant then no need to send notification.
 */
function CWM_ELP_1469_WTUA_DPL_sendMasterLicenseeNotification()
{
    try
    {
        var renewalSetName = "DPL|MASTER_LICENSEE_NOTIFICATION";
        var lkupReport = String(lookup("LKUP_SetName_To_Correspondence", renewalSetName));
        var reportToBe;
        var emailTemplate = "AA_MASTER_LICENSE_NOTIFICATION_EMAIL";
        var servProvCode = aa.getServiceProviderCode();
        
        if (lkupReport == 'undefined') {
            logDebug("**WARNING Set Name: " + renewalSetName + " is not tied to a correspondence.  PLease see administrator for help.");
        }
        else{
            reportToBe = lkupReport.split("|");
        }
        
        if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions")){
            //var useAppSpecificGroupName = true;
            var applicantFullName = "";
            var masterLicFullName = "";
            var masterLicEmailAdr = "";
            var sendNotification  = false;
            var licenseNumber     = "";
            var boardCode         = "";
            var licenseType       = "";
            var licObj;
            var masterPrefChnl    = "";
            
            // for License/Plumbers and Gas Fitters/Apprentice/Application
            if(appMatch("License/Plumbers and Gas Fitters/Apprentice/Application")){
                licenseNumber = getAppSpecific("Master Plumber License Number");
                if(licenseNumber != "" && licenseNumber != null && licenseNumber != undefined){
                    boardCode = lookup("BOARDS", "Plumbers");
                    licenseType = "";
                    //masterLicFullName = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber, boardCode, licenseType);
                    licObj = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber);
                    if(licObj != "") {
                        if(licObj.getContactMiddleName() != "" && licObj.getContactMiddleName() != null && licObj.getContactMiddleName() != undefined)
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactMiddleName() + " " + licObj.getContactLastName();
                        else
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactLastName();
                        
                        //masterLicEmailAdr = licObj.getEMailAddress();
                        
                        var masterLicContactResult = aa.people.getCapContactByCapID(aa.cap.getCapID(licenseNumber).getOutput());
                        if (masterLicContactResult.getSuccess())
                        {
                            masterLicContactResult = masterLicContactResult.getOutput();
                            
                            for (yy in masterLicContactResult) 
                            {
                                thisMasterContact = masterLicContactResult[yy];
                                thisMasterPeople = thisMasterContact.getPeople();
                                
                                var masterContactType = thisMasterPeople.getContactType();
                                
                                if(masterContactType == "Licensed Individual")
                                {
                                    masterLicEmailAdr = thisMasterPeople.getEmail();
                                    masterPrefChnl    = getContactPreferredChannelDesc(thisMasterPeople.getPreferredChannel());
                                    logDebug("Email on Master License: " + masterLicEmailAdr);
                                    logDebug("Preferred Channel for Master Licensee: " + masterPrefChnl);
                                    
                                }
                            }
                        }
                        
                        applicantFullName = CWM_ELP_1469_DPL_getFullNameFromContact("Applicant"); //Plumbing Apprentice has Applicant
                    
                        if(masterLicFullName != applicantFullName){
                            logDebug("Name for applicant and master licensee do not match.  Try to send notification to master licensee");
                            if(masterLicEmailAdr != "" && masterLicEmailAdr != undefined && masterLicEmailAdr != null){
                                //send email
                                var boardName = lookup("LKUP_Board_Name","Plumbers");
                                var vCapModel = aa.cap.getCap(capId).getOutput();
                                var fvCapTypeObj = vCapModel.getCapType();
                                var fvAlias = fvCapTypeObj.getAlias();
                                
                                var emailParameters = aa.util.newHashtable();
                                emailParameters.put("$$FULL_NAME$$", masterLicFullName);
                                emailParameters.put("$$BOARD_NAME/AGENCY NAME$$", boardName+"/"+servProvCode);
                                emailParameters.put("$$License_Per_Type$$", fvAlias);
                                emailParameters.put("$$Applicant_Name$$", applicantFullName);
                                
                                var reportParameterHashMap = aa.util.newHashMap();
                                reportParameterHashMap.put("ALT_ID", String(capId.getCustomID()));
                                if (!generateReportSaveAndEmail(reportToBe[0], reportParameterHashMap, emailTemplate, emailParameters, masterLicEmailAdr, capId)) {
                                    logDebug("**WARNING Report not generated or sent for " + masterLicFullName);
                                }
                                //added for script 1283
                                // comment to workflow indicating that the email was sent
                                else
                                {
                                    editTaskComment(wfTask, "Notification emailed to Master");
                                    
                                    if(masterPrefChnl == "Postal Mail")
                                        callReport(reportToBe[0], true, true, "Batch Print");
                                }

                            }
                            else
                                callReport(reportToBe[0], true, true, "Batch Print");
                        }
                    }
                    else 
                        logDebug("ERROR: Could not find the LP");
                }
                    
                else{
                    showMessage = true;
                    comment("Master License Number is blank in the application.");
                }
                    
            }//END for License/Plumbers and Gas Fitters/Apprentice/Application
            
            // for License/Plumbers and Gas Fitters/Gas Fitter Apprentice/Application
            if(appMatch("License/Plumbers and Gas Fitters/Gas Fitter Apprentice/Application")){
                licenseNumber = getAppSpecific("Master Gas Fitter License Number");
                if(licenseNumber != "" && licenseNumber != null && licenseNumber != undefined){
                    boardCode = lookup("BOARDS", "Plumbers");
                    licenseType = "";
                    //masterLicFullName = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber, boardCode, licenseType);
                    licObj = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber);
                    if(licObj != "") {
                        if(licObj.getContactMiddleName() != "" && licObj.getContactMiddleName() != null && licObj.getContactMiddleName() != undefined)
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactMiddleName() + " " + licObj.getContactLastName();
                        else
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactLastName();
                        
                        //masterLicEmailAdr = licObj.getEMailAddress();
                        
                        var masterLicContactResult = aa.people.getCapContactByCapID(aa.cap.getCapID(licenseNumber).getOutput());
                        if (masterLicContactResult.getSuccess())
                        {
                            masterLicContactResult = masterLicContactResult.getOutput();
                            
                            for (yy in masterLicContactResult) 
                            {
                                thisMasterContact = masterLicContactResult[yy];
                                thisMasterPeople = thisMasterContact.getPeople();
                                
                                var masterContactType = thisMasterPeople.getContactType();
                                
                                if(masterContactType == "Licensed Individual")
                                {
                                    masterLicEmailAdr = thisMasterPeople.getEmail();
                                    masterPrefChnl    = getContactPreferredChannelDesc(thisMasterPeople.getPreferredChannel());
                                    logDebug("Email on Master License: " + masterLicEmailAdr);
                                    logDebug("Preferred Channel for Master Licensee: " + masterPrefChnl);
                                    
                                }
                            }
                        }
                        
                        applicantFullName = CWM_ELP_1469_DPL_getFullNameFromContact("Applicant"); //Plumbing Apprentice has Applicant
                    
                        if(masterLicFullName != applicantFullName){
                            logDebug("Name for applicant and master licensee do not match.  Try to send notification to master licensee");
                            if(masterLicEmailAdr != "" && masterLicEmailAdr != undefined && masterLicEmailAdr != null){
                                //send email
                                var boardName = lookup("LKUP_Board_Name","Plumbers");
                                var vCapModel = aa.cap.getCap(capId).getOutput();
                                var fvCapTypeObj = vCapModel.getCapType();
                                var fvAlias = fvCapTypeObj.getAlias();
                                
                                var emailParameters = aa.util.newHashtable();
                                emailParameters.put("$$FULL_NAME$$", masterLicFullName);
                                emailParameters.put("$$BOARD_NAME/AGENCY NAME$$", boardName+"/"+servProvCode);
                                emailParameters.put("$$License_Per_Type$$", fvAlias);
                                emailParameters.put("$$Applicant_Name$$", applicantFullName);
                                
                                var reportParameterHashMap = aa.util.newHashMap();
                                reportParameterHashMap.put("ALT_ID", String(capId.getCustomID()));
                                if (!generateReportSaveAndEmail(reportToBe[0], reportParameterHashMap, emailTemplate, emailParameters, masterLicEmailAdr, capId)) {
                                    logDebug("**WARNING Report not generated or sent for " + masterLicFullName);
                                }
                                                                //added for script 1283
                                // comment to workflow indicating that the email was sent
                                else
                                {
                                    editTaskComment(wfTask, "Notification emailed to Master");
                                    
                                    if(masterPrefChnl == "Postal Mail")
                                        callReport(reportToBe[0], true, true, "Batch Print");
                                }
                            }
                            else
                                callReport(reportToBe[0], true, true, "Batch Print");
                        }
                    }
                    else 
                        logDebug("ERROR: Could not find the LP");
                }
                    
                else{
                    showMessage = true;
                    comment("Master License Number is blank in the application.");
                }
                    
            } //END for License/Plumbers and Gas Fitters/Gas Fitter Apprentice/Application
            
            // for License/Sheet Metal/Apprentice/Application 
            if(appMatch("License/Sheet Metal/Apprentice/Application"))
      {
                licenseNumber = getAppSpecific("License Number");
                logDebug("Master Licensee License Number from ASI: " + licenseNumber);
                if(licenseNumber != "" && licenseNumber != null && licenseNumber != undefined){
                    boardCode = lookup("BOARDS", "Sheet Metal Workers");
                    licenseType = "";
                    //masterLicFullName = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber, boardCode, licenseType);
                    licObj = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber);
          logDebug("Lic Obj: " + licObj);
                    if(licObj != "") {
                        if(licObj.getContactMiddleName() != "" && licObj.getContactMiddleName() != null && licObj.getContactMiddleName() != undefined)
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactMiddleName() + " " + licObj.getContactLastName();
                        else
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactLastName();
                        
                        //masterLicEmailAdr = licObj.getEMailAddress();
            licModel = licObj.getLicenseModel();
            busLic = licModel.getBusinessLicense();

                        logDebug("Master Lic Full Name: " + masterLicFullName);
            
            var licNum = licenseNumber + "-" + boardCode + "-" + busLic;
            logDebug("Lic Num: " + licNum);
                        var masterLicContactResult = aa.people.getCapContactByCapID(aa.cap.getCapID(licNum).getOutput());
                        if (masterLicContactResult.getSuccess())
                        {
                            masterLicContactResult = masterLicContactResult.getOutput();
                            
                            for (yy in masterLicContactResult) 
                            {
                                thisMasterContact = masterLicContactResult[yy];
                                thisMasterPeople = thisMasterContact.getPeople();
                                
                                var masterContactType = thisMasterPeople.getContactType();
                                
                                if(masterContactType == "Licensed Individual")
                                {
                                    masterLicEmailAdr = thisMasterPeople.getEmail();
                                    masterPrefChnl    = getContactPreferredChannelDesc(thisMasterPeople.getPreferredChannel());
                                    logDebug("Email on Master License: " + masterLicEmailAdr);
                                    logDebug("Preferred Channel for Master Licensee: " + masterPrefChnl);
                                    
                                }
                            }
                        }
                        
                        applicantFullName = CWM_ELP_1469_DPL_getFullNameFromContact("Applicant"); //Plumbing Apprentice has Applicant
                    
                        if(masterLicFullName != applicantFullName){
                            logDebug("Name for applicant and master licensee do not match.  Try to send notification to master licensee");
                            if(masterLicEmailAdr != "" && masterLicEmailAdr != undefined && masterLicEmailAdr != null){
                                //send email
                                var boardName = lookup("LKUP_Board_Name","Sheet Metal Workers");
                                var vCapModel = aa.cap.getCap(capId).getOutput();
                                var fvCapTypeObj = vCapModel.getCapType();
                                var fvAlias = fvCapTypeObj.getAlias();
                                
                                var emailParameters = aa.util.newHashtable();
                                emailParameters.put("$$FULL_NAME$$", masterLicFullName);
                                emailParameters.put("$$BOARD_NAME/AGENCY NAME$$", boardName+"/"+servProvCode);
                                emailParameters.put("$$License_Per_Type$$", fvAlias);
                                emailParameters.put("$$Applicant_Name$$", applicantFullName);
                                
                                var reportParameterHashMap = aa.util.newHashMap();
                                reportParameterHashMap.put("ALT_ID", String(capId.getCustomID()));
                logDebug("Current User ID: " + currentUserID);
                reportParameterHashMap.put("UserID", currentUserID);
                var userFullName;
                var wfTaskUser =  aa.person.getUser(currentUserID);
                if(wfTaskUser.getSuccess()) 
                {
                  wfTaskUser = wfTaskUser.getOutput();
                  userFullName = wfTaskUser.getFullName();
                  logDebug("User Full Name: " + userFullName);
                  reportParameterHashMap.put("UserFullName", userFullName);
                }
                var pId = getParent();
                logDebug("Parent ID: " + pId);

                                if (!generateReportSaveAndEmail(reportToBe[0], reportParameterHashMap, emailTemplate, emailParameters, masterLicEmailAdr, pId)) {
                                    logDebug("**WARNING Report not generated or sent for " + masterLicFullName);
                                }
                                                                //added for script 1283
                                // comment to workflow indicating that the email was sent
                                else
                                {
                                    editTaskComment(wfTask, "Notification emailed to Master");
                                    
                                    if(masterPrefChnl == "Postal Mail")
                                        callReport(reportToBe[0], true, true, "Batch Print");
                                }
                            }
                            else
                                callReport(reportToBe[0], true, true, "Batch Print");
                        }
                    }
                    else 
                        logDebug("ERROR: Could not find the LP");
                }
                    
                else{
                    showMessage = true;
                    comment("Master License Number is blank in the application.");
                }
                    
            }// END for License/Sheet Metal/Apprentice/Application 
            
            // for License/Plumbers and Gas Fitters/Gas Fitter Business/Application 
            if(appMatch("License/Plumbers and Gas Fitters/Gas Fitter Business/Application")){
                licenseNumber = getAppSpecific("Master Gas Fitter License Number");
                logDebug("Master Licensee License Number from ASI: " + licenseNumber);
                if(licenseNumber != "" && licenseNumber != null && licenseNumber != undefined){
                    boardCode = lookup("BOARDS", "Gas Fitters");
                    licenseType = "";
                    //masterLicFullName = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber, boardCode, licenseType);
                    licObj = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber);
                    if(licObj != "") {
                        if(licObj.getContactMiddleName() != "" && licObj.getContactMiddleName() != null && licObj.getContactMiddleName() != undefined)
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactMiddleName() + " " + licObj.getContactLastName();
                        else
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactLastName();
                        
                        //masterLicEmailAdr = licObj.getEMailAddress();
                        
                        var masterLicContactResult = aa.people.getCapContactByCapID(aa.cap.getCapID(licenseNumber).getOutput());
                        if (masterLicContactResult.getSuccess())
                        {
                            masterLicContactResult = masterLicContactResult.getOutput();
                            
                            for (yy in masterLicContactResult) 
                            {
                                thisMasterContact = masterLicContactResult[yy];
                                thisMasterPeople = thisMasterContact.getPeople();
                                
                                var masterContactType = thisMasterPeople.getContactType();
                                
                                if(masterContactType == "Licensed Individual")
                                {
                                    masterLicEmailAdr = thisMasterPeople.getEmail();
                                    masterPrefChnl    = getContactPreferredChannelDesc(thisMasterPeople.getPreferredChannel());
                                    logDebug("Email on Master License: " + masterLicEmailAdr);
                                    logDebug("Preferred Channel for Master Licensee: " + masterPrefChnl);
                                    
                                }
                            }
                        }
                        
                        applicantFullName = CWM_ELP_1469_DPL_getFullNameFromContact("Business"); //Plumbing Apprentice has Applicant
                    
                        if(masterLicFullName != applicantFullName){
                            logDebug("Name for applicant and master licensee do not match.  Try to send notification to master licensee");
                            if(masterLicEmailAdr != "" && masterLicEmailAdr != undefined && masterLicEmailAdr != null){
                                //send email
                                var boardName = lookup("LKUP_Board_Name","Sheet Metal Workers");
                                var vCapModel = aa.cap.getCap(capId).getOutput();
                                var fvCapTypeObj = vCapModel.getCapType();
                                var fvAlias = fvCapTypeObj.getAlias();
                                
                                var emailParameters = aa.util.newHashtable();
                                emailParameters.put("$$FULL_NAME$$", masterLicFullName);
                                emailParameters.put("$$BOARD_NAME/AGENCY NAME$$", boardName+"/"+servProvCode);
                                emailParameters.put("$$License_Per_Type$$", fvAlias);
                                emailParameters.put("$$Applicant_Name$$", applicantFullName);
                                
                                var reportParameterHashMap = aa.util.newHashMap();
                                reportParameterHashMap.put("ALT_ID", String(capId.getCustomID()));
                                if (!generateReportSaveAndEmail(reportToBe[0], reportParameterHashMap, emailTemplate, emailParameters, masterLicEmailAdr, capId)) {
                                    logDebug("**WARNING Report not generated or sent for " + masterLicFullName);
                                }
                                                                //added for script 1283
                                // comment to workflow indicating that the email was sent
                                else
                                {
                                    editTaskComment(wfTask, "Notification emailed to Master");
                                    
                                    if(masterPrefChnl == "Postal Mail")
                                        callReport(reportToBe[0], true, true, "Batch Print");
                                }
                            }
                            else
                                callReport(reportToBe[0], true, true, "Batch Print");
                        }
                    }
                    else 
                        logDebug("ERROR: Could not find the LP");
                }
                    
                else{
                    showMessage = true;
                    comment("Master License Number is blank in the application.");
                }
                    
            }// END for License/Plumbers and Gas Fitters/Gas Fitter Business/Application 
            
            // for License/Plumbers and Gas Fitters/Business/Application 
            if(appMatch("License/Plumbers and Gas Fitters/Business/Application")){
                licenseNumber = getAppSpecific("Master Plumber License Number");
                logDebug("Master Licensee License Number from ASI: " + licenseNumber);
                if(licenseNumber != "" && licenseNumber != null && licenseNumber != undefined){
                    boardCode = lookup("BOARDS", "Gas Fitters");
                    licenseType = "";
                    //masterLicFullName = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber, boardCode, licenseType);
                    licObj = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber);
                    if(licObj != "") {
                        if(licObj.getContactMiddleName() != "" && licObj.getContactMiddleName() != null && licObj.getContactMiddleName() != undefined)
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactMiddleName() + " " + licObj.getContactLastName();
                        else
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactLastName();
                        
                        //masterLicEmailAdr = licObj.getEMailAddress();
                        
                        var masterLicContactResult = aa.people.getCapContactByCapID(aa.cap.getCapID(licenseNumber).getOutput());
                        if (masterLicContactResult.getSuccess())
                        {
                            masterLicContactResult = masterLicContactResult.getOutput();
                            
                            for (yy in masterLicContactResult) 
                            {
                                thisMasterContact = masterLicContactResult[yy];
                                thisMasterPeople = thisMasterContact.getPeople();
                                
                                var masterContactType = thisMasterPeople.getContactType();
                                
                                if(masterContactType == "Licensed Individual")
                                {
                                    masterLicEmailAdr = thisMasterPeople.getEmail();
                                    masterPrefChnl    = getContactPreferredChannelDesc(thisMasterPeople.getPreferredChannel());
                                    logDebug("Email on Master License: " + masterLicEmailAdr);
                                    logDebug("Preferred Channel for Master Licensee: " + masterPrefChnl);
                                    
                                }
                            }
                        }
                        
                        applicantFullName = CWM_ELP_1469_DPL_getFullNameFromContact("Business"); //Plumbing Apprentice has Applicant
                    
                        if(masterLicFullName != applicantFullName){
                            logDebug("Name for applicant and master licensee do not match.  Try to send notification to master licensee");
                            if(masterLicEmailAdr != "" && masterLicEmailAdr != undefined && masterLicEmailAdr != null){
                                //send email
                                var boardName = lookup("LKUP_Board_Name","Sheet Metal Workers");
                                var vCapModel = aa.cap.getCap(capId).getOutput();
                                var fvCapTypeObj = vCapModel.getCapType();
                                var fvAlias = fvCapTypeObj.getAlias();
                                
                                var emailParameters = aa.util.newHashtable();
                                emailParameters.put("$$FULL_NAME$$", masterLicFullName);
                                emailParameters.put("$$BOARD_NAME/AGENCY NAME$$", boardName+"/"+servProvCode);
                                emailParameters.put("$$License_Per_Type$$", fvAlias);
                                emailParameters.put("$$Applicant_Name$$", applicantFullName);
                                
                                var reportParameterHashMap = aa.util.newHashMap();
                                reportParameterHashMap.put("ALT_ID", String(capId.getCustomID()));
                                if (!generateReportSaveAndEmail(reportToBe[0], reportParameterHashMap, emailTemplate, emailParameters, masterLicEmailAdr, capId)) {
                                    logDebug("**WARNING Report not generated or sent for " + masterLicFullName);
                                }
                                                                //added for script 1283
                                // comment to workflow indicating that the email was sent
                                else
                                {
                                    editTaskComment(wfTask, "Notification emailed to Master");
                                    
                                    if(masterPrefChnl == "Postal Mail")
                                        callReport(reportToBe[0], true, true, "Batch Print");
                                }
                            }
                            else
                                callReport(reportToBe[0], true, true, "Batch Print");
                        }
                    }
                    else 
                        logDebug("ERROR: Could not find the LP");
                }
                    
                else{
                    showMessage = true;
                    comment("Master License Number is blank in the application.");
                }
                    
            }// END for License/Plumbers and Gas Fitters/Business/Application
            
            // for License/Sheet Metal/Business License/Application 
            if(appMatch("License/Sheet Metal/Business License/Application")){
                licenseNumber = getAppSpecific("License Number");
                if(licenseNumber != "" && licenseNumber != null && licenseNumber != undefined){
                    //masterLicFullName = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber, boardCode, licenseType);
                    licObj = CWM_ELP_1469_DPL_getFulLicObjFromASILicenseNumber(licenseNumber);
                    if(licObj != "") {
                        if(licObj.getContactMiddleName() != "" && licObj.getContactMiddleName() != null && licObj.getContactMiddleName() != undefined)
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactMiddleName() + " " + licObj.getContactLastName();
                        else
                            masterLicFullName = licObj.getContactFirstName() + " " + licObj.getContactLastName();
                        
                        //masterLicEmailAdr = licObj.getEMailAddress();
                        
                        var masterLicContactResult = aa.people.getCapContactByCapID(aa.cap.getCapID(licenseNumber).getOutput());
                        if (masterLicContactResult.getSuccess())
                        {
                            masterLicContactResult = masterLicContactResult.getOutput();
                            
                            for (yy in masterLicContactResult) 
                            {
                                thisMasterContact = masterLicContactResult[yy];
                                thisMasterPeople = thisMasterContact.getPeople();
                                
                                var masterContactType = thisMasterPeople.getContactType();
                                
                                if(masterContactType == "Licensed Individual")
                                {
                                    masterLicEmailAdr = thisMasterPeople.getEmail();
                                    masterPrefChnl    = getContactPreferredChannelDesc(thisMasterPeople.getPreferredChannel());
                                    logDebug("Email on Master License: " + masterLicEmailAdr);
                                    logDebug("Preferred Channel for Master Licensee: " + masterPrefChnl);
                                    
                                }
                            }
                        }
                        
                        applicantFullName = CWM_ELP_1469_DPL_getFullNameFromContact("Applicant"); //Plumbing Apprentice has Applicant
                    
                        if(masterLicFullName != applicantFullName){
                            logDebug("Name for applicant and master licensee do not match.  Try to send notification to master licensee");
                            if(masterLicEmailAdr != "" && masterLicEmailAdr != undefined && masterLicEmailAdr != null){
                                //send email
                                var boardName = lookup("LKUP_Board_Name","Sheet Metal Workers");
                                var vCapModel = aa.cap.getCap(capId).getOutput();
                                var fvCapTypeObj = vCapModel.getCapType();
                                var fvAlias = fvCapTypeObj.getAlias();
                                
                                var emailParameters = aa.util.newHashtable();
                                emailParameters.put("$$FULL_NAME$$", masterLicFullName);
                                emailParameters.put("$$BOARD_NAME/AGENCY NAME$$", boardName+"/"+servProvCode);
                                emailParameters.put("$$License_Per_Type$$", fvAlias);
                                emailParameters.put("$$Applicant_Name$$", applicantFullName);
                                
                                var reportParameterHashMap = aa.util.newHashMap();
                                reportParameterHashMap.put("ALT_ID", String(capId.getCustomID()));
                                if (!generateReportSaveAndEmail(reportToBe[0], reportParameterHashMap, emailTemplate, emailParameters, masterLicEmailAdr, capId)) {
                                    logDebug("**WARNING Report not generated or sent for " + masterLicFullName);
                                }
                                //added for script 1283
                                // comment to workflow indicating that the email was sent
                                else
                                {
                                    editTaskComment(wfTask, "Notification emailed to Master");
                                    
                                    if(masterPrefChnl == "Postal Mail")
                                        callReport(reportToBe[0], true, true, "Batch Print");
                                }
                            }
                            else
                                callReport(reportToBe[0], true, true, "Batch Print");
                        }
                    }
                    else 
                        logDebug("ERROR: Could not find the LP");
                }
                    
                else{
                    showMessage = true;
                    comment("Master License Number is blank in the application.");
                }
                    
            }
                //send notification code here
                // 1. If master licensee doesn't have an email then add it to set MASTER_NOTIFICATION|yyyymmdd using callReport()
                // 2. if email address on file then use generateReportSaveAndEmail()
                //    Note the you will have to pass in the variables in a hashmap to the generateReportSaveAndEmail(). anything in the email templete with $$ around it is a variable. 
                //                    it's value is populated with what you pass in.
        }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUA function CWM_ELP_1469_WTUA_DPL_sendMasterLicenseeNotification, Please contact administrator");
    logDebug(err.message);
    logDebug(err.stack);
    }
}// end CWM_ELP_1469_WTUA_DPL_sendMasterLicenseeNotification

function CWM_ELP_1480_WTUA_SendLapsedNotice(capID4Email, fullName, fvEmail){
  var fvCapID4Email = aa.cap.createCapIDScriptModel(capID4Email.getID1(),capID4Email.getID2(),capID4Email.getID3());
        //var altid =  capID4Email.getCustomID();
         var altid =  capId.getCustomID();
  var fvFileNames = [];
  var fvEmailParameters = aa.util.newHashtable();
  fvEmailParameters.put("$$licenseeName$$",fullName);
  fvEmailParameters.put("$$Record Number$$",altid);
  aa.document.sendEmailAndSaveAsDocument(sysFromEmail,fvEmail,"","License Lapsed Notification",fvEmailParameters,fvCapID4Email,fvFileNames);
  aa.print("email sent");

}function CWM_ELP_1483_WTUA_SendRenewalPurgeNotice(){

sendNotificationToAssignedUser(capID4Email, fullName, fvEmail);



}
//A postable permit and approval letter is emailed to approved permit applicants if their SM or PL/GF permit is approved and their preferred method of communication is email.  Otherwise, this is added to a set for postal mail.
//A postable permit and approval letter is emailed to approved permit applicants if their SM or PL/GF permit is approved and their preferred method of communication is email.  Otherwise, this is added to a set for postal mail.
function CWM_ELP_1484_DPL_WTUA_EmailPermits(capId)
{
  var emailTemplate = "AA_PERMIT_APPROVAL";
  var board = getBoardType(capId);
  var sendMail = "";
  
  var capContactResult = aa.people.getCapContactByCapID(capId);
  if (capContactResult && capContactResult.getSuccess())
  {
    var conArray = capContactResult.getOutput();
    for (var contactCount in conArray)
    {
      var fName;
      var lName;
      var fullName;
      var entityName;
      var streetNbr;
      var addrLine1 = "";
      var addrLine2 = "";
      var state = "";
      var city = "";
      var zipCode = "";
      
      var fvCapContact = conArray[contactCount];
      var fvCapContactModel = fvCapContact.getCapContactModel();
          
      var fvPeopleModel = fvCapContactModel.getPeople();
      var fvContactType = fvPeopleModel.getContactType();
      var primary = fvCapContactModel.getPrimaryFlag();
      
      if(primary == "Y")
      {
        if(appMatch("License/Sheet Metal/Permit/NA"))
        {
          var capAddressResult = aa.address.getAddressByCapId(capId);
          if(capAddressResult.getSuccess())
          {
            var capAddressList = capAddressResult.getOutput();
            if(capAddressList)
            {
              var tempTime = "";  //Stores the temporary time
              for(capAddressIndex in capAddressList)
              { 
                // Get address date and status to retrieve latest mailing address
                var recDate = capAddressList[capAddressIndex].getAuditDate();
                
                // Assign first address date to temporary time when temporary time is null
                if(tempTime == "")
                {
                  tempTime = recDate;
                }
                
                // To get latest premise address based on audit date and status.
                // Address with audit status as "A" and having latest time it will retrieve that address
                if(recDate >= tempTime)
                { 
                  //Assign recDate to tempTime
                  tempTime = recDate; 
                
                  state = capAddressList[capAddressIndex].getState();
                  if(state == null || state == undefined)
                  {
                    state = "";
                  }
                  city = capAddressList[capAddressIndex].getCity();
                  if(city == null || city == undefined)
                  {
                    city = "";
                  }
                  zipCode = capAddressList[capAddressIndex].getZip();
                  if(zipCode == null || zipCode == undefined)
                  {
                    zipCode = "";
                  }
                  streetNbr = capAddressList[capAddressIndex].getHouseNumberAlphaStart();
                  if(streetNbr == null || streetNbr == undefined)
                  {
                    addrLine1 = capAddressList[capAddressIndex].getAddressLine1();
                  }
                  else
                  {
                    addrLine1 = streetNbr+" "+capAddressList[capAddressIndex].getAddressLine1();
                  }
                  addrLine2 = capAddressList[capAddressIndex].getAddressLine2();
                  if(addrLine2 == null || addrLine2 == undefined)
                  {
                    addrLine2 = "";
                  }
                }       
              }
            }
          }
        }
        else
        {
          logDebug(fvCapContactModel + " " + fvContactType + " " + primary);
          var fvConAddress=aa.address.getContactAddressListByCapContact(fvCapContactModel);
          if(fvConAddress.getSuccess())
          { 
            fvConAddress=fvConAddress.getOutput(); 
            for(i in fvConAddress)
            {
              state = fvConAddress[i].getState();
              if(state == null || state == undefined)
              {
                state = "";
              }
              city = fvConAddress[i].getCity();
              if(city == null || city == undefined)
              {
                city = "";
              }
              zipCode = fvConAddress[i].getZip();
              if(zipCode == null || zipCode == undefined)
              {
                zipCode = "";
              }
              addrLine1 = fvConAddress[i].getAddressLine1();
              if(addrLine1 == null || addrLine1 == undefined)
              {
                addrLine1 = "";
              }
              addrLine2 = fvConAddress[i].getAddressLine2();
              if(addrLine2 == null || addrLine2 == undefined)
              {
                addrLine2 = "";
              }
              break;
            } 
          }
        }
        
        
        logDebug("Address: " + state + " " +city + " " + zipCode + " "+addrLine1 + " " + addrLine2);
        
        if(fvContactType == "Permit Applicant")
        {
          sendMail = "A";
          fName = fvPeopleModel.firstName;
          lName = fvPeopleModel.lastName;
          fullName = fName + " " + lName;
          logDebug("Full name: " + fullName);
        }
        else if(fvContactType == "Permit Business")
        {
          sendMail = "B";
          entityName = fvPeopleModel.businessName;
          fullName = entityName;
          logDebug("Entity Name: " + fullName);
        }
        
        var emailParameters = aa.util.newHashtable();
        var servProvCode = aa.getServiceProviderCode();
        emailParameters.put("$$FULL_NAME$$", fullName);
        emailParameters.put("$$BOARD_NAME/AGENCY NAME$$", board+"/"+servProvCode);
        emailParameters.put("$$Permit_Type$$",board);
        emailParameters.put("$$Permit_Number$$", capId.getCustomID());
        emailParameters.put("$$Permit_Addressline1$$",addrLine1);
        emailParameters.put("$$Permit_Addressline2$$",addrLine2);
        emailParameters.put("$$City$$",city);
        emailParameters.put("$$State$$",state);
        emailParameters.put("$$Zipcode$$",zipCode);

        if(appMatch("License/Sheet Metal/Permit/NA") || appMatch("License/Plumbers and Gas Fitters/Permits/Gas Fitting Permit") || appMatch("License/Plumbers and Gas Fitters/Permits/Plumbing Permit"))
        {
          if(((wfStatus == "Approved")||(wfStatus == "Approved with Conditions")) && (wfTask == "Validate"))
          {
            if(sendMail == "A")
              sendCorrespondence("Permit_Letter",emailTemplate,emailParameters,"Permit Applicant",true);
            else if(sendMail == "B")
              sendCorrespondence("Permit_Letter",emailTemplate,emailParameters,"Permit Business",true);
            //logDebug("Email sent to "+recipient + " regarding the "+board+" permit.");
          }
        }
      }
    }
  }
}

function CWM_ELP_1484_WTUA_SendContinuanceNotice() {
//release b script 1484
//send an email notification to the ED and prosecutor of the parent IIR or FI record.

//get the parent record
// determine the ED and prosecutor and get their email addresses

//get the top level parent which could be an IIR or an FI
var fvParent = getParents("Enforce/Investigation/*/*");
//get the adjudication record
var adjParent = getParent();
var newDate = AInfo["New Hearing Date"];
if(adjParent){
var thisCap = aa.cap.getCap(adjParent).getOutput();                  
var adjParentAltId = thisCap.getCapModel().getAltID();
//now get the respondent contact name
    var contactArray = getContactArray(thisCap.getCapID());
   for (cc in contactArray) {
      // Check contact type
    var respContact = "Respondent";
       if (contactArray[cc].contactType != null && (String(contactArray[cc].contactType).toUpperCase() == respContact.toUpperCase())) {
         var respondentName = contactArray[cc].firstName + " "+ contactArray[cc].lastName
     logDebug("respondent name: "+respondentName);
      }
   }

//find the hearing officer and email them
        var vBoardASI = getAppSpecific("Board",adjParent)
        logDebug(vBoardASI);
  var workflowResult = aa.workflow.getTasks(adjParent);
  if (workflowResult.getSuccess())
  {
    wfObj = workflowResult.getOutput();
    for (var i=0; i< wfObj.length; i++)
    {
      var fTask = wfObj[i];
      var desc = fTask.getTaskDescription();
      var activeFlag = fTask.getActiveFlag();

      if(desc == "Hearing" && activeFlag == "Y")
      {
        var fvAssignedStaff = fTask.assignedStaff;
        logDebug(fvAssignedStaff.firstName + fvAssignedStaff.middleName + fvAssignedStaff.lastName);
        var fvUserSR = aa.person.getUser(fvAssignedStaff.firstName,fvAssignedStaff.middleName,fvAssignedStaff.lastName);
        var fullName = fvAssignedStaff.firstName + " " + fvAssignedStaff.lastName;
        if (!fvUserSR || !fvUserSR.getSuccess())
          continue;
        var fvUser = fvUserSR.getOutput();
        if (!fvUser)
          continue;
        var fvEmail = fvUser.email;
        if (fvEmail || fvEmail != "")
        {
          logDebug("Hearing Officer Email:" + fvEmail);
          //sendNotificationToAssignedUser(fvParent[0], fullName, fvEmail);
          capID4Email = fvParent[0];
            var fvCapID4Email = aa.cap.createCapIDScriptModel(capID4Email.getID1(),capID4Email.getID2(),capID4Email.getID3());
            //var altid =  capID4Email.getCustomID();
             var altid =  capId.getCustomID();
            var fvFileNames = [];
            var fvEmailParameters = aa.util.newHashtable();
            fvEmailParameters.put("$$Adj_Record$$",adjParentAltId);
            fvEmailParameters.put("$$RequestStatus$$",wfStatus);
            fvEmailParameters.put("$$BoardName$$",vBoardASI);
            fvEmailParameters.put("$$RespondentName$$",respondentName);
            fvEmailParameters.put("$$NewDate$$",newDate);                       
            if(wfStatus == "Allowed"){
            aa.document.sendEmailAndSaveAsDocument(sysFromEmail,fvEmail,"","AA_CONTINUANCE_NOTIFICATION",fvEmailParameters,fvCapID4Email,fvFileNames);
            logDebug("email sent");
            }
            else {
            aa.document.sendEmailAndSaveAsDocument(sysFromEmail,fvEmail,"","AA_CONTINUANCE_NOTIFICATION_DENIED",fvEmailParameters,fvCapID4Email,fvFileNames);
            logDebug("email sent");
            }
        }

      }
    }
  }
//determine the ed based on the board asi and email them  
}
if(fvParent){
//logDebug("Parent: " + fvParent[0]);
//find the prosecutor and email them
        var vBoardASI = getAppSpecific("Board",fvParent[0])
        logDebug(vBoardASI);
  var workflowResult = aa.workflow.getTasks(fvParent[0]);
  if (workflowResult.getSuccess())
  {
    wfObj = workflowResult.getOutput();
    for (var i=0; i< wfObj.length; i++)
    {
      var fTask = wfObj[i];
      var desc = fTask.getTaskDescription();
      var activeFlag = fTask.getActiveFlag();

      if(desc == "Prosecution Review" && activeFlag == "Y")
      {
        var fvAssignedStaff = fTask.assignedStaff;
        logDebug(fvAssignedStaff.firstName + fvAssignedStaff.middleName + fvAssignedStaff.lastName);
        var fvUserSR = aa.person.getUser(fvAssignedStaff.firstName,fvAssignedStaff.middleName,fvAssignedStaff.lastName);
        var fullName = fvAssignedStaff.firstName + " " + fvAssignedStaff.lastName;
        if (!fvUserSR || !fvUserSR.getSuccess())
          continue;
        var fvUser = fvUserSR.getOutput();
        if (!fvUser)
          continue;
        var fvEmail = fvUser.email;
        if (fvEmail || fvEmail != "")
        {
          logDebug("Prosecution Review Email:" + fvEmail);
          //sendNotificationToAssignedUser(fvParent[0], fullName, fvEmail);
          capID4Email = fvParent[0];
            var fvCapID4Email = aa.cap.createCapIDScriptModel(capID4Email.getID1(),capID4Email.getID2(),capID4Email.getID3());
            //var altid =  capID4Email.getCustomID();
             var altid =  capId.getCustomID();
            var fvFileNames = [];
            var fvEmailParameters = aa.util.newHashtable();
            fvEmailParameters.put("$$Adj_Record$$",adjParentAltId);
            fvEmailParameters.put("$$RequestStatus$$",wfStatus);
            fvEmailParameters.put("$$BoardName$$",vBoardASI);
            fvEmailParameters.put("$$RespondentName$$",respondentName);
            fvEmailParameters.put("$$NewDate$$",newDate);                 
            if(wfStatus == "Allowed"){
            aa.document.sendEmailAndSaveAsDocument(sysFromEmail,fvEmail,"","AA_CONTINUANCE_NOTIFICATION",fvEmailParameters,fvCapID4Email,fvFileNames);
            logDebug("email sent");
            }
            else {
            aa.document.sendEmailAndSaveAsDocument(sysFromEmail,fvEmail,"","AA_CONTINUANCE_NOTIFICATION_DENIED",fvEmailParameters,fvCapID4Email,fvFileNames);
            logDebug("email sent");
            }
        }

      }
    }
  }
//determine the ed based on the board asi and email them

      if (vBoardASI != undefined && vBoardASI != null && vBoardASI != "") {
          var deptUser = lookup("TASK_ASSIGNMENT", lookup("BOARDS", vBoardASI) + "|ED");
          logDebug(deptUser);
        }
          
       if(deptUser!=null && deptUser!=undefined && deptUser!="")
      {

        var fvAssignedStaff = deptUser;
        logDebug(fvAssignedStaff);
        var fvUserSR = aa.person.getUser(fvAssignedStaff);
        var fullName = fvAssignedStaff.firstName + " " + fvAssignedStaff.lastName;
        if (fvUserSR && fvUserSR.getSuccess()){
        var fvUser = fvUserSR.getOutput();
            if (fvUser) {
                var fvEmail = fvUser.email;
                if (fvEmail || fvEmail != "")
                {
                  logDebug("ED:" + fvEmail);
          //sendNotificationToAssignedUser(fvParent[0], fullName, fvEmail);
          capID4Email = fvParent[0];
            var fvCapID4Email = aa.cap.createCapIDScriptModel(capID4Email.getID1(),capID4Email.getID2(),capID4Email.getID3());
            //var altid =  capID4Email.getCustomID();
             var altid =  capId.getCustomID();
            var fvFileNames = [];
            var fvEmailParameters = aa.util.newHashtable();
            fvEmailParameters.put("$$Adj_Record$$",adjParentAltId);
            fvEmailParameters.put("$$RequestStatus$$",wfStatus);
            fvEmailParameters.put("$$BoardName$$",vBoardASI);
            fvEmailParameters.put("$$RespondentName$$",respondentName);
            fvEmailParameters.put("$$NewDate$$",newDate);                 
            if(wfStatus == "Allowed"){
            aa.document.sendEmailAndSaveAsDocument(sysFromEmail,fvEmail,"","AA_CONTINUANCE_NOTIFICATION",fvEmailParameters,fvCapID4Email,fvFileNames);
            logDebug("email sent");
            }
            else {
            aa.document.sendEmailAndSaveAsDocument(sysFromEmail,fvEmail,"","AA_CONTINUANCE_NOTIFICATION_DENIED",fvEmailParameters,fvCapID4Email,fvFileNames);
            logDebug("email sent");
            }
                }
            }
        }
      } 
}
}
//A continuing education audit notice is sent via postal mail or email (based on preferred method of communication) to licensees who have been selected for a post-renewal audit.
function CWM_ELP_1485_DPL_ASA_SendAuditNotification(){
  var fname = null;
  var  lname = null;
  var mName = null;  
  var fullName = null;
  var parentID = getParent();
  var capContactResult = getContactArray(parentID);
  var recordType = getAuditType(parentID); 
  var reportName = "CEU Audit Notification " + recordType;
    var board = getBoardType(parentID); 
  var emailParameters = aa.util.newHashtable();
  var emailTemplate = "AA_CE_AUDIT_NOTIFICATION";
  logDebug ("capContactResult length" + capContactResult.length );
  
    for(yy in capContactResult){
      thisContact = capContactResult[yy];                                          
     if (thisContact["contactType"].equals("Master Licensee")){
      fName = (thisContact["firstName"]);
      mName = (thisContact["middleName"]);
      if(mName == null){
        mName = " ";
      }
      lname = (thisContact["lastName"]);
      fullName = fname + " " + mName + " " + lname;
    }
  } 
  
  emailParameters.put("$$LICENSEE_FULL_NAME$$",fullName);
  emailParameters.put("$$BOARD_NAME$$",board);
    
  sendCorrespondence(reportName,emailTemplate, emailParameters, "Master Licensee", true);
}
/* @desc This function sends an email to the complainant when the complaint becomes a Formal Complaint.
 * Release B Master Script List ID: 1486
 */
function CWM_ELP_1486_WTUA_DPL_sendComplainantEmailFormal()
{
    try
    {
        if(wfTask == "Triage" && wfStatus == "Formal Complaint")
        {
            var setName = "Complaint Received and Filed";
            var lkupReport = String(lookup("LKUP_SetName_To_Correspondence", setName));
            var reportToBe;
            var emailTemplate = "ACA_COMPLAINT_FORMAL_EMAIL";
      var complainantFullName = "";
            var complainantEmailAddr = "";
            var complainantPrefChnl  = "";
            
            if (lkupReport == 'undefined') {
                logDebug("**WARNING Set Name: " + setName+ " is not tied to a correspondence.  PLease see administrator for help.");
            }
            else{
                reportToBe = lkupReport.split("|");
            }
            
            var capContactResult = aa.people.getCapContactByCapID(capId);
            if (capContactResult.getSuccess())
            {
                capContactResult = capContactResult.getOutput();
                
                for (yy in capContactResult) 
                {
                    thisCapContact = capContactResult[yy];
                    thisPeople = thisCapContact.getPeople();
                    
                    var thisContactType = thisPeople.getContactType();
                    
                    if(thisContactType == "Complainant")
                    {
                        complainantFullName = thisPeople.getContactName();
                        complainantEmailAddr = thisPeople.getEmail();
                        complainantPrefChnl  = getContactPreferredChannelDesc(thisPeople.getPreferredChannel());
                    }
                }
            }
            
            if(complainantPrefChnl == "Email")
            {
                var emailParameters = aa.util.newHashtable();
                emailParameters.put("$$FullName$$", complainantFullName);
                var reportParameterHashMap = aa.util.newHashMap();
                reportParameterHashMap.put("ALT_ID", String(capId.getCustomID()));
                aa.print("Sending email to " + complainantEmailAddr + " about record " + capId.getCustomID());
                if (!generateReportSaveAndEmail(reportToBe[0], reportParameterHashMap, emailTemplate, emailParameters, complainantEmailAddr, capId)) {
                    logDebug("**WARNING Report not generated or sent for " + complainantEmailAddr);
                }
            }
            else
            if(complainantPrefChnl == "Postal Mail") {
                aa.print("Adding set to record " + capId.getCustomID());
                callReport(setName, false, true, "Batch Print", capId);
            }
        }
    }
    catch(err)
    {
        logDebug("Error on WTUA function CWM_ELP_1486_WTUA_DPL_sendComplainantEmailFormal, Please contact administrator:"+err.message);
    }
}/* @desc This method checks if at least 1 row is added in License In Other Jurisdictions ASIT.
 * Release B Master Script List ID: 3213
 * Updated for Defect - 3973 - Sneha Kalagarla
 */

function CWM_ELP_3213_DPL_ASB_Check1RowLicenseInOtherJurASIT()
{
  if(!publicUser){
    loadASITablesBefore();
  }else if(publicUser){
	// FA 09/01/2019. Ticket# 1044. Use the following new custom script to get the ASITs. 
    loadASITables4ACA_4MasterElectricianApp();
  }

  var licInOtherJurRows = 0;  
  var minRows = 1;
  try 
  {
    licInOtherJurRows = LICENSEINOTHERJURISDICTIONS.length;
  } 
  catch (ex) 
  {
      if (licInOtherJurRows < minRows) 
      {
        cancel = true;
        showMessage = true;
        comment("You must add at least 1 row in License In Other Jurisdictions ASIT.");
      }
    
  }
}

/* @desc This method checks if at least 1 row is added in Instructor Information ASIT.
 * Release B Master Defect ID: 3480
 */

function CWM_ELP_3480_DPL_ASB_Check1RowInstructorInformationASIT()
{
  loadASITablesBefore();
  var autSchoolInstRows = 0;  
  var minRows = 1;
        logDebug("Checking the number of rows in ASIT");
  try 
  {
    autSchoolInstRows = INSTRUCTORINFORMATION.length;
  } 
  catch (ex) 
  {
    if (autSchoolInstRows < minRows) 
    {
      cancel = true;
      showMessage = true;
      comment("You must add at least 1 row in Instructor Information ASIT.");
    }
  }
}/* @desc This method checks if a vald broker license number is entered.
 * Release B Master Script List ID: 3900
 */

function CWM_ELP_3900_DPL_ASB_CheckBrokerLicNo()
{
  try
  {
                  
    var boardCode = lookup("BOARDS", "Real Estate Brokers & Salespersons");
    var licenseNum = AInfo["License Number"];

    var changeType = AInfo["Change Type"];
                 logDebug ("boardCode " + boardCode );
                logDebug ("licenseNum " + licenseNum );
                logDebug ("changeType " + changeType );

    if (changeType.equals("Add New Relationship") && (licenseNum != undefined && licenseNum != null && licenseNum != "") )
    {

       
                        var isActive = CWM_ELP_3900_DPL_isLicenseActive(licenseNum , boardCode, "B");
      if (!isActive) 
      {
        cancel = true;
        showMessage = true;
        message = "";
        comment("License entered is not Current, please contact the Board.");
      }
    }
  }
  catch(err)
  {
                                 cancel = true;
    showMessage=true;
    comment("Error on ASB function CWM_ELP_3900_DPL_ASB_CheckBrokerLicNo, Please contact administrator");
  }
}
function CWM_ELP_3900_DPL_isLicenseActive(licenseNum, boardName, licenseType) 
{
   var isLicenseActive = true;
   var licProfObj = getRefLicenseProf(licenseNum, boardName, licenseType);
   
  if (licProfObj) {
       var capResult = aa.cap.getCapID( licenseNum). getOutput();
  
    var parentCap = aa.cap.getCap(capResult ).getOutput();
    var parentCapStatus = parentCap.getCapStatus();
     logDebug ("parentCapStatus" + parentCapStatus);

      //if (licProfObj.getAuditStatus() == "I") {
      
      if (licProfObj.getWcExempt() == "N" || parentCapStatus != "Current") {  
         isLicenseActive = false;
      }
   } else {
      isLicenseActive = false;
   }
   return isLicenseActive;
   }
/* @desc This method Adds Continuing Education hours and ASI Continuing Education Hrs and sums both.
 * Release B Defect ID: 3932
 * Event: CRCA
 */

function CWM_ELP_3932_CRCA_DPL_addContEduHrsREAppraiser()
{
  try
  {
    logDebug("InsideCWM_ELP_3932_CRCA_DPL_addContEduHrsREAppraiser");
    useAppSpecificGroupName = true;
    var totalHours = 0;
    var tableName = "CONTINUING EDUCATION FORM";
    var asitHrs = 0;
    var myTable = loadASITable(tableName);
    //Check if renewal record ASI has value
    var currentASIHours = getAppSpecific("TOTAL CE HOURS.Total Continuing Education Hours", capId);
    

    if(capId){
      
      if(myTable != "undefined" && myTable.length > 0){
        for(i in myTable){
          var asitObj = myTable[i];
          for(ii in asitObj)
          {
            if(ii == "Continuing Education Hours")
            {
              //asitHrs = asitObj[ii];
              asitHrs = parseFloat(asitHrs) + parseFloat(asitObj[ii]);
              logDebug(i + " " + asitHrs);
            }
          }
        }
      }
      if(asitHrs > 0){
        totalHours = (Number(asitHrs) + Number(currentASIHours));
        logDebug("Total Hours: " + totalHours);
        editAppSpecific("TOTAL CE HOURS.Total Continuing Education Hours", totalHours, capId);
      }
    }
  }
  catch(err){
    logDebug("Error on function CWM_ELP_3932_CRCA_DPL_addContEduHrsREAppraiser, Please call System Administrator. " + err.stack);
  }
}

function CWM_ELP_4148_WTUA_DPL_Defect(){ 
  if(matches(wfTask,"Board Review", "Prosecution Review", "Triage") && (wfStatus == "Case Combined")){
    //close the workflow
     setTask(wfTask,"N", "Y");
     deactivateTask(wfTask);
     updateAppStatus("Combined Closed", "Updated as per defect 4148", capId);
     if(wfTask == "Prosecution Review")
     {
    setTask("Consent Agreement","N", "Y");
    deactivateTask("Consent Agreement");
    updateAppStatus("Consent Agreement", "Updated as per defect 4148", capId);
     }
     closeCap(currentUserID);
  }
}
/* @desc This method validates Affiliated Broker Contact has an Active License.
 * Release B Master Script List ID: 671
 */
function CWM_ELP_670_CAA_DPL_validateAffiliatedBroker()
{
  var thisContact = aa.env.getValue("Contact");
    if (thisContact.getContactType() == "Affiliated Broker")
  {
       //Check to see if active affiliated broker is one and only one.
       var activiateAffiliatedBroker = getActiveAffiliatedBroker();
       if (activiateAffiliatedBroker > 0) {
          cancel = true;
          showMessage = true;
          comment("An active Affiliated Broker already exists.");
       }
    
       var isActiveAffiliatedBroker = validateAffiliatedBrokerActiveLicense(thisContact.getFirstName(), thisContact.getMiddleName(), thisContact.getLastName(), thisContact.getContactType());
       if (!isActiveAffiliatedBroker) {
          cancel = true;
          showMessage = true;
          comment("The contact added was not an 'Active' license of type Broker (ind. or Org), Reciprocal Broker or an Attorney Broker.");
       }
    }
}/* @desc: this function will validate that no more than 1 Affiliated Broker is added
 * Release B Master Script List
 * ID: 670
 */
function CWM_ELP_670_CUB_DPL_onlyOneAffiliatedBroker(){
   try{
      var numOfAffiliatedBrokers = getActiveAffiliatedBroker();
      if(numOfAffiliatedBrokers > 1){
         cancel=true;
         showMessage=true;
         comment("Only one Affiliated Broker must be added.");
      }
   }
   catch(err){
    showMessage=true;
    comment("Error on function CWM_ELP_670_CUB_DPL_onlyOneAffiliatedBroker. Contact Administrator")
   }
}/* @desc This method validates Affiliated Broker Contact has an Active License.
 * Release B Master Script List ID: 671
 */
function CWM_ELP_671_CAA_DPL_validateAffiliatedBroker()
{
  var thisContact = aa.env.getValue("Contact");
    if (thisContact.getContactType() == "Affiliated Broker")
  {
       //Check to see if active affiliated broker is one and only one.
       var activiateAffiliatedBroker = getActiveAffiliatedBroker();
       if (activiateAffiliatedBroker > 0) {
          cancel = true;
          showMessage = true;
          comment("An active Affiliated Broker already exists.");
       }
    
       var isActiveAffiliatedBroker = validateAffiliatedBrokerActiveLicense(thisContact.getFirstName(), thisContact.getMiddleName(), thisContact.getLastName(), thisContact.getContactType());
       if (!isActiveAffiliatedBroker) {
          cancel = true;
          showMessage = true;
          comment("The contact added was not an 'Active' license of type Broker (ind. or Org), Reciprocal Broker or an Attorney Broker.");
       }
    }
}/* @desc This method method sets intake task to Payment Pending status and 
 *   record status to Payment Pending.
 * Release B Master Script List ID: 683
 */

function CWM_ELP_683_ASA_DPL_PaymentPending() {
  //if balance is greater than zero
  if(balanceDue > 0)
    {
    //then set Intake task to Payment Pending status
    updateTask("Intake", "Pending Payment", "Updated via script", "Updated via script");
    //and record status to Payment Pending status
      updateAppStatus("Pending Payment", "Updated via Script");
  }
}
/* @desc This method method sets intake task to Submitted status and 
 *   record status to Submitted.
 * Release B Master Script List ID: 715
 */

function CWM_ELP_715_DPL_ASA_StatusSubmitted()
{
  var vCapModel = aa.cap.getCap(capId).getOutput();
  logDebug("Cap Status:" + vCapModel.capStatus);
  logDebug("Balance Due:" + balanceDue);
  if(vCapModel.capStatus =="Payment Pending" && !(balanceDue > 0))
  {
    //then set Intake task to Submitted status
    updateTask("Intake", "Submitted", "Updated via script", "Updated via script");
    //and record status to Payment Pending status
    updateAppStatus("Submitted", "Updated via Script", capId);
  }
}function CWM_ELP_744_ASA_DPL_CalcBranchFees()
{

var BranchInfo = loadASITable("BRANCH LOCATIONS");
    if (BranchInfo)
    {
      var rowNum = BranchInfo.length;
      if ((!isEmpty(rowNum) || isBlank(!rowNum)))
        {
          if (rowNum > 0)
          {
              if (feeExists("REBR")) 
                {
                updateFee("REBR", "RE", "STANDARD", rowNum, "Y");
                logDebug("Updating REBR Fee Code at a Qty of " + rowNum);
                } 
            else 
                {
              addFee("REBR", "RE", "STANDARD", rowNum, "Y");
              logDebug("Assigning REBR Fee Code at a Qty of " + rowNum);
                }

              }
            }
      }
} 
     
/* @desc This method validates Affiliated Broker Contact has an Active License.
 * Release B Master Script List ID: 748
 */
function CWM_ELP_748_DPL_WTUB_checkNullCORIDate() {
   try{
      var contactArray = getContactArray();
      if(wfTask=="Validate" && matches(wfStatus, "Approved","Approved with Conditions")){
        if(contactArray){
          for (cc in contactArray) {
              thisContact = contactArray[cc];
              if (thisContact["contactType"] == "Applicant") {
                var CORIRunDate = getContactTemplateFormFieldValue("Applicant", "CORI Information", "CORI Run Date");
                if(!CORIRunDate){
                  showMessage=true;
                  comment("CORI Run Date must not be null");
                  cancel=true;
                }
              }
            }
        }
      }
    }
    catch(err){
      showMessage=true;
      comment("Error on WTUB function CWM_ELP_748_DPL_WTUB_checkNullCORIDate, Please contact administrator");
    }
}
          
            /* @desc Checks if the CORI Date is not null, if yes, cancel
 * Release B Master Script List ID: 749
 */
function CWM_ELP_749_WTUB_DPL_checkNullCORIDate()
{
    try
    {
        var contactArray = getContactArray();
        if (wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
        {
            if(contactArray)
            {
                for (cc in contactArray)
        {
                    thisContact = contactArray[cc];
                    if (thisContact["contactType"] == "Applicant")
          {
            var CORIRunDate = getContactTemplateFormFieldValue("Applicant", "CORI", "CORI Run Date");
            
                        if(!CORIRunDate)
            {
                            showMessage=true;
                            comment("CORI Run Date must not be blank");
                            cancel=true;
                        }
                    }
                }
            }
        }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUB function CWM_ELP_749_WTUB_DPL_checkNullCORIDate, Please contact administrator");
    }
}
/* @desc This function sets the expiration date on the license
 * Release B Master Script List ID: 753
 */
function CWM_ELP_753_WTUA_DPL_initialAppExpirationDate(itemCap)
{
    try
    {
        if(wfTask == "Exam" && matches(wfStatus, "Approved", "Approved with Conditions"))
        {
            var today = new Date();
            var currentYear = today.getFullYear();
            var mayFirstCurrentYear = new Date();
            mayFirstCurrentYear.setMonth(4);
            mayFirstCurrentYear.setDate(1);
            
            var ninetyDaysBefore = new Date();
            ninetyDaysBefore.setDate(1);
            ninetyDaysBefore.setMonth(4);
            ninetyDaysBefore.setDate(ninetyDaysBefore.getDate() - 90);
            
            var newExpDate = new Date();
            newExpDate.setDate(1);
            newExpDate.setMonth(4);

            
            // if within 90 days and current year is even the update to next even year
            if(ninetyDaysBefore <= today && mayFirstCurrentYear >= today)
            {
                //even year
                if(currentYear%2 == 0)
                {
                    logDebug("EVEN year and within 90 days of May 1st - Setting Expiration date to May 1st of the following even year.");
                    newExpDate.setFullYear(newExpDate.getFullYear() + 2);
                }
                else //odd year
                {
                    logDebug("ODD year and within 90 days of May 1st - Setting Expiration date to May 1st of the following even year.");
                    newExpDate.setFullYear(newExpDate.getFullYear() + 1);
                }
                
                //set license expiration date
/*                 var vParentCapID = getParent();
                if(vParentCapID)
                {
                    var licNum = vParentCapID.getCustomID();
                    thisLic = new licenseObject(licNum,itemCap);
                    thisLic.setExpiration(dateAdd(newExpDate,0));
                } */
        logDebug("Expiration date to pass: " + (newExpDate.getMonth() + 1) + "/" + newExpDate.getDate() + "/" + newExpDate.getFullYear());
          //by using this function, we need to pass in a 3rd parameter or else the function will use the 2nd parameter to calculate the expiration date again
          // setLicExpirationDate(itemCap, newExpDate, newExpDate);
          
        var licCustId = itemCap.getCustomID();      
        thisLic= new licenseObject(licCustId,itemCap);
                var expDateString = newExpDate.getMonth()+1 + "/" + newExpDate.getDate() + "/" + newExpDate.getFullYear();
        thisLic.setExpiration(expDateString); 
                thisLic.setStatus("Active");  
            }
            else //else not within 90 days
            {
                //even year
                if(currentYear%2 == 0)
                {
                    logDebug("EVEN year and not within 90 days - Setting Expiration date to May 1st of the following even year");
                    newExpDate.setFullYear(newExpDate.getFullYear() + 2);
                }
                else //odd year
                {
                    logDebug("ODD year and not within 90 days - Setting Expiration date to May 1st of the following even year");
                    newExpDate.setFullYear(newExpDate.getFullYear() + 1);
                }
                
                //set license expiration date
/*                 var vParentCapID = getParent();
                if(vParentCapID)
                {
                    var licNum = vParentCapID.getCustomID();
                    thisLic = new licenseObject(licNum,itemCap);
                    thisLic.setExpiration(dateAdd(newExpDate,0));
                } */
        logDebug("Expiration date to pass: " + (newExpDate.getMonth() + 1) + "/" + newExpDate.getDate() + "/" + newExpDate.getFullYear());
          //by using this function, we need to pass in a 3rd parameter or else the function will use the 2nd parameter to calculate the expiration date again
           //setLicExpirationDate(itemCap, newExpDate, newExpDate);
           
        var licCustId = itemCap.getCustomID();      
        thisLic= new licenseObject(licCustId,itemCap);
                var expDateString = newExpDate.getMonth()+1 + "/" + newExpDate.getDate() + "/" + newExpDate.getFullYear();
        thisLic.setExpiration(expDateString); 
                thisLic.setStatus("Active");  
            }
        }
    
    //if(appMatch("License/Plumbers and Gas Fitters/LP Installer/Application") || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Apprentice/Application") || appMatch("License/Plumbers and Gas Fitters/LTD LP Installer/Application")  || appMatch("License/Plumbers and Gas Fitters/Business/Application")  || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Business/Application"))   {
      if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
            {
                var today = new Date();
                var currentYear = today.getFullYear();
                var mayFirstCurrentYear = new Date();
                mayFirstCurrentYear.setDate(1);
                mayFirstCurrentYear.setMonth(4);

                
                var ninetyDaysBefore = new Date();
                ninetyDaysBefore.setDate(1);
                ninetyDaysBefore.setMonth(4);
                ninetyDaysBefore.setDate(ninetyDaysBefore.getDate() - 90);
                
                var newExpDate = new Date();
                newExpDate.setDate(1);
                newExpDate.setMonth(4);

                
                // if within 90 days and current year is even the update to next even year
                if(ninetyDaysBefore <= today && mayFirstCurrentYear >= today)
                {
                    //even year
                    if(currentYear%2 == 0)
                    {
                        logDebug("EVEN year and within 90 days of May 1st - Setting Expiration date to May 1st of the following even year.");
                        newExpDate.setFullYear(newExpDate.getFullYear() + 2);
                    }
                    else //odd year
                    {
                        logDebug("ODD year and within 90 days of May 1st - Setting Expiration date to May 1st of the following even year.");
                        newExpDate.setFullYear(newExpDate.getFullYear() + 1);
                    }
                    
                    //set license expiration date
/*                     var vParentCapID = getParent();
                    if(vParentCapID)
                    {
                        var licNum = vParentCapID.getCustomID();
                        thisLic = new licenseObject(licNum,itemCap);
                        thisLic.setExpiration(dateAdd(newExpDate,0));
                    } */
          logDebug("Expiration date to pass: " + (newExpDate.getMonth() + 1) + "/" + newExpDate.getDate() + "/" + newExpDate.getFullYear());
          //by using this function, we need to pass in a 3rd parameter or else the function will use the 2nd parameter to calculate the expiration date again
           //setLicExpirationDate(itemCap, newExpDate, newExpDate);
           
        var licCustId = itemCap.getCustomID();      
        thisLic= new licenseObject(licCustId,itemCap);
                var expDateString = newExpDate.getMonth()+1 + "/" + newExpDate.getDate() + "/" + newExpDate.getFullYear();
        thisLic.setExpiration(expDateString); 
                thisLic.setStatus("Active");  
                }
                else //else not within 90 days
                {
                    //even year
                    if(currentYear%2 == 0)
                    {
                        logDebug("EVEN year and not within 90 days - Setting Expiration date to May 1st of the following even year");
                        newExpDate.setFullYear(newExpDate.getFullYear() + 2);
                    }
                    else //odd year
                    {
                        logDebug("ODD year and not within 90 days - Setting Expiration date to May 1st of the following even year");
                        newExpDate.setFullYear(newExpDate.getFullYear() + 1);
                    }
                    
                    //set license expiration date
/*                     var vParentCapID = getParent();
                    if(vParentCapID)
                    {
                        var licNum = vParentCapID.getCustomID();
                        thisLic = new licenseObject(licNum,itemCap);
                        thisLic.setExpiration(dateAdd(newExpDate,0));
                    } */
        logDebug("Expiration date to pass: " + (newExpDate.getMonth() + 1) + "/" + newExpDate.getDate() + "/" + newExpDate.getFullYear());
        //setLicExpirationDate(itemCap, newExpDate, newExpDate);
    

        var licCustId = itemCap.getCustomID();      
        thisLic= new licenseObject(licCustId,itemCap);
                var expDateString = newExpDate.getMonth()+1 + "/" + newExpDate.getDate() + "/" + newExpDate.getFullYear();
        thisLic.setExpiration(expDateString); 
                thisLic.setStatus("Active");  
                }
            }
    //}
        
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUA function CWM_ELP_753_WTUA_DPL_initialAppExpirationDate, Please contact administrator");
    }
}

/* @desc This method creates a Real Estate Appraiser Course Approval on completion of work flow associated with Coarse Applications
 * Release B Master Script List ID: 773, 761
 */

function CWM_ELP_761_773_DPL_WTUA_createApprovalForCourseApp(initStatus, copyASI, createRefLP, contactType, licHolderSwitch, licHolderType) 
{
    var newLic = null;
    var newLicId = null;
    var newLicIdString = null;
    var newLicenseType = null;
    var boardName = getLicensingBoard(capId);
    var oldAltID = null;
    var AltIDChanged = false;
    
  logDebug("Inside createLicenseForCourseApp");

    newLicId = createParent(appTypeArray[0], appTypeArray[1], appTypeArray[2], "Approval", null);
  logDebug("Parent ID: " + newLicId + " " + newLicId.getCustomID());
  
    // Remove the ASI and Template tables from all contacts.
    removeContactTemplateFromContactExcept(newLicId, "Business");
  
    editFirstIssuedDate(sysDateMMDDYYYY, newLicId);
    oldAltID = newLicId.getCustomID();

    newCap = aa.cap.getCap(newLicId).getOutput();
    logDebug("AltID:" + newCap.capModel.altID);

    updateAppStatus(initStatus, "", newLicId);
    newLicIdString = newLicId.getCustomID();

    if (AltIDChanged) 
  {
        var newAltIDArray = newAltID.split("-");
        newLicIdString = newAltIDArray[0];
    }

    logDebug("newLicIdString:" + newLicIdString);

    //copy all ASI
    if (copyASI && newLicId) 
  {
        logDebug("Copying ASI and ASIT");
    copyAppSpecific(newLicId);
        copyASITables(capId, newLicId);
    }

    //setLicExpirationDate(newLicId);
  if(appMatch("License/Real Estate Appraiser/Course/USPAP Course Application"))
  {
    CWM_ELP_773_DPL_WTUA_setExpDateForUSPAP(newLicId);
  }
  else
  {
    CWM_ELP_761_DPL_WTUA_setExpDateForRE("app",capId);
  }

    var vExpDate = null;

    if (createRefLP && newLicId) 
  {
        logDebug("Creating Ref LP.");
        createRefLicProf(newLicIdString, boardName, newLicenseType, contactType, initStatus, vExpDate);

        newLic = getRefLicenseProf(newLicIdString, boardName, newLicenseType);

        if (newLic) 
    {
            logDebug("Reference LP successfully created");
            associateLpWithCap(newLic, newLicId);
        } else 
    {
            logDebug("Reference LP not created");
        }
    }

    if (licHolderSwitch && newLicId) {
        conToChange = null;
        cons = aa.people.getCapContactByCapID(newLicId).getOutput();
        logDebug("Contacts:" + cons);
        logDebug("Contact Length:" + cons.length);

        for (thisCon in cons) {
            if (cons[thisCon].getCapContactModel().getPeople().getContactType() == contactType) {
                conToChange = cons[thisCon].getCapContactModel();
                p = conToChange.getPeople();
                p.setContactType(licHolderType);
                conToChange.setPeople(p);
                aa.people.editCapContact(conToChange);
                logDebug("Contact type successfully switched to " + licHolderType);

                //added by thp to copy contact-Addres
                var source = getPeople(capId);
                //source = aa.people.getCapContactByCapID(capId).getOutput();
                for (zz in source) {
                    sourcePeopleModel = source[zz].getCapContactModel();
                    if (sourcePeopleModel.getPeople().getContactType() == contactType) {
                        p.setContactAddressList(sourcePeopleModel.getPeople().getContactAddressList());
                        aa.people.editCapContactWithAttribute(conToChange);
                        logDebug("ContactAddress Updated Successfully");
                    }
                }
            }
        }
    }
    return newLicId;
}
/* @desc This method creates a Real Estate Appraiser Course Approval on completion of work flow associated with Coarse Applications
 * Release B Master Script List ID: 773, 761
 */
 
function CWM_ELP_761_773_DPL_WTUA_issueApprovalForCourseApp(capId)
{
  if ((wfTask == "Validate" && wfStatus == "Approved") || (wfTask == "Validate" && wfStatus == "Approved with Conditions"))
  {
    logDebug("Inside issueApprovalForCourseApp");
    var thisCap = aa.cap.getCap(capId).getOutput();
    var thisCapType = thisCap.getCapType().toString();
    var contactType = lookup("Lookup:CONTACT TYPE DEFAULT", thisCapType);
    var reportName = "";
    var licHolderType = lookup("Lookup:CONTACT LICENSE HOLDER TYPE", thisCapType);

    if (matches(licHolderType, null, "", undefined)) licHolderType = "Licensed Individual";
    if (matches(contactType, null, "", undefined)) contactType = "Applicant";
      //if (matches(contactType, null, "", undefined)) contactType = "Business";


    updateAppStatus("Ready for Printing", "Updated via Script", capId);

    logDebug("contactType :" + contactType);
    logDebug("licHolderType :" + licHolderType);

    newLicId = CWM_ELP_761_773_DPL_WTUA_createApprovalForCourseApp("Current", true, true, contactType, true, licHolderType);

    logDebug("New License Object :" + newLicId);
    logDebug("Custom ID :" + newLicId.getCustomID());
    var srcCapId = capId;
    
    if (newLicId) 
    {
      var fvShortNotes = getShortNotes(capId);
      updateShortNotes(fvShortNotes,newLicId);

      setContactsSyncFlag("N", newLicId);
      
      var appCreatedBy = cap.getCapModel().getCreatedBy();

      if (appCreatedBy)
        editCreatedBy(appCreatedBy, newLicId);

      if (!appMatch("License/Veterinarian/Tufts Individual/Application", capId))
        callReport(reportName, false, true,"DPL License Print Set");
    }
  }
}

/* @desc This method sets the expiration date for Real Estate Appraiser Course Approval
 * Release B Master Script List ID: 761
 */

function CWM_ELP_761_DPL_WTUA_setExpDateForRE(str, capId)
{
  if ((wfTask == "Validate" && wfStatus == "Approved") || (wfTask == "Validate" && wfStatus == "Approved with Conditions"))
  {
    logDebug("Inside setExpDateForRE");
    var licID;
    var licCustID;
    var currDate = new Date();
    var expDate = new Date();
    var calExpDate = 0;
    
    if(str == "app")
    {
      licID = getParent(capId);
      if(licID)
        calExpDate = 1;
    }
    else if(str == "ren")
    {
      licID = getParentCapID4Renewal(capId);
      if(licID)
      {
        if(appMatch("License/Real Estate Appraiser/Course/Renewal", capId))
        {
          var childArray = new Array();
          childArray = getChildren("License/Real Estate Appraiser/Course/*",licID);
          if(childArray.length>0)
          {
            if((appMatch("License/Real Estate Appraiser/Course/Primary Course Application",childArray[0])) || (appMatch("License/Real Estate Appraiser/Course/Seminar Course Application",childArray[0])) || (appMatch("License/Real Estate Appraiser/Course/CE Course Application",childArray[0])))
            {
              calExpDate = 1;
            }
          }
        }
        else if(appMatch("License/Real Estate/School/Renewal", capId))
        {
          calExpDate = 1;
        }
      }
    }
    
    if(calExpDate == 1)
    {
      licCustID = licID.getCustomID();
      logDebug("Parent ID: " + licCustID + " " + licID);
      
      var year = currDate.getFullYear();
      var month = currDate.getMonth();
      var day = currDate.getDate();

      var expYear = year + 2;
      expDate.setFullYear(expYear);

      if(month == 1 && day == 29)
      {
        expDate.setDate(1);
        expDate.setMonth(2);

        
      }
      else
      {
        expDate.setDate(day);
    expDate.setMonth(month);

      }
      
      var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
      logDebug("Exp date: " + expDateString);

      thisLic=new licenseObject(licCustID,licID);
      thisLic.setExpiration(expDateString);
      thisLic.setStatus("Active");
    }
  }
}

/* @desc This method performs the following when an application/renewal is approved:
*   1. Update the expiration date according to the expiration policy of the license 
*   2. Update the Renewal status on the license record to be 'Active'
* Release B Master Script List ID: 767
* Based on 
*       calculateDPLExpirationDate(itemCap)
*       CWM_ELP_1330_WTUA_DPL_renewalApprovedUpdateLic()
*/
function CWM_ELP_767_WTUA_DPL_ApprovedUpdateLicExpDate(vParentCapID) {
    //Variables
    var bDateObj;
    var issueDateObj;
    var expDate = new Date();
    var itemCap = capId;

    var itemCapIdString = itemCap;
    if (itemCap) itemCapIdString = itemCap.getCustomID();           // Used for user friendly log messages.

    // set default Expire Date (2 years from 28th of the Month)
    expDate.setFullYear(expDate.getFullYear() + 2);
    expDate.setDate(28);

    //Get the issue date from Approved task
    if (wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions")) {
        issueDateObj = new Date();
        logDebug("License issue date:" + (issueDateObj.getMonth() + 1) + "/" + issueDateObj.getDate() + "/" + issueDateObj.getFullYear());
    } else {
        logDebug("Skipped Application/Renewal has not been approved for :" + itemCapIdString);
        return false;
    }

   /*  //get parent license
    var vParentCapID = getParentLicenseCapID(itemCap);
    // added because during testing had problem finding associated parent License. These should not need to be executed.
    if (!vParentCapID) {                                    // use first applicable parent
        vParentCapIDs = getParents(appTypeArray[0] + "/" + appTypeArray[1] + "/" + appTypeArray[2] + "/" + "License");
        if (vParentCapIDs != null && vParentCapIDs.length > 0) {
            vParentCapID = vParentCapIDs[0];
        }
    }
    if (!vParentCapID) { vParentCapID = parentCapId; }      // use Global parentCapId
    // End issue with finding associated parent License

    if (!vParentCapID) {        // Parent License not found getParcentLicenseCapID includes message.
        return false;
    }
    var vParentCapIdString = vParentCapID; */
    if (itemCap) vParentCapIdString = vParentCapID.getCustomID();           // Used for user friendly log messages.
    logDebug("Found Parent License: " + vParentCapIdString);

    if (appTypeArray[3] == "Application") {logDebug("inside if of application"); // If app Category is application then use 2 years from Birth Date else use default expire date.
        //Real Estate Appraiser Individual Logic [use Birthdate for application]
        var capContactResult = aa.people.getCapContactByCapID(itemCap);
        if (capContactResult.getSuccess()) {
            capContactResult = capContactResult.getOutput();
            for (i in capContactResult) {
                var peopleModel = capContactResult[i].getPeople();
                if (peopleModel.getContactType() == "Applicant") {
                    var capContactScriptModel = capContactResult[i];
                    var capContactModel = capContactScriptModel.getCapContactModel();
                    var bDate = capContactModel.getBirthDate();
                    if (bDate) {
                        bDateObj = new Date(bDate.getTime());
                        logDebug("Birth date:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
                    }
                }
            }
            // Calculate Expire Date from Birthdate
            if (issueDateObj && bDateObj) {
                var issueDateYear = issueDateObj.getFullYear();
                if (bDateObj.getMonth() > issueDateObj.getMonth()) {
                    expDate.setFullYear(issueDateYear + 2); // setting to current year since setLicExpirationDate will add 2 years
                } else {
                    expDate.setFullYear(issueDateYear + 3); // setting to next year if birth date is past already and setLicExpirationDate will add 2 years
                }
                expDate.setDate(bDateObj.getDate());
                expDate.setMonth(bDateObj.getMonth());

            }
        }
    }

    // set expiration date
    var expDateString = ((expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear());
    logDebug("Expiration date to pass: " + (expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear());

  
    var licNum = vParentCapID.getCustomID();
    thisLic = new licenseObject(licNum,vParentCapID);
    thisLic.setExpiration(expDateString);
thisLic.setStatus("Active");
    //setLicExpirationDate(vParentCapID, expDateString);

    //update workflow - Currently not necessary since intial status of Issuance is Ready for Printing.
//  activateTask("Issuance");
//  updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
}

/* @desc This method updates ASI Type Class to SC.
 * Release B Master Script List ID: 1245
 * Event: WTUA
 */
/* @desc This method sets the expiration date for Real Estate Appraiser/Course/USPAP
 * Release B Master Script List ID: 773
 */
 
function CWM_ELP_773_DPL_WTUA_setExpDateForUSPAP(licID)
{
  var currDate = new Date();
  var expDate = new Date();
  var expYear;
  var currYear = currDate.getFullYear();
  var licCustID = licID.getCustomID();

  if(currYear%2==0)
  {
    logDebug("Even year");
    expYear = currYear + 1;
  }
  else
  {
    logDebug("Odd year");
    expYear = currYear;
  }
  expDate.setFullYear(expYear);
  expDate.setDate(31);
  expDate.setMonth(11);
        if(expDate.getDate() == 1){
        expDate.setDate(31);
      }

  var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
  logDebug("Exp date: " + expDateString);

  thisLic=new licenseObject(licCustID,licID);
  thisLic.setExpiration(expDateString);
  thisLic.setStatus("Active");
}

/* @desc This method adds an Instructor contact using the reference contact of validated instructor and also add the link to the LP record in the 'Licenses' tab. 
 * Release B Master Script List ID: 774
 */

function CWM_ELP_774_DPL_ASA_AddInstructorContact()
{
  var authorizedASIT = AUTHORIZEDSCHOOLINSTRUCTOR;
  var tableLength = authorizedASIT.length;
    logDebug("Table length: " + tableLength);
  var contactType = "Instructor";
  if(tableLength>0)
  {
    for(i in authorizedASIT)
    {
      var apprNum = authorizedASIT[i]["Approval Number"];
            logDebug("Approval Number: " + apprNum);
      apprNum = apprNum.toString();
      var refLP = getRefLicenseProf(apprNum, "RE", "SI");
      if (refLP) 
      {
        var fvAddResult = aa.licenseScript.associateLpWithCap(capId, refLP);
        
        var licNum = refLP.stateLicense;
        var refLPFirstName = refLP.contactFirstName;
        var refLPLastName = refLP.contactLastName;
        
        logDebug("Broker License: " + licNum);
        logDebug("Broker Licensee: " + refLPFirstName + " " + refLPLastName); 
        
        if (refLPFirstName && refLPLastName) 
        {
          var licCapId = aa.cap.getCapID(licNum).getOutput();
          var licContacts = getPeople(licCapId); 
          for (c in licContacts) 
          {
            var licContact = licContacts[c];
            var licContactModel = licContact.getCapContactModel();
            var refContactNumber = licContactModel.refContactNumber;
            var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput();
            logDebug("License Contact: " + licContact.firstName + " " + licContact.lastName + " ref:" + refContactNumber);
            if (licContact.firstName && licContact.lastName && licContact.firstName.toUpperCase().equals(refLPFirstName.toUpperCase()) && licContact.lastName.toUpperCase().equals(refLPLastName.toUpperCase())) 
            {
              var getResult = aa.people.getPeople(refContactNumber);
              if (getResult.getSuccess()) 
              {
                var peopleObj = getResult.getOutput();
                // add the reference contact from the people object to the application record
                var contactNbr = addReferenceContactFromPeopleModel(peopleObj);
                logDebug("contact Number of new Ref contact: " + contactNbr);
                var appContacts = aa.people.getCapContactByCapID(capId).getOutput();
                
                for (c in appContacts) 
                {
                  var appContact = appContacts[c];
                  if (appContact.getPeople().getContactSeqNumber() == contactNbr) 
                  { 
                    // change the contact type of the newly added contact
                    appContact.getPeople().setContactType(contactType);
                    var updateResult = aa.people.editCapContact(appContact.getCapContactModel());
                    if (updateResult.getSuccess()) 
                    {
                      logDebug("Contact " + contactNbr + " updated successfully");
                    } 
                    else 
                    {
                      logDebug("Contact " + contactNbr + " update failed: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                    }
                    for (add in contactAddressList) 
                    {
                      var transactionAddress = false;
                      contactAddressModel = contactAddressList[add].getContactAddressModel();
                      if (contactAddressModel.getEntityType() == "CAP_CONTACT") 
                      {
                        transactionAddress = true;
                        contactAddressModel.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                      }
                      // Commit if transaction contact address
                      if (transactionAddress) 
                      {
                        var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                        contactAddressModel.setContactAddressPK(newPK);
                        aa.address.createCapContactAddress(capId, contactAddressModel);
                      }
                      // Commit if reference contact address
                      else 
                      {
                        // build model
                        var Xref = aa.address.createXRefContactAddressModel().getOutput();
                        Xref.setContactAddressModel(contactAddressModel);
                        Xref.setAddressID(contactAddressList[add].getAddressID());
                        Xref.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                        Xref.setEntityType(contactAddressModel.getEntityType());
                        Xref.setCapID(capId);
                        // commit address
                        aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                      }
                    }
                    break;
                  }
                }
                break;
              }
              else 
              {
                logDebug("Can't find " + refLPFirstName + " " + refLPLastName + " reference contact number: " + refContactNumber + " : " + getResult.getErrorType() + ":" + getResult.getErrorMessage());
              }
            }
          }
        }
      }
    }
  }
  else return null;
}
/* @desc This method checks the validity of "Approval Number"in Authorized School Instructor ASIT.
 * Release B Master Script List ID: 774
 */

function CWM_ELP_774_DPL_ASB_checkApprNumberInAutSchASIT()
{
  //logDebug("Inside checkAppNumberInAutSchASIT");
  var flag = 0;
  var apprNumStr = "";
  var autSchoolInstRows = 0;
  var authorizedASIT; 
  var minRows = 1;
  
  loadASITablesBefore();
  //if(!publicUser) return; 
  try
  {
    autSchoolInstRows = AUTHORIZEDSCHOOLINSTRUCTOR.length;
    authorizedASIT = AUTHORIZEDSCHOOLINSTRUCTOR;
    
    if(authorizedASIT)
    {
      var tableLength = authorizedASIT.length;
      if(tableLength>0)
      {
        var boardCode = lookup("BOARDS", "Real Estate Brokers & Salespersons");
        //logDebug("boardCode : " + boardCode);
        for(i in authorizedASIT)
        {
          var apprNum = authorizedASIT[i]["Approval Number"];
          apprNum = apprNum.toUpperCase();
                                        //logDebug("For " + i + " " + apprNum);
          //var isActive = CWM_ELP_774_DPL_isLicenseActive(apprNum, boardCode, "SI");
var isActive = isLicenseActive(apprNum, boardCode, "SI");
          //logDebug("Active: " + isActive);
          if(!isActive)
          {
            flag = 1;
            if(apprNumStr == "")
            {
              apprNumStr = apprNum;
            }
            else
            {
              apprNumStr = apprNumStr + ", " + apprNum;
            }
          }
        }
        
        //logDebug("Flag: " + flag);
        if(flag==1)
        {
          cancel = true;
          showMessage = true;
          if(apprNumStr.indexOf(",")>-1)
          {
            comment("The approval numbers " + apprNumStr + " are not valid. Please contact the board for further details.");
          }
          else
          {
            comment("The approval number " + apprNumStr + " is not valid. Please contact the board for further details.");
          }
        }
      }
    }
  }
  catch(ex)
  {
    if (autSchoolInstRows < minRows) 
    {
      cancel = true;
      showMessage = true;
      comment("You must add at least 1 row in Authorized School Instructor ASIT.");
    }
  }
}/* @desc The method gets the LP associated with RE Instructor
 * Release B Master Script List ID: 774
 */

function CWM_ELP_774_DPL_getRefLicenseProf(refstlic) {
  var boardName = "";
  var licenseType = "";
  var licenseNumber = refstlic;

  if (arguments.length == 3) {
    boardName = arguments[1];
    licenseType = arguments[2];
  }

  if (isDPLLicenseFormat(refstlic)) {
    //licenseNumber = getDPLLicenseNumber(refstlic).toString();
    var licNumberArray = refstlic.split("-");
    boardName = licNumberArray[1];

    //added to address issue in defect 2603
    if(licenseType!= "" && licenseType != licNumberArray[2])
         {
        logDebug("ERROR The license type passed by user is not matching with M1 or M2");
        return false;
         }
    licenseType = licNumberArray[2];
  }
  var boardName = getLegalBoardName(boardName);
  logDebug("Searching Ref LP refstlic = " + licenseNumber +" boardName = " + boardName + " licenseType = " + licenseType);

  var refLicObj = null;
  var refLicenseResult = aa.licenseScript.getRefLicensesProfByLicNbr(aa.getServiceProviderCode(), licenseNumber);
  if (!refLicenseResult.getSuccess()) {
    logDebug("**ERROR retrieving Ref Lic Profs : " + refLicenseResult.getErrorMessage());
    return false;
  } else {
    var newLicArray = refLicenseResult.getOutput();
    if (!newLicArray) {
      logDebug("Ref Lic Prof not found.");
      return null;
    }
    for (var thisLic in newLicArray) {
      if (licenseNumber && licenseNumber != null && licenseNumber != ""
        && newLicArray[thisLic] && newLicArray[thisLic].getStateLicense() && licenseNumber.toUpperCase().equals(newLicArray[thisLic].getStateLicense().toUpperCase())
        && (boardName == "" || (newLicArray[thisLic].getLicenseBoard() && boardName.toUpperCase().equals(newLicArray[thisLic].getLicenseBoard().toUpperCase())))
        && (licenseType == "" || (newLicArray[thisLic].getBusinessLicense() && licenseType.toUpperCase().equals(newLicArray[thisLic].getBusinessLicense().toUpperCase())))) {
        refLicObj = newLicArray[thisLic];
        logDebug("Ref Lic Prof found.");
      } }
  }
  return refLicObj;
}/* @desc The method checks if RE Instructor in Authorized School Instructor ASIT is active
 * Release B Master Script List ID: 774
 */

function CWM_ELP_774_DPL_isLicenseActive(licenseNum, boardName, licenseType) 
{
   var isLicenseActive = true;
   var licProfObj = CWM_ELP_774_DPL_getRefLicenseProf(licenseNum, boardName, licenseType);
   
   if (licProfObj) 
   {
      //if (licProfObj.getAuditStatus() == "I") {
   if (licProfObj.getWcExempt() == "N")
   {  
    isLicenseActive = false;
   }
   } 
   else 
   {
      isLicenseActive = false;
   }
   return isLicenseActive;
}
function CWM_ELP_775_ASA_DPL_Add_Fee_per_Delivery_Method_ASIT()
{
  //get the board
    var asiBoard = AInfo["Board"];
      var asiLicType = AInfo["License Type"];

  if (asiBoard=="Plumbers and Gas Fitters"){

      asiBoard = "Plumbers";
    
  }
  else if (asiBoard=="Electricians and Fire Alarm System Installers"){

      asiBoard = "Electricians";
  
  }
        else if (asiBoard=="Architect"){

      asiBoard = "Architects";
  
  }
    else if (asiBoard=="Engineers and Land Surveyors"){

      asiBoard = "Engineering";
    
  }
    else if (asiBoard=="Real Estate Brokers and Salespersons"){

      asiBoard = "Real Estate Brokers & Salespersons";
    
  }
    else if (asiBoard=="Embalming and Funeral Directing"){
        asiBoard = "Embalming";
      }       
        
  var boardCode = "";
  if (asiBoard != undefined && asiBoard != null && asiBoard != "")
  {
    boardCode = lookup("BOARDS", asiBoard);
    //var feeCode = boardCode+"CS";
    var feeCode = lookup("VERIFICATION_FEES", boardCode);
    var feeSchedule = boardCode;
  
  if(!publicUser)
  {
    var deliveryASIT = loadASITable("DELIVERY METHOD");

    if (deliveryASIT && deliveryASIT != "undefined" && deliveryASIT.length > 0 )
    {
      //check if the fee exists first. if so, update the fee, else add
      if (feeExists(feeCode)) {
      updateFee(feeCode, feeSchedule, "STANDARD", deliveryASIT.length, "Y");
      logDebug("Verification fee added")  
      }
      else {
      addFee(feeCode, feeSchedule, "STANDARD", deliveryASIT.length, "Y");
      logDebug("Verification fee added")      
      }
    }
  else {
    logDebug("Could not add verification fee")      
    }
  }
  }
  else {
  logDebug("Could not add verification fee")      
  }
}


/* @desc This method copies "Branch Locations" ASIT from renewal to license.
 * Release B Master Script List ID: 776
 */
 
 function CWM_ELP_776_DPL_WTUA_copyBranchLocASIT()
 { 
  logDebug("Copying asi table");
  var parentId = getParentCapID4Renewal(capId);
  var asitArr=new Array();
  logDebug("Parent ID: " + parentId + " " + parentId.getCustomID());
  asitArr[0] = "AUTHORIZED SCHOOL INSTRUCTOR";
  asitArr[1] = "OWNER INFORMATION";
  asitArr[2] = "BOND INFORMATION";
        removeASITable("BRANCH LOCATIONS", parentId);
  copyASITables(capId,parentId,asitArr);
 }/* @desc This method checks if at least 1 row is added in Authorized School Instructor ASIT.
 * Release B Master Script List ID: 782
 */

function CWM_ELP_782_DPL_ASB_Check1RowAutSchInstASIT()
{
  loadASITablesBefore();
  var autSchoolInstRows = 0;  
  var minRows = 1;
  //if(!publicUser) return;
  try 
  {
    autSchoolInstRows = AUTHORIZEDSCHOOLINSTRUCTOR.length;
  } 
  catch (ex) 
  {
    if (autSchoolInstRows < minRows) 
    {
      cancel = true;
      showMessage = true;
      comment("You must add at least 1 row in Authorized School Instructor ASIT.");
    }
  }
}function CWM_ELP_806_ASA_DPL_assesFeeRemoveBusName()
{
  try
  {
    var removeDBAfromLic = getAppSpecific("Is this application to only remove a DBA from your license?");
    
    if(removeDBAfromLic.equals("Yes"))
      updateFee("ELNC", "EL", "STANDARD", 1, "Y");
    else
      if(removeDBAfromLic.equals("No"))
        updateFee("ELCA", "EL", "STANDARD", 1, "Y");
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASA function CWM_ELP_806_ASA_DPL_assesFeeRemoveBusName, Please contact administrator");
  }
}/* @desc This method adds condition on negative renewal attestation
 *   record status to Submitted.
 * Release B Master Script List ID: 809
 */

function CWM_ELP_809_DPL_ASA_PEAddCdnNegativeAttestation()
{
  var splChar = String.fromCharCode(167);
  var asiName = "A. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
  var inComplianceGLC = getAppSpecific(asiName);

  var prov250CMR = getAppSpecific("B. I AM FAMILIAR WITH THE PROVISIONS OF 250 CMR WHICH GOVERN THE PRACTICE OF EN AND LS.");

  var reportedDiscipline = getAppSpecific("C. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");

  var reportedConvictions = getAppSpecific("D. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");

  var noContestPlea = getAppSpecific("E. I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.");

  var asiNameSSN = "F.  AS REQUIRED BY M.G.L. C. 30A, "+ splChar +"13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
  var reportedSSN = getAppSpecific(asiNameSSN, capId);
  var affirmation = AInfo["I attest under the pains and penalties of perjury that the above responses are truthful & accurate."];

  if(inComplianceGLC == "No" || prov250CMR == "No" || reportedDiscipline == "No" || reportedConvictions == "No" || noContestPlea == "No" || reportedSSN == "No" || affirmation == "No")
  {   
    logDebug("At least one of the attestation is negative.");
                updateTask("Issuance", "Renewal Attestation", "Updated via script.", "Updated via script.", null, capId);
    //CWM_ELP_Generic_DPL_addConditionOnCap("Application Checklist", "Negative Renewal Attestation", capId);  
    //logDebug("Condition Added");
  }

}/* @desc This method adds condition on negative renewal attestation
 *   record status to Submitted.
 * Release B Master Script List ID: 809
 */

function CWM_ELP_809_DPL_ASA_PLSAddCdnNegativeAttestation()
{
  var splChar = String.fromCharCode(167);
  var asiName = "A. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
  var inComplianceGLC = getAppSpecific(asiName);

  var prov250CMR = getAppSpecific("B. I AM FAMILIAR WITH THE PROVISIONS OF 250 CMR WHICH GOVERN THE PRACTICE OF EN AND LS.");

  var reportedDiscipline = getAppSpecific("C. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");

  var reportedConvictions = getAppSpecific("D. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");

  var noContestPlea = getAppSpecific("E. I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.");

  var defendent = getAppSpecific("F. I HAVE REPORTED IF I WAS A DEFENDANT IN A CIVIL PROCEEDING RESULTING IN SETTLEMENT OR JUDGEMENT.");
  
  var asiNameSSN = "G.  AS REQUIRED BY M.G.L. C. 30A, "+ splChar +"13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
  var reportedSSN = getAppSpecific(asiNameSSN, capId);

  if(inComplianceGLC == "No" || prov250CMR == "No" || reportedDiscipline == "No" || reportedConvictions == "No" || noContestPlea == "No" || defendent == "No" || reportedSSN == "No")
  {
    logDebug("At least one of the attestation is negative.");
    updateTask("Issuance", "Renewal Attestation", "Updated via script.", "Updated via script.", null, capId);
                //CWM_ELP_Generic_DPL_addConditionOnCap("Application Checklist", "Negative Renewal Attestation", capId);  
    //logDebug("Condition Added");
  }

}/* @desc This method Adds "License and/or Exam verification from non-MA jurisdiction" condition.
 * Release B Master Script List ID: 810
 * Event: ASA
 */

function CWM_ELP_810_ASA_DPL_AddNonMAJurisdictionCondition() {
  var experienceGained = getAppSpecificValue("Source", capId);
    if(publicUser){
      if (experienceGained == "Reciprocity")
    {
        aa.capCondition.addCapCondition(capId, "Application Checklist", "License and/or Exam verification from non-MA jurisdictions", "Verification of non-MA exam or licensure", null, null, null, null, null, "", null, null, "Pending", "", "A","Y");
    }
  }
}
/* @desc This method Adds "Non-US Experience" condition.
 * Release B Master Script List ID: 820
 */

function CWM_ELP_820_ASA_DPL_AddNonUSCondition() {
  aa.capCondition.addCapCondition(capId, "Application Checklist", "Verify Non-US Experience", "Verify that the applicant has submitted documentation of Non-US experience and that the information matches Board requirements", null, null, null, null, null, "", null, null, "Pending", "", "A","Y");
}
/* @desc This method Adds "Non-US Education" condition.
 * Release B Master Script List ID: 822
 * Event: ASA
 */

function CWM_ELP_822_ASA_DPL_AddNonUSEducationCondition() {
  var experienceGained = getAppSpecificValue("Was your degree earned outside of the US?", capId);
    if (experienceGained == "Yes")
  {
     aa.capCondition.addCapCondition(capId, "Application Checklist", "Verify Non-US Education", "Verify that the applicant has submitted documentation of Non-US education and that the information matches Board requirements", null, null, null, null, null, "", null, null, "Pending", "", "A","Y");
  }
}/* @desc This method Adds Continuing Education hours and ASI Continuing Education Hrs and sums both.
 * Release B Master Script List ID: 838
 * Event: ASA
 */

function CWM_ELP_838_ASA_DPL_addContEduHrsREAppraiser()
{
  try
  {
    var totalCompleteHours = 0;
    var totalHours = 0;
    
    //Get license capid
    var liCapId = getParentCapID4Renewal(capId);
    logDebug("License Record ID: " + liCapId.getCustomID());

    //Check if renewal record ASI has value
    var currentASIHours = getAppSpecific("TOTAL CE HOURS.Total Continuing Education Hours", capId);
    logDebug("Hours from renewal: " + currentASIHours);
    
    //Get continuing education hours
    useAppSpecificGroupName = true; 
    var capIDScriptModel = aa.cap.createCapIDScriptModel(liCapId.getID1(),liCapId.getID2(),liCapId.getID3());
    var contEducListObj = aa.continuingEducation.getContEducationList(capIDScriptModel);
    
    if(contEducListObj)
    {
      var contEducList = contEducListObj.getOutput();
    }
    if(contEducList)
    {
      for(i in contEducList)
      {
        var completeHours = contEducList[i].getHoursCompleted();      
        if(completeHours != undefined && completeHours != "" && completeHours != null)
        {
          totalCompleteHours = totalCompleteHours + completeHours;        
        }

      }
      if(currentASIHours == null || currentASIHours == "" || currentASIHours == undefined)
      {
        currentASIHours = 0;
      }
      
      //Obtain total hours  and update ASI field.
      totalHours = (totalCompleteHours + Number(currentASIHours));
      editAppSpecific("TOTAL CE HOURS.Total Continuing Education Hours", totalHours, capId);
      logDebug("Total hours:" + totalHours);
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on CWM_ELP_838_ASA_DPL_addContEduHrsREAppraiser function");
  }
}
/* @desc This method Adds Continuing Education hours and ASI Continuing Education Hrs and sums both.
 * Release B Master Script List ID: 838
 * Event: ASA
 */

function CWM_ELP_838_ASA_DPL_addContinuingEducationHourstoASIField(){
  useAppSpecificGroupName = true; 
  var cap = aa.cap.getCap(capId).getOutput();
  var capIDScriptModel = aa.cap.createCapIDScriptModel(capId.getID1(),capId.getID2(),capId.getID3());
  var contEducListObj = aa.continuingEducation.getContEducationList(capIDScriptModel);
  var totalCompleteHours = 0;
  var currentASIHours = getAppSpecific("TOTAL CE HOURS.Total Continuing Education Hours", capId);
  var totalHours = 0;
  if(contEducListObj){
    var contEducList = contEducListObj.getOutput();
  }
  if(contEducList){
    for(i in contEducList){
      var completeHours = contEducList[i].getHoursCompleted();
    
      if(completeHours != undefined && completeHours != "" && completeHours != null){
        totalCompleteHours = totalCompleteHours + completeHours;
        logDebug(completeHours);
      }

    }
    if(currentASIHours == null || currentASIHours == "" || currentASIHours == undefined){
      currentASIHours = 0;
    }
    totalHours = (totalCompleteHours + Number(currentASIHours));
    editAppSpecific("TOTAL CE HOURS.Total Continuing Education Hours", totalHours, capId);
    logDebug("total " + totalHours);
  }
}
/* @desc This method performs the following when an application/renewal is approved:
*   1. Check if discipline background questions are all No. 
*   2. If so then waive Background Questions Conditions
* Release B Master Script List ID: 854
* Based on 
*       waiveConditionNotNameChange()
*       CWM_ELP_912_DPL_ASA_addConditionForTemporaryAppraiser
*/
function CWM_ELP_854_WTUA_DPL_waiveConditionVerifyBackgroundQuestions() {
    var funcName = "CWM_ELP_854_WTUA_DPL_waiveConditionVerifyBackgroundQuestions";
    var CondType = "Application Checklist";
    var CondDesc = "Verification of Background Questions";

    if (!wfTask == "Validate" && !matches(wfStatus, "Approved", "Approved to Sit for Exam")) {
        logDebug("Skipped " + funcName + ": Application/Renewal has not been approved for " + capIDString);
        return false;
    }

    // logDebug("Checking if '" + CondDesc + "' condition can be waived based on discipline Background Questions.");
    var answer = "N";
    var capContactResult = aa.people.getCapContactByCapID(capId);
    if (capContactResult.getSuccess()) {
        capContactResult = capContactResult.getOutput();
        for (yy in capContactResult) {
            thisCapContact = capContactResult[yy];
            thisPeople = thisCapContact.getPeople();
            if (thisPeople.contactType == "Applicant") {
                var asiTemplate = thisPeople.template;
                if (asiTemplate != null) {
                    var templategroup = asiTemplate.getTemplateForms();
                    if (answer == "N") {
                        var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "1. Has disciplinary action been taken against you by a licensing board in any jurisdiction?");
                        if (question)
                            answer = question.getDefaultValue();
                    }
                    if (answer == "N") {
                        var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "2. Are you the subject of pending disciplinary action by a licensing board in any jurisdiction?");
                        if (question)
                            answer = question.getDefaultValue();
                    }
                    if (answer == "N") {
                        var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "3. Have you voluntarily surrendered a professional license to a licensing board in any jurisdiction?");
                        if (question)
                            answer = question.getDefaultValue();
                    }
                    if (answer == "N") {
                        var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "4. Have you ever applied for and been denied a professional license in any jurisdiction?");
                        if (question)
                            answer = question.getDefaultValue();
                    }
                    if (answer == "N") {
                        var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "5. Have you been convicted of a felony or misdemeanor in any jurisdiction?");
                        if (question) 
                            answer = question.getDefaultValue();
                    }
                }
            }
        }
    }

    if (answer == "N") {
        if (appHasCondition(CondType, null, CondDesc, null)) {
            conditionUpdated = editCapConditionStatus(CondType, CondDesc, "Met", "Not Applied");
            if (conditionUpdated)
                logDebug(CondDesc + " was updated to Met & Not Applied.");
            else
                logDebug(CondDesc + " was not updated with Met & Not Applied.");
        } else {
            logDebug(CondDesc + " was not found so it could not be waived.");
        }
    } else {
        logDebug(CondDesc + " was not waived. Discipline History has items to be reviewed.");
    }
}
function CWM_ELP_875_DPL_ASA_AddConditionToCheckSystemsContractorLicense()
{
  var fvHasEntries = false;
  if (typeof(CURRENTMAELFSLICENSES) == "object" && CURRENTMAELFSLICENSES.length > 0)
    fvHasEntries = true;
  if (fvHasEntries)
  {
    var CondType = "Application Checklist";
    var CondDesc = "Check Systems Contractor License";
    if (appHasCondition(CondType, null, CondDesc, null))
      editCapConditionStatus(CondType, CondDesc, "Met", "Not Applied");
  } 
}/* @desc This method Adds "Classification B, Experience Documentation" condition.
 * Release B Master Script List ID: 890
 * Event: ASA
 */
function CWM_ELP_890_DPL_ASA_AddExperienceDocumentationCondition()
{
  var certificate = getAppSpecificValue("What is your eligibility for Engineer-in-Training Certification (See Instructions)", capId);
  logDebug("ASI value for EIT Certification:" + certificate);

  if (certificate == "b) BS in Engineering OR Engineering Related Science NOT Approved by the Board,")
  {
    var cType = "Application Checklist";
    var cDesc = "Classification B, Experience Documentation"; 
    CWM_ELP_Generic_DPL_addConditionOnCap(cType, cDesc);    
  } 
}
/* @desc This function adds standard condition "Positive Renewal Attestation"
 * Release B Master Script List ID: 892
 */
function CWM_ELP_892_CRCA_DPL_addStdConditionPosRenAttestation()
{
  try
  {
    // set string to get ASI question 1 answer
    var asiStart = "1. I AM IN COMPLIANCE WITH G.L.c.62C ";
    var spclChar = String.fromCharCode(167);
    var asiEnd   = "47A & 49A.";
    
    var renAttesQ1 = asiStart + spclChar + spclChar + asiEnd;
    var renAttesQ2 = "2. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.";
    var renAttesQ3 = "3. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.";
    var renAttesQ4 = "4. I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.";
    var renAttesQ5 = "5. I HAVE REPORTED IF I WAS A DEFENDANT IN A CIVIL PROCEEDING RESULTING IN SETTLEMENT OR JUDGEMENT.";
    
    // set string to get ASI question 6 answer
    var asiStart2  = "6. AS REQUIRED BY M.G.L. C. 30A, ";
    var spclChar2  = String.fromCharCode(167);
    var asiEnd2    = "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
    var renAttesQ6 = asiStart2 + spclChar2 + asiEnd2;
    // try useAppSpecificGroupName = true;
    var q1 = getAppSpecific(renAttesQ1);
    var q2 = getAppSpecific(renAttesQ2);
    var q3 = getAppSpecific(renAttesQ3);
    var q4 = getAppSpecific(renAttesQ4);
    var q5 = getAppSpecific(renAttesQ5);
    var q6 = getAppSpecific(renAttesQ6);
    
    if(q1 == "Yes" || q2 == "Yes" || q3 == "Yes" || q4 == "Yes" || q5 == "Yes" || q6 == "Yes")
    {
      CWM_ELP_Generic_DPL_addConditionOnCap("Renewal","Positive Renewal Attestation");  
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASA function CWM_ELP_892_ASA_DPL_addStdConditionPosRenAttestation, Please contact administrator");
  }
}
// end CWM_ELP_892_ASA_DPL_addStdConditionPosRenAttestation

function CWM_ELP_912_DPL_ASA_addConditionForTemporaryAppraiser()
{
  var answer = "N";
  var capContactResult = aa.people.getCapContactByCapID(capId);
  if (capContactResult.getSuccess())
  {
    capContactResult = capContactResult.getOutput();
    for (yy in capContactResult)
    {
      thisCapContact = capContactResult[yy];
      thisPeople = thisCapContact.getPeople();
      if (thisPeople.contactType == "Applicant")
      {
        var asiTemplate = thisPeople.template;
        if (asiTemplate != null)
        {
          var templategroup = asiTemplate.getTemplateForms();
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "1. Has disciplinary action been taken against you by a licensing board in any jurisdiction?");
            if (question)
              answer = question.getDefaultValue();
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "2. Are you the subject of pending disciplinary action by a licensing board in any jurisdiction?");
            if (question)
              answer = question.getDefaultValue();
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "3. Have you voluntarily surrendered a professional license to a licensing board in any jurisdiction?");
            if (question)
              answer = question.getDefaultValue();
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "4. Have you ever applied for and been denied a professional license in any jurisdiction?");
            if (question)
              answer = question.getDefaultValue();
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "5. Have you been convicted of a felony or misdemeanor in any jurisdiction?");
            if (question)
              answer = question.getDefaultValue();
          }
        }
      }
    }
  }

  var CondType = "Application Checklist";
  var CondDesc = "Validation of Discipline History Questions";
  if (answer == "Y")
  {
    if (appHasCondition(CondType, null, CondDesc, null))
      editCapConditionStatus(CondType, CondDesc, "Pending", "Applied");
    else
      addAppCondition(CondType, "Pending", CondDesc, CondDesc, "Required");
  }
  else if (appHasCondition(CondType, "Pending", CondDesc, null))
    editCapConditionStatus(CondType, CondDesc, "Met", "Not Applied");
}
/* @desc This method send email to Applicant when Workflow task is 'Validate' and status is 'Approved to Sit for Exam'
 *
 * License/Engineers and Land Surveyors/Engineer In Training/Application
 * License/Engineers and Land Surveyors/Professional Engineer/Application
 * License/Engineers and Land Surveyors/Professional Land Surveyor/Application
 * License/Engineers and Land Surveyors/Land Surveyor in Training/Application
 * License/Veterinarian/Veterinarian License/Application
 * License/Dietitians and Nutritionists/Dietitians and Nutritionists/Application
 * License/Plumbers and Gas Fitters/Master/Application
 * License/Plumbers and Gas Fitters/Gas Fitter Master/Application
 * License/Plumbers and Gas Fitters/Gas Fitter Journeyman/Application
 * License/Plumbers and Gas Fitters/Journeyman/Application
 * License/Sheet Metal/Master/Application
 * License/Sheet Metal/Journeyperson/Application
 * License/Psychologist/Psychologist/Application
 * License/Health Officers/Certified Health Officer/Application
 * 
 * Release B Master Script List ID: 914
 */
function CWM_ELP_914_WTUA_DPL_email_Applicant_ApprovedToSit()
{
    try{
        if(wfTask == "Validate" && wfStatus == "Approved to Sit for Exam")
        {
            var applicantname;
            var applicantEmailAdr = undefined;
            var boardCode;
            var emailTemplate;
            
            if(appMatch("License/Engineers and Land Surveyors/Engineer In Training/Application") ||
               appMatch("License/Engineers and Land Surveyors/Professional Engineer/Application") ||
               appMatch("License/Engineers and Land Surveyors/Professional Land Surveyor/Application") ||
               appMatch("License/Engineers and Land Surveyors/Land Surveyor in Training/Application"))
            {
                boardCode = "EN";
                emailTemplate = "AA_EN_APPROVED_FOR_EXAM_NOTIFICATION";
            }
            else if(appMatch("License/Veterinarian/Veterinarian License/Application"))
            {
                boardCode = "VT";
                emailTemplate = "AA_VT_APPROVED_FOR_EXAM_NOTIFICATION";
            }
            else if(appMatch("License/Dietitians and Nutritionists/Dietitians and Nutritionists/Application"))
            {
                boardCode = "NU";
                emailTemplate = "AA_NU_APPROVED_FOR_EXAM_NOTIFICATION";
            }
            else if(appMatch("License/Plumbers and Gas Fitters/Master/Application") ||
                    appMatch("License/Plumbers and Gas Fitters/Gas Fitter Master/Application") ||
                    appMatch("License/Plumbers and Gas Fitters/Gas Fitter Journeyman/Application") ||
                    appMatch("License/Plumbers and Gas Fitters/Journeyman/Application"))
            {
                boardCode = "PL";
                emailTemplate = "AA_PL_APPROVED_FOR_EXAM_NOTIFICATION";
            }
            else if(appMatch("License/Sheet Metal/Master/Application") ||
                    appMatch("License/Sheet Metal/Journeyperson/Application"))
            {
        
                boardCode = "SM";
                emailTemplate = "AA_SM_APPROVED_FOR_EXAM_NOTIFICATION";
            }
            else if(appMatch("License/Psychologist/Psychologist/Application"))
            {
                boardCode = "PY";
                emailTemplate = "AA_PY_APPROVED_FOR_EXAM_NOTIFICATION";
            }
            else if (appMatch("License/Health Officers/Certified Health Officer/Application"))
            {
                boardCode = "HO";
                emailTemplate = "AA_HO_APPROVED_FOR_EXAM_NOTIFICATION";
            }
    
            var boardName = String(lookup("BOARD_CODE_INT_RECORD_TYPE", boardCode));

            var capContactResult = aa.people.getCapContactByCapID(capId);
            if (capContactResult.getSuccess())
            {
                capContactResult = capContactResult.getOutput();

                for (yy in capContactResult)
                {
                    thisCapContact = capContactResult[yy];
                    thisPeople = thisCapContact.getPeople();

                    var thisContactType = thisPeople.getContactType();

                    if(thisContactType == "Applicant")
                    {
                        applicantname = thisPeople.getContactName();
                        applicantEmailAdr = thisPeople.getEmail();
                    }
                }
            }

            var senderEmailAddr = "Noreply@elicensing.state.ma.us";
            var params = aa.util.newHashtable();
            addParameter(params, "$$altId$$", capId.getCustomID());
            addParameter(params, "$$applicantFullName$$", applicantname);
            addParameter(params, "$$boardName$$", boardName);

            if(applicantEmailAdr != undefined && applicantEmailAdr != null){
                logDebug("Sending E-mail to " + applicantname + " " + applicantEmailAdr + " from board " + boardName);
                sendNotification(senderEmailAddr, applicantEmailAdr, "", emailTemplate, params, null);
            }
            else{
                logDebug("There is no email address associated with the applicant");
            }
        }
    }
    catch(err){
        showMessage=true;
        comment("Error on WTUA function CWM_ELP_914_WTUA_DPL_email_Applicant_ApprovedToSit, Please contact administrator");
    }
}

/* @desc This method performs the following when a renewal is approved:
 *   1. Update the expiration date according to the expiration policy of the license 
 *   2. Update the Renewal status on the license record to be 'Active'
 *   3. Update the WF Task/Status to 'Issuance/Ready for Printing'
 *   4. Copy any new rows added to the ASIT ""Professional Licenses issued in other states"" from the renewal to the license record."
 * Release B Master Script List ID: 920
 */
function CWM_ELP_920_WTUA_DPL_renewalApprovedUpdateLic()
{
  try{
      //if renewal is approved
      if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
      {
        //get parent license
        var vParentCapID = getParentLicenseCapID(capId);
        if(vParentCapID)
        {
          // get expiration date
          var b1ExpResult = aa.expiration.getLicensesByCapID(vParentCapID);
          if(b1ExpResult.getSuccess())
          {
            var b1Exp = b1ExpResult.getOutput();
            if(b1Exp)
            {
              //update license expiration date according to policy
              var expDate=b1Exp.getExpDate();
                      if(expDate)
                  setLicExpirationDate(vParentCapID, expDate);
            }
         
              //Copy new ASIT rows here
                        copySingleASITable("LICENSE ISSUED IN OTHER STATES", capId, vParentCapID); 
          }
       
        }

     
        //update renewal workflow
        activateTask("Issuance");
        updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
      }
    }
    catch(err){
      showMessage=true;
      comment("Error on function CWM_ELP_920_WTUA_DPL_renewalApprovedUpdateLic. Contact Administrator");
    }
}/* @desc This function sets the expiration date on the license
 * Release B Master Script List ID: 930
 */
function CWM_ELP_930_WTUA_DPL_initialAppExpirationDate()
{
  try
  {
    if(wfTask == "Exam" && matches(wfStatus, "Approved", "Approved with Conditions"))
    {
      var today = new Date();
            var currentYear = today.getFullYear();
        var fromDate = "01/01/" + currentYear;
        var toDate = "06/30/" + currentYear;
            
            var newExpDate = new Date();
            newExpDate.setMonth(6);
            newExpDate.setDate(30);
            
            // Approved date between Jan 1st and June 30
            if(wfDateMMDDYYYY >= fromDate && wfDateMMDDYYYY <= toDate){
          //even year
          if(currentYear%2 == 0){
            logDebug("EVEN year and Approved date between Jan 1st and June 30th - Setting Expiration date to June 30th of the following even year.");
                  newExpDate.setFullYear(newExpDate.getFullYear() + 2);
          }
          else{
            logDebug("EVEN year and Approved date between Jan 1st and June 30th - Setting Expiration date to June 30th of the following even year.");
                  newExpDate.setFullYear(newExpDate.getFullYear() + 1); 
          }
            }
            else{

              if(currentYear %2 == 0){
                newExpDate.setFullYear(newExpDate.getFullYear() + 2);
              }
              else{
                newExpDate.setFullYear(newExpDate.getFullYear() + 1);
              }
            }

            //set license expiration date
        var vParentCapID = getParent();
            if(vParentCapID){
                var licNum = vParentCapID.getCustomID();
                thisLic = new licenseObject(licNum,itemCap);
                thisLic.setExpiration(dateAdd(newExpDate,0));
            }
            
    }
    
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_930_WTUA_DPL_initialAppExpirationDate, Please contact administrator");
  }
}
/* @desc This method sets license Type Class when application is approved
 *           and ASI field in application 'Please select application type' = State-Certified General Real Estate Appraiser
 * Release B Master Script List ID:  933
 */
function CWM_ELP_933_WTUA_DPL_setTypeClass()
{
  try
  {
    if(wfTask == "Exam" && matches(wfStatus, "Approved", "Approved with Conditions"))
      {
        var newASIvalue = "CG";
        var appType = getAppSpecificValue("Please select application type", capId);
        if(appType == "State-Certified General Real Estate Appraiser")
        {
          //get parent
            var vParentCapID = getParent();
                if(vParentCapID)
            {
              editAppSpecific("Type Class", newASIvalue, vParentCapID);
            }
        }
        
      }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_933_WTUA_DPL_setTypeClass, Please contact administrator");
  }
}//end CWM_ELP_933_WTUA_DPL_setTypeClass

function CWM_ELP_934_939_DPL_WTUA_setTypeClassOnLicense(ipLicenseCapID)
{
  useAppSpecificGroupName = true;
  var fvAppType = getAppSpecific("APPRAISER INFORMATION.Please Select Application Type", capId);

  if (fvAppType == "State-Certified Residential Real Estate Appraiser")
    editAppSpecific("TYPE CLASS.Type Class", "CR", ipLicenseCapID);

  if (fvAppType == "State-Certified General Real Estate Appraiser")
    editAppSpecific("TYPE CLASS.Type Class", "CG", ipLicenseCapID);
}
/* @desc This method updates ASI Type Class to CR.
 * Release B Master Script List ID: 934
 * Event: WTUA
 */

function CWM_ELP_934_WTUA_DPL_UpdateASITypeClass(){
  try{
    useAppSpecificGroupName = true;
    var newValue = "LA";
    var asiApplicationType = getAppSpecific("APPRAISER INFORMATION.Please select application type", capId);
    if(wfTask == "Exam" && matches(wfStatus,"Approved","Approved with Conditions") && asiApplicationType == "State-Certified Residential Real Estate Appraiser"){
      var vParentCapID = getParent();
            if(vParentCapID)
      {
        editAppSpecific("TYPE CLASS.Type Class", newValue, vParentCapID);
          var newASIValue = getAppSpecific("TYPE CLASS.Type Class", vParentCapID);
          logDebug("Value for license ASI is : " + newASIValue);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_934_WTUA_DPL_UpdateASITypeClass, Please contact administrator");
  }
}/* @desc This method updates ASI Type Class to LA.
 * Release B Master Script List ID: 935
 * Event: WTUA
 */

function CWM_ELP_935_WTUA_DPL_UpdateASITypeClass(){
  try{
    var newValue = "LA";
    var asiApplicationType = getAppSpecificValue("Please select application type", capId);
    if(wfTask == "Validate" && wfStatus == "Approved" && asiApplicationType == "State-Licensed Real Estate Appraiser"){
      var vParentCapID = getParent();
            if(vParentCapID)
      {
        editAppSpecific("Type Class", newValue, vParentCapID);
          var newASIValue = getAppSpecificValue("Type Class", vParentCapID);
          logDebug("Value for license ASI is : " + newASIValue);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_935_WTUA_DPL_UpdateASITypeClass, Please contact administrator");
  }
}
/* @desc 
 * Release B Master Script List ID: 938
 */
function CWM_ELP_938_WTUA_DPL_copyApplicant2License()
{
  if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
  {
    //get parent
    var vParentCapID = getParent();
        if(vParentCapID)
    {
      copyContactsByType(capId,vParentCapID,"Applicant");
      editContactType("Applicant", "Licensed Individual", vParentCapID);
    }
  }
}/* @desc This method updates ASI Type Class to CG.
 * Release B Master Script List ID: 939
 * Event: WTUA
 */

function CWM_ELP_939_WTUA_DPL_UpdateASITypeClass(){
  try{
    useAppSpecificGroupName = true;
    var newValue = "CG";
    var asiApplicationType = getAppSpecificValue("Please select application type", capId);
    if(wfTask == "Validate" && matches(wfStatus,"Approved","Approved with Conditions") && asiApplicationType == "State-Certified General Real Estate Appraiser"){
      var vParentCapID = getParent();
            if(vParentCapID)
      {
        editAppSpecific("TYPE CLASS.Type Class", newValue, vParentCapID);
          var newASIValue = getAppSpecificValue("Type Class", vParentCapID);
          logDebug("Value for license ASI is : " + newASIValue);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_939_WTUA_DPL_UpdateASITypeClass, Please contact administrator");
  }
}/* @desc This method updates ASI Type Class to CR.
 * Release B Master Script List ID: 940
 * Event: WTUA
 */

function CWM_ELP_940_WTUA_DPL_UpdateASITypeClass(){
  try{
    var newValue = "CR";
    var asiApplicationType = getAppSpecificValue("Please select application type", capId);
    if(wfTask == "Validate" && wfStatus == "Approved" && asiApplicationType == "State-Certified Residential Real Estate Appraiser"){
      var vParentCapID = getParent();
            if(vParentCapID)
      {
        editAppSpecific("Type Class", newValue, vParentCapID);
          var newASIValue = getAppSpecificValue("Type Class", vParentCapID);
          logDebug("Value for license ASI is : " + newASIValue);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_940_WTUA_DPL_UpdateASITypeClass, Please contact administrator");
  }
}
/* @desc set the type class of the Appraiser License
 * Release B Master Script List ID: 941
 */
function CWM_ELP_941_WTUA_DPL_setTypeClass()
{
  try
  {
    var appType = getAppSpecificValue("Please select application type", capId);
      if(wfTask == "Exam" && matches(wfStatus, "Approved", "Approved with Conditions") && appType == "State-Licensed Real Estate Appraiser")
      {
        //get parent
        var vParentCapID = getParent();
            if(vParentCapID)
        {
          //update ASI on License
          editAppSpecific("TYPE CLASS.Type Class", "LA", vParentCapID);
        }
      }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_941_WTUA_DPL_setTypeClass, Please contact administrator");
  }
}function CWM_ELP_944_947_DPL_WTUA_setASIOnLicense(ipLicenseCapID)
{
  useAppSpecificGroupName = true;
  var fvAppType = getAppSpecific("APPRAISER INFORMATION.Please Select Application Type", capId);
  var fvState = getAppSpecific("RECIPROCAL STATE.Please Select the State", capId);

  if (fvAppType == "State-Certified General Real Estate Appraiser")
    editAppSpecific("TYPE CLASS.Type Class", "CG", ipLicenseCapID);

  if (fvState != "")
    editAppSpecific("RECIPROCAL STATE.Reciprocal State", fvState, ipLicenseCapID);
}
/* @desc This method updates ASI Type Class to CG.
 * Release B Master Script List ID: 944
 * Event: WTUA
 */

function CWM_ELP_944_WTUA_DPL_UpdateASITypeClass(){
  try{
    useAppSpecificGroupName = true;
    var newValue = "CG";
    var asiApplicationType = getAppSpecificValue("Please select application type", capId);
    if(wfTask == "Validate" && matches(wfStatus,"Approved","Approved with Conditions") && asiApplicationType == "State-Certified General Real Estate Appraiser"){
      var vParentCapID = getParent();
            if(vParentCapID)
      {
        editAppSpecific("TYPE CLASS.Type Class", newValue, vParentCapID);
          var newASIValue = getAppSpecificValue("Type Class", vParentCapID);
          logDebug("Value for license ASI is : " + newASIValue);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_944_WTUA_DPL_UpdateASITypeClass, Please contact administrator");
  }
}/* @desc Functions sets the Type Class of the license to CR if 
 * ASI Field 'Please select application type' = State-Certified Residential Real Estate Appraiser
 * Release B Master Script List ID: 945
 */
function CWM_ELP_945_WTUA_DPL_setTypeClass()
{
  try
  {
    var appType = getAppSpecificValue("Please select application type", capId);
      if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions") && appType == "State-Certified Residential Real Estate Appraiser")
      {
        //get parent
        var vParentCapID = getParent();
            if(vParentCapID)
        {
          //update ASI on License
          editAppSpecific("Type Class", "CR", vParentCapID);
        }
      }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_945_WTUA_DPL_setTypeClass, Please contact administrator");
  }
}
/* @desc Functions sets the Type Class of the license to LA if 
 *         ASI Field 'Please select application type' = State-Licensed Real Estate Appraiser
 * Release B Master Script List ID: 946
 */
function CWM_ELP_946_WTUA_DPL_setTypeClass()
{
  try
  {
    var appType = getAppSpecificValue("Please select application type", capId);
      if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions") && appType == "State-Licensed Real Estate Appraiser")
      {
        //get parent
        var vParentCapID = getParent();
            if(vParentCapID)
        {
          //update ASI on License
          editAppSpecific("Type Class", "LA", vParentCapID);
        }
      }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_946_WTUA_DPL_setTypeClass, Please contact administrator");
  }
}
          
/* @desc This method updates ASI RECIPROCAL STATE.Reciprocal State as RECIPROCAL STATE.Please Select the State.
 * Release B Master Script List ID: 947
 * Event: WTUA
 */

function CWM_ELP_947_WTUA_DPL_UpdateASIReciprocalState(){
  try{
    useAppSpecificGroupName = true;
    var newValue = getAppSpecific("RECIPROCAL STATE.Please Select the State", capId);
    if(wfTask == "Validate" && matches(wfStatus,"Approved","Approved with Conditions")){
      var vParentCapID = getParent();
            if(vParentCapID)
      {
        editAppSpecific("RECIPROCAL STATE.Reciprocal State", newValue, vParentCapID);
          var newASIValue = getAppSpecificValue("Reciprocal State", vParentCapID);
          logDebug("Value for license ASI is : " + newASIValue);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_947_WTUA_DPL_UpdateASIReciprocalState, Please contact administrator");
  }
}/* @desc This method updates ASI Value to parent License
 * Release B Master Script List ID: 949
 */
 function CWM_ELP_949_WTUA_DPL_CopyASIFieldToLicense(){
  try{
    var continueEducationField = "Temporary";
    var vParentCapID = getParent();
    useAppSpecificGroupName = true;
    if(wfTask=="Validate" && (wfStatus=="Approved" || wfStatus=="Approved with Conditions")) {
      if(vParentCapID){
        editAppSpecific("CONTINUING EDUCATION.Continuing Education Waiver", continueEducationField, vParentCapID); 
        var newASIValue = getAppSpecificValue("Continuing Education Waiver", vParentCapID);
        logDebug("Value for license ASI is : " + newASIValue);
      }
    }
  }
  catch(err){
    showMessage=true;
    comment("Error on function CWM_ELP_949_WTUA_DPL_CopyASIFieldToLicense. Please contact system administrator");
  }

 }
/* @desc This function sets License End Date to 10 years from the date of issuance on the license record
 * Release B Master Script List ID: 961
 */
function CWM_ELP_961_WTUA_DPL_setLicEndDate()
{
  try
  {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
    {
      var vParentCapId = getParent();
      if(vParentCapId)
      {
        var today = new Date();
        editAppSpecific("License End Date", dateAddMonths(today, 120), vParentCapId);
      }
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_961_WTUA_DPL_setLicEndDate, Please contact administrator");
  }
}
function CWM_ELP_962_WTUA_DPL_AddBusinessNameToLicense()
{
    if (wfTask == "Validate" && (wfStatus == "Approved" || wfStatus == "Approved with Conditions")) {
        //1. Update the Transaction License Record (i.e. add value to the following ASI:  "Business Name" ,  "Doing Business As (DBA)" & "Address Printed on License Card")
        var parentLicCapId = getParent();
        if (!parentLicCapId)
            return;

        logDebug("Got parent license:" + parentLicCapId.getCustomID());

        useAppSpecificGroupName = true;
        var amendedDBA = getAppSpecific("BUSINESS.Doing Business As (DBA)");
        var amendedAddress = getAppSpecific("BUSINESS.What address do you want printed on your new license card?");
        var amendName = "";
        var capContactResult = aa.people.getCapContactByCapID(capId);
        if (capContactResult.getSuccess()) {
            capContactResult = capContactResult.getOutput();
            for (yy in capContactResult) {
                thisCapContact = capContactResult[yy];
                thisPeople = thisCapContact.getPeople();

                if (thisPeople.contactType == "Business") {
                    amendName = thisPeople.getBusinessName()
                }
            }
        }

        var amendType = getAppSpecific("BUSINESS.Select Business Type");
        editAppSpecific("INFORMATION ON LICENSE.Business Name", amendName, parentLicCapId);
        editAppSpecific("INFORMATION ON LICENSE.Select Business Type", amendType, parentLicCapId);
        editAppSpecific("INFORMATION ON LICENSE.Doing Business As (DBA)", amendedDBA, parentLicCapId);
        editAppSpecific("INFORMATION ON LICENSE.Address Printed on License Card", amendedAddress, parentLicCapId);

        logDebug("amendName:" + amendName);
        logDebug("amendType:" + amendType);
        logDebug("amendedDBA:" + amendedDBA);
        logDebug("amendedAddress:" + amendedAddress);

        // Update the Licensed Professional record.
        var llp = getLicenseProfessional(parentLicCapId);
        if (llp) {
            llp[0].setBusinessName(amendName);
            llp[0].setBusName2(amendedDBA);
            var result = aa.licenseProfessional.editLicensedProfessional(llp[0]);
            if (result.getSuccess()) {
                logDebug("Licensed Professional updated.");
            } else {
                logDebug("**WARN: Licensed Professional not updated! " + result.getErrorMessage());
            }
        }       

        //2. Update the Reference License Record, add value to DBA
        var lp = getRefLicenseProf(parentLicCapId.getCustomID());
        if (lp) {
            logDebug("Found Reference License Professional:" + lp.getContactFirstName() + " " + lp.getContactLastName() + " - " + lp.getBusinessName() + " - DBA:" + lp.getBusinessName2());
            lp.setBusinessName2(amendedDBA);
            lp.setBusinessName(amendName);
            var result = aa.licenseScript.editRefLicenseProf(lp);
            if (result.getSuccess()) {
                logDebug("Reference License Professional updated.");
            } else {
                logDebug("**WARN: Reference License Professional not updated! " + result.getErrorMessage());
            }
        }

        //3. Queue the License for printing
        if (!(appMatch("License/Real Estate/Instructor/Application")))
            callReport("DPL|LICENSE_REGISTRATION_CARD", false, true, "DPL License Print Set");

        //4. Copy ASIT "Licenses issued in other states" to the license record.
        copySingleASITable("LICENSE IN OTHER JURISDICTIONS", capId, parentLicCapId);

        addToLicenseSyncSet(parentLicCapId);
    }
}

function CWM_ELP_963_DPL_WTUA_RemoveBusinessNameToLicense()
{
  if (wfTask == "Validate" && (wfStatus == "Approved" || wfStatus == "Approved with Conditions"))
  {
    //1. Update the Transaction License Record (i.e. remove value from the following ASI:  "Business Name" ,  "Doing Business As (DBA)" & "Address Printed on License Card")
    var parentLicCapId = getParent();
    if (!parentLicCapId)
      return;
    editAppSpecific("Business Name", "", parentLicCapId);
    editAppSpecific("Doing Business As (DBA)", "", parentLicCapId);
    editAppSpecific("Address Printed on License Card", "", parentLicCapId);
    editAppSpecific("Select Business Type", "", parentLicCapId);

    //2. Update the Reference License Record, remove the value from the "Doing Business As (DBA)"   
    var lp = getRefLicenseProf(parentLicCapId.getCustomID());
    //Sagar : EPLACE-2359 : Syncing of B3CONTRA and RSTATE_LIC table for ACA Event scripts
    if (!lp) {
  lp = getRefLicenseProfWithLicNbrAndTypeClass(parentLicCapId.getCustomID());
     }
    if (lp)
    {
      lp.setBusinessName2("");
      lp.setBusinessName("");
      var result = aa.licenseScript.editRefLicenseProf(lp);   
    }
        //Sagar : EPLACE-2359 : Syncing of B3CONTRA and RSTATE_LIC table for ACA Event scripts
      var licenseRecordId = parentLicCapId.getCustomID();
        logDebug("licenseRecordId : "+licenseRecordId);
  if(licenseRecordId)
  {
    var scanner = licenseRecordId.split("-");
    var b1LicNbr = scanner[0];
    var boardCode = scanner[1];
    var typeClass = scanner[2];

    var capLpsB3contra = getLicenseProfessional(parentLicCapId);
    for (var thisCapLpNum in capLpsB3contra) 
    {
      var licenseProfessionalScriptModel = capLpsB3contra[thisCapLpNum];  
      
      var licNbrB3contra = capLpsB3contra[thisCapLpNum].getLicenseNbr();
      var boardCodeB3contra = capLpsB3contra[thisCapLpNum].getComment();
      var typeClassB3Contra = capLpsB3contra[thisCapLpNum].getBusinessLicense();
      
      if(((b1LicNbr == licNbrB3contra) && (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra) )||
      ((b1LicNbr+"-"+typeClass == licNbrB3contra+"-"+typeClassB3Contra) && 
      (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra) ))
      {
        licenseProfessionalScriptModel.setBusinessName("");
        licenseProfessionalScriptModel.setBusName2("");
        var result = aa.licenseProfessional.editLicensedProfessional(licenseProfessionalScriptModel);
        if(result.getSuccess())
        {
          logDebug("license professional in B3CONTRA table updated successfully ");
        }
        else
        {
          logDebug("license professional in B3CONTRA table updated successfully ?  "+result.getErrorMessage());
        }
      } 
    } 
  }

    //3. Queue the License for printing
    callReport("DPL|LICENSE_REGISTRATION_CARD", false, true, "DPL License Print Set");

    //4. Add license record to SYNC Set
    addToLicenseSyncSet(parentLicCapId);
  }
}


/* @desc This method updates ASI field "Type Class"  on completion of work flow.
 * Release B Master Script List ID: 964, 1200
 */
 
function CWM_ELP_964_1200_DPL_WTUA_setTypeClass(appID, licID)
{
  //logDebug("Inside setTypeClassToPR "+ appID + " " + licID);
  //logDebug("HSP: " + AInfo["Certification as HSP"]);
  
  /* Release B Master Script List.xlsx
  * id: 964
  */

  if(appMatch("License/Psychologist/Psychologist/Application"))
  {
    if(AInfo["Certification as HSP"] == "CHECKED")
    {
      //logDebug("Updating Type Class");
      editAppSpecific("Type Class", "PR", licID);
    }
  }
  // end Script id 964

  /* Release B Master Script List.xlsx
  * id: 1200
  */

  else if (appMatch("License/Real Estate/Reciprocal Broker/Application"))
  {
    editAppSpecific("Type Class", "RB", licID);
  }
  else if(appMatch("License/Real Estate/Attorney Broker/Application"))
  {
    editAppSpecific("Type Class", "AB", licID);
  } 
    // end Script id 1200
}

/* @desc This method updates ASI "Type Class" of psychologist license record to "PR" when psychologist app
 * is approved and ASI "Certification of HSP" has been checked.
 * Release B Master Script List ID: 964
 */
 
function CWM_ELP_964_DPL_WTUA_setTypeClassToPR(appID, licID)
{
  //logDebug("Inside setTypeClassToPR "+ appID + " " + licID);
  //logDebug("HSP: " + AInfo["Certification as HSP"]);
  if(AInfo["Certification as HSP"] == "CHECKED")
  {
    //logDebug("Updating Type Class");
    editAppSpecific("Type Class", "PR", licID);
  }
}
function CWM_ELP_964_EXP_DPL_RecordSubmission_CopyPRToLic(){
  var licenseRec = getParent();
  var appType = getAppSpecific("This application is for",capID);
  if(wfStatus == "Approved" && appType == "Certification as HSP"){
    if(licenseRec){
      editAppSpecific("Type Class","PR",licenseRec);
    }
    else{
      logDebug("No valid license found for this application");
    }
  }
}/* @desc This method assess license fee for Reciprocal Salesperson Application
 * Release B Master Script List ID: 965
 */
function CWM_ELP_965_DPL_ASA_AddProRatedLicFeeRESApp(capId)
{
  //modified the function to only determine the qty and return it to the addDplApplicationfee function
  try
  {
    //if(getAppSpecific("Military Status")!="Active Duty")
    //{
      //Variables
      var bDateObj;
      var issueDateObj = new Date();
      var nextMonth = new Date(); 
      
      //Constant values to be used per the business logic
      var oneDay = 24*60*60*1000;
      var brokerLicenseFee = parseInt(lookup("lookup:RE App Fee", "RE-S-APP"));
      if(!brokerLicenseFee)
        brokerLicenseFee = 103;
      var monthlyBrokerLicenseFee = Math.floor(brokerLicenseFee/24);
      logDebug("Monthly Broker License Fee: " + monthlyBrokerLicenseFee);

      //Get the applicant contact's birth date
      var capContactResult=aa.people.getCapContactByCapID(capId);
      if(capContactResult.getSuccess())
      {
        capContactResult=capContactResult.getOutput();
        for(i in capContactResult)
        {
          var peopleModel= capContactResult[i].getPeople();
          if(peopleModel.getContactType()=="Applicant" )
          {
            var capContactScriptModel= capContactResult[i];
            var capContactModel= capContactScriptModel.getCapContactModel();
            var bDate = capContactModel.getBirthDate();
            if(bDate != null) 
            {
              bDateObj = new Date(bDate.getTime());
              logDebug("Birth date of applicant:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
            }
          }
        }
      }
      
      
      if(bDateObj)
      {    
        bDateObj.setFullYear(issueDateObj.getFullYear());
        
        if(bDateObj < issueDateObj)
        {
          bDateObj.setFullYear(issueDateObj.getFullYear()+1);     
        }
        
        logDebug("Birth date after updates:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
        
        var days = Math.round(Math.abs((bDateObj.getTime() - issueDateObj.getTime())/(oneDay)));
        var months = Math.round(days/30.43);
        logDebug("Months to next birthday: " + months);
        var feeQuantity = (months*monthlyBrokerLicenseFee) + brokerLicenseFee;
        logDebug("License Fee feeQuantity: " + feeQuantity);
        return feeQuantity;
        //addFee("RSOL","RE-SALESMAN-APP","STANDARD",feeQuantity,"Y",capId);
        //logDebug("Fee added");
      }
    }
  //}
  catch(err)
  {
    showMessage=true;
    comment("Error on ASA function CWM_ELP_965_DPL_ASA_AddProRatedLicFeeRESApp, Please contact administrator");
  }
}//end CWM_ELP_965_DPL_ASA_AddProRatedLicFeeRESApp
function CWM_ELP_970_DPL_WTUA_SetCE_B_Workflow(){
  if(AInfo["B. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS."]=="No"){
    updateTask("Validate","CE Attestation Review","Updated by script","Updated by script");
  }
}function CWM_ELP_970_EXP_DPL_SetCE_B_Workflow(){
  if(AInfo["B. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS."]=="No"){
    updateTask("Validate","CE Attestation Review","Updated by script","Updated by script");
  }
}/* @desc This method sets the status of "Validate" task of Certified Health Officer Renewal 
 * based on the value in an ASI field.
 * Release B Master Script List ID: 971
 */

function CWM_ELP_971_DPL_WTUA_setValidateStatus()
{
  if(wfTask == "Intake" && wfStatus == "Ready for Validation")
  {
    if(AInfo["D. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS."] == "No")
    {
      closeTask("Validate","CE Attestation Review","Updated via Script", "Updated via script");
      activateTask("Issuance");
      updateTask("Issuance", "Ready for Printing", "Updated via script", "Updated via script");
    }
  }
}/* Release B Master Script List ID: 977
 */
function CWM_ELP_977_WTUA_DPL_approveRenewal()
{
   //if renewal is approved
   if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
   {
     var contEduc = getAppSpecificValue("I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/ REGULATIONS.", capId);
     var crimConv = getAppSpecificValue("I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.", capId);
     var complied = getAppSpecificValue("I ATTEST UNDER THE PAINS & PENALTIES OF PERJURY THAT I HAVE COMPLIED WITH TAX LAWS STATED ABOVE", capId);
     
     // Begin 1. If All questions are answered 'Yes;
     if(contEduc == "Yes" && crimConv == "Yes" && complied == "Yes")
     {
       //recalculate License expiration date and set status to current
       var vParentCapID = getParentLicenseCapID(capId);
           if(vParentCapID)
           {
         //approve approve and close renewal
           if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
        }
           }
       
       return;
     }//End 1.
     
     // Begin 2. If the CE question is answered 'No' (note: in release A, this question only exists for Veterinarian Renewals)
     if(contEduc == "No")
     {
       closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
       activateTask("Validate");
       updateTask("Validate", "CE Attestation Review", "Updated via script.", "Updated via script.");
       return;
     }//End 2
     
     // Begin 3. If any of the discipline questions are answered 'No' (anything besides the CE question)
     if((crimConv == "No" || complied == "No") && contEduc != "No")
     {
       //recalculate License expiration date and set status to current
       var vParentCapID = getParentLicenseCapID(capId);
           if(vParentCapID)
           {
               //set license to active
         if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
        }
           }
       
       return;
     }// End 3.
   }
   
} 
//end CWM_ELP_977_WTUA_DPL_approveRenewal
/* @desc create child record if Attestation records were not checked.
 * Release B Master Script List ID: 978
 * Event: WTUA
 */
function CWM_ELP_978_WTUA_DPL_CreateInvestigationIntakeRecord()
{
  try
  { 
    // set string to get ASI questions answer
    var asiStart = "1. I AM IN COMPLIANCE WITH G.L.c.62C ";
    var spclChar = String.fromCharCode(167);
    var asiEnd   = "47A & 49A.";
    var asiName = asiStart + spclChar + spclChar + asiEnd;
    var renAttesQ1 = getAppSpecific(asiName);
    var renAttesQ2 = getAppSpecific("2. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
    var renAttesQ3 = getAppSpecific("3. HAVE YOU HAD ANY CRIMINAL CONVICTIONS ISSUED AGAINST YOU IN ANY JURISDICTION?");
    var renAttesQ4 = getAppSpecific("4. HAVE YOU REPORTED YOUR SOCIAL SECURITY NUMBER TO THE BOARD AS REQUIRED BY M.G.L. C. 30A, " + spclChar + "13A?");
    aa.print(renAttesQ1 + " " + renAttesQ2 + " " + renAttesQ3 + " " + renAttesQ4);

    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
    {
      if(renAttesQ1 == "No" || renAttesQ2 == "No" || renAttesQ3 == "No" || renAttesQ4 == "No")
      {
        createChild("Enforce","Investigation","Intake","NA","Renewal attestations not met", capId);
      } 
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASA function CWM_ELP_978_WTUA_DPL_CreateInvestigationIntakeRecord, Please contact administrator");
  }

}
/* for landsurveyors
*/ 
function CWM_ELP_979_1330_WTUA_DPL_RenewalApprovedUpdateLic()
{
/*  try
  { */
    var splChar = String.fromCharCode(167);
    var asiName = "A. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
    var inComplianceGLC = getAppSpecific(asiName);

    var prov250CMR = getAppSpecific("B. I AM FAMILIAR WITH THE PROVISIONS OF 250 CMR WHICH GOVERN THE PRACTICE OF EN AND LS.");

    var reportedDiscipline = getAppSpecific("C. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");

    var reportedConvictions = getAppSpecific("D. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");

    var noContestPlea = getAppSpecific("E. I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.");
    var defendant = getAppSpecific("F. I HAVE REPORTED IF I WAS A DEFENDANT IN A CIVIL PROCEEDING RESULTING IN SETTLEMENT OR JUDGEMENT.");
    var asiNameSSN = "G.  AS REQUIRED BY M.G.L. C. 30A, "+ splChar +"13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
    var reportedSSN = getAppSpecific(asiNameSSN, capId);
  //var attestPain = getAppSpecific("I attest under the pains and penalties of perjury that the above responses are truthful & accurate.");

    if(inComplianceGLC.toUpperCase().equals("NO") || prov250CMR.toUpperCase().equals("NO") || reportedDiscipline.toUpperCase().equals("NO") || reportedConvictions.toUpperCase().equals("NO") || noContestPlea.toUpperCase().equals("NO") || defendant.toUpperCase().equals("NO") || reportedSSN.toUpperCase().equals("NO"))
    { 
      logDebug("At least 1 of the renewal attestation is No.");
      //CWM_ELP_1330_WTUA_DPL_renewalApprovedUpdateLic();
              if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
    }
      else {
        if (renewalApproval(capId)) {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
/*  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASA function CWM_ELP_979_1330_WTUA_DPL_RenewalApprovedUpdateLic, Please contact administrator");
  } */
}
/* @desc create child record if Attestation records were not checked.
 * Release B Master Script List ID: 979
 * Event: WTUA
 */
function CWM_ELP_979_WTUA_DPL_CreateInvestigationIntakeRecord(){
  //var itemCap = capId;
  //var capString = itemCap.getCustomID();
  var attestationABegin = "A. I AM IN COMPLIANCE WITH G.L.c.62C ";
  var attestationAEnd = "47A & 49A.";
  var splChar = String.fromCharCode(167);
  var asiNameA = attestationABegin + splChar + splChar + attestationAEnd;
  var attestationA = getAppSpecificValue(asiNameA, capId);
  var attestationB = getAppSpecificValue("B. I AM FAMILIAR WITH THE PROVISIONS OF 250 CMR WHICH GOVERN THE PRACTICE OF EN AND LS.", capId);
  var attestationC = getAppSpecificValue("C. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
  var attestationD = getAppSpecificValue("D. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.", capId);
  var attestationE = getAppSpecificValue("E. I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.", capId);
  var attestationF = getAppSpecificValue("F. I HAVE REPORTED IF I WAS A DEFENDANT IN A CIVIL PROCEEDING RESULTING IN SETTLEMENT OR JUDGEMENT.", capId);
  var attestationGBegin = "G. AS REQUIRED BY M.G.L. C. 30A, ";
  var attestationGEnd = "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
  var asiNameG = attestationGBegin + splChar + attestationGEnd;
  var attestationG = getAppSpecificValue(asiNameG, capId);
  
  logDebug("A: " + attestationA);
  logDebug("G: " + attestationG);
  if (wfTask == "Validate/Approved" || wfTask == "Validate/Approved with Conditions"){
    if(attestationA == "No" || attestationB == "No" || attestationC == "No" || attestationD == "No" || attestationE == "No" || attestationF == "No" || attestationG == "No"){
      createChild("Enforce","Investigation","Intake","NA",("Renewal attestations were not met for record ID " + capString));
    } 
  }
}

function CWM_ELP_986_DPL_ASB_validateVerificationLicense()
{
try 
{
  var asiBoard = AInfo["Board"];
  var asiLicType = AInfo["License Type"];
  var asiLicNumber = AInfo["License Number"];
  //logDebug("Lic:"+asiBoard +","+asiLicType +","+asiLicNumber );
  var validLicense = false;
  var boardCode = "";
  var licenseType = "";
  var vTypeClass = new Array();
  //added logic to derive the proper board for the lookup.
  //per defect 6108, 4 boards which are seperate internally are merged on this form per the legal board name (EL & FA), PL & GF
  if (asiBoard=="Plumbers and Gas Fitters"){
    if (asiLicType=="Apprentice Gas Fitter" || asiLicType=="Gas Fitting Business" || asiLicType=="Journeyman Gas Fitter" || asiLicType=="Master Gas Fitter") {
      asiBoard = "Gas Fitters";
    }
    else {
      asiBoard = "Plumbers";
    }
  }
  else if (asiBoard=="Electricians and Fire Alarm System Installers"){

    if (asiLicType=="Systems Contractor" || asiLicType=="Systems Technician") {
      asiBoard = "Fire Alarm System Installers";
    }
    else {
      asiBoard = "Electricians";
    }
  }
    else if (asiBoard=="Engineers and Land Surveyors"){

      asiBoard = "Engineering";
            // JIRA 3761
             if (asiLicType == "Sanitary Engineer")
            {
                asiLicType = "Sanitarian";
            }
    
  }
      else if (asiBoard=="Real Estate Brokers and Salespersons"){

      asiBoard = "Real Estate Brokers & Salespersons";
    
  }
      else if (asiBoard=="Embalming and Funeral Directing"){

      if (asiLicType=="Funeral Establishment") {
      asiBoard = "Funeral Establishment";
        }
        else {
          asiBoard = "Embalming";
        }
    
  }
  else if (asiBoard=="Cosmetologists"){

      if (asiLicType=="Salon Type 1 - 5" || asiLicType=="Cosmetology School" || asiLicType=="Aesthetician School" || asiLicType=="Mobile Manicuring" || asiLicType=="Advanced Training Institute"  || asiLicType=="Manicuring School") {
      asiBoard = "Cosmetologist Business";
        }
        else {
          asiBoard = "Cosmetologists";
        }
    
  }
    else if (asiBoard=="Barbers"){

      if (asiLicType=="Barber Shop" || asiLicType=="Barber School") {
      asiBoard = "Barber Shop";
        }
        else {
          asiBoard = "Barbers";
        }
    
  }
      else if (asiBoard=="Architect"){

      asiBoard = "Architects";
    
  }
  if (asiBoard != undefined && asiBoard != null && asiBoard != "")
  {
    boardCode = lookup("BOARDS", asiBoard);
  }
  if (asiLicType != undefined && asiLicType != null && asiLicType != "")
  {
             if (asiLicType == "Type 3 Funeral Director and Embalmer") {
        asiLicType = "Type 3";
        vTypeClass = String(lookup("lookup:LP to Type Class", asiLicType)).split(";");
      } else if (asiLicType == "Type 6 Funeral Director and Embalmer") {
        asiLicType = "Type 6";
        vTypeClass = String(lookup("lookup:LP to Type Class", asiLicType)).split(";");
      } else{
    vTypeClass = String(lookup("lookup:LP to Type Class",asiLicType)).split(";");
          }
}

for (tc in vTypeClass) {
    //logDebug("type class:"+vTypeClass[tc]);
    //the license doesn't need to be active, it just needs to be a valid license #
    if (getRefLicenseProf(asiLicNumber, boardCode, vTypeClass[tc])) {
      validLicense = true;
    }
  }
//added secondary check for PL/GF inspectors as they can have either GF or PL for a boardCode
if(asiLicType=="Plumbing/Gas Inspector" && validLicense==false){
  boardCode = "GF";
for (tc in vTypeClass) {
    //aa.print("type class:"+vTypeClass[tc]);
    //the license doesn't need to be active, it just needs to be a valid license #
    if (getRefLicenseProf(asiLicNumber, boardCode, vTypeClass[tc])) {
      validLicense = true;
    }
  }
}
  if (!validLicense) 
  {
    
    cancel = true;
    showMessage = true;
    //logDebug("Blocked from pageflow" + asiBoard + "; " + vTypeClass + "; " + asiLicNumber + "; " + boardCode + "; " + licenseType + "; " + validLicense); 

    message = "<br>The information entered is not a valid DPL license.<br>";
  comment(message);
       }
} catch (err) { logDebug(err) } 
}
/* @desc This function copies the ASI Group APPROVED COURSE INFORMATION from
 *           the course approval to the renewal.
 *  Release B defect 3692
 */
function CWM_ELP_ASA_DPL_copyASI2Renewal()
{
    try
    {
        var vParentCapID = getParentLicenseCapID(capId);
        if (vParentCapID)
        {
            logDebug("Copying ASI Group APPROVED COURSE INFORMATION to the renewal");
            useAppSpecificGroupName = true;
            loadAppSpecific(AInfo, vParentCapID);
            
            editAppSpecific("APPROVED COURSE INFORMATION.Course Title", AInfo["APPROVED COURSE INFORMATION.Course Title"], capId);
            editAppSpecific("APPROVED COURSE INFORMATION.Total Course Hours", AInfo["APPROVED COURSE INFORMATION.Total Course Hours"], capId);
            editAppSpecific("APPROVED COURSE INFORMATION.Course Type", AInfo["APPROVED COURSE INFORMATION.Course Type"], capId);
            editAppSpecific("APPROVED COURSE INFORMATION.Meets AQB Criteria", AInfo["APPROVED COURSE INFORMATION.Meets AQB Criteria"], capId);          
        }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on ASA function CWM_ELP_ASA_DPL_copyASI2Renewal, Please contact administrator");
    }
}/* @desc This function copies the Type Class and Legal Structure from License to Renewal
 *  Release B defect 3533
 */
function CWM_ELP_ASA_DPL_copyTypeClassLegalStruc2Renewal()
{
    try
    {
        var vParentCapID = getParentLicenseCapID(capId);
        if (vParentCapID)
        {
            /*logDebug("Copying Type Class and Legal Structure to the renewal");
            useAppSpecificGroupName = true;
            loadAppSpecific(AInfo, vParentCapID);
            
            editAppSpecific("TYPE CLASS.Type Class", AInfo["TYPE CLASS.Type Class"], capId);*/
            
            var childArray = new Array();
            childArray = getChildren("License/Real Estate/Business/Application",vParentCapID);
            if(childArray.length>0)
            {
                for (ca in childArray)
                {
                    var capContactResult = aa.people.getCapContactByCapID(childArray[ca]);
                    if(capContactResult.getSuccess())
                    {
                        capContactResult=capContactResult.getOutput();
                        for(yy in capContactResult)
                        {
                            thisCapContact = capContactResult[yy];
                            thisPeople = thisCapContact.getPeople();
                            logDebug("Contact type: " + thisPeople.contactType);
                                            
                            // Check Contact type
                            if (thisPeople.contactType == "Business")
                            {
                                // For "Business", get  getCapContactModel
                                capContactModel = thisCapContact.getCapContactModel();
                                var capContactTemplate = capContactModel.template;
                                var templateForms = capContactTemplate.getTemplateForms();
                                for (i=0; i< templateForms.size(); i++)
                                {
                                    var template = templateForms.get(i);
                                    var subGroups = template.getSubgroups();
                                    for (j=0; j< subGroups.size(); j++)
                                    {
                                        var subGroup = subGroups.get(j);
                                        var fields = subGroup.fields;
                                        for (k=0; k< fields.size(); k++)
                                        {
                                            var field = fields.get(k);
                                            fieldValue = field.defaultValue;    
                                        }                
                                    }
                                }
                            }       
                        }
                        aa.print(fieldValue);
                    }
                }
                
            }
    
            var capContactResult = aa.people.getCapContactByCapID(capId);
            if(capContactResult.getSuccess())
            {
                capContactResult=capContactResult.getOutput();
                for(yy in capContactResult)
                {
                    thisCapContact = capContactResult[yy];
                    thisPeople = thisCapContact.getPeople();
                    logDebug("Contact type: " + thisPeople.contactType);
                                    
                    // Check Contact type
                    if (thisPeople.contactType == "Business")
                    {
                        // For "Business", get  getCapContactModel
                        capContactModel = thisCapContact.getCapContactModel();
                        var capContactTemplate = capContactModel.template;
                        
                        var asiTemplate = aa.genericTemplate.getTemplateStructureByGroupName("CONTACT-ORG").getOutput();
                        setTemplateValueByForm(asiTemplate, "LEGAL STRUCTURE", "Legal Structure", fieldValue);
                        capContactModel.setTemplate(asiTemplate);
            aa.people.editCapContact(capContactModel);
                    }       
                }
                aa.print(fieldValue);
            }
        }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on ASA function CWM_ELP_ASA_DPL_copyTypeClassLegalStruc2Renewal, Please contact administrator");
    }
}/* @desc This function sets Type Class on RE Business license..
 *  Release B defect 3533
 */
function CWM_ELP_ASA_DPL_setTypeClassREBusinessLicl()
{
    try
    {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
    {
      var capContactResult = aa.people.getCapContactByCapID(capId);
      if(capContactResult.getSuccess())
      {
        capContactResult=capContactResult.getOutput();
        for(yy in capContactResult)
        {
          thisCapContact = capContactResult[yy];
          thisPeople = thisCapContact.getPeople();
          logDebug("Contact type: " + thisPeople.contactType);
                  
          // Check Contact type
          if (thisPeople.contactType == "Business")
          {
            // For "Business", get  getCapContactModel
            capContactModel = thisCapContact.getCapContactModel();
            var capContactTemplate = capContactModel.template;
            var templateForms = capContactTemplate.getTemplateForms();
            for (i=0; i< templateForms.size(); i++)
            {
              var template = templateForms.get(i);
              var subGroups = template.getSubgroups();
              for (j=0; j< subGroups.size(); j++)
              {
                var subGroup = subGroups.get(j);
                var fields = subGroup.fields;
                for (k=0; k< fields.size(); k++)
                {
                  var field = fields.get(k);
                  fieldValue = field.defaultValue;  
                }        
              }
            }
          }   
        }
        aa.print(fieldValue);
      }
      
      var vParentCapID = getParent(capId);
            if (vParentCapID)
            {
        if(fieldValue == "LLC")
        {
          logDebug("Setting Type Class on License");
                    useAppSpecificGroupName = true;
                    editAppSpecific("TYPE CLASS.Type Class", "LC", vParentCapID);
        }
                
            }
    }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on ASA function CWM_ELP_ASA_DPL_setTypeClassREBusinessLicl.js, Please contact administrator");
    }
}
/* @desc This method copies the "TYPE CLASS" name from the license to the Renewal
 * Event: ASA
 */
function CWM_ELP_Defect3433_DPL_ASA_CopyTypeClassToRenewal()
{
  try
  {   
    var vParentCapID = getParentLicenseCapID(capId);
    logDebug("Renewal CapId:" + capId);
    logDebug("Parent CapId:" + vParentCapID);
    var msg = "Renewal CapId:" + capId + " Parent CapId:" + vParentCapID;
    if (vParentCapID)
    {
      var typeClass = getAppSpecific("Type Class", vParentCapID);
      logDebug("TYPE CLASS from license:" + typeClass);
      editAppSpecific("TYPE CLASS", typeClass, capId);
    }
    else
    {
      logDebug("***There was an error retrieving the license associated with this renewal***");
    }     
  }
  catch(err)
  {
      showMessage=true;
      comment("Error on WTUA function CWM_ELP_Defect3433_DPL_ASA_CopyTypeClassToRenewal, Please contact administrator");
   }    
}
/* Set ExpDate For RE Reciprocal Salesperson
*  This function will Set ExpDate For RE Reciprocal Salesperson
*  This function is added as part of Defect 3452
*  WTUA: Workflow Task Update After
*/
function CWM_ELP_Defect3452_setExpDateForREReciprocalSalesperson()
{
  try
  {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
      {
      logDebug("Inside setExpDateForRE"); 
      var currDate = new Date();
      var expDate = new Date();   
      var bDateObj;
      var firstDayOfNextMonth = new Date();
      
      var licId = getParent();
      var licCustId = licId.getCustomID();
      logDebug("Parent ID: " + licId + " " + licCustId);
    
      //Get applicant's birthday
      var capContactResult=aa.people.getCapContactByCapID(capId);
      if(capContactResult.getSuccess())
      {
        capContactResult=capContactResult.getOutput();
        for(i in capContactResult)
        {
          var peopleModel= capContactResult[i].getPeople();
          if(peopleModel.getContactType()=="Applicant" )
          {
            var capContactScriptModel= capContactResult[i];
            var capContactModel= capContactScriptModel.getCapContactModel();
            var bDate = capContactModel.getBirthDate();
            if(bDate != null) 
            {
              bDateObj = new Date(bDate.getTime());
              logDebug("Birth date of applicant:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
            }
          }
        }
      }

      if(bDateObj)
      {
        bDateObj.setFullYear(currDate.getFullYear());
        
        
        if(bDateObj<currDate)
        {
          expDate.setFullYear((currDate.getFullYear() + 3));
        }
        else
        {
          expDate.setFullYear((currDate.getFullYear() + 2));
        }
        expDate.setMonth(bDateObj.getMonth());
        expDate.setDate(bDateObj.getDate());
        var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
        logDebug("Exp date: " + expDateString);

        thisLic= new licenseObject(licCustId,licId);
        thisLic.setExpiration(expDateString); 
thisLic.setStatus("Active");    
      }
      }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_Defect3468_setExpDateForREReciprocalAppraiser, Please contact administrator");
  }
  
}
/* Set ExpDate For RE Reciprocal Appraiser
*  This function will Set ExpDate For RE Reciprocal Appraiser
*  This function is added as part of Defect 3468
*  WTUA: Workflow Task Update After
*/
function CWM_ELP_Defect3468_setExpDateForREReciprocalAppraiser(vParentCapID)
{
  try
  {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
      {
      logDebug("Inside setExpDateForRE"); 
      var currDate = new Date();
      var expDate = new Date();   
      var bDateObj;
      var firstDayOfNextMonth = new Date();
      
      var licId = getParent();
      var licCustId = licId.getCustomID();
      logDebug("Parent ID: " + licId + " " + licCustId);
    
      //Get applicant's birthday
      var capContactResult=aa.people.getCapContactByCapID(capId);
      if(capContactResult.getSuccess())
      {
        capContactResult=capContactResult.getOutput();
        for(i in capContactResult)
        {
          var peopleModel= capContactResult[i].getPeople();
          if(peopleModel.getContactType()=="Applicant" )
          {
            var capContactScriptModel= capContactResult[i];
            var capContactModel= capContactScriptModel.getCapContactModel();
            var bDate = capContactModel.getBirthDate();
            if(bDate != null) 
            {
              bDateObj = new Date(bDate.getTime());
              logDebug("Birth date of applicant:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
            }
          }
        }
      }

      if(bDateObj)
      {
        bDateObj.setFullYear(currDate.getFullYear());
        
        
        if(bDateObj<currDate)
        {
          expDate.setFullYear((currDate.getFullYear() + 3));
        }
        else
        {
          expDate.setFullYear((currDate.getFullYear() + 2));
        }
        expDate.setMonth(bDateObj.getMonth());
        expDate.setDate(bDateObj.getDate());
        var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
        logDebug("Exp date: " + expDateString);
        
    var licNum = vParentCapID.getCustomID();
    thisLic = new licenseObject(licNum,vParentCapID);
    thisLic.setExpiration(expDateString);
thisLic.setStatus("Active");
  
        //thisLic= new licenseObject(licCustId,licId);
        //thisLic.setExpiration(expDateString);     
      }
      }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_Defect3468_setExpDateForREReciprocalAppraiser, Please contact administrator");
  }
  
}
    /* @desc Checks if the CORI Date is not null, if yes, cancel
 * DPL Release B defect 3481
 */
function CWM_ELP_defect3481_WTUB_DPL_checkNullCORIDate()
{
    try
    {
        var contactArray = getContactArray();
        if (wfTask == "Exam" && matches(wfStatus, "Approved", "Approved with Conditions"))
        {
            if(contactArray)
            {
                for (cc in contactArray)
        {
                    thisContact = contactArray[cc];
                    if (thisContact["contactType"] == "Applicant")
          {
            var CORIRunDate = getContactTemplateFormFieldValue("Applicant", "CORI", "CORI Run Date");
            
                        if(!CORIRunDate)
            {
                            showMessage=true;
                            comment("CORI Run Date must not be blank");
                            cancel=true;
                        }
                    }
                }
            }
        }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUB function CWM_ELP_defect3481_WTUB_DPL_checkNullCORIDate, Please contact administrator");
    }
}/* @description: add fees for the Real Estate Appraiser Renewal record */
/*  for defect 3498 */
function CWM_ELP_Defect3498_DPL_CRCA_addCourseRenewalFee()
{
  try
  {
    logDebug("Adding Fees for renewal record " + capId.getCustomID());
        var vParentCapID = getParentLicenseCapID(capId);
        var childCapResult;
        var childCap;
        var childAppTypeResult;
        var childAppTypeString = "";
        
        
        if(vParentCapID)
        {
            var childArray = new Array();
            childArray = getChildren("License/Real Estate Appraiser/Course/*",vParentCapID);
            if(childArray.length>0)
            {
                for (ca in childArray)
                {
              childCapResult = aa.cap.getCap(childArray[ca]);
              childCap = childCapResult.getOutput();
              childAppTypeResult = childCap.getCapType();
              childAppTypeString = childAppTypeResult.toString();
              
                    if(childAppTypeString.equals("License/Real Estate Appraiser/Course/Primary Course Application"))
                    {
                        updateFee("RAPW", "RA", "STANDARD", 1, "Y");
                    }
                    else
                        if((childAppTypeString.equals("License/Real Estate Appraiser/Course/CE Course Application"))      ||
                           (childAppTypeString.equals("License/Real Estate Appraiser/Course/Seminar Course Application")) ||
                           (childAppTypeString.equals("License/Real Estate Appraiser/Course/USPAP Course Application")))
                           {
                               updateFee("RACW", "RA", "STANDARD", 1, "Y");
                           }
                }
                
            }
        }
        else
            logDebug("Could not find the license for renewal record " + altId);
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on CRCA function CWM_ELP_Defect3498_DPL_CRCA_addCourseRenewalFee, Please contact administrator");
  }
  
}
/* @desc This method copies the "TYPE CLASS" name from the license to the Renewal
 * Event: CRCA
 */
function CWM_ELP_Defect3715_DPL_CRCA_CopyTypeClassToRenewal()
{

  try
  { 
                useAppSpecificGroupName = true; 
    var vParentCapID = getParentLicenseCapID(capId);
    logDebug("Renewal CapId:" + capId);
    logDebug("Parent CapId:" + vParentCapID);
    var msg = "Renewal CapId:" + capId + " Parent CapId:" + vParentCapID;
                var typeClass = getAppSpecific("TYPE CLASS.Type Class");
    if (vParentCapID)
    {
      
      logDebug("TYPE CLASS from license:" + typeClass);
      editAppSpecific("TYPE CLASS.Type Class", typeClass, capId);
    }
    else
    {
      logDebug("***There was an error retrieving the license associated with this renewal***");
    }     
  }
  catch(err)
  {
      showMessage=true;
      comment("Error on CRCA function CWM_ELP_Defect3715_DPL_CRCA_CopyTypeClassToRenewal, Please contact administrator");
   }    
}
/*  function will set Expiration Date for Plumbers Apprentice License
* ExpDate will be May 1st of Even Year
*/
//REMOVED AS PART OF DEFECT 4398
function CWM_ELP_Defect4394_setExpDateForPlumbersApprenticeLicense()
{
  try
  {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
      {
      logDebug("Inside Set ExpDate for Plumbers Apprentice License"); 
      var currDate = new Date();
      var expDate = new Date();   
      var currentYear = currDate.getFullYear();
      var firstDayOfNextMonth = new Date();
      
      var licId = getParent();
      
      if(licId){    
        var licCustId = licId.getCustomID();
        logDebug("Parent ID: " + licId + " " + licCustId);
        if(currentYear % 2 == 0){  
          expDate.setFullYear((currDate.getFullYear() + 2));
        }
        else{
          expDate.setFullYear((currDate.getFullYear() + 3));  
        }
        
        expDate.setMonth(5);
        expDate.setDate(1);
        var expDateString = expDate.getMonth() + "/" + expDate.getDate() + "/" + expDate.getFullYear();
        logDebug("Exp date: " + expDateString);

        thisLic= new licenseObject(licCustId,licId);
        thisLic.setExpiration(expDateString); 
                thisLic.setStatus("Active");    
            }
      
      }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_Defect4394_setExpDateForPlumbersApprenticeLicense, Please contact administrator");
  }
  
}/* Release B Master Script 
 * Defect ID: 3496
 */
 function CWM_ELP_Defect_3496_CRCA_DPL_copyCourseTypeFromLicense(){
  try{
    useAppSpecificGroupName = true;
    var vParent = getParentLicenseCapID(capId);
    var courseType = getAppSpecific("APPROVED COURSE INFORMATION.Course Type");
    if(vParent){
      if(courseType != null && courseType != ""){
        editAppSpecific("APPROVED COURSE INFORMATION.Course Type", courseType, vParent);
      }
    }
  }
  catch(err){
    logDebug("Error on CRCA function CWM_ELP_Defect_3496_CRCA_DPL_copyCourseTypeFromLicense, Please contact administrator");
  }
 }
/* function will add Application Fee on Submission
 * Release B Defect ID 3559
 */

function CWM_ELP_Defect_3559_ASA_DPL_AddApplicationFee(){
  try{
    var feeSchedule = "RE-SALESMAN-APP";
    var feeCodeApp = "RSAP";
    if (feeExists(feeCodeApp)) {
        updateFee(feeCodeApp, feeSchedule, "STANDARD", 1, "Y");
        logDebug("Fee Updated.");
      }  
      else {
        addFee(feeCodeApp, feeSchedule, "STANDARD", 1, "Y");
        logDebug("Fee Added.");   
      }
  }
  catch(err){
    logDebug("Error on function CWM_ELP_Defect_3559_ASA_DPL_AddApplicationFee. Contact System Administrator." + err.stack);
  }
}/* Release B Defect 3653
 * Function will add Real Estate Broker as a related record to RE Business License Record
 */
function CWM_ELP_Defect_3653_DPL_addRealEstateBrokerToLicenseRecord(){
  try{
    useAppSpecificGroupName = true;
    var theParentRecord = getAppSpecific("MY LICENSE.License Number");
    var theChildRecord = getAppSpecific("ADD NEW RELATIONSHIP.License Number");
    var changeType = getAppSpecific("CHANGE TYPE.Change Type");
    if(wfTask == "Validate" && wfStatus == "Completed" && changeType == "Add New Relationship"){
      logDebug("Parent Record: " + theParentRecord);
      logDebug("Child Record: " + theChildRecord);
      if(theParentRecord != null && theChildRecord != null){
        var pRecordCap = aa.cap.getCapID(theParentRecord).getOutput();
        var cRecordCap = aa.cap.getCapID(theChildRecord).getOutput();
        
        //copy Contacts
        copyContactsByTypeWithAddress(cRecordCap, pRecordCap, "Licensed Individual");
        logDebug("Contact copied");

        //Link pRecordCap and cRecordCap on Related Records
        var result = aa.cap.createAppHierarchy(pRecordCap,cRecordCap);
        if(result.getSuccess()){
          logDebug("Child application successfully linked");
        }
            else{
                logDebug("Could not link applications");
                result.getErrorMessage(); 
        }
      }

      //get LP from Child to assign to parent Record Licenses Tab.
      var vRefLP = getRefLicenseProf(cRecordCap.getCustomID());
      if(vRefLP){
        var capListResult = aa.licenseScript.associateLpWithCap(pRecordCap, vRefLP);
        var retVal = capListResult.getSuccess();
        logDebug("Linked New license LP successfully ? " + retVal);
      }
    }
  } 
  catch(err){
    logDebug("Error on function CWM_ELP_Defect_3653_DPL_addRealEstateBrokerToLicenseRecord. Please Call System Administrator. " + err.stack);
    logDebug("Error Message: " + err.message);
  }
}/* Release B Defect 3653
 * Function will add Real Estate Broker as a related record to RE Business License Record
 */

function CWM_ELP_Defect_3656_DPL_copyContactsToLicenseRecord(){
  try{
    useAppSpecificGroupName = true;
    var theParentRecord = getAppSpecific("MY LICENSE.License Number");
    var theChildRecord = getAppSpecific("ADD NEW RELATIONSHIP.License Number");
    var changeType = getAppSpecific("CHANGE TYPE.Change Type");
    if(wfTask == "Validate" && wfStatus == "Completed" && changeType == "Add New Relationship"){
      logDebug("Parent Record: " + theParentRecord);
      logDebug("Child Record: " + theChildRecord);
      if(theParentRecord != null && theChildRecord != null){
        var pRecordCap = aa.cap.getCapID(theParentRecord).getOutput();
        var cRecordCap = aa.cap.getCapID(theChildRecord).getOutput();
        //copy Contacts
        copyContactsByTypeWithAddress(cRecordCap, pRecordCap, "Licensed Individual");
        logDebug("Contact copied");
        //Link pRecordCap and cRecordCap on Related Records
        var result = aa.cap.createAppHierarchy(pRecordCap,cRecordCap);
        if(result.getSuccess()){
          logDebug("Child application successfully linked");
        }
            else{
                logDebug("Could not link applications");
                result.getErrorMessage(); 
        }
      }

      //get LP from Child to assign to parent Record Licenses Tab.
      var vRefLP = getRefLicenseProf(cRecordCap.getCustomID());

      if(vRefLP){
        //logDebug("Entered here");
        var capListResult = aa.licenseScript.associateLpWithCap(pRecordCap, vRefLP);
        var retVal = capListResult.getSuccess();
        logDebug("Linked New license LP successfully ? " + retVal);
      }
        
    }
  } 
  catch(err){
    logDebug("Error on function CWM_ELP_Defect_3656_DPL_copyContactsToLicenseRecord. Please Call System Administrator. " + err.stack);
    logDebug("Error Message: " + err.message);
  }
}

function CWM_ELP_Defect_3679_DPL_RemoveContactsToLicenseRecord() {
  try {
    useAppSpecificGroupName = true;
    var boardName = getBoard(capId);
    //Modified by Ankush Kshirsagar for Script#41. Rel C
    if (appMatch("License/Allied Health/Physical Therapy Facility/Terminate PT Compliance Office")) {
      var remLicNum = getAppSpecific("END EXISTING RELATIONSHIP.PT Compliance Officer License Number");
      logDebug("remLicNum:: " + remLicNum);
    } else if (appMatch("License/Allied Health/Physical Therapist/Withdrawal PTCO Facility Aff")) {
      var remLicNum = getAppSpecific("END EXISTING RELATIONSHIP.PT Facility License Number");
    } else if (appMatch("License/Massage Therapy/Massage Therapist/Resign as Compliance Officer")) {
      var remLicNum = getAppSpecific("END EXISTING RELATIONSHIP.Multiple Massage Establishment License Number");
    } else if (appMatch("License/Massage Therapy/Multiple Massage Establishment/Update Compliance Officer")) {
      var remLicNum = getAppSpecific("EXISTING COMPLIANCE OFFICER.Existing Compliance Officer License Number");

    } else if (appMatch("License/Massage Therapy/Solo Massage Establishment/Update Solo Massage Therapist")) {
      var remLicNum = getAppSpecific("EXISTING SOLO MT.Existing Solo Massage Therapist License Number");
    } else if (appMatch("License/Chiropractor/Chiropractor/Withdraw CHoR Facility Affil")) {
      var remLicNum = getAppSpecific("END EXISTING RELATIONSHIP.Chiropractor Facility License Number");
    } else if (appMatch("License/Chiropractor/Chiropractor Facility/Terminate CHoR")) {
      var remLicNum = getAppSpecific("END EXISTING RELATIONSHIP.Chiropractor of Record License Number");
    } else if (appMatch("License/Chiropractor/Chiropractor Facility/Propose Chiropractor of Record")) {
      var remLicNum = getAppSpecific("FORMER CHIROPRACTOR OF RECORD.License Number of the previous Chiropractor of Record");
    } else if (appMatch("License/Allied Health/Physical Therapy Facility/Propose PT Compliance Officer")) {
      var remLicNum = getAppSpecific("END EXISTING RELATIONSHIP.PT Compliance Officer License Number");
    }else {
      var remLicNum = getAppSpecific("END EXISTING RELATIONSHIP.License Number");
    }
    if (remLicNum != null) {
      //create standard choice based on record app string to determine which record is the parent and which is the child.
      //the parent record is the record where the child is being removed from (remove the master licensee (child) from the business(parent)
      var initiatingRecord = lookup("lookup:amendment relationship", appTypeString);
      var vLicType = lookup("lookup:amendment License Type", appTypeString);

      //Rel C: Script ID: 206 - Added by Byellapu
      if (appMatch("License/Hearing Instrument/Amendment/Apprentice Update Sponsor")) {
        vLicType = getAppSpecific("REMOVE EXISTING RELATIONSHIP.Sponsor License Type");
        if (vLicType = "Audiologist") {
          boardName = "SP";
        } else
          boardName = "HE";
      }

      if (initiatingRecord == "C") {
        //Modified by Ankush Kshirsagar for Script#41. Rel C
        if (appMatch("License/Allied Health/Physical Therapy Facility/Terminate PT Compliance Office")) {
          var theParentRecord = getParentLicenseRecord(capId);
          theParentRecord = theParentRecord.getCustomID();
          var theChildRecord = getAppSpecific("END EXISTING RELATIONSHIP.PT Compliance Officer License Number");
          theChildRecord = theChildRecord.toString();
          if (theChildRecord.indexOf("-") < 0) {
            theChildRecord = theChildRecord + "-" + boardName + "-" + "PT";
          }
          logDebug("boardName:: " + boardName);
        } else if (appMatch("License/Allied Health/Physical Therapist/Withdrawal PTCO Facility Aff")) {
          var theChildRecord = getAppSpecific("MY LICENSE.License Number");
          theChildRecord = theChildRecord.toString();
          if (theChildRecord.indexOf("-") < 0) {
            theChildRecord = theChildRecord + "-" + boardName + "-" + "PT";
          }
          var theParentRecord = getAppSpecific("END EXISTING RELATIONSHIP.PT Facility License Number");
          theParentRecord = theParentRecord.toString();
          if (theParentRecord.indexOf("-") < 0) {
            theParentRecord = theParentRecord + "-" + boardName + "-" + "PF";
          }
                                  //Modified by vishakha for defect 13664 
        } else if (appMatch("License/Massage Therapy/Massage Therapist/Resign as Compliance Officer")) {
          var theChildRecord = getAppSpecific("MY LICENSE.License Number");
          theChildRecord = theChildRecord.toString();
          if (theChildRecord.indexOf("-") < 0) {
            theChildRecord = theChildRecord + "-" + boardName + "-" + "MT";
          }
          var theParentRecord = getAppSpecific("END EXISTING RELATIONSHIP.Multiple Massage Establishment License Number");
          theParentRecord = theParentRecord.toString();
          if (theParentRecord.indexOf("-") < 0) {
            theParentRecord = theParentRecord + "-" + boardName + "-" + "MM";
          }
        } else if (appMatch("License/Chiropractor/Chiropractor/Withdraw CHoR Facility Affil")) {
          var theChildRecord = getAppSpecific("MY LICENSE.License Number");
          theChildRecord = theChildRecord.toString();
          if (theChildRecord.indexOf("-") < 0) {
            theChildRecord = theChildRecord + "-" + boardName + "-" + "CH";
          }
          var theParentRecord = getAppSpecific("END EXISTING RELATIONSHIP.Chiropractor Facility License Number");
          theParentRecord = theParentRecord.toString();
          if (theParentRecord.indexOf("-") < 0) {
            theParentRecord = theParentRecord + "-" + boardName + "-" + "CF";
          }
        } else {
          var theChildRecord = getAppSpecific("MY LICENSE.License Number");
          var theParentRecord = getAppSpecific("END EXISTING RELATIONSHIP.License Number");
          //set theParentRecord to a full alt id
          theParentRecord = returnCompleteAltId(theParentRecord, boardName, vLicType);
        }
      } else {
        // added by tofek, For Script#630.
        if (appMatch("License/Massage Therapy/Massage Therapist/Resign as Solo MT")) {
          var theParentRecord = getAppSpecific("MY LICENSE.License Number");
          var theChildRecord = getAppSpecific("END EXISTING RELATIONSHIP.Solo Massage Establishment License Number");
        } else if (appMatch("License/Massage Therapy/Multiple Massage Establishment/Update Compliance Officer")) {
          //var theParentRecord = getAppSpecific("MY LICENSE.License Number");
          var remParent = getParent();
          var theParentRecord = remParent.getCustomID();
          var theChildRecord = getAppSpecific("EXISTING COMPLIANCE OFFICER.Existing Compliance Officer License Number");
        } else if (appMatch("License/Massage Therapy/Solo Massage Establishment/Update Solo Massage Therapist")) {
          //var theParentRecord = getAppSpecific("MY LICENSE.License Number");
          var remParent = getParent();
          var theParentRecord = remParent.getCustomID();
          var theChildRecord = getAppSpecific("EXISTING SOLO MT.Existing Solo Massage Therapist License Number");
        } else if (appMatch("License/Allied Health/Physical Therapy Facility/Propose PT Compliance Officer")) {
          //var theParentRecord = getAppSpecific("MY LICENSE.License Number");
          var remParent = getParent();
          var theParentRecord = remParent.getCustomID();
          var theChildRecord = getAppSpecific("END EXISTING RELATIONSHIP.PT Compliance Officer License Number");
        } else if (appMatch("License/Chiropractor/Chiropractor Facility/Terminate CHoR") || appMatch("License/Chiropractor/Chiropractor Facility/Propose Chiropractor of Record")) {
          //var theParentRecord = getAppSpecific("MY LICENSE.License Number");
          if (appMatch("License/Chiropractor/Chiropractor Facility/Terminate CHoR")) {
            var remParent = getAppSpecific("END EXISTING RELATIONSHIP.Chiropractor Facility License Number");
            var remChild = getAppSpecific("END EXISTING RELATIONSHIP.Chiropractor of Record License Number");
          }
            else if (appMatch("License/Chiropractor/Chiropractor Facility/Propose Chiropractor of Record")) {
              var remParent = getAppSpecific("CHIROPRACTOR FACILITY.Chiropractor Facility License Number");
              var remChild = getAppSpecific("FORMER CHIROPRACTOR OF RECORD.License Number of the previous Chiropractor of Record");
            }
              var theParentRecord = remParent;
              if (remParent.indexOf("-") == -1) {
                theParentRecord = remParent + "-CH-CF";
              }

                var theChildRecord = remChild;
                if (remChild.indexOf("-") == -1) {
                  theChildRecord = remChild + "-CH-CH";
                }

          } else {
                var theParentRecord = getAppSpecific("MY LICENSE.License Number");
                var theChildRecord = getAppSpecific("END EXISTING RELATIONSHIP.License Number");
              }
              //set theChildRecord to a full alt it
              theChildRecord = returnCompleteAltId(theChildRecord, boardName, vLicType)
            }
            if (theParentRecord != null && theChildRecord != null) {
              logDebug("Parent Record: " + theParentRecord);
              logDebug("Child Record: " + theChildRecord);
              if (theParentRecord != null && theChildRecord != null) {
                var pRecordCap = aa.cap.getCapID(theParentRecord).getOutput();
                var cRecordCap = aa.cap.getCapID(theChildRecord).getOutput();
                var rRecordCap = getLatestTempRenewal(pRecordCap);
                logDebug("Renewal Record: " + rRecordCap);
                //Remove Contact
                if (appMatch("License/Massage Therapy/Multiple Massage Establishment/Update Compliance Officer")) {
                  var RelationshipDate = getAppSpecific("EXISTING COMPLIANCE OFFICER.End Date of Relationship");
                } else if (appMatch("License/Massage Therapy/Solo Massage Establishment/Update Solo Massage Therapist")) {
                  var RelationshipDate = getAppSpecific("EXISTING SOLO MT.End Date of Relationship");
                } else if (appMatch("License/Chiropractor/Chiropractor Facility/Terminate CHoR") || appMatch("License/Chiropractor/Chiropractor/Withdraw CHoR Facility Affil")) {
                  var RelationshipDate = getAppSpecific("END EXISTING RELATIONSHIP.End Date of Relationship");
                } else if (appMatch("License/Chiropractor/Chiropractor Facility/Propose Chiropractor of Record")) {
                  var RelationshipDate = getAppSpecific("END EXISTING RELATIONSHIP.End Date of previous Chiropractor of Record");

                } 
                else if (appMatch("License/Allied Health/Physical Therapy Facility/Propose PT Compliance Officer")) {
                  var RelationshipDate = getAppSpecific("END EXISTING RELATIONSHIP.End Date of previous PT Compliance Officer");

                }               else {
                  var RelationshipDate = getAppSpecific("END EXISTING RELATIONSHIP.End Date of Relationship");
                }
                //set the relationship end date
                if (!RelationshipDate) {
                  //added for CR400
                  //if the end date is empty, set the end date to be the start date-1day. if the start date doesn't exist or is empty, set the end date to the current date
                  var startDate = checkASIExists("ADD NEW RELATIONSHIP.Start Date", capId);
                  if (startDate && startDate != "") {
                    RelationshipDate = addDate(startDate, -1);

                  } else {
                    RelationshipDate = new Date();
                    logDebug("RelationshipDate" +RelationshipDate);
                  }
                }
                var vRelDate = new Date(RelationshipDate);
                logDebug("vRelDate" +vRelDate);
                var cons = aa.people.getCapContactByCapID(cRecordCap).getOutput();
                var pCons = aa.people.getCapContactByCapID(pRecordCap).getOutput();

                for (x in cons) {
                  var licContact = cons[x];
                  var licContactModel = licContact.getCapContactModel();
                  var refContactNumber = licContactModel.refContactNumber;
                  var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput();
                  //added if statement to make sure we only end date the licensed individual contact
                  if (cons[x].getCapContactModel().getContactType() == "Licensed Individual") {
                    var refNum = cons[x].getCapContactModel().getRefContactNumber();
                    var conSeqNum = cons[x].getPeople().getContactSeqNumber();
                    var conEmail = cons[x].getPeople().getEmail();
                    logDebug("Contact to be end dated: " + conSeqNum);
                    logDebug("Contact Email to be end dated: " + conEmail);
                    logDebug("Contact Reference Number to be end dated: " + refNum);

                    for (i in pCons) {
                      var pRefNum = pCons[i].getCapContactModel().getRefContactNumber();
                      var pConSeqNum = pCons[i].getPeople().getContactSeqNumber();
                      var pConEmail = pCons[i].getPeople().getEmail();
                      if (pRefNum && pRefNum.equals(refNum) && pCons[i].getPeople().getEndDate() == null) {
                        //aa.people.removeCapContact(pRecordCap, pConSeqNum);
                        //logDebug("Contact sequence Number deleted: " + pConSeqNum + " from record: " + pRecordCap.getCustomID());
                        // change the contact type of the newly added contact
                        pCons[i].getPeople().setEndDate(vRelDate);
                        var updateResult = aa.people.editCapContact(pCons[i].getCapContactModel());
                        if (updateResult.getSuccess()) {
                          logDebug("Contact " + pConSeqNum + " updated successfully on the license");
                        } else {
                          logDebug("Contact " + pConSeqNum + " update failed on the license: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                        }
                        logDebug("Contact Reference Number end dated: " + pRefNum + " from license record: " + pRecordCap.getCustomID());
                        // After we edit the contact type, we need to re-copy addresses
                        for (add in contactAddressList) {
                          var transactionAddress = false;
                          contactAddressModel = contactAddressList[add].getContactAddressModel();
                          if (contactAddressModel.getEntityType() == "CAP_CONTACT") {
                            transactionAddress = true;
                            contactAddressModel.setEntityID(parseInt(pCons[i].getPeople().getContactSeqNumber()));
                          }
                          // Commit if transaction contact address
                          if (transactionAddress) {
                            var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                            contactAddressModel.setContactAddressPK(newPK);
                            aa.address.createCapContactAddress(pRecordCap, contactAddressModel);
                          }
                          // Commit if reference contact address
                          else {
                            // build model
                            var Xref = aa.address.createXRefContactAddressModel().getOutput();
                            Xref.setContactAddressModel(contactAddressModel);
                            Xref.setAddressID(contactAddressList[add].getAddressID());
                            Xref.setEntityID(parseInt(pCons[i].getPeople().getContactSeqNumber()));
                            Xref.setEntityType(contactAddressModel.getEntityType());
                            Xref.setCapID(pRecordCap);
                            // commit address
                            aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                          }
                        }
                        break;
                      }
                    }
                    //remove the contact from the temp renewal if it exists
                    if (rRecordCap != null) {
                      var rCons = aa.people.getCapContactByCapID(rRecordCap).getOutput();
                      logDebug("contact length:" + rCons.length);
                      for (r in rCons) {
                        var rRefNum = rCons[r].getCapContactModel().getRefContactNumber();
                        var rConSeqNum = rCons[r].getPeople().getContactSeqNumber();
                        var rConEmail = rCons[r].getPeople().getEmail();
                        //if (pConEmail.equals(conEmail)){
                        if (rRefNum && rRefNum.equals(refNum)) {
                          aa.people.removeCapContact(rRecordCap, rConSeqNum);
                          //logDebug("Contact sequence Number deleted: " + pConSeqNum + " from record: " + pRecordCap.getCustomID());
                          logDebug("Contact Reference Number deleted: " + pRefNum + " from renewal record: " + rRecordCap.getCustomID());
                          break;
                        }

                      }
                    }
                  }
                }
                //Remove LP Link from License Tab
                var vRefLP = getRefLicenseProf(cRecordCap.getCustomID());
                var vreflpBusinessLicense = vRefLP.businessLicense;
                var vreflpStateLicense = vRefLP.stateLicense;
                var vreflpStateLicense2 = vRefLP.stateLicense + "-" + vreflpBusinessLicense;
                logDebug("vRefLP Business License: " + vreflpBusinessLicense);
                logDebug("vRefLP State License: " + vreflpStateLicense);
                logDebug("vRefLP State License secondary check: " + vreflpStateLicense2);

                var capLicenseResult = aa.licenseScript.getLicenseProf(pRecordCap);
                if (capLicenseResult.getSuccess()) {
                  var capLicenseArr = capLicenseResult.getOutput();
                  for (i in capLicenseArr) {

                    logDebug("parent License: " + capLicenseArr[i].getBusinessLicense());
                    // Get child reference LP
                    if ((vreflpBusinessLicense == capLicenseArr[i].getBusinessLicense() && vreflpStateLicense == capLicenseArr[i].getLicenseNbr()) || (vreflpBusinessLicense == capLicenseArr[i].getBusinessLicense() && vreflpStateLicense2 == capLicenseArr[i].getLicenseNbr())) {
                      //var vRefLP = getRefLicenseProf(curCapId.getCustomID());
                      if (capLicenseArr[i].getPrintFlag() == "Y") {
                        capLicenseArr[i].setPrintFlag("N");
                        var result = aa.licenseProfessional.editLicensedProfessional(capLicenseArr[i]);
                        logDebug("Setting primary flag to N " + result.getSuccess());
                      }
                      logDebug("Removing license LP: " + capLicenseArr[i].getLicenseNbr() + " from CAP " + pRecordCap.getCustomID());
                      var remCapResult = aa.licenseProfessional.removeLicensedProfessional(capLicenseArr[i]);
                    }
                  }
                }
              }
            }
          }
        } catch (err) {
          logDebug("Error on function CWM_ELP_Defect_3679_DPL_RemoveContactsToLicenseRecord. Please Call System Administrator. " + err.stack);
          logDebug("Error Message: " + err.message);
        }
      }



/* Release B Defect 3700
 * Copy Contact from Renewal record to License
 */
function CWM_ELP_Defect_3700_DPL_WTUA_AddContactFromRenewaltoLicense(){
  try{
    var pCapId = getParentLicenseRecord(capId);
    if(wfTask=="Validate" && matches(wfStatus, "Approved", "Approved with Conditions")){
      if(pCapId){
        copyContactsByTypeWithAddress(capId,pCapId,"Affiliated Broker");
        logDebug("Affiliated Broker contact copied to: " + pCapId);
      }
    }
  }
  catch(err){
    logDebug("Error on function CWM_ELP_Defect_3700_DPL_WTUA_AddContactFromRenewaltoLicense. Please Call System Administrator. " + err.stack);
    logDebug("Error Message: " + err.message);  
  }
}

/* Release B Defect 3700
 * Copy Contact from Renewal record to License
 */
function CWM_ELP_Defect_3701_DPL_WTUA_AddContactFromRenewaltoLicense(){
  try{
    var pCapId = getParentLicenseCapID(capId);
    if(wfTask=="Validate" && wfStatus == "Approved"){
      if(pCapId){
        copyContactsByTypeWithAddress(capId,pCapId,"Affiliated Broker");
        logDebug("Affiliated Broker contact copied to: " + pCapId.getCustomID());
      }
    }
  }
  catch(err){
    logDebug("Error on function CWM_ELP_Defect_3701_DPL_WTUA_AddContactFromRenewaltoLicense. Please Call System Administrator. " + err.stack);
    logDebug("Error Message: " + err.message);  
  }
}

function CWM_ELP_Defect_3717_DPL_CRCA_renewRESalespersonLicense(itemCapId){
   useAppSpecificGroupName = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
    var result = false;
if (appMatch("License/Real Estate/Salesperson/Renewal", capId) || appMatch("License/Real Estate/Broker/Renewal", capId)) {
    var renewingAs = getAppSpecific("I am renewing as");
    var reportedPerjury = getAppSpecific("I attest under the pains & penalties of perjury that I have complied with the tax laws stated above.");
    var reportedActive = getAppSpecific("2. By renewing as active I attest that I completed continuing education or am a MA attorney.");
    var reportedInactive= getAppSpecific("2. By renewing as inactive, I attest I have not completed my continuing education.");

      if (renewingAs.toUpperCase().equals("ACTIVE") && (reportedPerjury=="No" || reportedActive=="No")) {
        if (renewalApproval(capId)) {
          logDebug("active renewal issue for broker/salesperson");
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
      } 
      else if (renewingAs.toUpperCase().equals("INACTIVE") && (reportedPerjury=="No" || reportedInactive=="No")) {
          if (renewalApproval(capId)) {
                      logDebug("Inactive renewal issue for broker/salesperson");
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
      }
      else {
        if (renewalApproval(capId)) {
                    logDebug("no renewal issue for broker/salesperson");
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
    
  


}
else if (appMatch("License/Real Estate/Business/Renewal", capId))
{
      var reportedPerjury = getAppSpecific("1. I attest under the pains & penalties of perjury that I have complied with tax laws stated above");
    var reportedCriminal = getAppSpecific("2. I have reported to the Board ALL criminal convictions or guilty pleas");

      if (reportedPerjury.toUpperCase().equals("NO") || reportedCriminal.toUpperCase().equals("NO")) {
        if (renewalApproval(capId)) {
          logDebug("renewal issue for business");
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
      } else {
        if (renewalApproval(capId)) {
                              logDebug("no renewal issue for business");
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
  
}
else if (appMatch("License/Real Estate/School/Renewal", capId))
{
      var reportedFailure = getAppSpecific("1. I/We attest that my failure to adhere to the statements above may lead to disciplinary action.");
    var reportedPerjury= getAppSpecific("I attest under the pains & penalties of perjury that I have complied with the tax laws stated above.");
      var reportedPleas = getAppSpecific("3. I have reported to the Board ALL criminal convictions or guilty pleas.");
    var reportedDiscipline= getAppSpecific("4. I have reported to the board all discipline taken against any professional license issued to me.");
  
      if (reportedFailure.toUpperCase().equals("NO") || reportedPerjury.toUpperCase().equals("NO") || reportedPleas.toUpperCase().equals("NO") || reportedDiscipline.toUpperCase().equals("NO")) {
        if (renewalApproval(capId)) {
                    logDebug("renewal issue for school");
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
      } else {
        if (renewalApproval(capId)) {
                              logDebug("no renewal issue for school");
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
  
}
else
{

          if (renewalApproval(capId)) {
                                logDebug("no renewal issue for remaining");
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
  
}
  
    capId = tmpCapId;
    return result;
}
/* Function checkValidBroker will validate that Broker is active before submitting application
 * Release B Defect 3294
 */
function CWM_ELP_Defect_3924_ASB_DPL_checkValidBroker(){
  try{
    useAppSpecificGroupName = true;
    var brokerAltID = getAppSpecific("ADD NEW RELATIONSHIP.License Number");
    if(brokerAltID){
      var brokerCapId = aa.getCapID(brokerAltID).getOutput();
      var brokerCap = aa.cap.getCap(brokerCapId).getOutput();
      var brokerCapStatus = brokerCap.getCapStatus();

      if(brokerCapStatus != "Current"){
        cancel=true;
        showMessage=true;
        comment("License entered is not Current, please contact the Board");
      }
    }
  }
  catch(err){
    logDebug("Error on CRCA function CWM_ELP_Defect_3924_ASB_DPL_checkValidBroker, Please contact administrator");
  }
  
}
/* CWM_ELP_DPL_addAmendmentToLicenseRecord()
 * Function will add amendment License and Contact to License Record
 */
function CWM_ELP_DPL_addAmendmentToLicenseRecord() {
try{ 

    var newLicenseType = null;
    var boardName = getBoard(capId);
    useAppSpecificGroupName = true;
  //need to do this lookup to determine the contact type to change to when we copy over the contact. PL, GF and SM should have the contact type of "Master Licensee"
  var contactType = lookup("lookup:amendment Contact Type", appTypeString );
    if (!contactType) 
  {
      contactType = "Master Licensee";
    }

  //This if statement is to revert the parent and child relationship. The Parent is the license that is having the contact and lp added. The child is the license to read to get the contact and LP to be added.
  var changeType = getAppSpecific("CHANGE TYPE.Change Type");
    if(changeType == "Add New Relationship" || !changeType){
  var initiatingRecord = lookup("lookup:amendment relationship", appTypeString );
  var vLicType = lookup("lookup:amendment License Type", appTypeString );
  //Rel C: Script ID:206 - Added by Byellapu
  if(appMatch("License/Hearing Instrument/Amendment/Apprentice Update Sponsor"))
  {
       vLicType = getAppSpecific("ADD NEW RELATIONSHIP.Sponsor License Type");
       if(vLicType == "Audiologist")
     {
          boardName="SP";
       }
     else
       boardName="HE";
    }

  if(initiatingRecord =="C") {
    logDebug("Amendment Initiated from a child record");
    var theChildRecord = getAppSpecific("MY LICENSE.License Number");
      var theParentRecord = getAppSpecific("ADD NEW RELATIONSHIP.License Number");
    //set theParentRecord to a full alt id
    theParentRecord = returnCompleteAltId(theParentRecord, boardName, vLicType)
  } 
  else {
    logDebug("Amendment Initiated from a parent record");
    if(appMatch("License/Massage Therapy/Multiple Massage Establishment/Update Compliance Officer")){
      var remParent = getParent();
      var theParentRecord  = remParent.getCustomID();
        var theChildRecord = getAppSpecific("PROPOSED COMPLIANCE OFFICER.Proposed Compliance Officer License Number");
    }
    else if(appMatch("License/Massage Therapy/Solo Massage Establishment/Update Solo Massage Therapist")){
      var remParent = getParent();
      var theParentRecord  = remParent.getCustomID();
        var theChildRecord = getAppSpecific("PROPOSED SOLO MT.Proposed Solo Massage Therapist License Number");
    }else if (appMatch("License/Allied Health/Physical Therapy Facility/Propose PT Compliance Officer")) {
          var remParent = getParent();
          var theParentRecord = remParent.getCustomID();
          var theChildRecord = getAppSpecific("PT COMPLIANCE OFFICER.License Number of the proposed PT Compliance Officer");
        }
    else if(appMatch("License/Chiropractor/Chiropractor Facility/Propose Chiropractor of Record")){
      var remParent = CWM_ELP_DPL_getParentFacilityLic();
      var theParentRecord  = remParent.getCustomID();
useAppSpecificGroupName = true;
        var theChildRecord = getAppSpecific("CHIROPRACTOR OF RECORD.License Number of the proposed Chiropractor of Record");
useAppSpecificGroupName = false;
    }   
    else {  
        var theParentRecord = getAppSpecific("MY LICENSE.License Number");
        var theChildRecord = getAppSpecific("ADD NEW RELATIONSHIP.License Number"); 
    }
  //set theChildRecord to a full alt it
      theChildRecord = returnCompleteAltId(theChildRecord, boardName, vLicType)
  }


      var RelationshipDate = getAppSpecific("ADD NEW RELATIONSHIP.Start Date");
      //set the relationship start date
      if(RelationshipDate){
      var vRelDate = new Date(RelationshipDate);
          if (!vRelDate) {
            vRelDate = new Date();
          }
      }
      else {
      var vRelDate = new Date();
      }
      logDebug("Parent RecordA: " + theParentRecord);
      logDebug("Child Record: " + theChildRecord);
      if(theParentRecord != null && theChildRecord != null){
        var pRecordCap = aa.cap.getCapID(theParentRecord).getOutput();
        var cRecordCap = aa.cap.getCapID(theChildRecord).getOutput();
    var rRecordCap = getLatestTempRenewal(pRecordCap);
  
    var refLP = getRefLicenseProf(theChildRecord);
    var refLPP = getRefLicenseProf(theParentRecord);
    } 
    if (refLP && refLPP) {
    //add the LP to the parent record
        var fvAddResult = aa.licenseScript.associateLpWithCap(pRecordCap, refLP);

        // get the license number and licensee name
       // var licNum = refLP.stateLicense + "-"+boardName+"-" + refLP.businessLicense;
     var licNum = theChildRecord;
        var refLPFirstName = refLP.contactFirstName;
        var refLPLastName = refLP.contactLastName;

        logDebug("Master License: " + licNum);
        logDebug("Master Licensee: " + refLPFirstName + " " + refLPLastName);

        if (isDPLLicenseFormat(licNum) && refLPFirstName && refLPLastName) {
            // get the contacts from the master license record
            var licCapId = aa.cap.getCapID(licNum).getOutput();
            var licContacts = getPeople(licCapId); 
            for (c in licContacts) {
                var licContact = licContacts[c];
                var licContactModel = licContact.getCapContactModel();
                var refContactNumber = licContactModel.refContactNumber;
                var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput();
                logDebug(">> " + licContact.firstName + " " + licContact.lastName + " ref:" + refContactNumber);

                if (licContact.firstName && licContact.lastName &&
                    licContact.firstName.toUpperCase().equals(refLPFirstName.toUpperCase()) &&
                    licContact.lastName.toUpperCase().equals(refLPLastName.toUpperCase())) {

                    var getResult = aa.people.getPeople(refContactNumber);
                    if (getResult.getSuccess()) {
                        var peopleObj = getResult.getOutput();
                        // add the reference contact from the people object to the application record
                        var contactNbr = addRefContactFromPeopleModel(peopleObj,pRecordCap);
                        var appContacts = aa.people.getCapContactByCapID(pRecordCap).getOutput();

                        for (c in appContacts) {
                            var appContact = appContacts[c];
                            if (appContact.getPeople().getContactSeqNumber() == contactNbr) {
                                
                                // change the contact type of the newly added contact
                appContact.getPeople().setStartDate(vRelDate);
                                appContact.getPeople().setContactType(contactType);
                appContact.getPeople().setFlag("N");
                                var updateResult = aa.people.editCapContact(appContact.getCapContactModel());
                                if (updateResult.getSuccess()) {
                                    logDebug("Contact " + contactNbr + " updated successfully on the license");
                                } else {
                                    logDebug("Contact " + contactNbr + " update failed on the license: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                                }

                                // After we edit the contact type, we need to re-copy addresses
                                for (add in contactAddressList) {
                                    var transactionAddress = false;
                                    contactAddressModel = contactAddressList[add].getContactAddressModel();
                                    if (contactAddressModel.getEntityType() == "CAP_CONTACT") {
                                        transactionAddress = true;
                                        contactAddressModel.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                                    }
                                    // Commit if transaction contact address
                                    if (transactionAddress) {
                                        var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                                        contactAddressModel.setContactAddressPK(newPK);
                                        aa.address.createCapContactAddress(pRecordCap, contactAddressModel);
                                    }
                                    // Commit if reference contact address
                                    else {
                                        // build model
                                        var Xref = aa.address.createXRefContactAddressModel().getOutput();
                                        Xref.setContactAddressModel(contactAddressModel);
                                        Xref.setAddressID(contactAddressList[add].getAddressID());
                                        Xref.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                                        Xref.setEntityType(contactAddressModel.getEntityType());
                                        Xref.setCapID(pRecordCap);
                                        // commit address
                                        aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                                    }
                                }
                                break;
                            }
              
                        }
            //check if there is a temp renewal. because the contact is now set properly on the parent record, we can now just copy the contact as is.
            if (rRecordCap != null){
            copyActiveContactsByTypeWithAddress(pRecordCap, rRecordCap, contactType); 
            
            }   
/*            //Link pRecordCap and cRecordCap on Related Records
          var result = aa.cap.createAppHierarchy(pRecordCap,cRecordCap);
          if(result.getSuccess()){
            logDebug("Child application successfully linked");
          }
            else{
              logDebug("Could not link applications");
              result.getErrorMessage(); 
          }   */     
                        break;
                    } else {
                        logDebug("Can't find " + refLPFirstName + " " + refLPLastName + " reference contact number: " + refContactNumber + " : " + getResult.getErrorType() + ":" + getResult.getErrorMessage());
                    }

                  

         }
            }
        }
    } else return null;
 
}
  } 
  catch(err){
    logDebug("Error on function CWM_ELP_DPL_addAmendmentToLicenseRecord. Please Call System Administrator. " + err.stack);
    logDebug("Error Message: " + err.message);
  }
}

/* @description: add fees for the Real Estate Appraiser Renewal record in ACA */
/*  for defect 3821 */
function CWM_ELP_DPL_ASA_ACAaddCourseRenewalFee()
{
    try
    {
        if(publicUser)
        {
            logDebug("Adding Fees for renewal record " + capId.getCustomID());
            var vParentCapID = getParentLicenseCapID(capId);
            var childCapResult;
            var childCap;
            var childAppTypeResult;
            var childAppTypeString = "";
            
            
            if(vParentCapID)
            {
                var childArray = new Array();
                childArray = getChildren("License/Real Estate Appraiser/Course/*",vParentCapID);
                if(childArray.length>0)
                {
                    for (ca in childArray)
                    {
                        childCapResult = aa.cap.getCap(childArray[ca]);
                        childCap = childCapResult.getOutput();
                        childAppTypeResult = childCap.getCapType();
                        childAppTypeString = childAppTypeResult.toString();
                        
                        if(childAppTypeString.equals("License/Real Estate Appraiser/Course/Primary Course Application"))
                        {
                            updateFee("RAPW", "RA", "STANDARD", 1, "Y");
                        }
                        else
                            if((childAppTypeString.equals("License/Real Estate Appraiser/Course/CE Course Application"))      ||
                               (childAppTypeString.equals("License/Real Estate Appraiser/Course/Seminar Course Application")) ||
                               (childAppTypeString.equals("License/Real Estate Appraiser/Course/USPAP Course Application")))
                               {
                                   updateFee("RACW", "RA", "STANDARD", 1, "Y");
                               }
                    }
                    
                }
            }
            else
                logDebug("Could not find the license for renewal record " + altId);
        }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on CRCA function CWM_ELP_DPL_ASA_ACAaddCourseRenewalFee, Please contact administrator");
    }
    
}
/* @desc Generic method to add condition on Cap.
 * Event: Add on events where capId is available
 */
function CWM_ELP_Generic_DPL_addConditionOnCap(cType, cDesc)
{
  //Get the CapId Model
  var ids=new Array();
  var capIdUsed;
  if(arguments.length == 3)
  {
    capIdUsed = arguments[2];
  }
  else
  {
    capIdUsed = capId;
  }
  var cap = capIdUsed.toString(); 
  ids=cap.split("-");
  var capIdModel=aa.cap.getCapID(ids[0], ids[1], ids[2]).getOutput();
  logDebug("Cap id Model:" + capIdModel);

  //Step1:Get standard condition by conditionType and conditionName.
  var result = aa.capCondition.getStandardConditions(cType, cDesc); 
  if(result.getSuccess())
  {
    var standardConditions = result.getOutput();
    logDebug("standardConditions size:" + standardConditions.length);
    var standardCondition = standardConditions[0];
    var strStdCondNumber = standardCondition.getConditionNbr();
    logDebug("Condition number:" + strStdCondNumber);
    var conditionModel = aa.capCondition.getNewConditionScriptModel().getOutput();
    conditionModel.setCapID(capIdModel);
    
    //Step2:Create a new cap condition from Standard Conditions.
    var addNewCapCondResult = aa.condition.createConditionFromStdCondition(conditionModel, strStdCondNumber);
    
  } 
}/* @desc This function checks the DENIAL REASONS ASI fields if the application is denied or rejected.
 *        If denied or rejected and fields empty don't allow workflow to be completed.
 * Defect 4627
 */
function CWM_ELP_WTUB_DPL_denialReasonsEmptyBlockWF()
{
    try
    {
        if(wfTask == "Validate" && wfStatus == "Denied or Rejected")
        {
            var denialReasons  = checkASIExists("Denial Reason", capId);
            var denialComments = checkASIExists("Denial Comments", capId);
            //showDebug = true;
            logDebug("Denial Reasons : " + denialReasons);
      //showDebug = true;
            logDebug("Denial Comments: " + denialComments);
            
            if(denialReasons == null){
                cancel=true;
        //showDebug = true;
        logDebug("cancel: "+ cancel);
                showMessage=true;
        //message = "";
                comment("A Denial Reason must be selected for the Application to be denied.");
            }
            if(denialReasons == "Other" && denialComments == null){
                    cancel = true;
                    showMessage = true;
          //message = "";
                    comment("A Denial Comment must be entered if a Denial Reason of Other has been selected.");
             } 
      
        }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUB function CWM_ELP_WTUB_DPL_denialReasonsEmptyBlockWF, Please contact administrator");
    }
}
/*
 * @desc This method is used to assign the same user to next task
 *
 */
function CWM_ELP_XXX_DPL_WTUA_ReinstateTaskAssignment() {
   logDebug("Current Task: " + wfTask + ", Status: " + wfStatus);
   
   if (wfTask == "Intake" && wfStatus == "Ready for Validation") {
      assignedToWithPreviousUser("Validate", "Intake");
   } else if (wfTask == "Validate" && wfStatus == "Approved to Reinstate") {
      assignedToWithPreviousUser("Reinstate", "Validate");
   } else if (wfTask == "Reinstate" && wfStatus == "Approved") {
      assignedToWithPreviousUser("Issuance", "Reinstate");
   }
}  // end function CWM_ELP_XXX_DPL_WTUA_ReinstateTaskAssignment

/*
 * @desc This method is used to update the license record and the LP record
 *
 */
function CWM_ELP_XXX_DPL_WTUA_UpdateAssociatedLicensesOLD() {
   // Update the workflow task, then set it to deactivate and activate the next task
   updateTask("Reinstate", "Approved", "");
   setTask("Reinstate","N", "Y");
   activateTask("Issuance");

   assignedToWithPreviousUser("Issuance", "Reinstate");

   var parentCapId = getParent();
logDebug("ParentCapId:"+parentCapId );
if(parentCapId == null){
parentCapId  = getParentLicenseRecord(capId);
}
logDebug("ParentCapId2:"+parentCapId );
   var asiNewExpDate = AInfo["New Expiration Date"];

   logDebug("Calling setLicExpirationDate with newExpDate = " + asiNewExpDate);
   // 1. Update license expiration date
  // setLicExpirationDate(parentCapId, null, asiNewExpDate);
  var licCustId = parentCapId.getCustomID();      
  thisLic= new licenseObject(licCustId,parentCapId);
                //var expDateString = newExpDate.getMonth()+1 + "/" + newExpDate.getDate() + "/" + newExpDate.getFullYear();
  thisLic.setExpiration(asiNewExpDate); 
    thisLic.setStatus("Active");  

   // 2. Update license workflow status
   updateTask("License", "Current", "", "", "DPL_LICENSE", parentCapId);

   // 3. Update LP record to Current
   var refLP = getRefLicenseProf(parentCapId.getCustomID());
   refLP.setWcExempt("Y");
   refLP.setPolicy("Current");
   vExpDate = aa.expiration.getLicensesByCapID(parentCapId).getOutput().getExpDate();
   refLP.setLicenseExpirationDate(vExpDate);
   aa.licenseScript.editRefLicenseProf(refLP);
  logDebug("Adding to Sync set");
  // 4. Add to sync set
   addToLicenseSyncSet(parentCapId);
   logDebug("Adding to PrintSet");
   // 5. Add to print set
   reportName = "DPL|LICENSE_REGISTRATION_CARD";   
   callReport(reportName, false, true,"DPL License Print Set");
} // end function CWM_ELP_XXX_DPL_WTUA_UpdateAssociatedLicenses
/*
 * @desc This method is used to update the license record and the LP record
 *
 */
function CWM_ELP_XXX_DPL_WTUA_UpdateAssociatedLicenses() {
  // Update the workflow task, then set it to deactivate and activate the next task
  updateTaskNoDebug("Reinstate", "Approved", "");
  setTaskNoDebug("Reinstate", "N", "Y");
  activateTaskNoDebug("Issuance");

  assignedToWithPreviousUser("Issuance", "Reinstate");

  var parentCapId = getParent();
  logDebug("parentCapId:" + parentCapId);
  if ((!parentCapId) || (parentCapId == null)) {
    parentCapId = getParentLicenseRecord(capId);
  }
  logDebug("parentCapId2:" + parentCapId);
  var asiNewExpDate = AInfo["New Expiration Date"];

  if (parentCapId && (parentCapId != null)) {
    //logDebug("Calling setLicExpirationDate with newExpDate = " + asiNewExpDate);
    // 1. Update license expiration date
    // setLicExpirationDate(parentCapId, null, asiNewExpDate);
    var licCustId = parentCapId.getCustomID();
    thisLic = new licenseObject(licCustId, parentCapId);
    //var expDateString = newExpDate.getMonth()+1 + "/" + newExpDate.getDate() + "/" + newExpDate.getFullYear();
    thisLic.setExpiration(asiNewExpDate);
    thisLic.setStatus("Active");

    // 2. Update license workflow status
    //updateTaskNoDebug("License", "Current", "", "", "DPL_LICENSE", parentCapId);
                 updateTask("License", "Current", "Set status to Current by script", "Set status to Current by script", "", parentCapId);
    updateAppStatus("Current", "Updated via Script",parentCapId);

    // 3. Update LP record to Current
    var refLP = getRefLicenseProf(parentCapId.getCustomID());
    //Sagar : EPLACE-2359 : Syncing of B3CONTRA and RSTATE_LIC table for ACA Event scripts
    if (!refLP) {
  refLP = getRefLicenseProfWithLicNbrAndTypeClass(parentCapId.getCustomID());
    }
    refLP.setWcExempt("Y");
    refLP.setPolicy("Current");
    vExpDate = aa.expiration.getLicensesByCapID(parentCapId).getOutput().getExpDate();
    refLP.setLicenseExpirationDate(vExpDate);
    aa.licenseScript.editRefLicenseProf(refLP);
   //Sagar : EPLACE-2359 : Syncing of B3CONTRA and RSTATE_LIC table for ACA Event scripts
    var licenseRecordId = parentCapId.getCustomID();
    if(licenseRecordId)
    {
      logDebug("licenseRecordId : "+licenseRecordId);
      var scanner = licenseRecordId.split("-");
      var b1LicNbr = scanner[0];
      var boardCode = scanner[1];
      var typeClass = scanner[2];

      var capLpsB3contra = getLicenseProfessional(parentCapId);
      for (var thisCapLpNum in capLpsB3contra) 
      {
        var licenseProfessionalScriptModel = capLpsB3contra[thisCapLpNum];  
        
        var licNbrB3contra = capLpsB3contra[thisCapLpNum].getLicenseNbr();
        var boardCodeB3contra = capLpsB3contra[thisCapLpNum].getComment();
        var typeClassB3Contra = capLpsB3contra[thisCapLpNum].getBusinessLicense();
        
        if(((b1LicNbr == licNbrB3contra) && (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra) )||
        ((b1LicNbr+"-"+typeClass == licNbrB3contra+"-"+typeClassB3Contra) && 
        (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra) ))
        {
          licenseProfessionalScriptModel.setLicenseExpirDate(vExpDate);
          
          var result = aa.licenseProfessional.editLicensedProfessional(licenseProfessionalScriptModel);
          if(result.getSuccess())
          {
            logDebug("license professional in B3CONTRA table updated successfully ");
          }
          else
          {
            logDebug("license professional in B3CONTRA table updated successfully ?  "+result.getErrorMessage());
          }
        } 
      } 
    }
    logDebug("Add to sync set");
    // 4. Add to sync set
    addToLicenseSyncSet(parentCapId);
    logDebug("Add to print set");
  }
  // 5. Add to print set
  reportName = "DPL|LICENSE_REGISTRATION_CARD";
  if (!(appMatch("License/Real Estate/Instructor/Application")))
    callReport(reportName, false, true, "DPL License Print Set");
} // end function CWM_ELP_XXX_DPL_WTUA_UpdateAssociatedLicenses

/*
 * @desc This method is used to validate that a fee exists on the record.
 *
 */
function CWM_ELP_XXX_DPL_WTUB_CheckFee() {
   if (feesInvoicedTotal <= 0) {
      logDebug("Fees Invoiced: " + feesInvoicedTotal);
      cancel = true;
      showMessage = true;
      comment("A valid fee must exist before the record can be Approved to Reinstate.")
   }
} // end function CWM_ELP_XXX_DPL_WTUB_CheckFee
function CWM_ELP_XXX_DPL_WTUB_CheckNewExpirationDate() {
   var currentDate = new Date();
   var currentDay = currentDate.getDate();
   var currentMonth = currentDate.getMonth() + 1;
   var currentYear = currentDate.getFullYear();
   var dTodaysDate = currentMonth + "/" + currentDay + "/" + currentYear;
   logDebug("Current date: " + dTodaysDate);

   var asiNewExpirationDate = AInfo["New Expiration Date"];
   var newExpirationDate = new Date(asiNewExpirationDate);

   if (asiNewExpirationDate == null || newExpirationDate <= currentDate) {
      cancel = true;
      showMessage = true;
      comment("A future date must exist before the record can be Approved to Reinstate.")
   }
} // end function CWM_ELP_XXX_DPL_WTUB_CheckNewExpirationDate
/*
 * @desc This method is used to validate that all fees are paid prior to approval.
 *
 */
function CWM_ELP_XXX_DPL_WTUB_ValidateAllFees() {
   logDebug("balanceDue: " + balanceDue);
   cancel = true;
   showMessage = true;
   comment("Fees must be paid prior to approval.")
} // end function CWM_ELP_XXX_DPL_WTUB_ValidateAllFees
function editFirstIssuedDate(issuedDate) // option CapId
{
  var itemCap = capId;

  if (arguments.length > 1) itemCap = arguments[1]; // use cap ID specified in args

  var cdScriptObjResult = aa.cap.getCapDetail(itemCap);

  if (!cdScriptObjResult.getSuccess())
  {
    logDebug("**ERROR: No cap detail script object : " + cdScriptObjResult.getErrorMessage());
    return false;
  }

  var cdScriptObj = cdScriptObjResult.getOutput();
  if (!cdScriptObj)
  {
    logDebug("**ERROR: No cap detail script object");
    return false;
  }

  cd = cdScriptObj.getCapDetailModel();

  var javascriptDate = new Date(issuedDate);
  var vIssuedDate = aa.date.transToJavaUtilDate(javascriptDate.getTime());

  cd.setFirstIssuedDate(vIssuedDate);
  cdWrite = aa.cap.editCapDetail(cd);

  if (cdWrite.getSuccess())
  {
    logDebug("updated first issued date to " + vIssuedDate);
    return true;
  } else
  {
    logDebug("**ERROR updating first issued date: " + cdWrite.getErrorMessage());
    return false;
  }
}function emailReports(Reports, emailTemplate, hashTableEmailTemplateParameters, emailTo) {
  var itemCap = capId;
  var fvCC = "";

  if (arguments.length > 4) // assume capId was passed
    itemCap = arguments[4];

  if (arguments.length > 5) // assume CC was passed
    fvCC = arguments[5];

  if (emailTemplate == null || emailTemplate == "") {
    logDebug("function emailReports parameter emailTemplate is required");
    return false;
  }

  if (String(hashTableEmailTemplateParameters.getClass()) !== "class java.util.Hashtable") {
    logDebug("Function emailReports parameter hashTableEmailTemplateParameters must be of class java.util.newHashtable.  Usage: var myHashtable = aa.util.newHashtable()");
    return false;
  }

  if (emailTo && emailTo.indexOf("@") == -1) {
    logDebug("Function emailReports parameter emailTo must be a valid email address.");
    return false;
  }

  if (fvCC && fvCC != "" && fvCC.indexOf("@") == -1) {
    logDebug("Function emailReports parameter CC must be a valid email address.");
    return false;
  }

  if (Reports.length == 0) {
    logDebug("Function emailReports parameter Reports should have at least one report.");
    return false;
  }

  var capIdStr = String(itemCap.getID1() + "-" + itemCap.getID2() + "-" + itemCap.getID3());
  if (emailTo) {
    var capIDScriptModel = aa.cap.createCapIDScriptModel(itemCap.getID1(), itemCap.getID2(), itemCap.getID3());
    var sendNotificationResult = null;
    sendNotificationResult = aa.document.sendEmailAndSaveAsDocument(sysFromEmail, emailTo, fvCC, emailTemplate, hashTableEmailTemplateParameters, capIDScriptModel, Reports);
    if (sendNotificationResult.getSuccess()) {
      logDebug("Sent email successfully!");
    } else {
      logDebug("**ERROR: Failed to send mail. - " + sendNotificationResult.getErrorMessage());
      return false;
    }
  }
  return true;
}function event_WTUA_License_Sheet$Metal__Renewal(ipCapID,ipTask,ipStatus)
{
  if (ipTask == "Validate" && matches(ipStatus,"Approved","Approved with Conditions"))
  {
    var vActive = false;
    //Get the Parent License Cap ID
    var vParentCapID = getParentLicenseCapID(ipCapID);
    if (vParentCapID)
    {
      //Get the Application Cap ID associated with Parent License Cap ID;
      var vCapTypeModel = aa.cap.getCapTypeModel().getOutput();
      vCapTypeModel.setServiceProviderCode(aa.getServiceProviderCode());
      vCapTypeModel.setGroup("License");
      vCapTypeModel.setType("Sheet Metal");
      vCapTypeModel.setSubType(appTypeArray[2]);
      vCapTypeModel.setCategory("Application");
      var vAppChildrenSR = aa.cap.getChildrenCaps(vParentCapID,vCapTypeModel);
      if (vAppChildrenSR && vAppChildrenSR.getSuccess())
      {
        var vAppChildren = vAppChildrenSR.getOutput();
        if (vAppChildren && vAppChildren.length > 0)
        {
          vAppChildCapID = vAppChildren[0].getCapID();
          var vMasterLicense = "";
          //Get Contact of type "Master Licensee"
          var vCapContactsSR = aa.people.getCapContactByCapID(vAppChildCapID);
          if (vCapContactsSR && vCapContactsSR.getSuccess())
          {
            var vCapContacts = vCapContactsSR.getOutput();
            var vMasterLicensee = null;
            for (var vCounter in vCapContacts)
            { 
              var vCapContact = vCapContacts[vCounter];
              var vPeople = vCapContact.getPeople();
              if (vPeople.contactType == "Master Licensee")
              {
                vMasterLicensee = vCapContact;
                break;
              }
            }
            if (vMasterLicensee)
            {
              var vRefLicsSR = aa.licenseScript.getRefLicensesProfByName(aa.getServiceProviderCode(),vMasterLicensee.getPeople().firstName,vMasterLicensee.getPeople().middleName,vMasterLicensee.getPeople().lastName);
              if (vRefLicsSR && vRefLicsSR.getSuccess())
              {
                var vRefLics = vRefLicsSR.getOutput();
                if (vRefLics && vRefLics.length > 0)
                {
                  for (var vCounter in vRefLics)
                  {
                    vRefLic = vRefLics[vCounter];
                    if (vMasterLicensee.getPeople().getSocialSecurityNumber() == vRefLic.getSocialSecurityNumber())
                    {
                      vMasterLicense = vRefLic.getStateLicense();
                      //Check if the Master License is Active
                      if (vMasterLicense != "")
                        vActive = isApplicantLicenseActive(vMasterLicense);
                      if (vActive)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (!vActive)
      aa.capCondition.addCapCondition(ipCapID, "Notice", "Inactive Master Licensee", "", null, null, null, null, null, "", null, null, "", "", "A");
  }

  if (ipTask == "Validate" && matches(ipStatus,"Approved","Approved with Conditions")) {
    renewalApproval(ipCapID);
    activateTask("Issuance");
    updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
  }
}
function existsInArray(ipArray,ipObj)
{
  var opExists = false;
  for (var fvCounter in ipArray)
  {
    var fvObj = ipArray[fvCounter];
    if (fvObj == ipObj)
    {
      opExists = true;
      break;
    }
  }
  return opExists;
}
/*
 * Program: IRSA;Enforce!Investigation!Field Inspection!~.js
 * Event: IRSA/IRUA
 *
 * If an inspection is resulted and the guidesheet includes violations then 
 * assess and invoice an Administrative Penalty (sometimes refered to as a
 * "fine" or "ticket") fee item based on the Board
 * 
 */
function fieldInspectionFee() {
  try{
   var inspectionObj = aa.inspection.getInspections(capId);
   if (inspectionObj.getSuccess()) {
      var inspectionList = inspectionObj.getOutput();
      aa.print("inspectionList: " + inspectionList.length);

      var fineAmountTotal = 0.0;
      for (i in inspectionList) {
         aa.print("Found inspection");
         var inspectionModel = inspectionList[i].getInspection();
         guideSheets = inspectionModel.getGuideSheets();
         if (guideSheets) {
            //var fineAmountTotal = 0.0;
            for (var j=0; j<guideSheets.size(); j++) {
               var gsObj = guideSheets.get(j);
               var items = gsObj.getItems();                  
               for (var k=0; k< items.size(); k++) {
                  var item = items.get(k);
                  var asiSubGroups = item.getItemASISubgroupList();
                  if (asiSubGroups) {
         for (var l=0; l<asiSubGroups.size(); l++) {
                        var asiSubGroup = asiSubGroups.get(l);
                        if (asiSubGroups) {
                           for (var l=0; l<asiSubGroups.size(); l++) {
                              var asiSubGroup = asiSubGroups.get(l);
                              if (asiSubGroup) {
                                 var asiModels = asiSubGroup.getAsiList();
                     if (asiModels) {
                                    var fineAmount = null;
                                    for (var m=0; m<asiModels.size(); m++) {
                                       var asiModel = asiModels.get(m);
                                       if (asiModel) {
                                          if  (asiModel.getAsiName() == "Assess Fine" && asiModel.getAttributeValue() == "CHECKED") {
                                             fineAmountTotal += parseInt(fineAmount);
                  } else if (asiModel.getAsiName() == "Fine Amount") {
                                             fineAmount = asiModel.getAttributeValue();
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }

         var vBoardASI = AInfo["Board"];
         aa.print("fineAmountTotal: " + fineAmountTotal);
         aa.print("Board: " + vBoardASI);
var boardCode = lookup("BOARDS", vBoardASI);
if(boardCode=="GF"){
  boardCode="PL";
}
if(boardCode=="FA"){
  boardCode="EL";
}
if(boardCode=="FE"){
  boardCode="EM";
}
         if (vBoardASI != undefined && vBoardASI != null && vBoardASI != "") {
            if (fineAmountTotal != 0) {
                  addFee(boardCode+"FN", boardCode, "STANDARD", fineAmountTotal, "Y");
            }
         }
      }
   }
  }
  catch (ex) 
  {
    cancel = true;
    showMessage=true;
    comment("Error: "+ex);
  }
}

/*
 *
 * Get if the Field Inspection payment was made.
 *
 */
function fieldInspectionPayment() {
  var thisCapId = capId;
  var paid = true;

  if (arguments.length == 1)
    thisCapId = arguments[0]; // use cap ID pecified in args
         var vBoardASI = AInfo["Board"];
    var boardCode = lookup("BOARDS", vBoardASI);
if(boardCode=="GF"){
  boardCode="PL";
}
if(boardCode=="FA"){
  boardCode="EL";
}
if(boardCode=="FE"){
  boardCode="EM";
}   
  var pmts = loadFees(thisCapId);
  boardFee = boardCode+"FN";

  if (pmts.length == 0) paid = false;

  for (pmt in pmts) {
    if (matches(pmts[pmt].code, boardFee)) {
      paid = (pmts[pmt].amount == pmts[pmt].amountPaid);
      logDebug("Checking Fee code: " + pmts[pmt].code + " Paid:" + paid + " Amount:" + pmts[pmt].amount + " Amount Paid:" + pmts[pmt].amountPaid);
      if (!paid) break;
    }
  }
  return paid;
}

function generateAltID(licCapId, licBoardName, licType) {
    var thisCustomID = licCapId.getCustomID();
    var licNumber = getDPLLicenseNumber(thisCustomID);
    return "" + licNumber + "-" + licBoardName.trim() + "-" + licType.trim();
}
function generateBatchPrintSetName(albaReportName)
{
   // Generate a setName and return it for Batch Printing Requests
   // Uses standard CHoice LKUP_Correspondence_to_SetName
   // takes a correspondence and returns null if it doesn't exist
   //
   /* --------------- Start creating proper set ------------------- */
   var setToBePrinted = null;
   var setName = null;
   var setFrequency = null;
   var setDate = null;
   var currentDate = new Date();
   var dateStr = jsDateToASIDate(currentDate);

   var lkupResult = String(lookup("LKUP_Correspondence_to_SetName", albaReportName));

   if(lkupResult != 'undefined' && lkupResult != 'null')
   {
      // setToBePrinted = new capSet(String(setName + dateStr).toUpperCase());
      lkupResult = lkupResult.split("|");
      logDebug("param 1 = " + lkupResult[0]);
      logDebug("param 2 = " + lkupResult[1]);
      logDebug("param 3 = " + lkupResult[2]);
      logDebug("param 4 = " + lkupResult[3]);
      setName = lkupResult[0];

      if(setName == "")
      setName = null;

      if(lkupResult.length >= 2)
      setName = setName + "|" + lkupResult[1];

      if(lkupResult.length >= 3)
      setFrequency = lkupResult[2];

      if(lkupResult.length == 4)
      setDate = lkupResult[3];

      if( ! setFrequency)
      setFrequency = "D"; // if no frequency declared default to Daily
      
      if(setName)
      {
        var lkupTime1 = lookup("LKUP_NewSetTime", setName);
        if (lkupTime1 == 'undefined' || lkupTime1 == null)
        {
          lkupTime1 = lookup("LKUP_NewSetTime", "NEWSETTIME");
        }
        
        if(lkupTime1 != 'undefined' && lkupTime1 != null)
        {
          lkupTimeResult = lkupTime1.split(":");

          if(lkupTimeResult.length == 2)
          {
            // if not a valid military time the ignore
            var currentTime = new Date();
            if(currentTime.getHours() >= lkupTimeResult[0] && currentTime.getMinutes() >= lkupTimeResult[1])
            {
              currentDate.setDate(currentDate.getDate() + 1);
            }
          }
        }     
      }
     
      if(setFrequency)
      {
         if(setFrequency.toUpperCase() == "D")
         {
         currentDate.setDate(currentDate.getDate());
         }

         if(setFrequency.toUpperCase() == "W")
         {
            if(setDate)
            {
               //if(currentDate.getDay() == setDate)
               // Fixed for defect 2682. If License is approved on monday before 6PM, then it should be added to same week set and after 6PM then to next week set
                if(currentDate.getDay() == setDate && (currentTime.getHours() >= lkupTimeResult[0] && currentTime.getMinutes() >= lkupTimeResult[1]))

              {
                currentDate.setDate(currentDate.getDate() + 7);
              }
              else
              {
                currentDate.setDate( currentDate.getDate() + (7 + setDate - currentDate.getDay()) % 7 );
              }
            }
            else {
              // no day for weekly set it to Sunday
              currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + (7 - currentDate.getDay()));
            }
         }
         if(setFrequency.toUpperCase() == "B")
         {
            if(currentDate.getDate() >= 15)
            {
               currentDate.setDate(1);
               currentDate.setMonth(currentDate.getMonth() + 1);
            }
            else
            currentDate.setDate(15);
         }
         if(setFrequency.toUpperCase() == "M")
         {
            currentDate.setDate(1);
            currentDate.setMonth(currentDate.getMonth() + 1);
         }
      }

      if(setName)
      setName = setName + "|" + setFrequency + "|" + String(currentDate.getFullYear().toString() + zeroPad((currentDate.getMonth() + 1).toString(), 2) + zeroPad(currentDate.getDate().toString(), 2));
   }

   return setName;
}
function generateReportAndSave(reportName, hashMapReportParameters) {
  var itemCap = capId;
  if (arguments.length > 2) // assume capId was passed
    itemCap = arguments[2];

  if (String(hashMapReportParameters.getClass()) !== "class java.util.HashMap") {
    logDebug("Function generateReportAndSave parameter hashMapReportParameters must be of class java.util.HashMap.  Usage: var myHashMap = aa.util.newHashMap()");
    return false;
  }

  var capIdStr = String(itemCap.getID1() + "-" + itemCap.getID2() + "-" + itemCap.getID3());

  var report = aa.reportManager.getReportInfoModelByName(reportName);
  var reportResult = null;

  if (report.getSuccess()) {
    report = report.getOutput();
    report.setModule("*");
    report.setCapId(capIdStr);

    // specific to * Licensing
    report.setReportParameters(hashMapReportParameters);
    var ed1 = report.getEDMSEntityIdModel();
    ed1.setCapId(capIdStr);
    // Needed to determine which record the document is attached
    ed1.setAltId(itemCap.getCustomID());
    // Needed to determine which record the document is attached
    report.setEDMSEntityIdModel(ed1);

    reportResult = aa.reportManager.getReportResult(report);
  }
  if (reportResult) {
    reportResult = reportResult.getOutput();
    if (reportResult != null) {
      var reportFile = aa.reportManager.storeReportToDisk(reportResult);
      reportFile = reportFile.getOutput();
      logDebug("Report " + reportName + " generated.");
    } else {
      logDebug("Report Result is null in function generateReportAndSave with reportName: " + reportName);
      return false;
    }
  } else {
    logDebug("Unable to retrieve report result in function generateReportAndSave with reportName: " + reportName);
    return false;
  }

  return reportFile;
}function generateReportSaveAndEmail(reportName, hashMapReportParameters, emailTemplate, hashTableEmailTemplateParameters, emailTo)
{
  var itemCap = capId;
  var fvCC = "";

  if (arguments.length < 3)
  {
    logDebug("function generateReportSaveAndEmail requres two arguments.  Usage: generateReportSaveAndEmail(string reportName, string emailTo)");
    return false
  }

  if (arguments.length > 5) // assume capId was passed
    itemCap = arguments[5];

  if (arguments.length > 6) // assume CC was passed
    fvCC = arguments[6];

  if (emailTemplate == null || emailTemplate == "")
  {
    logDebug("function generateReportSaveAndEmail parameter emailTemplate is required");
    return false;
  }

  if (String(hashMapReportParameters.getClass()) !== "class java.util.HashMap")
  {
    logDebug("Function generateReportSaveAndEmail parameter hashMapReportParameters must be of class java.util.HashMap.  Usage: var myHashMap = aa.util.newHashMap()");
    return false;
  }

  if (String(hashTableEmailTemplateParameters.getClass()) !== "class java.util.Hashtable") 
  {
    logDebug("Function generateReportSaveAndEmail parameter hashTableEmailTemplateParameters must be of class java.util.newHashtable.  Usage: var myHashtable = aa.util.newHashtable()");
    return false;
  }

  if (emailTo && emailTo.indexOf("@") == -1) 
  {
    logDebug("Function generateReportSaveAndEmail parameter emailTo must be a valid email address.");
    return false;
  }
  
  if (fvCC && fvCC != "" && fvCC.indexOf("@") == -1) 
  {
    logDebug("Function generateReportSaveAndEmail parameter CC must be a valid email address.");
    return false;
  }

  var capIdStr = String(itemCap.getID1() + "-" + itemCap.getID2() + "-" + itemCap.getID3());

  var report = aa.reportManager.getReportInfoModelByName(reportName);
  var reportResult = null;

  if (report.getSuccess()) 
  {
    report = report.getOutput();
    report.setModule("*");
    report.setCapId(capIdStr);

    // specific to * Licensing
    report.setReportParameters(hashMapReportParameters);
    var ed1 = report.getEDMSEntityIdModel();
    ed1.setCapId(capIdStr);
    // Needed to determine which record the document is attached
    ed1.setAltId(itemCap.getCustomID());
    // Needed to determine which record the document is attached
    report.setEDMSEntityIdModel(ed1);

    reportResult = aa.reportManager.getReportResult(report);
  }
  if (reportResult)
  {
    reportResult = reportResult.getOutput();
    if (reportResult != null)
    {
      var reportFile = aa.reportManager.storeReportToDisk(reportResult);
      reportFile = reportFile.getOutput();
      if (emailTo)
      {
        var capIDScriptModel = aa.cap.createCapIDScriptModel(itemCap.getID1(), itemCap.getID2(), itemCap.getID3());
        var reportArr = new Array();
        reportArr.push(reportFile);
        var sendNotificationResult = null;
        // sendNotification(emailFrom, emailTo, emailCC, templateName, params, reportFile)
        sendNotificationResult = aa.document.sendEmailAndSaveAsDocument(sysFromEmail, emailTo, fvCC, emailTemplate, hashTableEmailTemplateParameters, capIDScriptModel, new Array(reportFile));
        if (sendNotificationResult.getSuccess()) logDebug("SendNotification is: " + sendNotificationResult.getSuccess());
        // if(sendResult)logDebug(sendResult.getSuccess());
      }
    }
    else
    {
      logDebug("Report Result is null in function generateReportSaveAndEmailForRecord with reportName: " + reportName);
      return false;
    }
  } 
  else
  {
    logDebug("Unable to retrieve report result in function generateReportSaveAndEmailForRecord with reportName: " + reportName);
    return false;
  }

  return true;
}
function generateReportSaveOnSet(reportName, hashMapReportParameters, setIDStr) // override capIdModel
{
   // Specific to * Licensing
   // Generates a report and save the document to set under the documents tab.
   if (arguments.length < 3) {
      logDebug("function generateReportSaveAndEmail requires three arguments.  Usage: generateReportSaveAndEmail(string reportName, string emailTo, setIDStr)");
      return false
   }

   if (String(arguments[1].getClass()) !== "class java.util.HashMap") {
      logDebug("Function generateReportSaveAndEmail parameter hashMapReportParameters must be of class java.util.HashMap.  Usage: var myHashMap = aa.util.newHashMap()");
      return false;
   }

   var reportResult = null;

   var report = aa.reportManager.getReportInfoModelByName(reportName);
   if (report.getSuccess()) {

      report = report.getOutput();
      report.setModule("*");
      // specific to * Licensing
      report.setReportParameters(hashMapReportParameters);
      var ed1 = report.getEDMSEntityIdModel();
      ed1.setSetId(setIDStr);
      // attach document to the set.
      report.setEDMSEntityIdModel(ed1);

      reportResult = aa.reportManager.getReportResult(report);
   }
   if (reportResult) {
      reportResult = reportResult.getOutput();
      if (reportResult != null) {
         var reportFile = aa.reportManager.storeReportToDisk(reportResult);
         reportFile = reportFile.getOutput();
      } else {
         logDebug("Report Result is null in function generateReportSaveAndEmailForRecord with reportName: " + reportName);
         return false;
      }
   } else {
      logDebug("Unable to retrieve report result in function generateReportSaveAndEmailForRecord with reportName: " + reportName);
      return false
   }
   return true;
}
/*
 *
 * This function is used to validate that one and only one 'Active' Affiliated Broker Contact exists.
 */
function getActiveAffiliatedBroker() {
   var activeAffiliatedBroker = 0;
   var contactArray = getContactArray();
   if (contactArray != null) {
      for (cc in contactArray) {
         thisContact = contactArray[cc];
         if (thisContact["contactType"] == "Affiliated Broker") {
            var conSeqNum = thisContact["contactSeqNumber"];
            var contactAddressModel = aa.address.getContactAddressModel(capId, conSeqNum).getOutput();
            var contactAddressList = aa.address.getContactAddressList(contactAddressModel).getOutput();
            if (contactAddressList.length > 0) {
               for (ca in contactAddressList) {
                  var contactAddress = contactAddressList[ca];
                  var startDate = contactAddress["effectiveDate"];
                  var endDate = contactAddress["expirationDate"];
                  if (startDate != null && endDate == null) {
                     activeAffiliatedBroker++;
                  }
               }
            }
         }
      }
   }
   return activeAffiliatedBroker;
}
/*
 * This function is used to get the board for ASB event.
 */
function getAsbBoard(appType) {
   var boardName = null;
   if (appType == "Sheet Metal") {
      boardName = "SHEET METAL WORKERS";
   } else if (appType == "Veterinarian") {
      boardName = "VETERINARY MEDICINE";
   }

   return boardName;
}
function getBirthDateForLicensedIndividual(pCapId)
{
  var capContactResult=aa.people.getCapContactByCapID(pCapId);
  var bDateObj = null;

  if(capContactResult.getSuccess())
  {
    capContactResult=capContactResult.getOutput();
    for(i in capContactResult)
    {
      var peopleModel = capContactResult[i].getPeople();
      if(peopleModel.getContactType()=="Licensed Individual" )
      {
        var capContactScriptModel= capContactResult[i];
        var capContactModel= capContactScriptModel.getCapContactModel();
        var bDate = capContactModel.getBirthDate();
        if(bDate) 
        {
          bDateObj = new Date(bDate.getTime());
          logDebug("Birth date:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
        }     
      }
    }
  }
  
  return bDateObj;  
}

function getBoard(ipCapID)
{
  var vBoardASI = "";
  var opBoard = "";
  if (appMatch("License/Sheet Metal/*/*",ipCapID)){
    vBoardASI = "SHEET METAL WORKERS";
  }
  else if (appMatch("License/Veterinarian/*/*",ipCapID)){
    vBoardASI = "VETERINARY MEDICINE";
  }
  else if (appMatch("License/Engineers and Land Surveyors/*/*",ipCapID)){
    vBoardASI = "Engineering";
  }
  else if (appMatch("License/Real Estate/*/*",ipCapID)){
    vBoardASI = "Real Estate Brokers & Salespersons";
  }
  else if (appMatch("License/Real Estate Appraiser/*/*",ipCapID)){
    vBoardASI = "Real Estate Appraisers";
  }
  else if (appMatch("License/Electricians/*/*",ipCapID)){
    vBoardASI = "Electricians";
  }
  else if (appMatch("License/Psychologist/*/*",ipCapID)){
    vBoardASI = "Psychology";
  } 
  else if (appMatch("License/Health Officers/*/*",ipCapID)){
    vBoardASI = "Health Officers";
  } 
  else if (appMatch("License/Dietitians and Nutritionists/*/*",ipCapID)){
    vBoardASI = "Dietitians and Nutritionists";
  } 
else if (appMatch("License/Architect/*/*",ipCapID))
  vBoardASI = "Architects";
  else if (appMatch("License/Allied Mental Health/*/*",ipCapID))
  vBoardASI = "Allied Mental Health";
  else if (appMatch("License/Allied Health/*/*",ipCapID))
  vBoardASI = "Allied Health";
  else if (appMatch("License/Barbers/*/*",ipCapID)){
  if (appMatch("License/Barbers/Shop/*",ipCapID)){      
    vBoardASI  = "Barber Shop";
    }
    else
    {
      vBoardASI  = "Barbers";
    }
  }
  else if (appMatch("License/Chiropractor/*/*",ipCapID))
  vBoardASI = "Chiropractors";
  else if (appMatch("License/Cosmetology/*/*",ipCapID)){
    //Updated by Prateek defect 11222,Added Mobile Manicuring 
    if (appMatch("License/Cosmetology/Shop/*",ipCapID) || appMatch("License/Cosmetology/Mobile Manicuring/*",ipCapID)){     
    vBoardASI  = "Hair Salon";
    }
    else
    {
  vBoardASI = "Cosmetologists";
    }
  }
  else if (appMatch("License/Dispensing Opticians/*/*",ipCapID))
  vBoardASI = "Dispensing Opticians";
  else if (appMatch("License/Drinking Water/*/*",ipCapID))
  vBoardASI = "Drinking Water Supply Facilities";
  else if (appMatch("License/Electrology/*/*",ipCapID))
  vBoardASI = "Electrologists";
  else if (appMatch("License/Hearing Instrument/*/*",ipCapID))
  vBoardASI = "Hearing Instrument Specialists";
  else if (appMatch("License/Home Inspector/*/*",ipCapID))
  vBoardASI = "Home Inspectors";
  else if (appMatch("License/Landscape Architects/*/*",ipCapID))
  vBoardASI = "Landscape Architects";
  else if (appMatch("License/Massage Therapy/*/*",ipCapID))
  vBoardASI = "Massage Therapy";
  else if (appMatch("License/Optometry/*/*",ipCapID))
  vBoardASI = "Optometrists";

  else if (appMatch("License/Podiatry/*/*",ipCapID))
  vBoardASI = "Podiatrist";
  else if (appMatch("License/Public Accountancy/*/*",ipCapID))
  vBoardASI = "Public Accountancy";
  //else if (appMatch("License/Radio/*/*"))
  //vBoardASI = "Radio and Television Technicians";
  else if (appMatch("License/Sanitarian/*/*",ipCapID))
  vBoardASI = "Sanitarians";
  else if (appMatch("License/Social Workers/*/*",ipCapID))
  vBoardASI = "Social Workers";
  else if (appMatch("License/Speech and Audiology/*/*",ipCapID))
  vBoardASI = "Speech-Language Pathologists and Audiologists";  
  
  
  
  else if (appMatch("Enforce/*/*/*",ipCapID)){
    var vBoardASI = getAppSpecific("Board",ipCapID);
  }
  else if (appMatch("License/*/*/License Verification",ipCapID)){
    var vBoardASI = getAppSpecific("Board",ipCapID);
  } 
  else if (appMatch("License/Trade Boards/*/*",ipCapID)){
    var vBoardASI = getAppSpecific("Board",ipCapID);
  }   
  else if (appMatch("License/DPL/Public Record Request/NA",ipCapID)){
    var vBoardASI = getAppSpecific("Board",ipCapID);
  } 
  else if (appMatch("License/Plumbers and Gas Fitters/*/*",ipCapID)){
  if (appMatch("License/Plumbers and Gas Fitters/Amendment/Update GF Employing Master",ipCapID) || appMatch("License/Plumbers and Gas Fitters/Amendment/Update GF Corporate Master",ipCapID) || appMatch("License/Plumbers and Gas Fitters/Amendment/Terminate GF Business Assoc",ipCapID) || appMatch("License/Plumbers and Gas Fitters/Permits/Gas Fitting Permit",ipCapID) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Apprentice/*",ipCapID) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Business/*",ipCapID) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Journeyman/*",ipCapID) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Master/*",ipCapID)){     
    vBoardASI  = "Gas Fitters";
    }
    else
    {
      vBoardASI  = "Plumbers";
    }
  }
  else if (appMatch("License/Funeral Directors/*/*",ipCapID)){
    if(appMatch("License/Funeral Directors/Type 3/*",ipCapID) || appMatch("License/Funeral Directors/Type 6/*",ipCapID) || appMatch("License/Funeral Directors/Registered Embalmer/*",ipCapID) || appMatch("License/Funeral Directors/Embalmer Apprentice/*",ipCapID)){     
      vBoardASI = "Embalming";
    }
    else if(appMatch("License/Funeral Directors/Funeral Establishment/*",ipCapID))
    {
      //added by ankush for CR#456
      if(appMatch("License/Funeral Directors/Funeral Establishment/Pre Needs",ipCapID)){
        vBoardASI = "Embalming";
      }else {
        vBoardASI = "Funeral Establishment";
      }
    }
    else 
    {
      vBoardASI = "Funeral Directors";
    }
  }else if(appMatch("License/Occupational Schools/*/*",ipCapID)){//debashish.barik
    vBoardASI="Occupational Schools";
    
  }
  
  if (vBoardASI != undefined && vBoardASI != null && vBoardASI != "")
    opBoard = lookup("BOARDS",vBoardASI);
  return opBoard;
}

function getCapContactAddressByType(iContact, iAddressType)
{
  var fvContactAddress;
  var fvAddressResult = aa.address.getContactAddressListByCapContact(iContact.getCapContactModel()).getOutput();
  
  if( fvAddressResult && fvAddressResult.length > 0 )
  {
    for (rr in fvAddressResult)
    {
      var fvContactAddressModel = fvAddressResult[rr].contactAddressModel;
      if (fvContactAddressModel.getAddressType() == iAddressType)
      {
        logDebug("Found " + iAddressType + " for contact " + iContact.getPeople().contactSeqNumber + " ref num "+ iContact.getCapContactModel().refContactNumber);
        fvContactAddress = fvAddressResult[rr];
        break;
      }
    }
  }
  return fvContactAddress;
}
function getCapDetailByID(capId)
{
    capDetailScriptModel = null;
    var s_result = aa.cap.getCapDetail(capId);
    if(s_result.getSuccess())
    {
        capDetailScriptModel = s_result.getOutput();
        if (capDetailScriptModel == null)
        {
            logDebug("WARNING: no cap detail on this CAP:" + capId);
            capDetailScriptModel = null;
        }
    }
    else
    {
        logDebug("ERROR: Failed to get cap detail: " + s_result.getErrorMessage());
        capDetailScriptModel = null;    
    }
    // Return capDetailScriptModel
    return capDetailScriptModel;
}

function getCapListByContactType(contactType, itemCap) {
  var capContactResult = aa.people.getCapContactByCapID(itemCap);

  if (capContactResult.getSuccess()) {
    var capContactArray = capContactResult.getOutput();
  } else {
    return false;
  }

  if (capContactArray.length > 0) {
    for (yy in capContactArray) {
      var thisContact = capContactArray[yy];
      if (contactType.toUpperCase() == thisContact.getPeople().contactType.toUpperCase()) {

        getPeopleScriptResult = aa.people.getPeopleByPeopleModel(thisContact.getPeople());

        if (getPeopleScriptResult.getSuccess()) {
          peopleScriptList = getPeopleScriptResult.getOutput();

          for (psl in peopleScriptList) {
            getRecordsResult = aa.people.getCapIDsByRefContact(peopleScriptList[psl]);
            if (getRecordsResult.getSuccess()) {
              for (rr in recordsList) {

                var id1 = recordsList[rr].getID1();
                var id2 = recordsList[rr].getID2();
                var id3 = recordsList[rr].getID3();

                var capIdToAdd = aa.cap.getCapID(id1, id2, id3).getOutput();

                if (itemCap.getCustomID() == capIdToAdd.getCustomID())
                  continue; //Do not add the record that was queried to the list

                if (aType != null) {
                  if (appMatch(aType, capIdToAdd))
                    rList.push(capIdToAdd);
                } else {
                  rList.push(capIdToAdd);
                }
              }

            }
          }
        }
      }
    }
  }

  if (rList.length > 0)
    return rList;
  else
    return false;

}
// This function takes Srv Prov Code (string) and a Contact Type (string) and
// will return the ASI Group Name (string) associated to the Contact type
// if no group exists, will return false
function getContactASIGroup(srvProvCode, contactType){
               var genTemplateObj = aa.proxyInvoker.newInstance("com.accela.aa.template.GenericTemplateBusiness").getOutput();
               var templateResult = genTemplateObj.getTemplateStructureByContactType(srvProvCode,contactType,true);
               if (templateResult) {
                              var formsResult = templateResult.getTemplateForms().toArray();
                              if (formsResult) {
                                             try {
                                                            var asiResult = formsResult[0];
                                                            return asiResult.getGroupName();
                                             }
                                             catch (e) {
                                                            return false;
                                             }
                              }
                              else {
                                             return false;
                              }
               }
               else {
                              return false;
               }
}

//Get added condition
function getContactCondutions(peopleSequenceNumber) {
    var lang = "ar_AE";

    var conCondResult = aa.commonCondition.getCommonConditions("CONTACT", peopleSequenceNumber);
    var resultArray = new Array();

    var conCondArray = new Array();
    if (!conCondResult.getSuccess()) {
        logDebug("**WARNING: getting contact Conditions : " + licCondResult.getErrorMessage());
    }
    else {
        conCondArray = conCondResult.getOutput();
    }

    for (var thisConCond in conCondArray) {
        var thisCond = conCondArray[thisConCond];
        var cType = thisCond.getConditionType();
        var cStatus = thisCond.getConditionStatus();
        var cDesc = thisCond.getConditionDescription();
        var cImpact = thisCond.getImpactCode();
        var cComment = thisCond.getConditionComment();
        if (cType == null)
            cType = " ";
        if (cStatus == null)
            cStatus = " ";
        if (cDesc == null)
            cDesc = " ";
        if (cImpact == null)
            cImpact = " ";

        var r = new condMatchObjEx();
    r.condition = thisCond;
        r.objType = "Contact";
        r.contactObj = null;  //conArray[thisCon];
        r.status = cStatus;
        r.type = cType;
        r.impact = cImpact;
        r.description = cDesc;
        r.comment = cComment;
        r.statusType = thisCond.getConditionStatusType();
    r.conditionNumber = thisCond.getConditionNumber();
        if (thisCond.getEffectDate() != null) {
            r.effiectDate = new Date(thisCond.getEffectDate().getYear(), thisCond.getEffectDate().getMonth() - 1, thisCond.getEffectDate().getDayOfMonth());
        }
        if (thisCond.getExpireDate() != null) {
            r.expireDate = new Date(thisCond.getExpireDate().getYear(), thisCond.getExpireDate().getMonth() - 1, thisCond.getExpireDate().getDayOfMonth());
        }

        var langCond = aa.condition.getCondition(thisCond, lang).getOutput();

        r.arObject = langCond;
        r.arDescription = langCond.getResConditionDescription();
        r.arComment = langCond.getResConditionComment();

        resultArray.push(r);
    }
    return resultArray;
}

function getContactPreferredChannelDesc(value) {
    return lookup("CONTACT_PREFERRED_CHANNEL", value);
}/* Added by NPHON on 7/23/14
 *
 * This function is used to get all current cap contacts.
 * contactType: Contact Type
 * refSeqNumber: Reference Contact ID
 *
 */
function getContactsByTypeAndSeqNumber(contactType, refSeqNumber) {
   var appTypeResult = cap.getCapType();
   var appTypeString = appTypeResult.toString(); // Convert application type to string ("Building/A/B/C")
   var appTypeArray = appTypeString.split("/"); // Array of application type string

   var contactNum = 0;
   //Create a capModel for use with the get records method
   var capModel = aa.cap.getCapModel().getOutput();
   var capTypeModel = capModel.getCapType();
   capTypeModel = capModel.getCapType();
   capTypeModel.setGroup(appTypeArray[0]);
   capTypeModel.setType(appTypeArray[1]);
   capTypeModel.setSubType(appTypeArray[2]);
   capTypeModel.setCategory(appTypeArray[3]);
   capModel.setCapType(capTypeModel);

   appListResult = aa.cap.getCapIDListByCapModel(capModel);
   if (appListResult.getSuccess()) {
      appList = appListResult.getOutput();
   }
     
   if (appList.length > 0) {
      for (a in appList) {
         var thisApp = appList[a];
   var busContact = getContactObj(thisApp.getCapID(), contactType);

         var thisCap = aa.cap.getCap(thisApp.getCapID()).getOutput();
         if (thisCap.getCapStatus() == "Complaint Closed" && busContact.refSeqNumber && busContact.refSeqNumber == refSeqNumber) {
            contactNum++;
         }
         
         /*var capContResult = aa.people.getCapContactByCapID(thisApp.getCapID());
         if (capContResult.getSuccess()) {
            var contactArray = capContResult.getOutput();
            for (con in contactArray) {
               var thisContact = contactArray[con].getCapContactModel();
               var thisRefContactNum = thisContact.getRefContactNumber();
               if (thisRefContactNum && thisRefContactNum == thisContactNum) {
                  contactNum++;
               }
            }
         }*/
      }
   }

   return contactNum;
}
/*------------------------------------------------------------------------------------------------------/
/ Function : getContactTemplateFormFieldValue
/ Parameters : contactType - contact type
/              groupName - template form group
/              fieldName - field name
/ Returns : field value
/ Purpose: Get the contact template form field value. 
/
/------------------------------------------------------------------------------------------------------*/
function getContactTemplateFormFieldValue(contactType, groupName, fieldName) {
  if (contactType == null || groupName == null || fieldName == null) 
    return null;

  var c = getContactObjs(capId, [String(contactType)]);

  template = new templateObj(c[0].people.getTemplate());

  return template.getTemplateValueByForm(groupName, fieldName);
}
/*
 *
 * Program: ASA;License!Sheet Metal!Apprentice!Application.js
 * Event: ASA
 *
 * 1. Get a count of all the Active Apprentice licenses that are associated to the Master Licensee Contact
 * 2. If the count is greater than 6, then add the standard condition Apprentices Exceeded
 *
 */

function getCountOfApprentices() {
   var countOfApprentices = 0;
   var contactArray = getContactArray(capId);

   for (cc in contactArray) {
      thisContact = contactArray[cc];

      // Check contact type
      if (thisContact["contactType"] == "Master Licensee") {
         var refContactId = thisContact["refSeqNumber"];
         countOfApprentices = getApprenticesByContactNumber(refContactId);
         logDebug("Number of apprentices with reference contact id (" + refContactId + "): " + countOfApprentices);
      }
   }

   return countOfApprentices;
}


function getApprenticesByContactNumber(thisContactNum) {
   var appTypeResult = cap.getCapType();
   var appTypeString = appTypeResult.toString(); // Convert application type to string ("Building/A/B/C")
   var appTypeArray = appTypeString.split("/"); // Array of application type string

   var contactNum = 0;
   //Create a capModel for use with the get records method
   var capModel = aa.cap.getCapModel().getOutput();
   var capTypeModel = capModel.getCapType();
   capTypeModel = capModel.getCapType();
   capTypeModel.setGroup(appTypeArray[0]);
   capTypeModel.setType(appTypeArray[1]);
   capTypeModel.setSubType(appTypeArray[2]);
   capTypeModel.setCategory(appTypeArray[3]);
   capModel.setCapType(capTypeModel);

   appListResult = aa.cap.getCapIDListByCapModel(capModel);
   if (appListResult.getSuccess()) {
      appList = appListResult.getOutput();
   }
        
   if (appList.length > 0) {
      for (a in appList) {
         var thisApp = appList[a];
         var capContResult = aa.people.getCapContactByCapID(thisApp.getCapID());
         if (capContResult.getSuccess()) {
            var contactArray = capContResult.getOutput();
            for (con in contactArray) {
               var thisContact = contactArray[con].getCapContactModel();
               var thisRefContactNum = thisContact.getRefContactNumber();
               if (thisRefContactNum && thisRefContactNum == thisContactNum) {
                  contactNum++;
               }
            }
         }
      }
   }

   return contactNum;
}
/*var licenseNum = AInfo["License Number"];

if (licenseNum != undefined && licenseNum != null && licenseNum != "") {
   var profLicense = getRefLicenseProf(licenseNum, getBoard(capId), "M1");
   if (profLicense == null) {
      profLicense = getRefLicenseProf(licenseNum, getBoard(capId), "M2");
   }

   if (profLicense != null) {
      var countOfApprentices = getCountOfApprenticesByLicenseNumber(licenseNum, getBoard(capId), profLicense.getBusinessLicense());

      if (countOfApprentices > 0) {
         cancel = true;
         showMessage = true;
         comment("OMG...: " + countOfApprentices);
      }
   }
}*/

function getCountOfApprenticesByLicenseNumber(licenseNum, board, typeClass) {
   var countOfApprentices = 0;
   var appTypeResult = cap.getCapType();
   var appTypeString = appTypeResult.toString(); // Convert application type to string ("Building/A/B/C")
   var appTypeArray = appTypeString.split("/"); // Array of application type string

   var contactNum = 0;
   //Create a capModel for use with the get records method
   var capModel = aa.cap.getCapModel().getOutput();
   var capTypeModel = capModel.getCapType();
   capTypeModel = capModel.getCapType();
   capTypeModel.setGroup(appTypeArray[0]);
   capTypeModel.setType(appTypeArray[1]);
   capTypeModel.setSubType(appTypeArray[2]);
   capTypeModel.setCategory("License");
   capModel.setCapType(capTypeModel);

   appListResult = aa.cap.getCapIDListByCapModel(capModel);
   if (appListResult.getSuccess()) {
      appList = appListResult.getOutput();
   }
   logDebug("Searching for LP (" + licenseNum + ", " + board + ", " + typeClass + ") in Apprentice License records (" + appList.length + ").");

   if (appList.length > 0) {
      for (a in appList) {
         var thisApp = appList[a];
         var profLicenseCapId = aa.licenseProfessional.getLicensedProfessionalsByCapID(thisApp.getCapID());
         if (profLicenseCapId.getSuccess()) { 
            var profLicense = profLicenseCapId.getOutput();
            for (var counter in profLicense) {
               var thisProfLicense = profLicense[counter];
               if (thisProfLicense.getLicenseNbr() == licenseNum && thisProfLicense.getLicenseBoard() == board && thisProfLicense.getBusinessLicense() == typeClass) {
            var thisCap = aa.cap.getCap(thisApp.getCapID()).getOutput();                  
                  logDebug("Custom ID: " + thisCap.getCapModel().getAltID());
                  countOfApprentices++;
               }
            }
         }
      }
   }

   return countOfApprentices;
}
function getCountOfApprenticesByLicSeqNum(LicenseSeqNum2) {
  var countOfApprentices = 0;
  var appTypeString = appTypeResult.toString(); // Convert application type to string ("Building/A/B/C")
  var appTypeArray = appTypeString.split("/"); // Array of application type string

  var contactNum = 0;
  //Create a capModel for use with the get records method
  var capModel = aa.cap.getCapModel().getOutput();
  var capTypeModel = capModel.getCapType();
  capTypeModel = capModel.getCapType();
  capTypeModel.setGroup(appTypeArray[0]);
  capTypeModel.setType(appTypeArray[1]);
  capTypeModel.setSubType(appTypeArray[2]);
  capTypeModel.setCategory("License");
  capModel.setCapType(capTypeModel);

  appListResult = aa.cap.getCapIDListByCapModel(capModel);
  if (appListResult.getSuccess()) {
    appList = appListResult.getOutput();
  }
  //logDebug("Searching for LP (" + licenseNum + ", " + board + ", " + typeClass + ") in Apprentice License records (" + appList.length + ").");

  if (appList.length > 0) {
    for (a in appList) {
      var thisApp = appList[a];
      // var status;
      var cap = thisApp.getCapID();

      var profLicenseCapId = aa.licenseProfessional.getLicensedProfessionalsByCapID(thisApp.getCapID());
      if (profLicenseCapId.getSuccess()) {
        var profLicense = profLicenseCapId.getOutput();
        for (var counter in profLicense) {
          var thisProfLicense = profLicense[counter];
          var LicenseSeqNum1 = thisProfLicense.getLicenseProfessionalModel().getLicSeqNbr();
          //if (thisProfLicense.getLicenseNbr() == licenseNum && thisProfLicense.getLicenseBoard() == board && thisProfLicense.getBusinessLicense() == typeClass) {
          if (LicenseSeqNum1 == LicenseSeqNum2) {
            var thisCap = aa.cap.getCap(thisApp.getCapID()).getOutput();
            if (thisCap.getCapStatus() == "Current") {
              countOfApprentices++;
            }
          }
        }
      }
    }
  }

  return countOfApprentices;



}
function getDPLLicenseNumber(customID) {
  var licNumber = "";
  var thisCustomID = customID;
  if (isDPLLicenseFormat(thisCustomID)) {
    logDebug("CustomID matches pattern.");
    var altIDArray = thisCustomID.split("-");
    licNumber = parseInt(altIDArray[0], 10);
  } else
    licNumber = parseInt(thisCustomID, 10);
  return licNumber;
}
function getEmailTemplateParameters(itemCap) {
  var emailParameters = aa.util.newHashtable();
  var itemCapScriptModel = aa.cap.getCap(itemCap).getOutput();
  var CapTypeString=itemCapScriptModel.getCapType().toString();
  var CapTypeArray = CapTypeString.split("/");
  var LicPerType = CapTypeArray[1];
  var LicPerSubType = CapTypeArray[2];
    var board = getBoard(itemCap);
  
  if (appMatch("License/Sheet Metal/*/*",itemCap))
  opBoard = lookup("LKUP_Board_Name","Sheet Metal Workers");
  else if (appMatch("License/Veterinarian/*/*",itemCap))
  opBoard = lookup("LKUP_Board_Name","Veterinary Medicine");
  else if (appMatch("License/Plumbers and Gas Fitters/*/*",itemCap))
  opBoard = lookup("LKUP_Board_Name","Plumbers");
  else 
  opBoard = lookup("LKUP_Board_Name",LicPerType);      

  if (appMatch("License/*/*/License",itemCap))
  {
    vExpDate =  aa.expiration.getLicensesByCapID(itemCap).getOutput().getExpDateString(); 
    if(vExpDate != null)
    var ExpirationDate = reformatDate(vExpDate);
  }
   
  // Load all parameters to be used by the email template.
  addParameter(emailParameters, "$$appType$$", itemCapScriptModel.getCapType().getAlias());
  addParameter(emailParameters, "$$licAltID$$", itemCap.getCustomID());
  addParameter(emailParameters, "$$Board$$", opBoard);
  addParameter(emailParameters, "$$ExpirationDate$$", ExpirationDate);
  addParameter(emailParameters, "$$License_Per_Type$$", LicPerType);
  addParameter(emailParameters, "$$License_Per_Sub_Type$$", LicPerSubType);
  addParameter(emailParameters, "$$Board_PhoneNumber$$",lookup("BOARD_PHONE",board));

  var ACA_Link = lookup("ACA_SITE","dpl site");
  addParameter(emailParameters, "$$ACA_LINK$$", ACA_Link);

  var co = getContactObjs(capId);

  var tmpCapId = capId;
  capId = itemCap;
  getContactParams4Notification(emailParameters, "Licensed Individual");
  getContactParams4Notification(emailParameters, "Authorized Representative");
  getContactParams4Notification(emailParameters, "Business");  
  capId = tmpCapId;

  var licenseeName = (!matches(emailParameters.get("$$licensed individualFirstName$$"), null, "", "undefined")) ? (emailParameters.get("$$licensed individualFirstName$$")  + "  "+ emailParameters.get("$$licensed individualLastName$$")) : (emailParameters.get("$$businessBusinesName$$"));   
  addParameter(emailParameters, "$$Licensee_Name$$", licenseeName);
  addParameter(emailParameters, "$$FULL_NAME$$", licenseeName);
  return emailParameters;
}
function getEmailTemplateParams(contactObj) {
   var emailParameters = aa.util.newHashtable();
   var itemCapScriptModel = aa.cap.getCap(contactObj.capId).getOutput();
   var thisCapId = aa.cap.getCapID(contactObj.capId.getID1(),contactObj.capId.getID2(),contactObj.capId.getID3()).getOutput();
   var cc = contactObj.capContact;

   // Load all parameters to be used by the email template.
   contactObj.getEmailTemplateParams(emailParameters);
   addParameter(emailParameters, "$$Licensee_Name$$", cc.getContactName());
   addParameter(emailParameters, "$$AppType$$", itemCapScriptModel.getCapType().getAlias());
   addParameter(emailParameters, "$$AltID$$", thisCapId.getCustomID());
   var ACA_Link = lookup("ACA_SITE","dpl site");
   addParameter(emailParameters, "$$ACA_LINK$$", ACA_Link);
   return emailParameters;
}
function getFieldAttributeByName(templateGroups, subGroupName, fieldName)
{
  logDebug("ENTER: getFieldAttributeByName");
  if (templateGroups == null || templateGroups.size() == 0)
  {
    return null;
  }

  var subGroups = templateGroups.get(0).getSubgroups();
  for (var subGroupIndex = 0; subGroupIndex < subGroups.size(); subGroupIndex++)
  {
    var subGroup = subGroups.get(subGroupIndex);
    if (subGroupName == subGroup.getSubgroupName())
    {
      var fields = subGroup.getFields();
      for (var fieldIndex = 0; fieldIndex < fields.size(); fieldIndex++)
      {
        var field = fields.get(fieldIndex);
        if (field.getDisplayFieldName() == fieldName)
        {
          return field;
        }
      }
    }
  }
  logDebug("EXIT: getFieldAttributeByName");
}
function getLegalBoardName(ipBoardName)
{
  var opLegalBoard = "";
  var fvInterBoard = lookup("BOARD_CODE_INT_RECORD_TYPE",ipBoardName);
  if (fvInterBoard != undefined && fvInterBoard != null && fvInterBoard != "null" && fvInterBoard != "")
    opLegalBoard = lookup("LKUP_Board_Name",fvInterBoard);
  return opLegalBoard;
}

function getLicensingBoard(itemCapId) {
  var opBoard = "";
  if (appMatch("License/Sheet Metal/*/*",itemCapId))
    opBoard = lookup("BOARDS","Sheet Metal Workers");
  else if (appMatch("License/Veterinarian/*/*",itemCapId))
    opBoard = lookup("BOARDS","Veterinary Medicine");
  else if (appMatch("License/Engineers and Land Surveyors/*/*",itemCapId))
    opBoard = lookup("BOARDS","Engineering");
  else if (appMatch("License/Electricians/*/*",itemCapId))
    opBoard = lookup("BOARDS","Electricians");
  else if (appMatch("License/Plumbers and Gas Fitters/Master/*",itemCapId))
    opBoard = lookup("BOARDS","Plumbers");  
  else if (appMatch("License/Plumbers and Gas Fitters/Apprentice/*",itemCapId))
    opBoard = lookup("BOARDS","Plumbers");  
  else if (appMatch("License/Plumbers and Gas Fitters/Business/*",itemCapId))
    opBoard = lookup("BOARDS","Plumbers");  
  else if (appMatch("License/Plumbers and Gas Fitters/Journeyman/*",itemCapId))
    opBoard = lookup("BOARDS","Plumbers");
  else if (appMatch("License/Plumbers and Gas Fitters/Inspector/*",itemCapId))
    opBoard = lookup("BOARDS","Plumbers");      
  else if (appMatch("License/Plumbers and Gas Fitters/Gas Fitter Business/*",itemCapId))
    opBoard = lookup("BOARDS","Gas Fitters"); 
  else if (appMatch("License/Plumbers and Gas Fitters/Gas Fitter Apprentice/*",itemCapId))
    opBoard = lookup("BOARDS","Gas Fitters");   
  else if (appMatch("License/Plumbers and Gas Fitters/Gas Fitter Journeyman/*",itemCapId))
    opBoard = lookup("BOARDS","Gas Fitters");   
  else if (appMatch("License/Plumbers and Gas Fitters/Gas Fitter Master/*",itemCapId))
    opBoard = lookup("BOARDS","Gas Fitters");   
  else if (appMatch("License/Plumbers and Gas Fitters/LP Installer/*",itemCapId))
    opBoard = lookup("BOARDS","Gas Fitters");   
  else if (appMatch("License/Plumbers and Gas Fitters/LTD LP Installer/*",itemCapId))
    opBoard = lookup("BOARDS","Gas Fitters"); 
  else if (appMatch("License/Plumbers and Gas Fitters/Inspector/*",itemCapId))
    opBoard = lookup("BOARDS","Gas Fitters");   
  else if (appMatch("License/Psychologist/*/*",itemCapId))
    opBoard = lookup("BOARDS","Psychology");    
  else if (appMatch("License/Dietitians and Nutritionists/*/*",itemCapId))
    opBoard = lookup("BOARDS","Dietitians and Nutritionists");    
  else if (appMatch("License/Health Officers/Certified Health Officer/*",itemCapId))
    opBoard = lookup("BOARDS","Health Officers");   
  else if (appMatch("License/Real Estate/*/*",itemCapId))
    opBoard = lookup("BOARDS","Real Estate Brokers & Salespersons");
  else if (appMatch("License/Real Estate Appraiser/*/*"))
  opBoard = lookup("BOARDS", "Real Estate Appraisers");
  else if (appMatch("License/Architect/*/*"))
  opBoard = lookup("BOARDS", "Architects");
  else if (appMatch("License/Allied Mental Health/*/*"))
  opBoard = lookup("BOARDS", "Allied Mental Health");
  else if (appMatch("License/Allied Health/*/*"))
  opBoard = lookup("BOARDS", "Allied Health");
  else if (appMatch("License/Barbers/*/*")){
    if (appMatch("License/Barbers/Shop/*") || appMatch("License/Barbers/School/*")){      
    opBoard = lookup("BOARDS", "Barber Shop");
    }
    else
    {
    opBoard = lookup("BOARDS", "Barbers");
    }
    
  }
  else if (appMatch("License/Chiropractor/*/*"))
  opBoard = lookup("BOARDS", "Chiropractors");
  else if (appMatch("License/Cosmetology/*/*"))

    if (appMatch("License/Cosmetology/Aesthetician School/*",itemCapId) || appMatch("License/Cosmetology/School/*",itemCapId)){
    opBoard = lookup("BOARDS", "Hair Salon");
    }
    // added else if because of defect 13383
    else if(appMatch("License/Cosmetology/Shop/*",itemCapId) || appMatch("License/Cosmetology/Mobile Manicuring/*",itemCapId)){
    opBoard = lookup("BOARDS", "Cosmetologist Business"); 
    }
    else
    {
    opBoard = lookup("BOARDS", "Cosmetologists");
    }
  else if (appMatch("License/Dispensing Opticians/*/*"))
  opBoard = lookup("BOARDS", "Dispensing Opticians");
  else if (appMatch("License/Drinking Water/*/*"))
  opBoard = lookup("BOARDS", "Drinking Water Supply Facilities");
  else if (appMatch("License/Electrology/*/*"))
  opBoard = lookup("BOARDS", "Electrologists");
  else if (appMatch("License/Funeral Directors/*/*",itemCapId))
    if(appMatch("License/Funeral Directors/Type 3/*",itemCapId) || appMatch("License/Funeral Directors/Type 6/*",itemCapId) || appMatch("License/Funeral Directors/Registered Embalmer/*",itemCapId) || appMatch("License/Funeral Directors/Embalmer Apprentice/*",itemCapId))
      opBoard = lookup("BOARDS", "Embalming");
    else if(appMatch("License/Funeral Directors/Funeral Establishment/*",itemCapId))
      opBoard = lookup("BOARDS", "Funeral Establishment");
    else 
      opBoard = lookup("BOARDS", "Funeral Directors");
  else if (appMatch("License/Hearing Instrument/*/*"))
  opBoard = lookup("BOARDS", "Hearing Instrument Specialists");
  else if (appMatch("License/Home Inspector/*/*"))
  opBoard = lookup("BOARDS", "Home Inspectors");
  else if (appMatch("License/Landscape Architects/*/*"))
  opBoard = lookup("BOARDS", "Landscape Architects");
  else if (appMatch("License/Massage Therapy/*/*"))
  opBoard = lookup("BOARDS", "Massage Therapy");
  else if (appMatch("License/Optometry/*/*"))
  opBoard = lookup("BOARDS", "Optometrists");
  else if (appMatch("License/Podiatry/*/*"))
  opBoard = lookup("BOARDS", "Podiatrist");
  else if (appMatch("License/Public Accountancy/*/*"))
  opBoard = lookup("BOARDS", "Public Accountancy");
  //else if (appMatch("License/Radio/*/*"))
  //opBoard = lookup("BOARDS", "Radio and Television Technicians");
  else if (appMatch("License/Sanitarian/*/*"))
  opBoard = lookup("BOARDS", "Sanitarians");
  else if (appMatch("License/Social Workers/*/*"))
  opBoard = lookup("BOARDS", "Social Workers");
  else if (appMatch("License/Speech and Audiology/*/*"))
  opBoard = lookup("BOARDS", "Speech-Language Pathologists and Audiologists");
  else if (appMatch("License/Occupational Schools/Program-Course/*",itemCapId) || appMatch("License/Occupational Schools/Sales Representative/Application") || appMatch("License/Occupational Schools/School/Application"))
  opBoard = lookup("BOARDS","Occupational Schools");
  // replaced line and use itemCapId as ipCapID was throwing an error
  //else if (appMatch("Enforce/*/*/*",ipCapID))
  else if (appMatch("Enforce/*/*/*", itemCapId)) {
  // replaced line and use itemCapId as ipCapID was throwing an error
  //var vBoardASI = getAppSpecific("Board",ipCapID);

  var vBoardASI = getAppSpecific("Board", itemCapId);
  if (vBoardASI != undefined && vBoardASI != null && vBoardASI != "")
    opBoard = lookup("BOARDS", vBoardASI);
  }
  return opBoard;
}




function getParentLicenseCapIDForReinstatement(itemCap) {
  if (itemCap == null || aa.util.instanceOfString(itemCap)) {
    return null;
  }
  
  //Part of CR 212 to determines the parent license capID
  if (appMatch("License/*/*/Reinstatement", itemCap)) {
    
    var result = aa.cap.getProjectByChildCapID(itemCap, "R", null);

    if (result.getSuccess()) {
      licenseProjects = result.getOutput();
      if (licenseProjects != null && licenseProjects.length > 0) {
        licenseProject = licenseProjects[0];
        return licenseProject.getProjectID();
      }
    }
  }
  //End Part of CR 212 to determines the parent license capID
  logDebug("**WARNING: Could not find parent license Cap for child CAP(" + itemCap + "): ");
  return false;
}function getParentLicenseRecord(childAppID)
{
  //Get the Cap Type
  var capScriptModel = aa.cap.getCap(childAppID).getOutput();
  var capTypeModel = capScriptModel.getCapType();
  var recordType = capTypeModel.getCategory();
  
  //If cap is a renewal then retrieve the parent using aa.cap.getProjectByChildCapID()
  if(recordType == "Renewal")
  {
    var parentListResult = aa.cap.getProjectByChildCapID(childAppID,"Renewal",null);
    if(parentListResult.getSuccess())
    {
      var parentList = parentListResult.getOutput();
      if(parentList.length){
        parentPrj= parentList[0].getProjectID();
          parentCapId = aa.cap.getCapID(parentPrj.getID1(),parentPrj.getID2(),parentPrj.getID3()).getOutput();        
          return parentCapId;
      }
    }
    logDebug("Error Retrieving the Parent License Record for Child Record: "+childAppID+" "+parentListResult.getErrorMessage());
  }
  //Use aa.cap.getProjectParents() to retrieve the parent for non renewal records
  else
  {
    var i = 1;
    var parentListResult = aa.cap.getProjectParents(childAppID,i);
    if(parentListResult.getSuccess())
    {
      var parentList = parentListResult.getOutput();
      if (parentList.length)
        return parentList[0].getCapID();
    }
    else
    {
      logDebug("**WARNING: GetParent found no project parent for this application: "+childAppID+" "+parentListResult.getErrorMessage());
    }
  }
}
function getRefContactASITable(ipPeopleModel,ipASITGroupName,ipASITSubgroupName)
{
  var opTable = new Array();
  var fvTemplate = ipPeopleModel.getTemplate();
  if (!fvTemplate)
    return "ERROR: ASIT Template not found.";
  var fvASITGroups = fvTemplate.getTemplateTables();
  if (!fvASITGroups)
    return "ERROR: No ASIT Group found.";
  if (fvASITGroups.size() < 1)
    return  "ERROR: No ASIT Group found.";
  if (ipASITSubgroupName == null || ipASITSubgroupName == "")
    return  "ERROR: No ASIT Sub-Group provided.";
  var fvASITGroup = null;
  if (ipASITGroupName == null || ipASITGroupName == "")
  {
    fvASITGroup = fvASITGroups.get(0);
    ipASITGroupName = fvASITGroup.getGroupName();
  }
  else
  {
    for (var fvCounter1 = 0; fvCounter1 < fvASITGroups.size(); fvCounter1++)
    {
      if (fvASITGroups.get(fvCounter1).getGroupName() != ipASITGroupName)
        continue;
      fvASITGroup = fvASITGroups.get(fvCounter1);
    }
    if (fvASITGroup == null)
      return "ERROR: ASIT Group provided not found.";
  }
  var fvASITSubgroups = fvASITGroup.getSubgroups();
  if (!fvASITSubgroups)
    return "ERROR: No ASIT Sub-Group found.";
  if (fvASITSubgroups.size() < 1)
    return "ERROR: No ASIT Sub-Group found.";
  var fvASITSubgroup = null;
  for (var fvCounter1 = 0; fvCounter1 < fvASITSubgroups.size(); fvCounter1++)
  {
    if (fvASITSubgroups.get(fvCounter1).getSubgroupName() != ipASITSubgroupName)
      continue;
    fvASITSubgroup = fvASITSubgroups.get(fvCounter1);
  }
  if (fvASITSubgroup == null)
    return "ERROR: ASIT Sub-Group provided not found.";
        var fvRows = fvASITSubgroup.getRows();
        if (fvRows)
  {
    for (var fvCounter1 = 0; fvCounter1 < fvRows.size(); fvCounter1++)
    {
      var fvRow = fvRows.get(fvCounter1);
      var fvValues = fvRow.getValues();
      var fvTableRow = new Array();
      for (var fvCounter2 = 0; fvCounter2 < fvValues.size(); fvCounter2++)
      {
        var fvValueObj = fvValues.get(fvCounter2);
        var fvFieldName = fvValueObj.getFieldName();
        var fvValue = fvValueObj.getValue();        
        fvTableRow[fvFieldName] = fvValue;
      }
      opTable.push(fvTableRow);
    }
  }
  return opTable;
}

function getRefLicenseProf(refstlic) {
  var boardName = "";
  var licenseType = "";
  var licenseNumber = refstlic;

  if (arguments.length == 3) {
    boardName = arguments[1].toUpperCase();
    licenseType = arguments[2].toUpperCase();
  }

  if (isDPLLicenseFormat(refstlic)) {
    licenseNumber = getDPLLicenseNumber(refstlic).toString();
    var licNumberArray = refstlic.split("-");
    boardName = licNumberArray[1].toUpperCase();
    //added for defect 7782
    var userTC = licNumberArray[2].toUpperCase();
    //added to address issue in defect 2603
    if (licenseType != "" && licenseType != userTC) {
      logDebug("ERROR The license type passed by user is not matching with M1 or M2");
      return false;
    }
    licenseType = licNumberArray[2].toUpperCase();
  }
  //var boardNameold = getLegalBoardName(boardName);
  //logDebug("Searching Ref LP refstlic = " + licenseNumber +" boardcode = " + boardName + " licenseType = " + licenseType);

  var refLicNbr = retrieveSeqNbr(licenseNumber,licenseType,boardName);
  if((!refLicNbr)||(refLicNbr == undefined)){
    refLicNbr = getRefLicenseProfWithLicNbrAndTypeClass(licenseNumber,boardName,licenseType);
    if((!refLicNbr)||(refLicNbr == undefined)){
    logDebug("Error retrieving sequence number.");
    return false;
    }else{
    return refLicNbr;
    }
  }
  var seqNbr = 1* refLicNbr[0];
  var lpResult = aa.licenseScript.getRefLicenseProfBySeqNbr(aa.getServiceProviderCode(), seqNbr);
  if (!lpResult.getSuccess()) {
    logDebug("Error retrieving LP: " + lpResult.getErrorMessage());
       return false;
  }
  var refLicObj = null;
  refLicObj = lpResult.getOutput();
  //if we do not get a match, do a secondary check to look for LPs are part of converted duplicate data
  if (!refLicObj) {
    var mergedLicNum = licenseNumber + "-" + licenseType;
    //logDebug(mergedLicNum);
    var refLicenseResult2 = aa.licenseScript.getRefLicensesProfByLicNbr(aa.getServiceProviderCode(), mergedLicNum);
    if (!refLicenseResult2.getSuccess()) {
      logDebug("**ERROR retrieving Ref Lic Profs : " + refLicenseResult2.getErrorMessage());
      return false;
    } else {
      var newLicArray2 = refLicenseResult2.getOutput();
      if (!newLicArray2) {
        //logDebug("Ref Lic Prof not found in converted data.");
        //return null;
      }
      //logDebug("found a match in converted data");
      //made change to have the function look for the board code in the comments field and not the board name field.
      for (var thisLic in newLicArray2) {
        //logDebug("Match = " + newLicArray2[thisLic].getStateLicense() +" boardcode = " + newLicArray2[thisLic].getComment() + " licenseType = " + newLicArray2[thisLic].getBusinessLicense());
        if (mergedLicNum && mergedLicNum != null && mergedLicNum != ""
           && newLicArray2[thisLic] && newLicArray2[thisLic].getStateLicense() && mergedLicNum.toUpperCase().equals(newLicArray2[thisLic].getStateLicense().toUpperCase())
           && (boardName == "" || (newLicArray2[thisLic].getComment() && boardName.toUpperCase().equals(newLicArray2[thisLic].getComment().toUpperCase())))
           && (licenseType == "" || (newLicArray2[thisLic].getBusinessLicense() && licenseType.toUpperCase().equals(newLicArray2[thisLic].getBusinessLicense().toUpperCase())))) {
          refLicObj = newLicArray2[thisLic];
          logDebug("Ref Lic Prof found by using the comment field.");
          break;
        }
      }
    }
  }
  if (refLicObj) {
    //logDebug("Reference license returned: " + refLicObj.getStateLicense() +" boardcode = " + refLicObj.getLicenseBoard() + " licenseType = " + refLicObj.getBusinessLicense());
  } else {
    logDebug("no lp found");
  }
  return refLicObj;

}

function getSubGroup(template, subGroupName) {
    if (template == null) return false;
               if (template.getTemplateForms() == null) return false;
               var aGroups = template.getTemplateForms().toArray();
               for (var x in aGroups){
                              var sGroups = aGroups[x].getSubgroups().toArray();
                              for (var xx in sGroups) {
                                             if (sGroups[xx].getSubgroupName() == subGroupName){
                                                            return sGroups[xx];
                                             }
                              }
               }
               return false;
}
function getTaskAssignedTo(wfstr) // optional process name.
{
    var useProcess = false;
    var processName = "";
    if (arguments.length == 2) {
        processName = arguments[1]; // subprocess
        useProcess = true;
    }

    var workflowResult = aa.workflow.getTasks(capId);
    if (workflowResult.getSuccess()) {
        wfObj = workflowResult.getOutput();
        //logDebug("success")
    }
    else
    { logMessage("**ERROR: Failed to get workflow object: " + s_capResult.getErrorMessage()); return false; }

    for (i in wfObj) {
        var fTask = wfObj[i];
        if ((fTask.getTaskDescription().toUpperCase().equals(wfstr.toUpperCase()) || wfstr == "*") && (!useProcess || fTask.getProcessCode().equals(processName))) {
            // Added per Defect 3215 - get UserID from AssignedUser instead of using Name if available else lookup based on name if not null.
            var taskAssignUser = fTask.getTaskItem().getAssignedUser();
      var taskAssignuserDept = fTask.getTaskItem().getAssignedUser().getDeptOfUser();
            var taskAssignUserID = "";          // Default to Unassigned UserID.
            if (taskAssignUser != null) {
                taskAssignUserID = taskAssignUser.getUserID(); // Currently this returns "" so lookup based on name if available.
                var taskAssignUserFirstName = taskAssignUser.getFirstName();
                var taskAssignUserLastName = taskAssignUser.getLastName();
                var taskAssignUserMiddleName = taskAssignUser.getMiddleName();
                if (taskAssignUserID == "" && (taskAssignUserFirstName != null || taskAssignUserMiddleName != null || taskAssignUserLastName != null)) {
                    taskAssignUser = aa.person.getUser(taskAssignUserFirstName, taskAssignUserMiddleName, taskAssignUserLastName).getOutput();
                    if (taskAssignUser != null) taskAssignUserID = taskAssignUser.getUserID();
                }
            }
      else {
        //no user assigned, get the department assigned.
        var taskAssignUserID = taskAssignUser.getDeptOfUser();
        
      }
            logDebug("Task " + wfstr + " is assigned to : (" + taskAssignUserID + ") " + taskAssignUser);
            if (taskAssignUserID == "") return taskAssignuserDept;
            return taskAssignUserID;
            //  removed per Defect 3215.
            /*            var taskAssignUser = aa.person.getUser(fTask.getTaskItem().getAssignedUser().getFirstName(), fTask.getTaskItem().getAssignedUser().getMiddleName(), fTask.getTaskItem().getAssignedUser().getLastName()).getOutput();
            //var AssignedTo = aa.person.getUser(taskUserFirstName,taskUserMiddleName,taskUserLastName).getOutput();
            if (taskAssignUser != null) {
            //var taskUserFirstName = fTask.getTaskItem().getAssignedUser().getFirstName();
            //var taskUserLastName = fTask.getTaskItem().getAssignedUser().getLastName();
            //var taskUserMiddleName = fTask.getTaskItem().getAssignedUser().getMiddleName();
            // re-grabbing for userid.
            var AssignedTo = aa.person.getUser(fTask.getTaskItem().getAssignedUser().getFirstName(), fTask.getTaskItem().getAssignedUser().getMiddleName(), fTask.getTaskItem().getAssignedUser().getLastName()).getOutput();
            return AssignedTo.getUserID();
            }
            else {
            return false;
            }
            */
            // End Defect 3215.
        }
    }
}
function InlinePrint(reportToPrint, reportCapIdModel)
{

   var inlineReportModelResult = null;
   var inlineReportModelObj = null;
   var inlineURI = null;

   var inlineReportName = lookup("LKUP_Report_to_Inline_Correspondence", reportToPrint);
   if(inlineReportName == 'undefined')
   inlineReportName = null;

   if(inlineReportName)
   inlineReportModelResult = aa.reportManager.getReportModelByName(inlineReportName);
   if(inlineReportModelResult && inlineReportModelResult.getSuccess())
   inlineReportModelObj = inlineReportModelResult.getOutput();


   var inlineHashMap = aa.util.newHashMap();
   inlineHashMap.put("ALT_ID", String(reportCapIdModel.getCustomID()));

   if(inlineReportModelObj)
   inlineURI = aa.reportManager.runReport(inlineHashMap, inlineReportModelObj);

   if(inlineURI && inlineURI.getSuccess())
   {
      showMessage = true;
      aa.env.setValue("ScriptReturnCode", "0");
      aa.env.setValue("ScriptReturnMessage", inlineURI.getOutput());
   }
   else
   {
      showMessage = true;
      comment("<font color=red><b>Inline Correspondence associated with " + reportToPrint + "failed to generate.  Please notify administrator of the error.</b></font>");

   }

}
function isAddressModified(ipRenewalCapId,ipContact,ipContactAddress)
{
  var opModified = true;
  var fvParentCapID = getParentCapID4Renewal(ipRenewalCapId);
  if (fvParentCapID)
  {
    var fvParentContactsResult = aa.people.getCapContactByCapID(fvParentCapID);
    if (fvParentContactsResult && fvParentContactsResult.getSuccess())
    {
      var fvParentContacts = fvParentContactsResult.getOutput();
      if (fvParentContacts && fvParentContacts.length > 0)
      {
        for (var fvCounter1 in fvParentContacts)
        {
          var fvParentContact = fvParentContacts[fvCounter1];
          if (fvParentContact.getCapContactModel().refContactNumber == ipContact.refContactNumber)
          {
            var fvAddressesResult = aa.address.getContactAddressListByCapContact(fvParentContact.getCapContactModel());
            if (fvAddressesResult && fvAddressesResult.getSuccess())
            {
              var fvAddresses = fvAddressesResult.getOutput();
              if (fvAddresses && fvAddresses.length > 0)
              {
                for (var fvCounter2 in fvAddresses)
                {
                  var fvAddress = fvAddresses[fvCounter2];
                  if (fvAddress.addressID == ipContactAddress.addressID)
                  {
                    var fvSame = compareAddresses(fvAddress,ipContactAddress);
                    opModified = !fvSame;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return opModified;
}
/*
 * Program: ASB;License!Sheet Metal!Permit!NA.js
 * Event: ASA
 *
 * ASI: Applicant License #
 * Then validate that the license is in an Active status
 * 1. Validate that the license is in an Active status
 *
 */
function isApplicantLicenseActive(appLicNum, boardName) {
   var isLicenseActive = true;
   var licProfObj = getRefLicenseProf(appLicNum);
   var smjLicProfObj = getRefLicenseProf(appLicNum, boardName, "Sheet Metal Journeyperson");
   var smmLicProfObj = getRefLicenseProf(appLicNum, boardName, "Sheet Metal Master");

   if (smjLicProfObj) {
     // if (smjLicProfObj.getAuditStatus() == "I") {
  if (smjLicProfObj.getWcExempt() == "N") {     
    isLicenseActive = false;
      }
   } else if (smmLicProfObj) {
    // if (smmLicProfObj.getAuditStatus() == "I") {
     if (smmLicProfObj.getWcExempt() == "N") { 
    isLicenseActive = false;
      }
   }
   
   if (licProfObj) {
      if (matches(licProfObj.getLicenseType(), "Sheet Metal Journeyperson", "Sheet Metal Master")) {
        // if (licProfObj.getAuditStatus() == "I") {
         if (licProfObj.getWcExempt() == "N") { 
      isLicenseActive = false;
         }
      } else {
         logDebug("Invalid License Type");
         isLicenseActive = false;
      }
   } else {
      isLicenseActive = false;
   }

   return isLicenseActive;
}
/*
 * Program: ASB;License!Sheet Metal!Permit!NA.js
 * Event: ASA
 *
 * ASI: Business License #
 * If the business license # is supplied
 * Then validate that the license is in an Active status
 *
 */
function isBusinessLicenseActive(busLicNum, boardName) {
   var isLicenseActive = true;
   var licProfObj = getRefLicenseProf(busLicNum, boardName, "Business License");
   
   if (licProfObj) {
         //if (licProfObj.getAuditStatus() == "I") {
     if (licProfObj.getWcExempt() == "N") { 
      isLicenseActive = false;
         }
   } else {
      isLicenseActive = false;
   }
   
   return isLicenseActive;
}
function isCapIDInSet(ipSetName,ipCapID)
{
  var fvSetMembersQry = aa.set.getCAPSetMembersByPK(ipSetName);
  if (fvSetMembersQry && fvSetMembersQry.getSuccess()) {
    var fvSetMembers = fvSetMembersQry.getOutput();
    if (fvSetMembers) {
      if (fvSetMembers.contains(ipCapID))
        return true;
    }
  }
  return false;
}
function isDPLLicenseFormat(thisCustomID) {
  var re = /^\d+-[a-zA-Z0-9]{2}-[a-zA-Z0-9]{1,5}$/;
  return re.test(thisCustomID);
}
function isExamApproved() {
   var examExists = false;
   var id1 = capId.ID1; 
   var id2 = capId.ID2; 
   var id3 = capId.ID3; 
   var capIDScriptModel = aa.cap.createCapIDScriptModel(id1, id2, id3); 
   examList = aa.examination.getExaminationList(capIDScriptModel); 
   if (examList.getSuccess()){
      schedExams = examList.getOutput();
      if (schedExams.length > 0) {
         for (i in schedExams){
            var thisExam = schedExams[i].getExaminationModel();

            logDebug("ApprovedFlag: " + thisExam.getApprovedFlag());
            if (thisExam.getApprovedFlag() == "Y") {
               examExists = true;
               break;
            }
         }
      }
   }

    return examExists;
}
function isInList(ipList,ipString)
{
  var fvDelim = ",";
  if (arguments.length > 2)
    fvDelim = arguments[2];
  var  fvIgnoreCase = false;
  if (arguments.length > 3)
    fvIgnoreCase = arguments[3];
  var fvString = ipString;
  if (fvIgnoreCase)
    fvString = fvString.toUpperCase();
  var fvArray = ipList.split(fvDelim);
  var fvFound = false;
  for (var fvIndex in fvArray)
  {
    var fvElement = fvArray[fvIndex];
    if (fvIgnoreCase)
      fvElement = fvElement.toUpperCase();
    if (fvElement == fvString)
    {
      fvFound = true;
      break;
    }
  }
  return fvFound;
}
function isInstructorLicenseActive() {
  var thisCapId = null;
  if (typeof(capId) != undefined)
    thisCapId = capId;
  if (arguments.length > 0)
    thisCapId = arguments[0];
  if (!thisCapId)
    return false;

  useAppSpecificGroupName = false;
  var instructorLicenseActive = false;
  var isASIMatch = false;
  var licenseBoard = getBoard(thisCapId);
  var ASILicense = getAppSpecific("License Number",thisCapId);

  var lps = aa.licenseProfessional.getLicensedProfessionalsByCapID(thisCapId).getOutput();
  for (var i in lps)
  {
    var lp = lps[i];
    var licenseNbr =  lp.getLicenseNbr();
    var isActive = isLicenseActive(licenseNbr, licenseBoard, "I");
    if (isActive)
    {
      instructorLicenseActive = true;
      if (ASILicense == licenseNbr)
      {
        isASIMatch = true;
        break;
      }
    }
  }
  if (instructorLicenseActive && !isASIMatch)
  {
    editAppSpecific("License Number", licenseNbr, thisCapId);
  }
  return instructorLicenseActive; 
}function isLicenseActive(licenseNum, boardName, licenseType) {
   var isLicenseActive = true;
   var licProfObj = getRefLicenseProf(licenseNum, boardName, licenseType);
   
   if (licProfObj) {
      //if (licProfObj.getAuditStatus() == "I") {
     if (licProfObj.getWcExempt() == "N") {  
         isLicenseActive = false;
      }
   } else {
      isLicenseActive = false;
   }

   return isLicenseActive;
}
function isMasterLicenseActive() // Optional Parameter for CapID
{
  var fvCapID = null;
  if (typeof(capId) != undefined)
    fvCapID = capId;
  if (arguments.length > 0)
    fvCapID = arguments[0];
  if (!fvCapID)
    return false;

  useAppSpecificGroupName = false;
  var fvMasterLicenseActive = false;
  var fvASIMatch = false;
  var fvBoard = getBoard(fvCapID);
  var fvASILicense = getAppSpecific("License Number",fvCapID);

  var fvCapIDLicenseProfessionals = aa.licenseProfessional.getLicensedProfessionalsByCapID(fvCapID).getOutput();
  for (var fvCounter in fvCapIDLicenseProfessionals)
  {
    var fvCapIDLicenseProfessional = fvCapIDLicenseProfessionals[fvCounter];
    var fvLicenseNbr =  fvCapIDLicenseProfessional.getLicenseNbr();
    //release b - adding if statement to only use M1 and M2 type class for SM. all other license masters use M as type class
    if(fvBoard=="SM") {
      var fvActive = isLicenseActive(fvLicenseNbr, fvBoard, "M1");
      if (!fvActive)
        fvActive = isLicenseActive(fvLicenseNbr, fvBoard, "M2");  
    } 
    else if(fvBoard=="EL") {
      var fvActive = isLicenseActive(fvLicenseNbr, fvBoard, "A");
      if (!fvActive)
        fvActive = isLicenseActive(fvLicenseNbr, fvBoard, "MR");        
    }
    else {
      var fvActive = isLicenseActive(fvLicenseNbr, fvBoard, "M");
    }
    if (fvActive)
    {
      fvMasterLicenseActive = true;
      if (fvASILicense == fvLicenseNbr)
      {
        fvASIMatch = true;
        break;
      }
    }
  }
  if (fvMasterLicenseActive && !fvASIMatch)
  {
    editAppSpecific("License Number", fvLicenseNbr, fvCapID);
  }
  return fvMasterLicenseActive;
}

//Compare for the proper function
function isMatchedNotice(contactCondArray, type, description, conditionNumber) {
    var returnCond = null;
    var now = new Date();
    for (var conCond in contactCondArray) {
        var r = contactCondArray[conCond];
        if (r.description == description && r.type == type && (r.conditionNumber == conditionNumber || conditionNumber == -1)) {
            //if (r.statusType == "Applied") {                                                                                    
        returnCond = r;
                break;
            //}
        }
    }
    return returnCond;
} 
 
/*
 *
 * This function is used to check whether a record has a violation
 * by checking the Assess Fine checkbox.
 * 
 */
function isRecordHasViolations() {
   var hasViolations = false;
   var inspectionObj = aa.inspection.getInspections(capId);
   if (inspectionObj.getSuccess()) {
      var inspectionList = inspectionObj.getOutput();

      for (i in inspectionList) {
         aa.print("Found inspection");
         var inspectionModel = inspectionList[i].getInspection();
         guideSheets = inspectionModel.getGuideSheets();
         if (guideSheets) {
            var fineAmountTotal = 0.0;
            for (var j=0; j<guideSheets.size(); j++) {
               var gsObj = guideSheets.get(j);
               var items = gsObj.getItems();                  
               for (var k=0; k< items.size(); k++) {
                  var item = items.get(k);
                  var asiSubGroups = item.getItemASISubgroupList();
                  if (asiSubGroups) {
         for (var l=0; l<asiSubGroups.size(); l++) {
                        var asiSubGroup = asiSubGroups.get(l);
                        if (asiSubGroups) {
                           for (var l=0; l<asiSubGroups.size(); l++) {
                              var asiSubGroup = asiSubGroups.get(l);
                              if (asiSubGroup) {
                                 var asiModels = asiSubGroup.getAsiList();
                     if (asiModels) {
                                    var fineAmount = null;
                                    for (var m=0; m<asiModels.size(); m++) {
                                       var asiModel = asiModels.get(m);
                                       if (asiModel) {
                                          if  (asiModel.getAsiName() == "Assess Fine" && asiModel.getAttributeValue() == "CHECKED") {
                                             hasViolations = true;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   }

   return hasViolations;
}
function isRenewalMasterLicenseActive() // Optional Parameter for CapID
{
  var fvCapID = null;
  if (typeof(capId) != undefined)
    fvCapID = capId;
  if (arguments.length > 0)
    fvCapID = arguments[0];
  if (!fvCapID)
    return false;

  var fvActive = false;
  //Get the Parent License Cap ID
  var fvParentCapID = getParentLicenseCapID(fvCapID);
  if (fvParentCapID)
    fvActive = isMasterLicenseActive(fvParentCapID);
  return fvActive;
}

function issueLicense(capId) {
  var thisCap = aa.cap.getCap(capId).getOutput();
  var thisCapType = thisCap.getCapType().toString();
  var contactType = lookup("Lookup:CONTACT TYPE DEFAULT", thisCapType);
  var reportName = "";
  var licHolderType = lookup("Lookup:CONTACT LICENSE HOLDER TYPE", thisCapType);

  if (matches(licHolderType, null, "", undefined)) licHolderType = "Licensed Individual";
  if (matches(contactType, null, "", undefined)) contactType = "Applicant";
    if(appMatch("License/Real Estate/School/Application")){
    updateAppStatus("Completed", "Updated via Script", capId);
    closeTask("Issuance", "Completed", "", "");
  }
  else{
    updateAppStatus("Ready for Printing", "Updated via Script", capId);
  }

  logDebug("contactType :" + contactType);
  logDebug("licHolderType :" + licHolderType);

  //if this is a RA course, do not create the LP. all other records create an LP
  if(appMatch("License/Real Estate Appraiser/Course/Primary Course Application") || appMatch("License/Occupational Schools/Program-Course/Application") || appMatch("License/Real Estate Appraiser/Course/CE Course Application") || appMatch("License/Real Estate Appraiser/Course/Seminar Course Application") || appMatch("License/Real Estate Appraiser/Course/USPAP Course Application")) {
  newLicId = createLicense("Current", true, false, contactType, true, licHolderType);
  }
  else {
  newLicId = createLicense("Current", true, true, contactType, true, licHolderType);
  }
  logDebug("New License Object :" + newLicId);
  logDebug("Custom ID :" + newLicId.getCustomID());
  var srcCapId = capId;

  if (newLicId) {
    var fvShortNotes = getShortNotes(capId);
    updateShortNotes(fvShortNotes,newLicId);
      if(appMatch("License/Public Accountancy/CPA Firm for Business Corp/Application")){
      CWM_ELP_DPL_229_CopyASITtoLic(newLicId);
    }  
    //if ((appMatch("License/Sheet Metal/*/Application", capId)) || (appMatch("License/Veterinarian/*/Application", capId)))
    /*{
      if (!appMatch("License/Veterinarian/Tufts Individual/Application", capId))
      {
        calculateDPLExpirationDate(newLicId);
      }
      //Add license to set
      addTransLictoSet(newLicId);
    }
    else
    {
      setLicExpirationDate(newLicId);
    }*/
    //createRefLP4Lookup(newLicId);
                   //copyContacts(capId, newLicId);
                   //copyContactsByType(capId,newLicId,"Applicant");
                   //logDebug("Contact Copied Successfully");
                   
    setContactsSyncFlag("N", newLicId);

    var appCreatedBy = cap.getCapModel().getCreatedBy();

    if (appCreatedBy)
      editCreatedBy(appCreatedBy, newLicId);

    // sendLicenseIssuedNotification();
    // addToLicensePrintSet(newLicId);
    
    /*
                  RTC#12282, debashish.barik, dt:6/6/2016
     Desc: Occupational Schools_Occupational School Application to be added to the set DPL|OS_LICENSE_CERT|W|[Date].
    */
    if (appMatch("License/Occupational Schools/*/Application")) {
      reportName = "DPL|OS_LICENSE_CERT";
    } else {
      reportName = "DPL|LICENSE_REGISTRATION_CARD"; //Defect 11054
    }
    if(!appMatch("License/Real Estate Appraiser/Course/Primary Course Application") && !appMatch("License/Occupational Schools/Program-Course/Application") && !appMatch("License/Real Estate Appraiser/Course/CE Course Application") && !appMatch("License/Real Estate Appraiser/Course/Seminar Course Application") && !appMatch("License/Real Estate Appraiser/Course/USPAP Course Application")&& !appMatch("License/Real Estate/School/Application") && !appMatch("License/Real Estate/Instructor/Application") && !appMatch("License/Engineers and Land Surveyors/Temporary Permit/Application") && !appMatch("License/Engineers and Land Surveyors/Engineer In Training/Application") && !appMatch("License/Engineers and Land Surveyors/Land Surveyor In Training/Application")&& !appMatch("License/Real Estate Appraiser/Temporary Appraiser/Application") && !appMatch("License/Barbers/Assistant Instructor/Application") && !appMatch("License/Funeral Directors/Funeral Establishment/Application")&& !appMatch("License/Cosmetology/Jr Instructor/Application")&& !appMatch("License/Veterinarian/Tufts Individual/Application"))
    {
      callReport(reportName, false, true,"DPL License Print Set");
                }
  }
  return newLicId;
}



function licenseObject(licnumber) // optional renewal Cap ID -- uses the expiration on the renewal CAP.
{
        logDebug("licnumber : "+licnumber);
  itemCap = capId;
  if (arguments.length == 2)
    itemCap = arguments[1]; // use cap ID specified in args

  this.refProf = null; // licenseScriptModel (reference licensed professional)
  this.b1Exp = null; // b1Expiration record (renewal status on application)
  this.b1ExpDate = null;
  this.b1ExpCode = null;
  this.b1Status = null;
  this.refExpDate = null;
  this.licNum = licnumber; // License Number

  // Load the reference License Professional if we're linking the two
  if (licnumber) // we're linking
  {
    var newLic = getRefLicenseProf(licnumber)
      if (newLic) {
        this.refProf = newLic;
        tmpDate = newLic.getLicenseExpirationDate();
        if (tmpDate)
          this.refExpDate = tmpDate.getMonth() + "/" + tmpDate.getDayOfMonth() + "/" + tmpDate.getYear();
        logDebug("Loaded reference license professional with Expiration of " + this.refExpDate);
      }
  }
  // Load the renewal info (B1 Expiration)
  b1ExpResult = aa.expiration.getLicensesByCapID(itemCap)
    if (b1ExpResult.getSuccess()) {
      this.b1Exp = b1ExpResult.getOutput();
      tmpDate = this.b1Exp.getExpDate();
      if (tmpDate)
        this.b1ExpDate = tmpDate.getMonth() + "/" + tmpDate.getDayOfMonth() + "/" + tmpDate.getYear();
      this.b1Status = this.b1Exp.getExpStatus();
      logDebug("Found renewal record of status : " + this.b1Status + ", Expires on " + this.b1ExpDate);
    } else {
      logDebug("**ERROR: Getting B1Expiration Object for Cap.  Reason is: " + b1ExpResult.getErrorType() + ":" + b1ExpResult.getErrorMessage());
      return false
    }
    this.setExpiration = function (expDate)
  // Update expiration date
  {
    var expAADate = aa.date.parseDate(expDate);
    if (this.refProf) {
      this.refProf.setLicenseExpirationDate(expAADate);
      aa.licenseScript.editRefLicenseProf(this.refProf);
      logDebug("Updated reference license expiration to " + expDate);
      //Sagar : EPLACE-2359 : Syncing of B3CONTRA and RSTATE_LIC table for ACA Event scripts
      var licenseRecordId = aa.cap.getCapID(itemCap.getID1(), itemCap.getID2(), itemCap.getID3()).getOutput().getCustomID();

      if (licenseRecordId) {
        logDebug("licenseRecordId # " + licenseRecordId)
        var scanner = licenseRecordId.split("-");
        var b1LicNbr = scanner[0];
        var boardCode = scanner[1];
        var typeClass = scanner[2];

        var capLpsB3contra = getLicenseProfessional(itemCap);
        for (var thisCapLpNum in capLpsB3contra) {
          var licenseProfessionalScriptModel = capLpsB3contra[thisCapLpNum];

          var licNbrB3contra = capLpsB3contra[thisCapLpNum].getLicenseNbr();
          var boardCodeB3contra = capLpsB3contra[thisCapLpNum].getComment();
          var typeClassB3Contra = capLpsB3contra[thisCapLpNum].getBusinessLicense();

          if (((b1LicNbr == licNbrB3contra) && (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra)) ||
            ((b1LicNbr + "-" + typeClass == licNbrB3contra + "-" + typeClassB3Contra) &&
              (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra))) {

            var infoTableGroupCodeModel = licenseProfessionalScriptModel.getInfoTableGroupCodeModel();
            infoTableGroupCodeModel.setCapId1(itemCap.getID1());
            infoTableGroupCodeModel.setCapId2(itemCap.getID2());
            infoTableGroupCodeModel.setCapId3(itemCap.getID3());

            licenseProfessionalScriptModel.setInfoTableGroupCodeModel(infoTableGroupCodeModel);

            licenseProfessionalScriptModel.setAgencyCode(aa.getServiceProviderCode());
            licenseProfessionalScriptModel.setAuditStatus("A");
            licenseProfessionalScriptModel.setCapID(itemCap);
            licenseProfessionalScriptModel.setLastUpdateDate(sysDate);
            if (expAADate) {
              licenseProfessionalScriptModel.setLicenseExpirDate(expAADate);
            }

            var result = aa.licenseProfessional.editLicensedProfessional(licenseProfessionalScriptModel);
            if (result.getSuccess()) {
              logDebug("license professional in B3CONTRA table updated successfully ");
            } else {
              logDebug("license professional in B3CONTRA table updated successfully ?  " + result.getErrorMessage());
            }
          }
        }
      }

    }
    if (this.b1Exp) {
      this.b1Exp.setExpDate(expAADate);
      aa.expiration.editB1Expiration(this.b1Exp.getB1Expiration());
      logDebug("Updated renewal to " + expDate);
    }
  }
  this.setIssued = function (expDate)
  // Update Issued date
  {
    var expAADate = aa.date.parseDate(expDate);
    if (this.refProf) {
      this.refProf.setLicenseIssueDate(expAADate);
      aa.licenseScript.editRefLicenseProf(this.refProf);
      logDebug("Updated reference license issued to " + expDate);
      //Sagar : EPLACE-2359 : Syncing of B3CONTRA and RSTATE_LIC table for ACA Event scripts
      var licenseRecordId = aa.cap.getCapID(itemCap.getID1(), itemCap.getID2(), itemCap.getID3()).getOutput().getCustomID();

      if (licenseRecordId) {
        logDebug("licenseRecordId_2 # " + licenseRecordId)
        var scanner = licenseRecordId.split("-");
        var b1LicNbr = scanner[0];
        var boardCode = scanner[1];
        var typeClass = scanner[2];

        var capLpsB3contra = getLicenseProfessional(itemCap);
        for (var thisCapLpNum in capLpsB3contra) {
          var licenseProfessionalScriptModel = capLpsB3contra[thisCapLpNum];

          var licNbrB3contra = capLpsB3contra[thisCapLpNum].getLicenseNbr();
          var boardCodeB3contra = capLpsB3contra[thisCapLpNum].getComment();
          var typeClassB3Contra = capLpsB3contra[thisCapLpNum].getBusinessLicense();

          if (((b1LicNbr == licNbrB3contra) && (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra)) ||
            ((b1LicNbr + "-" + typeClass == licNbrB3contra + "-" + typeClassB3Contra) &&
              (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra))) {

            var infoTableGroupCodeModel = licenseProfessionalScriptModel.getInfoTableGroupCodeModel();
            infoTableGroupCodeModel.setCapId1(itemCap.getID1());
            infoTableGroupCodeModel.setCapId2(itemCap.getID2());
            infoTableGroupCodeModel.setCapId3(itemCap.getID3());

            licenseProfessionalScriptModel.setInfoTableGroupCodeModel(infoTableGroupCodeModel);

            licenseProfessionalScriptModel.setAgencyCode(aa.getServiceProviderCode());
            licenseProfessionalScriptModel.setAuditStatus("A");
            licenseProfessionalScriptModel.setCapID(itemCap);
            licenseProfessionalScriptModel.setLastUpdateDate(sysDate);
            licenseProfessionalScriptModel.setLicesnseOrigIssueDate(sysDate);

            var result = aa.licenseProfessional.editLicensedProfessional(licenseProfessionalScriptModel);
            if (result.getSuccess()) {
              logDebug("license professional in B3CONTRA table updated successfully ");
            } else {
              logDebug("license professional in B3CONTRA table updated successfully ?  " + result.getErrorMessage());
            }
          }
        }
      }

    }
  }
  this.setLastRenewal = function (expDate)
  // Update expiration date
  {
    var expAADate = aa.date.parseDate(expDate)
      if (this.refProf) {
        this.refProf.setLicenseLastRenewalDate(expAADate);
        aa.licenseScript.editRefLicenseProf(this.refProf);
        logDebug("Updated reference license issued to " + expDate);
        //Sagar : EPLACE-2359 : Syncing of B3CONTRA and RSTATE_LIC table for ACA Event scripts
        var licenseRecordId = aa.cap.getCapID(itemCap.getID1(), itemCap.getID2(), itemCap.getID3()).getOutput().getCustomID();

        if (licenseRecordId) {
          logDebug("licenseRecordId_3 # " + licenseRecordId)
          var scanner = licenseRecordId.split("-");
          var b1LicNbr = scanner[0];
          var boardCode = scanner[1];
          var typeClass = scanner[2];

          var capLpsB3contra = getLicenseProfessional(itemCap);
          for (var thisCapLpNum in capLpsB3contra) {
            var licenseProfessionalScriptModel = capLpsB3contra[thisCapLpNum];

            var licNbrB3contra = capLpsB3contra[thisCapLpNum].getLicenseNbr();
            var boardCodeB3contra = capLpsB3contra[thisCapLpNum].getComment();
            var typeClassB3Contra = capLpsB3contra[thisCapLpNum].getBusinessLicense();

            if (((b1LicNbr == licNbrB3contra) && (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra)) ||
              ((b1LicNbr + "-" + typeClass == licNbrB3contra + "-" + typeClassB3Contra) &&
                (boardCode == boardCodeB3contra) && (typeClass == typeClassB3Contra))) {

              var infoTableGroupCodeModel = licenseProfessionalScriptModel.getInfoTableGroupCodeModel();
              infoTableGroupCodeModel.setCapId1(itemCap.getID1());
              infoTableGroupCodeModel.setCapId2(itemCap.getID2());
              infoTableGroupCodeModel.setCapId3(itemCap.getID3());

              licenseProfessionalScriptModel.setInfoTableGroupCodeModel(infoTableGroupCodeModel);

              licenseProfessionalScriptModel.setAgencyCode(aa.getServiceProviderCode());
              licenseProfessionalScriptModel.setAuditStatus("A");
              licenseProfessionalScriptModel.setCapID(itemCap);
              licenseProfessionalScriptModel.setLastUpdateDate(sysDate);
              licenseProfessionalScriptModel.setLastRenewalDate(sysDate);

              var result = aa.licenseProfessional.editLicensedProfessional(licenseProfessionalScriptModel);
              if (result.getSuccess()) {
                logDebug("license professional in B3CONTRA table updated successfully ");
              } else {
                logDebug("license professional in B3CONTRA table updated successfully ?  " + result.getErrorMessage());
              }
            }
          }
        }
      }
  }
  this.setStatus = function (licStat)
  // Update expiration status
  {
    if (this.b1Exp) {
      this.b1Exp.setExpStatus(licStat);
      aa.expiration.editB1Expiration(this.b1Exp.getB1Expiration());
      logDebug("Updated renewal to status " + licStat);
    }
  }
  this.getStatus = function ()
  // Get Expiration Status
  {
    if (this.b1Exp) {
      return this.b1Exp.getExpStatus();
    }
  }
  this.getCode = function ()
  // Get Expiration Status
  {
    if (this.b1Exp) {
      return this.b1Exp.getExpCode();
    }
  }
}
function loadASITables4ACA_Custom() {
  //
  // Loads App Specific tables into their own array of arrays.  Creates global array objects
  //
  // Optional parameter, cap ID to load from.  If no CAP Id specified, use the capModel
  //
  var itemCap = capId;
  if (arguments.length == 1) {
    itemCap = arguments[0]; // use cap ID specified in args
    var gm = aa.appSpecificTableScript.getAppSpecificTableGroupModel(itemCap).getOutput();
  } else {
    var gm = cap.getAppSpecificTableGroupModel()
  }
  var ta = gm.getTablesMap();
  var tai = ta.values().iterator();
   while (tai.hasNext()) {
    var tsm = tai.next();
    if (tsm.rowIndex.isEmpty())
      continue; // empty table
    var tempObject = new Array();
    var tempArray = new Array();
    var tn = tsm.getTableName();
    tn = String(tn).replace(/[^a-zA-Z0-9]+/g, '');
    if (!isNaN(tn.substring(0, 1)))
      tn = "TBL" + tn // prepend with TBL if it starts with a number
        var tsmfldi = tsm.getTableField().iterator();
    var tsmcoli = tsm.getColumns().iterator();
    var numrows = 1;
  /*  while (tsmfldi.hasNext()) // cycle through fields
    {
      if (!tsmcoli.hasNext()) // cycle through columns
      {
        var tsmcoli = tsm.getColumns().iterator();
        tempArray.push(tempObject); // end of record
        var tempObject = new Array(); // clear the temp obj
        numrows++;
      }
      var tcol = tsmcoli.next();
      var tval = tsmfldi.next().getInputValue();
      tempObject[tcol.getColumnName()] = tval;
    }*/
    tempArray.push(tempObject); // end of record
    var copyStr = "" + tn + " = tempArray";
    logDebug("ASI Table Array : " + tn + " (" + numrows + " Rows)");
    eval(copyStr); // move to table name
  } 
}

/* ------------------------------------------------------------------------------------------------------ /
| accepts 2 parameters (altId and Condition description) and returns true if the condition is applied to the LP
| and returns false if the condition does not exist.
/ ------------------------------------------------------------------------------------------------------ */
function lpHasCondition(vAltID, vCondDesc){
//get the reference LP 
var vCondFound = false;

  var refLP = getRefLicenseProf(vAltID);
  logDebug("Checking for conditions on LP: " + refLP);
  if (!refLP){
    return false;
  }
  //Get Conditions on the license
  condArr = aa.caeCondition.getCAEConditions(refLP.getLicSeqNbr()).getOutput();
  
  //loop thru the conditions applied and look for an applied condition with the condition description passed into the function
  for (c in condArr)
  {
    if(condArr[c].getConditionStatus() == "Applied" && condArr[c].getConditionDescription() == vCondDesc){
      logDebug("Found condition " + vCondDesc + " on LP " + vAltID);
      vCondFound = true;
    }
  }
  
return vCondFound;
}
function peopleDuplicateCheck(ipPeop)
{
  // This function uses the close match criteria stored in the
  // INDIVIDUAL_CONTACT_MATCH_CRITERIA and ORGANIZATION_CONTACT_MATCH_CRITERIA standard choices to check the reference
  // contact library for potential duplicates
  // takes a single peopleModel as a parameter, and will return an array of people models (peopResult)
  // returns null if there are no matches

  var fvContType = ipPeop.getContactType();

  var fvCriteriaStdChoice = "INDIVIDUAL_CONTACT_MATCH_CRITERIA";
  // default to individual unless flag is Org
  if (fvContType == "Organization")
  {
    fvCriteriaStdChoice = "ORGANIZATION_CONTACT_MATCH_CRITERIA";
  }
  if (lookup("REF_CONTACT_CREATION_RULES",fvContType) == "O")
  {
    fvCriteriaStdChoice = "ORGANIZATION_CONTACT_MATCH_CRITERIA";
  }

  //Add agency specific logic here if needed
  var fvBizDomainSR = aa.bizDomain.getBizDomain(fvCriteriaStdChoice);
  if (!fvBizDomainSR || !fvBizDomainSR.getSuccess())
  {
    logDebug("Standard Choice '" + fvCriteriaStdChoice + "' not defined.");
    return null;
  }
  var fvBizDomain = fvBizDomainSR.getOutput();
  if (!fvBizDomain || fvBizDomain.size() == 0)
  {
      logDebug("No criteria defined in Standard Choice '" + fvCriteriaStdChoice + "'.");
      return null;
  }

  for(var fvCounter1 = 0; fvCounter1 < fvBizDomain.size(); fvCounter1++)
  {
    var fvCloseMatchCriteriaObj = fvBizDomain.get(fvCounter1);
    var fvCriteriaStr = fvCloseMatchCriteriaObj.getDispBizdomainValue();
    if (!fvCriteriaStr || fvCriteriaStr == "")
      continue;

    var fvPeop = aa.people.createPeopleModel().getOutput().getPeopleModel();

    var fvCriteriaArr = fvCriteriaStr.split(";");

    var fvSkipThisCriteria = false;
    for (var fvCounter2 in fvCriteriaArr)
    {
       var fvCriteriaFld = fvCriteriaArr[fvCounter2];
       if (ipPeop[fvCriteriaFld] == null)
       {
         fvSkipThisCriteria = true;
         logDebug("Value for " + fvCriteriaFld + " is null.");
         break;
       }
       fvPeop[fvCriteriaFld] = ipPeop[fvCriteriaFld];
       logDebug("Search for " + fvCriteriaFld + " " + fvPeop[fvCriteriaFld]);
    }

    if (fvSkipThisCriteria)
    {
      logDebug("WARNING: One or more Values for the Fields defined in this Criteria are null. Skipping this criteria.");
      continue;
    }

    var fvResult = aa.people.getPeopleByPeopleModel(fvPeop);
    if ( !fvResult.getSuccess())
    {
      logDebug("WARNING: Error searching for duplicate contacts : " + fvResult.getErrorMessage());
      continue;
    }

    var fvPeopResult = fvResult.getOutput();
    if (fvPeopResult.length == 0)
    {
      logDebug("Searched for REF contact, no matches found.");
      continue;
    }

    if (fvPeopResult.length > 0)
    {
      logDebug("Searched for a REF Contact, " + fvPeopResult.length + " matches found! returning the first match : " + fvPeopResult[0].getContactSeqNumber());
      return fvPeopResult[0].getContactSeqNumber();
    }
  }
  logDebug("No matches found. Returning Null.");
  return null;
}
/*
 * Function used in renewals batch processing
 *
 */

 /*function processRenewal*/
function processRenewal(thisCapId) {
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = thisCapId;
    } else {
        capId = thisCapId;
    }

    var message = "Process Renewal - " + capId.getCustomID() + " - ";
    logDebug(message + " in processRenewal function.");
    //var lockBoxBatch = getAppSpecific("Lockbox Batch");

    if (CWM_ELP_71_DPL_SA_lapsedLicenseCheck(capId)) {


        // Defect 5510
        var lockBoxBatch = isPaymentDonebyLockbox(capId);

        // Do the renewal without attestation checking if the renewal comes from LockBox.
        if (lockBoxBatch && lockBoxBatch != null && lockBoxBatch != "") {
            logDebug("**INFO: Renewal from LockBox - Validate Approved.");
            //JIRA 2421 : Do not validate attestation question if renewal coming from Lockbox.
            /*if(appMatch("License/Massage Therapy/Multiple Massage Establishment/Renewal",capId)){
              CWM_ELP_DPL_validateMTCO();
            }*/
            //add a check for RE B and S. if the current status is lapsed and they do not have a workflow history, and the asi "i am renewing as" is not set, then put the record in validate task and do not approve
            if (CWM_ELP_6980_Lockbox_RE_check(capId) && validatePTCOLockbox(capId) && validateCORLockbox(capId)) {
                if (renewalApproval(capId)) {
                    closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                    closeTask("Reinstate", "Approved", "Updated via script.", "Updated via script.");
                    activateTask("Issuance");
                    updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
                    logDebug(message + "Approved");
                }
            } else {
                closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                activateTask("Validate");
                updateTask("Validate", "Under Review", "Unable to determine license status", "Unable to determine license status");
                logDebug(message + "Not Approved");

            }
        } else {
            // else do attestation checking and apply rules.
            if (appMatch("License/Sheet Metal/*/Renewal", capId)) {
                if (renewSheetMetalLicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            } else if (appMatch("License/Veterinarian/*/Renewal", capId)) {
                if (renewVeterinarianLicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            //defect 3717
            else if (appMatch("License/Real Estate/*/Renewal", capId)) {
                if (CWM_ELP_Defect_3717_DPL_CRCA_renewRESalespersonLicense(capId)) {
                    // For RE Broker only, copy Affiliated Broker contact to license on approval
                    if (appMatch("License/Real Estate/Broker/Renewal", capId)) {
                        var licCapId = getParentCapID4Renewal();
                        copyContactsByTypeWithAddress(capId, licCapId, "Affiliated Broker");
                    }
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            //end defect 3717
            //defect 4802
            else if (appMatch("License/Plumbers and Gas Fitters/Journeyman/Renewal", capId) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Apprentice/Renewal", capId) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Journeyperson/Renewal", capId) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Master/Renewal", capId) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Business/Renewal", capId)) {
                if (CWM_ELP_Defect_4802_DPL_renewGFLicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            // script 83 : Neel Patel
            else if (appMatch("License/Public Accountancy/CPA Firm License for LLP/Renewal", capId)) {
                if (CWM_ELP_ASA_pubAcctcyUpdateWorkflowitem(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            }

            //end defect 4802
            //EPLACE 6449 - Removed the Plumbers and Gas Fitters/Business/Renewal from the logic
            else if (appMatch("License/Plumbers and Gas Fitters/Master/Renewal", capId)) {
                if (CWM_ELP_Defect_4802_DPL_renewPLMBLicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            //end defect 4802   

            //EPLACE 6449
            else if (appMatch("License/Plumbers and Gas Fitters/Business/Renewal", capId)) {
                if (CWM_ELP_EPLACE_6449_DPL_renewPLBLicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            // end EPLACE 6449

            //defect 4729
            else if (appMatch("License/Plumbers and Gas Fitters/LP Installer/Renewal", capId)) {
                if (CWM_ELP_Defect_4768_DPL_renewLPLicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            //end defect 4729 
            //defect 4729
            else if (appMatch("License/Plumbers and Gas Fitters/LTD LP Installer/Renewal", capId)) {
                if (CWM_ELP_Defect_4768_DPL_renewLTDLPLicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            //end defect 4729   
            //defect 4729
            else if (appMatch("License/Plumbers and Gas Fitters/Apprentice/Renewal", capId)) {
                if (CWM_ELP_Defect_4768_DPL_renewPLALicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            //end defect 4729 
            //defect 4768
            else if (appMatch("License/Dietitians and Nutritionists/*/Renewal", capId)) {
                if (CWM_ELP_Defect_4768_DPL_renewDPLLicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            //end defect 4768 
            //defect 4768
            else if (appMatch("License/Psychologist/*/Renewal", capId)) {
                if (CWM_ELP_Defect_4768_DPL_renewPSYLicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            //end defect 4768 
            //defect 4810
            else if (appMatch("License/Electricians/*/Renewal", capId)) {
                if (CWM_ELP_Defect_4768_DPL_renewDPLNonCELicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            //end defect 4810   
            //defect 4909
            else if (appMatch("License/Health Officers/*/Renewal", capId)) {
                if (CWM_ELP_Defect_4909_DPL_renewHOLicense(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            //end defect 4909 
            /* Release B Master Script List.xlsx
             * id: 1090
             */
            else if (appMatch("License/Real Estate Appraiser/Appraiser/Renewal", capId)) {
                CWM_ELP_1090_DPL_CRCA_renewREAppraiserLicense(capId);
            } else if (appMatch("License/Engineers and Land Surveyors/Professional Land Surveyor/Renewal", capId)) {
                CWM_ELP_979_1330_WTUA_DPL_RenewalApprovedUpdateLic(capId);
            } else if (appMatch("License/Engineers and Land Surveyors/Professional Engineer/Renewal", capId)) {
                CWM_ELP_DEFECT_5871_WTUA_DPL_RenewalApprovedUpdateLic(capId);
            } else if (appMatch("License/Real Estate/School/Renewal", capId)) {
                //do nothing. do not auto renew. renewal is manual.
            }
            //end Script id 1090
            //added on 7/7/2015 for multiple defects. this will allow any renewal not specifically defined above to complete the renewal

            // Rel C: Script ID: 9.0 (added by: LBulgin)
            else if (appMatch("License/Architect/*/Renewal", capId)) {
                if (CWM_ELP_9_DPL_RenewalAttestation(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }

            // Rel C: Script ID: 71.0 (added by: LBulgin)
            else if (appMatch("License/Sanitarian/*/Renewal", capId)) {

                if (CWM_ELP_71_DPL_SA_RenewalAttestation(capId)) {
                    logDebug(message + "Approved");
                } else {
                    logDebug(message + "Denied");
                }
            }
            //Rel C: Script ID: 139 (by Byellapu)
            else if (appMatch("License/Hearing Instrument/*/Renewal", capId)) {
                if (CWM_ELP_139_DPL_HESRenewalAttestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            }
            //Rel C: Script#: 117 - Added by BYellapu
            else if (appMatch("License/Podiatry/*/Renewal", capId)) {
                if (CWM_ELP_117_DPL_Podiatrist_attestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            //Rel C: Script ID: 152 - Added by Byellapu
            else if (appMatch("License/Chiropractor/Chiropractor/Renewal", capId)) {
                if (CWM_ELP_152_DPL_chiroAttestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }
            // DPL Release C: Script ID: 712 and other Allied Mental Health Renewals (added by: SKumar)
            else if (appMatch("License/Allied Mental Health/*/Renewal", capId)) {
                if (CWM_ELP_ASA_alliedHlthAttestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            }

            //Rel C: Script ID: 740 - Added by Byellapu
            else if (appMatch("License/Allied Mental Health/Applied Behavior Analyst/Renewal", capId)) {
                if (CWM_ELP_745_DPL_ASA_MHAppliedBAttestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            }


            // Release C Scripting: Script ID: 135 (added by: SKumar)
            else if (appMatch("License/Landscape Architects/*/Renewal", capId)) {
                if (CWM_ELP_135_LA_REN_attestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            } else if (appMatch("License/Funeral Directors/Type 3/Renewal", capId)) {
                if (CWM_ELP_DPL_Type3_attestationCheckFA(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            } else if (appMatch("License/Funeral Directors/Type 6/Renewal", capId) || appMatch("License/Funeral Directors/Embalmer Apprentice/Renewal", capId)) {
                if (CWM_ELP_DPL_Type6_attestationCheckFA(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            } else if (appMatch("License/Funeral Directors/*/Renewal", capId)) {
                if (CWM_ELP_DPL_CTRCA_attestationCheckFA(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            }
            // Script 156 
            else if (appMatch("License/Cosmetology/*/Renewal", capId)) {
                if (appMatch("License/Cosmetology/Type 3/Renewal", capId) ||
                    appMatch("License/Cosmetology/Type 5/Renewal", capId) || appMatch("License/Cosmetology/Type 6/Renewal", capId) ||
                    appMatch("License/Cosmetology/Type 7/Renewal", capId) ||
                    appMatch("License/Cosmetology/Type 4/Renewal", capId) ||
                    appMatch("License/Cosmetology/Type 1/Renewal", capId) ||
                    appMatch("License/Cosmetology/Type 2/Renewal", capId) ||
                    appMatch("License/Cosmetology/Type 8/Renewal", capId)) {
                    if (CWM_ELP_DPL_attestationCheckCosmetologistType1_5(capId)) {
                        logDebug(message + "Approved");
                    } else
                        logDebug(message + "Denied");
                } else if (appMatch("License/Cosmetology/School/Renewal", capId) || appMatch("License/Cosmetology/Manicuring School/Renewal", capId) || appMatch("License/Cosmetology/Aesthetician School/Renewal", capId) || appMatch("License/Cosmetology/Advanced Training Institute/Renewal", capId)) {
                    CWM_ELP_DPL_attestationCheckCosmetologySchool(capId)
                } else if (appMatch("License/Cosmetology/Shop/Renewal", capId)) {
                    CWM_ELP_DPL_attestationCheckCosmetologyShop(capId);
                } else {
                    if (CWM_ELP_DPL_CTRCA_attestationCheckCosmeto(capId)) {
                        logDebug(message + "Approved");
                    } else
                        logDebug(message + "Denied");
                }
            }
            // Release C Scripting: Script ID: 53 (added by: Neel Patel)
            else if (appMatch("License/Allied Health/Physical Therapist Assistant/Renewal", capId)) {
                if (CWM_ELP_53_ASA_DPL_AH_attestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            }
            //Rel C: ScriptID: 51 (added by Byellapu)
            // updated this to support Occupational Therapist and Occupational Therapist Assistant Renewals (added by SKumar)
            else if (appMatch("License/Allied Health/Occupational Therapist/Renewal", capId)) {
                if (CWM_ELP_ASA_DPL_AH_attestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            } else if (appMatch("License/Allied Health/Physical Therapy Facility/Renewal", capId)) {
                CWM_ELP_DPL_58_ASA_PTFcopyInfo();
            }

            // Release C Scripting: Script IDs: 64, 66, 68 and 70 (added by: SKumar)
            else if (appMatch("License/Social Workers/*/Renewal", capId)) {
                var bResult = false;
                if (appMatch("License/Social Workers/LICSW/Renewal", capId)) {
                    bResult = CWM_ELP_SW_SW_REN_1_attestationCheckSW(capId, true);
                } else {
                    bResult = CWM_ELP_SW_SW_REN_1_attestationCheckSW(capId, false);
                }

                if (bResult)
                    logDebug(message + "Approved");
                else
                    logDebug(message + "Denied");
            }
            // Release C Scripting: Script IDs: 369, 376, 381 (added by: SKumar)
            else if (appMatch("License/Electrology/Electrology Instructor/Renewal", capId) || appMatch("License/Electrology/Electrology Lecturer/Renewal", capId) || appMatch("License/Electrology/Electrology School/Renewal", capId)) {
                logDebug("before CWM_ELP_DPL_376_electrologistAttestationCheck");
                if (CWM_ELP_DPL_376_electrologistAttestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            } else if (appMatch("License/Electrology/Electrologist/Renewal", capId)) {
                if (CWM_ELP_DPL_364_electrologistAttestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            }
            // Release C Scripting: Script# 568 added by tofek
            else if (appMatch("License/Massage Therapy/*/Renewal", capId)) {
                //same attestation check for solo and 
                if (appMatch("License/Massage Therapy/Multiple Massage Establishment/Renewal", capId)) {
                    CWM_ELP_DPL_validateMTCO();
                } else {
                    CWM_ELP_624_DPL_MT_AttestationCheck(capId);
                }
            }
            // Release C Scripting: Script#341 added by tofek
            else if (appMatch("License/Dispensing Opticians/Dispensing Optician/Renewal", capId)) {

                CWM_ELP_341_DPL_DO_RenewalAttestationCheck(capId);
            }
            //Added for script #79
            else if (appMatch("License/Public Accountancy/CPA/Renewal", capId)) {
                if (CWM_ELP_79_DPL_CPA_Renewal_Attestation(capId)) {
                    logDebug("CA approved.");
                } else {
                    logDebug("CA denied.")
                }
            } else if (appMatch("License/Drinking Water/*/Renewal", capId)) {
                if (CWM_ELP_DPL_CRCA_attestationCheckDW(capId)) {
                    logDebug("DW approved.");
                } else {
                    logDebug("DW denied.")
                }
            } else if (appMatch("License/Home Inspector/*/Renewal", capId)) {
                if (CWM_ELP_DPL_CRCA_HI_attestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            } else if (appMatch("License/Optometry/Optometrist/Renewal", capId)) {

                if (CWM_ELP_ASA_optometristAttestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else {
                    logDebug(message + "Denied");
                }

            } else if (appMatch("License/Speech and Audiology/*/Renewal", capId)) {
                // added by tofek. Script#389.
                // This is applicable for all Speech and Audiology records.
                logDebug("Calling CWM_ELP_389_DPL_renewSALicense(" + capId + ")");
                CWM_ELP_389_DPL_renewSALicense(capId);
            }
            // Release C Scripting: Script Id: 49.0 (added by: SKumar)
            else if (appMatch("License/Allied Health/Athletic Trainer/Renewal", capId)) {
                if (CWM_ELP_49_ASA_DPL_AH_AthTrainer_attestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            }
            // DPL Release C: Script Id: 322.0 (Added by SKumar)
            else if (appMatch("License/Allied Health/Physical Therapist/Renewal", capId) || appMatch("License/Allied Health/Occupational Therapist Asst/Renewal", capId)) {
                if (CWM_ELP_322_ASA_DPL_AH_PhysicalTherapist_attestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            } else if (appMatch("License/Barbers/Instructor/Renewal", capId) || appMatch("License/Barbers/Apprentice/Renewal", capId) || appMatch("License/Barbers/Master/Renewal", capId)) {
                if (CWM_ELP_DPL_331_BarberInstr_AttestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else
                    logDebug(message + "Denied");
            } else if (appMatch("License/Barbers/Shop/Renewal", capId) || appMatch("License/Barbers/School/Renewal", capId)) {
                if (CWM_ELP_DPL_438_barberSchool_attestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            } else if (appMatch("License/Chiropractor/Chiropractor Facility/Renewal", capId)) {
                if (CWM_ELP_ASA_DPL_chiroFacilityAttestationCheck(capId)) {
                    logDebug(message + "Approved");
                } else logDebug(message + "Denied");
            } else if (appMatch("License/Occupational Schools/School/Renewal", capId)) {
                closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                activateTask("Validate");
                updateTask("Validate", "Under Review", "Updated via script.", "Updated via script.");
                assignedToByShortNotes("Validate", getBoard(capId));
            }
            //debashish.barik, Script#760
            else if (appMatch("License/Occupational Schools/Sales Representative/Renewal", capId)) {
                var vBoard = getBoard(capId);
                var myUser = lookup("TASK_ASSIGNMENT", vBoard + "|BOARDSTAFF");
                dplTaskAssign("Intake", myUser);
                logDebug(message + "Approved");
            } else {
                logDebug("Renewal with no pre-defined attestations - Validate Approved");
                if (renewalApproval(capId)) {
                    //Sagar : Added for script #74 + #87 + #85 + #81
                    if (appMatch("License/Public Accountancy/CPA Firm for Business Corp/Renewal", capId) || appMatch("License/Public Accountancy/CPA Firm for LLC/Renewal", capId) || appMatch("License/Public Accountancy/CPA Firm for Partnership/Renewal", capId) || appMatch("License/Public Accountancy/CPA Firm for Professional Corp/Renewal", capId)) {
                        closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                        activateTask("Issuance");
                        updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
                        //Assign the record to a user/department according to the TASK_ASSIGNMENT standard Choice
                        var vBoard = getBoard(capId);
                        var myUser = lookup("TASK_ASSIGNMENT", vBoard + "|BOARDSTAFF");
                        dplTaskAssign("Issuance", myUser);
                        logDebug(message + "Approved");
                    } else {
                        closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                        activateTask("Issuance");
                        updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
                        logDebug(message + "Approved");
                    }
                }
            }
        }
    }


    capId = tmpCapId;
}


function refContactExistsBySSN(ipPeople)
{
  var opUserExists = false;
  var fvSSN = ipPeople.getSocialSecurityNumber();
  var fvPeople = aa.people.createPeopleModel().getOutput();
  fvPeople.setServiceProviderCode(aa.getServiceProviderCode());
  fvPeople.setMaskedSsn(fvSSN);
  fvPeople.setSocialSecurityNumber(fvSSN);

  var fvRefContactsSR = aa.people.getPeopleByPeopleModel(fvPeople.getPeopleModel());
  if (fvRefContactsSR && fvRefContactsSR.getSuccess())
  {
    var fvRefContacts = fvRefContactsSR.getOutput();
    if (fvRefContacts.length > 0)
      opUserExists = fvRefContacts[0].contactSeqNumber;
  }
  return opUserExists;
}
function reformatDate(date)
{
  dArr = date.split("-");  // ex input "2010-01-18"
  return dArr[1]+ "/" +dArr[2]+ "/" +dArr[0]//ex out: "18/01/10"
}
function removeContactsFromCap(recordCapId)
{

   var cons = aa.people.getCapContactByCapID(recordCapId).getOutput();
   for (x in cons)
   {
      conSeqNum = cons[x].getPeople().getContactSeqNumber();
    if (conSeqNum)
    { 
    aa.people.removeCapContact(recordCapId, conSeqNum);
    }
   }

}function removeContactTemplateFromContact(targetCapId) {
    ELPLogging.debug("Inside removeContactTemplateFromContact Function");
    var contactType = null;
    if (arguments.length == 2)
        contactType = arguments[1]; // optional 2nd parameter, contact type to use

    //1. Get people with target CAPID.
    var targetPeople = getPeople(targetCapId);
    if (targetPeople == null || targetPeople.length == 0) {
        return;
    }

    for (loopt in targetPeople) {
        //2. Get people object
        var targetPeopleModel = targetPeople[loopt];
        var targetCapContactModel = targetPeopleModel.getCapContactModel();
        var targetContactType = targetCapContactModel.contactType;
        var remove = false;

        //3. Check if clear specific contact type or all contacts
        if (contactType) {
            if (targetContactType == contactType)
                remove = true;
        } else {
            remove = true;
        }

        //4. Clear the template
        if (remove) {
            targetPeopleModel.getPeople().setTemplate(null);
            aa.people.editCapContactWithAttribute(targetPeopleModel.getCapContactModel());
            logDebug("**INFO: " + targetCapId.getCustomID() + " - Contact template for " + targetContactType + " removed.");
        }
    }
}

function removeContactTemplateFromContactExcept(targetCapId, contactType) {

    //1. Get people with target CAPID.
    var targetPeople = getPeople(targetCapId);
    if (targetPeople == null || targetPeople.length == 0) {
        return;
    }

    for (loopt in targetPeople) {
        //2. Get people object
        var targetPeopleModel = targetPeople[loopt];
        var targetCapContactModel = targetPeopleModel.getCapContactModel();
        var targetContactType = targetCapContactModel.contactType;
        var remove = false;

        //3. Check if not to clear a specific contact type or all contacts
        if (targetContactType == contactType) {
            remove = false;
        } else {
            remove = true;
        }

        //4. Clear the template
        if (remove) {
            targetPeopleModel.getPeople().setTemplate(null);
            aa.people.editCapContactWithAttribute(targetPeopleModel.getCapContactModel());
            logDebug("**INFO: " + targetCapId.getCustomID() + " - Contact template for " + targetContactType + " removed.");
        }
    }
}

// This function is used to remove a condition.
function removeInvestigativeIntakeCondition(thisCond, recordIdVal, vrefNumber) {
   logDebug("Removing the complaint condition associated with the complaint from the contact (" + vrefNumber + ").");
   thisCond.condition.setConditionStatus("Unapplied");
   thisCond.condition.setConditionStatusType("Not Applied");
   thisCond.condition.setImpactCode("");

   var asiTemplate = aa.genericTemplate.getTemplateStructureByGroupName("RECORD INFO").getOutput();
   setasiTemplate = setTemplateValueByForm(asiTemplate, "RECORD DETAILS", "Record ID", recordIdVal);
          
   var e = thisCond.condition.getEntityPK();
   asiTemplate.setEntityPKModel(e);
   thisCond.condition.setTemplateModel(asiTemplate);

   var editContactConditionResult = aa.commonCondition.editCommonCondition(thisCond.condition);
   if (editContactConditionResult.getSuccess()) {
      aa.print("Successfully edited");
   } else {
      aa.print("**ERROR: editing condition: " + editContactConditionResult.getErrorMessage());
   }
}

/*function renewalApproval*/
function renewalApproval(renewalCapId) {
  // FA 09/23/2018 Ticket 7368 and 7074. sysdate wasnt found on line 17453 (refLP.setLicenseLastRenewalDate(sysDate);)
  var sysDate = aa.date.getCurrentDate();
  


	try {
		var isNotWf = ((typeof wfTask == 'undefined') || wfTask == null);
		var result = false;
		var reinstatementFlag = false;
		var reinstatementExpirationDate = null;

		if (appMatch("License/*/*/Reinstatement", renewalCapId)) {
			//fixes for CR212 to determine the parent License cap ID for Reinstatement record.
			parentCapId = getParentLicenseCapIDForReinstatement(renewalCapId);
			reinstatementFlag = true;
			var REINSTATEMENT_EXPIRATION_DATE_S = "New Expiration Date";
			reinstatementExpirationDate = getAppSpecific(REINSTATEMENT_EXPIRATION_DATE_S, renewalCapId);
			logDebug("Reinstatement Expiration Date: " + reinstatementExpirationDate);
		} else {
			parentCapId = getParentCapID4Renewal(renewalCapId); //EXISTING
		}

		var reportName = "DPL|LICENSE_REGISTRATION_CARD";
		var setType = "DPL License Print Set";

		if (parentCapId) {
			logDebug("Parent CAP found: " + parentCapId);
			var capResult = aa.cap.getCap(parentCapId);
			if (!capResult.getSuccess()) {
				logDebug("getCap error: " + capResult.getErrorMessage());
				return false;
			}
			var parentCap = capResult.getOutput();
			var parentCapStatus = parentCap.getCapStatus();

			//defect ####
			// if the app is an apprentice, check if the associated master exists and is active.
			if (appMatch("*/*/Apprentice/*") || appMatch("*/*/Gas Fitter Apprentice/*")) {
				addConditionsToSheetMetalRenewal(parentCapId.getCustomID());
			}
			//end defect ###

			// Fixed for defect 2773 to process renewal If (appStatus = current) or (app status = expired and task status = lapsed)
			var workflowResult = aa.workflow.getTasks(parentCapId);
			var wfObj = null;
			if (workflowResult.getSuccess()) {
				wfObj = workflowResult.getOutput();
			}
			var parentTaskStatus = null;
			for (i in wfObj) {
				var fTask = wfObj[i];
				parentTaskStatus = fTask.getDisposition();
			}

			// Only process license with "Current" or "Lapsed" status
			//if (!matches(parentCapStatus, "Current", "Lapsed"))


			/* if (parentCapStatus != "Current"
			&& (parentCapStatus != "Expired"
			|| (parentCapStatus == "Expired" && parentTaskStatus != "Lapsed")))
		{
			logDebug("Can't process renewal for " + parentCapId.getCustomID() + ", license status: " + parentCapStatus);
			return false;
			} */

			// JIRA : 3729 : Add OS Renewal to OS PRINT set.
			if (appMatch("License/Occupational Schools/Sales Representative/Renewal")) {
				reportName = "DPL|OS_LICENSE_CERT";
			}

			/***************** Start CR212 *********************/
			var splitter = renewalCapId.toString().split("-");
			var capIDModel = aa.cap.getCapID(splitter[0], splitter[1], splitter[2]).getOutput();
			var capScriptModel = aa.cap.getCap(capIDModel).getOutput();
			var capType = capScriptModel.getCapType();
			var scanner = capType.toString().split("/");
			var group = scanner[0];
			var type = scanner[1];
			var subType = scanner[2];
			var category = scanner[3];
			if (category != "Reinstatement") {
				if (parentCapStatus != "Current" &&
					(parentCapStatus != "Expired" ||
						(parentCapStatus == "Expired" && parentTaskStatus != "Lapsed")) &&
					(parentCapStatus == "Inactive" && parentTaskStatus != "Inactive")) {
					logDebug("Can't process renewal for " + parentCapId.getCustomID() + ", license status: " + parentCapStatus);
					return false;
				}
			}
			/***************** End CR212 *********************/

			// EPLACE-5242
			var licExpStatus = null;
			var licExpDate = null;
			var b1ExpResult = aa.expiration.getLicensesByCapID(parentCapId);
			if (b1ExpResult.getSuccess()) {
				var expObj = b1ExpResult.getOutput();
				licExpDate = expObj.getExpDate();
				licExpStatus = expObj.getExpStatus();
				logDebug("**INFO: License expiration date before SP:" + expObj.getExpDateString() + " - " + expObj.getExpStatus());
			}

			 if ((appMatch("License/Speech and Audiology/*/Renewal", renewalCapId) || appMatch("License/Social Workers/*/Renewal", renewalCapId)) && isNotWf) {				
if (parentCapStatus == "Expired" && parentTaskStatus == "Expired" && licExpStatus == "Inactive") {
					logDebug("**INFO: License " + parentCapId.getCustomID() + " can't renew. Status:" + parentCapStatus + ", WF Task Status:" + parentTaskStatus + ", Renewal Status:" + licExpStatus);
					return false;
				}
				if ((parentCapStatus == "Expired" && licExpStatus == "Expired" && parentTaskStatus == "Lapsed")  && !appMatch("License/Social Workers/*/Renewal", renewalCapId)) {					
                                       closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
				      activateTask("Validate");
					updateTask("Validate", "Under Review", "Unable to determine license status", "Unable to determine license status");
					var vBoard = getBoard(capId);
					var myUser = lookup("TASK_ASSIGNMENT", vBoard + "|BOARDSTAFF");
					dplTaskAssign("Validate", myUser);
					logDebug("**INFO: License " + parentCapId.getCustomID() + " can't renew. Status:" + parentCapStatus + ", WF Task Status:" + parentTaskStatus + ", Renewal Status:" + licExpStatus + ", Validate task assigned to " + myUser);
					return false;					
				}
			}

			if (appMatch("License/Social Workers/*/Renewal", renewalCapId)) {
				setExpDateForSocialWorkersRenewal(parentCapId);
			}

			completeRenewal(parentCapId);
			if (!appMatch("License/Speech and Audiology/*/Renewal", renewalCapId) && !appMatch("License/Social Workers/*/Renewal", renewalCapId)) {
				logDebug("Calling activeLicense for " + parentCapId);
				activeLicense(parentCapId);
			}

			// var lockBoxBatch = isPaymentDonebyLockbox(capId);
			// if (lockBoxBatch == null) activeLicense(parentCapId);
			// EPLACE-5242

			if (appMatch("License/Barbers/Shop/Renewal") && (parentTaskStatus == "Expired")) {
				CWM_ELP_449_WTUA_DPL_setExpDateForBarbersShop(parentCapId);
			}

			if (appMatch("License/Electrology/Electrology School/Renewal")) {
				setExpDateForElectrologySchoolRenewal(parentCapId);
			}

			//Updated by Evan Cai for eplace 1979 1-26-2017
			// Defect 10066
			if (appMatch("License/Speech and Audiology/*/Renewal", renewalCapId)) {
				setExpDateForSpeechPathologistAsstLicRenewal(parentCapId);
			}

			// # 6518 Renewed License should use ASI from Reinstatement Record
			if (reinstatementFlag && reinstatementExpirationDate != null) {
				var licNum = parentCapId.getCustomID();
				var thisLic = new licenseObject(licNum, parentCapId);
				licExpDate = aa.date.parseDate(reinstatementExpirationDate);
				thisLic.setExpiration(reinstatementExpirationDate);
			}

			//re-calculate
			logDebug("Get Ref License Prof to update expiration date.");
			// Defect #5555
			var scanner = parentCapId.toString().split("-");
			var parentCap = aa.cap.getCapID(scanner[0], scanner[1], scanner[2]).getOutput();
			var refLP = getRefLicenseProf(parentCap.getCustomID());

			//Fix for PROD defect 14078 : PRD_DPL_Records not getting updated on ACA, and it seems more than a sync job issue
			if ((appMatch("License/Electricians/Journeyman Electrician/Renewal", capId) && !refLP)) {
				refLP = getRefLicenseProfForEL_board(parentCap.getCustomID());
			} else if (!refLP) {
				//Sagar : EPLACE-1599 : PRD_DPL_134121-RE-S does not have entry in Rstate LIC
				refLP = getRefLicenseProfWithLicNbrAndTypeClass(parentCap.getCustomID())
			}

			if (refLP && refLP != null) {
				var licExpDateOldValue = refLP.getLicenseExpirationDate();
				logDebug("Old Expiration Date is " + licExpDateOldValue);
				//if(appMatch("License/Dispensing Opticians/*/Renewal",capId)){
				//activeLicense(parentCapId);
				//refLP.setLicenseExpirationDate(aa.date.parseDate(calculateDOexpirationDate()));
				//}
				if (appMatch("License/Speech and Audiology/Speech Language Pathology Asst/Renewal", renewalCapId)) {
					// var licRenExpDate = setExpDateForSpeechPathologistAsstRenewal(parentCapId);
					// logDebug("Renewal Expiration Date: " + licRenExpDate);
					// licRenExpDate = aa.date.parseDate(licRenExpDate);
					// refLP.setLicenseExpirationDate(licRenExpDate);
	
	    //             var licCustId = parentCapId.getCustomID();
	    //             thisLic = new licenseObject(licCustId, parentCapId);
	    //             //thisLic.setExpiration(licRenExpDate);

	    //             logDebug("Expiration date set to " + licRenExpDate);

	    //             var now = new Date();
	    //             now.setHours(0,0,0,0);

	    //             if (now < convertDate(licRenExpDate)) {
	    //             	thisLic.setStatus("Active");
	    //             	logDebug("License " + licCustId + " is active.");
	    //             }

				} else {
					refLP.setLicenseExpirationDate(licExpDate);
					// Remove line above and uncomment below code to add fix to 5410 and 930.
					/*
					
					// FA 01/04/2018 Ticket 5410 Part 2. Following if statement added to fix the License/Barbers/Master/Renewal exp date calculation issue
					if (appMatch("License/Barbers/Master/Renewal")) { //&& (parentTaskStatus == "About to Expire")
						//CWM_ELP_714_DPL_WTUA_setExpDateForAlliedMentalHealth(parentCapId);
						CWM_ELP_1500_WTUA_DPL_barberRecipExpDate(parentCapId);
					}else if (appMatch("License/Real Estate/School/Renewal")) {
						// FA 01/27/2018 Ticket 930. This block of code added to fix the renewal exp date issue. When renewal is approved.
						var sysDate = aa.date.getCurrentDate();
						if((Math.round(licExpDate.getYear() - sysDate.getYear())) < 2){
							var newYear=licExpDate.getYear() + 2;
							licExpDate.setYear(newYear)
					
							logDebug("The license expiration date has been changed to " + licExpDate.getMonth() + "/" + licExpDate.getDayOfMonth() + "/" + licExpDate.getYear());
							refLP.setLicenseExpirationDate(licExpDate);
							
							var licCustId = capId.getCustomID();
							thisLic = new licenseObject(licCustId, parentCapId);
							var expDateString = licExpDate.getMonth() + "/" + licExpDate.getDayOfMonth() + "/" + licExpDate.getYear();
							thisLic.setExpiration(expDateString);
							thisLic.setStatus("Active");
							
						}
					}else{
						logDebug("The license expiration date has been changed to " + licExpDate.getMonth() + "/" + licExpDate.getDayOfMonth() + "/" + licExpDate.getYear());
						refLP.setLicenseExpirationDate(licExpDate);
					} 

					*/
				}

				//defect 3119. need to add code to update appropriate fields on the LP
				refLP.setAuditStatus("A");
				refLP.setLicenseLastRenewalDate(sysDate);

				//added for defect 3717 pt 1 and defect 3736
				if (appMatch("License/Real Estate/Salesperson/Renewal", capId) || appMatch("License/Real Estate/Broker/Renewal", capId)) {
					//check if this is lockbox or aca/aa
					//var lockBoxBatch = getAppSpecific("Lockbox Batch");

					// Defect 5510
					var lockBoxBatch = isPaymentDonebyLockbox(capId);

					// Do the renewal without attestation checking if the renewal comes from LockBox.
					if (lockBoxBatch && lockBoxBatch != null && lockBoxBatch != "") {
						logDebug("Renewal from LockBox");
						if (parentCapStatus == "Inactive") {
							refLP.setPolicy("Inactive");
							// Override the Report
							logDebug("license is inactive");
							var preferedCom = checkForPreferredCommunicationMethod(capId);
							if (preferedCom && preferedCom == "Email") {
								reportName = "DPL|REAL_ESTATE_INACTIVE_EMAIL";
								setType = "Email Notification";
							} else {
								reportName = "DPL|REAL_ESTATE_INACTIVE";
								setType = "DPL Real Estate Inactive";
							}
						} else if (parentCapStatus == "Expired") {
							//need to figure out what to set this to. look at history. look at workflow history and set to 2nd value. if only 1 value in history, look to the asi to see what we set to.
							//if history > 1 then
							//if history == inactive, then put in inactive set
							// else, make current
							//else look at asi to set
							//if history == inactive, then put in inactive set
							// else, make current
							logDebug("parent status is expired.");

							var workflowhistory = aa.workflow.getWorkflowHistory(parentCapId, "License", null);
							var workflowhistoryresult = [];
							if (workflowhistory.getSuccess())
								workflowhistoryresult = workflowhistory.getOutput();
							//if history > 1 then
							//then set status to #2
							//else look at asi to set
							//if asi == inactive, then put in inactive set
							// else, make current


							if (workflowhistoryresult.length > 1) {
								logDebug("wf history is > 1");
								//store the history in an array
								var wfHist = new Array();

								for (i in workflowhistoryresult) {
									//build an array
									wfHist[i] = new Array(workflowhistoryresult[i].getProcessHistorySeq(), workflowhistoryresult[i].getDisposition());
								}
								//re-order the values in the array, based on processhistoryseq #
								wfHist.sort(function(a, b) {
									return parseInt(b, 10) - parseInt(a, 10);
								});
								/*
								for (var p in wfHist){
								logDebug(wfHist[p]);
								} */

								logDebug("current status is: " + wfHist[0][1]);
								logDebug("set license status to previous status in history:  " + wfHist[1][1]);
								//check if status will be set to inactive.
								if (wfHist[1][1] == "Inactive") {
									refLP.setPolicy("Inactive");
									// Override the Report
									var preferedCom = checkForPreferredCommunicationMethod(capId);
									if (preferedCom && preferedCom == "Email") {
										reportName = "DPL|REAL_ESTATE_INACTIVE_EMAIL";
										setType = "Email Notification";
									} else {
										reportName = "DPL|REAL_ESTATE_INACTIVE";
										setType = "DPL Real Estate Inactive";
									}
								} else {
									refLP.setPolicy("Current");
								}
							} else {
								logDebug("license is expired and insufficient history to determine how to set license. look to the asi to determine")
								if (getAppSpecific("I am renewing as") == "Inactive") {
									refLP.setPolicy("Inactive");
									// Override the Report
									var preferedCom = checkForPreferredCommunicationMethod(capId);
									if (preferedCom && preferedCom == "Email") {
										reportName = "DPL|REAL_ESTATE_INACTIVE_EMAIL";
										setType = "Email Notification";
									} else {
										reportName = "DPL|REAL_ESTATE_INACTIVE";
										setType = "DPL Real Estate Inactive";
									}
								} else {
									refLP.setPolicy("Current");
								}
							}

						} else {
							refLP.setPolicy("Current");
						}
					} else {
						if (getAppSpecific("I am renewing as") == "Inactive") {
							refLP.setPolicy("Inactive");
							// Override the Report
							var preferedCom = checkForPreferredCommunicationMethod(capId);
							if (preferedCom && preferedCom == "Email") {
								reportName = "DPL|REAL_ESTATE_INACTIVE_EMAIL";
								setType = "Email Notification";
							} else {
								reportName = "DPL|REAL_ESTATE_INACTIVE";
								setType = "DPL Real Estate Inactive";
							}
						} else {
							refLP.setPolicy("Current");
						}
					}
				} else {
					refLP.setPolicy("Current");
				}
				//end defect 3717 pt I
				refLP.setWcExempt("Y");
				//end defect 3119
				var res = aa.licenseScript.editRefLicenseProf(refLP);
				if (res.getSuccess())
					logDebug("Ref LP expiration date updated.");
				else
					logDebug("Ref LP expiration date not updated. " + res.getErrorMessage());

				//Sagar : EPLACE-1638 : Expiration date in B3CONTRA not consistent
				updateB3CONTRAtableExpDate(parentCapId);
				//defect 3119
				addToLicenseSyncSet(parentCapId);
				//end of defect 3119
			} else {
				logDebug("Ref LP not found.");
			}
			
			//start defect 3717 pt II
			if (appMatch("License/Real Estate/Salesperson/Renewal", capId) || appMatch("License/Real Estate/Broker/Renewal", capId)) {
				logDebug("Salesperson renewal found " + parentCapId.getCustomID());
				//check if this is lockbox or aca/aa
				//var lockBoxBatch = getAppSpecific("Lockbox Batch");

				// Defect 5510
				var lockBoxBatch = isPaymentDonebyLockbox(capId);

				// Do the renewal without attestation checking if the renewal comes from LockBox.
				if (lockBoxBatch && lockBoxBatch != null && lockBoxBatch != "") {
					logDebug("Renewal from LockBox");
					if (parentCapStatus == "Inactive") {
						logDebug("Updating status and task");
						updateAppStatus("Inactive", "", parentCapId);
						//updateTask("License", "Inactive", "Updated via script.", "Updated via script.", "DPL_LICENSE", parentCapId);
						updateTask("License", "Inactive", "Updated via script.", "Updated via script.", "", parentCapId);
					} else if (parentCapStatus == "Expired") {
						//need to figure out what to set this to. look at history. look at workflow history and set to 2nd value. if only 1 value in history, look to the asi to see what we set to.
						//if history > 1 then
						//if history == inactive, then put in inactive set
						// else, make current
						//else look at asi to set
						//if history == inactive, then put in inactive set
						// else, make current
						logDebug("parent status is expired.");
						var workflowhistory = aa.workflow.getWorkflowHistory(parentCapId, "License", null);
						var workflowhistoryresult = [];
						if (workflowhistory.getSuccess())
							workflowhistoryresult = workflowhistory.getOutput();
						//if history > 1 then
						//then set status to #2
						//else look at asi to set
						//if asi == inactive, then put in inactive set
						// else, make current


						if (workflowhistoryresult.length > 1) {
							logDebug("wf history is > 1");
							//store the history in an array
							var wfHist = new Array();

							for (i in workflowhistoryresult) {
								//build an array
								wfHist[i] = new Array(workflowhistoryresult[i].getProcessHistorySeq(), workflowhistoryresult[i].getDisposition());
							}
							//re-order the values in the array, based on processhistoryseq #
							wfHist.sort(function(a, b) {
								return parseInt(b, 10) - parseInt(a, 10);
							});
							/*
							for (var p in wfHist){
							logDebug(wfHist[p]);
							}
							 */
							logDebug("current status is: " + wfHist[0][1]);
							logDebug("set license status to previous status in history:  " + wfHist[1][1]);
							//check if status will be set to inactive.
							if (wfHist[1][1] == "Inactive") {
								logDebug("Updating status and task");
								updateAppStatus("Inactive", "", parentCapId);
								updateTask("License", "Inactive", "Updated via script.", "Updated via script.", "", parentCapId);
							} else {
								updateAppStatus("Current", "", parentCapId);
								updateTask("License", "Current", "Updated via script.", "Updated via script.", "", parentCapId);
							}
						} else {
							logDebug("license is expired and insufficient history to determine how to set license. look to the asi to determine");
							if (getAppSpecific("I am renewing as") == "Inactive") {
								logDebug("Updating status and task");
								updateAppStatus("Inactive", "", parentCapId);
								updateTask("License", "Inactive", "Updated via script.", "Updated via script.", "", parentCapId);
							} else {
								updateAppStatus("Current", "", parentCapId);
								updateTask("License", "Current", "Updated via script.", "Updated via script.", "", parentCapId);
							}
						}

					} else {
						updateAppStatus("Current", "", parentCapId);
						updateTask("License", "Current", "Updated via script.", "Updated via script.", "", parentCapId);
					}
				} else {

					if (getAppSpecific("I am renewing as") == "Inactive") {
						logDebug("Updating status and task");
						updateAppStatus("Inactive", "", parentCapId);
						//updateTask("License", "Inactive", "Updated via script.", "Updated via script.", "DPL_LICENSE", parentCapId);
						updateTask("License", "Inactive", "Updated via script.", "Updated via script.", "", parentCapId);
					} else {
						updateAppStatus("Current", "", parentCapId);
						updateTask("License", "Current", "Updated via script.", "Updated via script.", "", parentCapId);
					}
				}
			} else {
				updateAppStatus("Current", "", parentCapId);
				updateTask("License", "Current", "Updated via script.", "Updated via script.", "", parentCapId);

			}
			//end defect 3717 pt II
			// Do not update address if the renewal comes from LockBox.
			//Sagar : 14453 DPL_PROD_SW_Renewals not updated in AA and WF still in Intake status
			var lockBoxBatch = isPaymentDonebyLockbox(capId);
			// JIRA 2940
			var addressChangeViaLockbox = addressChangeIfConditionSatisfied(renewalCapId);
			if (lockBoxBatch && lockBoxBatch != null && lockBoxBatch != "" && !addressChangeViaLockbox) {
				logDebug("Renewal comes through lockbox");
			} else {
				logDebug("Renewal other than lockbox");
				updateAddressOnAllRelatedLicenses(renewalCapId);
				ignoreContactTypeArr = new Array("Business", "Licensed Individual");
				copyContacts(renewalCapId, parentCapId, ignoreContactTypeArr);
			}
			//updateAddressOnAllRelatedLicenses(renewalCapId);
			//ignoreContactTypeArr = new Array("Business", "Licensed Individual");
			//copyContacts(renewalCapId, parentCapId, ignoreContactTypeArr);
			copyAppSpecific(parentCapId);

			copySingleASITable("LICENSE IN OTHER JURISDICTIONS", renewalCapId, parentCapId);
			if (appMatch("License/Real Estate/School/Renewal")) {

				CWM_ELP_Defect_3935_DPL_RenewRESchool_License(renewalCapId, parentCapId);
			}
			//closeTask("Closure", "Closed", "Updated via script", "");
			// copyContacts(renewalCapId, parentCapId);
			// copyApplSpecific(renewalCapId, parentCapId);
			// CopyDeleteASIT(renewalCapId, parentCapId);

			// FA 12/14/2017 Ticket 5410. Following if statement commented out to allow License/Barbers/Master/Renewal to be added to the Print Set
			//if (!appMatch("License/Barbers/Master/Renewal")) {

			updateAppStatus("Ready for Printing", "Updated via Script", renewalCapId);

			var tmpCapId = capId;
			capId = renewalCapId;
			if (!appMatch("License/Real Estate/School/Renewal")) {
				callReport(reportName, false, true, setType);
			}
			capId = tmpCapId;
			//}
			//removed as part of defect 2712
			//aa.cap.updateAccessByACA(renewalCapId, "N");
			//if this is a real estate broker and it is not coming from lockbox, then call the function to update the affiliated broker.
			if (appMatch("License/Real Estate/Broker/Renewal") && !lockBoxBatch) {
				//CWM_ELP_defect_8927_copyAffBrokeronRenewal();
			}
			if (appMatch("License/Barbers/Shop/Renewal")) {
				CWM_ELP_461_updateMasterBarberOnShop();
			}

			result = true;
		}

		return result;

	} catch (err) {
		logDebug("**ERROR:In function " + arguments.callee.toString().match(/function ([^\(]+)/)[1] + ", line: " + err.lineNumber + " - " + err.message + "\r" + err.stack);
		return false;
	}
}
/*function renewalApproval*/

function renewVeterinarianLicense(itemCapId) {
    useAppSpecificGroupName = false;
    var result = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }

    if (!appMatch("License/Veterinarian/Veterinary Tufts Institutional/Renewal")) {

        //added for defect 625

        var educationAsi = getAppSpecific("2. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/ REGULATION.");

        if (educationAsi != undefined && educationAsi != null && educationAsi != "") {
            var haveCompleted = getAppSpecific("2. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/ REGULATION.").toUpperCase().equals("YES");

            if (!haveCompleted) {
                logDebug("Have not completed.");
                closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                updateTask("Validate", "CE Attestation Review", "Updated via script.", "Updated via script.");
                activateTask("Validate");
                assignedToByShortNotes("Validate", "VT");
            }
        }

        //Added by Sameer for the change in ASI field names
        var asiStart = "1.  I AM IN COMPLIANCE WITH G.L.c.62C ";
        var splChar = String.fromCharCode(167);
        var asiEnd = "47A & 49A."
        var asiName = asiStart + splChar + splChar + asiEnd;
        logDebug("ASI name:" + asiName);
        logDebug("haveCompleted : " + haveCompleted);
        logDebug("educationAsi : " + educationAsi);

        if (haveCompleted && (getAppSpecific(asiName).toUpperCase().equals("NO") ||
            getAppSpecific("3.  I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.").toUpperCase().equals("NO") ||
            getAppSpecific("6. I UNDERSTAND MY OBLIGATIONS UNDER M.G.L. C. 112, S. 58B AND THE PUNISHMENT FOR NONCOMPLIANCE.").toUpperCase().equals("NO") ||
            getAppSpecific("7. I CERTIFY THAT I UNDERSTAND AND WILL FULFILL MY STATUTORY OBLIGATION TO REPORT ANIMAL CRUELTY.").toUpperCase().equals("NO"))) {
            if (renewalApproval(capId)) {
                closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                activateTask("Issuance");
                updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
                assignedToByShortNotes("Issuance", "VT");
                result = true;
            }
        } else if (haveCompleted) {
            logDebug("Validate Approved");
            if (renewalApproval(capId)) {
                closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                closeTask("Validate", "Approved", "Updated via script.", "Updated via script.");
                activateTask("Issuance");
                updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
                result = true;
            }
        }
    } else {
        if (renewalApproval(capId)) {
            closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
            closeTask("Validate", "Approved", "Updated via script.", "Updated via script.");
            activateTask("Issuance");
            updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
            result = true;
        }
    }

    capId = tmpCapId;
    return result;
}

function sendLicenseIssuedNotification() {

    var params = aa.util.newHashtable();
    addParameter(params, "$$appType$$", cap.getCapType().getAlias());
    getContactParams4Notification(params,"Applicant");
    getRecordParams4Notification(params);
    holdId = capId;
    capId = newLicId;
    getACARecordParam4Notification(params,acaUrl);
    addParameter(params, "$$licAltID$$", newLicId.getCustomID());
    var newLicCap = aa.cap.getCap(newLicId).getOutput();
    addParameter(params, "$$licenseType$$", newLicCap.getCapType().getAlias());
    sendNotification(sysFromEmail,params.get("$$applicantEmail$$"),"","LICENSE ISSUANCE",params,null);
    capId = holdId;
}
function sendNotificationToAssignedUser(capID4Email, fullName, fvEmail)
{
  var fvCapID4Email = aa.cap.createCapIDScriptModel(capID4Email.getID1(),capID4Email.getID2(),capID4Email.getID3());
        //var altid =  capID4Email.getCustomID();
         var altid =  capId.getCustomID();
  var fvFileNames = [];
  var fvEmailParameters = aa.util.newHashtable();
  fvEmailParameters.put("$$licenseeName$$",fullName);
  fvEmailParameters.put("$$Record Number$$",altid);
  aa.document.sendEmailAndSaveAsDocument(sysFromEmail,fvEmail,"","INVESTIGATION_ASSIGNEDUSER_LICENSEE_CHANGE_NOTIFICATION",fvEmailParameters,fvCapID4Email,fvFileNames);
  aa.print("email sent");
}
function sendRenewalApprovedNotification() {

    var params = aa.util.newHashtable();
    addParameter(params, "$$recordType$$", cap.getCapType().getAlias());
    getContactParams4Notification(params, "Applicant");
    getRecordParams4Notification(params);
    holdId = capId;
    capId = getParentCapID4Renewal();
    getACARecordParam4Notification(params, acaUrl);
    addParameter(params, "$$licAltID$$", capId.getCustomID());
    sendNotification(sysFromEmail, params.get("$$applicantEmail$$"), "", "RENEWAL_APPROVED_EMAIL_NOTIFICATION", params, null);
    capId = holdId;
}function sendReportByEmailTemplate(reportName, reportParamters, emailFrom, emailTo, emailCC, emailTemplate, emailContentParams, module, reportUser )
{
  var scriptCode = "SENDREPORTBYJMSUSINGEMAILTEMPLATE";
  var capId1 = capId.getID1();
  var capId2 = capId.getID2();
  var capId3 = capId.getID3();
  var envParameters = aa.util.newHashMap();

  envParameters.put ("ServProvCode", servProvCode);
  envParameters.put ("PermitId1", capId1);
  envParameters.put ("PermitId2", capId2);
  envParameters.put ("PermitId3", capId3);
  envParameters.put ("CustomCapId", capId.getCustomID());
  envParameters.put ("ReportName", reportName);
  envParameters.put ("ReportParamters", reportParamters);
  envParameters.put ("Module", module);
  envParameters.put ("ReportUser", reportUser);
  envParameters.put ("EmailFrom", emailFrom);
  envParameters.put ("EmailTo", emailTo);
  envParameters.put ("EmailCC", emailCC);
  envParameters.put ("EmailTemplate", emailTemplate);
  envParameters.put ("EmailContentParams", emailContentParams);

  aa.runAsyncScript(scriptCode, envParameters);
}
function setContactASIByObj(templateModel, newAInfo) {
    var ignoreArr = new Array();
    var limitCopy = false;
    if (arguments.length > 1) {
        ignoreArr = arguments[1];
        limitCopy = true;
    }
    for (var item in newAInfo) {
        //Check list
        if (limitCopy) {
            var ignore = false;
            for (var i = 0; i < ignoreArr.length; i++)
                if (ignoreArr[i] == newAInfo[item].FieldName) {
                    ignore = true;
                    break;
                }
            if (ignore)
                continue;
        }
        setTemplateValueByForm(templateModel, newAInfo[item].getSubgroupName(), newAInfo[item].getFieldName(), newAInfo[item].getDefaultValue());
    }
}
function setContactsSyncFlag(syncFlagValue) {
  var itemCapId = capId;

  if (arguments.length > 1) {
    itemCapId = arguments[1];
  }

  var c = aa.people.getCapContactByCapID(itemCapId).getOutput();
  if (!c) logDebug("No contact found.");
  for (var i in c) {
    var con = c[i];
    var cm = con.getCapContactModel();
    var contactType = con.getPeople().getContactType();
    if (cm) {
      cm.setSyncFlag(syncFlagValue);
      var r = aa.people.updateCapContactSyncFlag(cm);
      if (r.getSuccess()) logDebug("Sync flag for contact " + contactType + " was updated.");
      else logDebug("**WARNING: Sync flag for contact " + contactType + " was not updated. " + r.getErrorMessage());
    }
  }
}function setLicExpirationDate(itemCap) {
    //itemCap - license capId
    //the following are optional parameters
    //calcDateFrom - MM/DD/YYYY - the from date to use in the date calculation
    //dateOverride - MM/DD/YYYY - override the calculation, this date will be used
    //renewalStatus - if other than active override the status  


    var licNum = itemCap.getCustomID();

    if (arguments.length == 1) {
        calcDateFrom = null;
        dateOverride = null;
        renewalStatus = null;
    }

    if (arguments.length == 2) {
        calcDateFrom = arguments[1];
        dateOverride = null;
        renewalStatus = null;
    }

    if (arguments.length == 3) {
        calcDateFrom = arguments[1];
        dateOverride = arguments[2];
        renewalStatus = null;
    }

    if (arguments.length == 4) {
        calcDateFrom = arguments[1];
        dateOverride = arguments[2];
        renewalStatus = arguments[3];
    }

    var tmpNewDate = "";
    
    b1ExpResult = aa.expiration.getLicensesByCapID(itemCap);
    
    if (b1ExpResult.getSuccess()) {

        try {
            this.b1Exp = b1ExpResult.getOutput();
            //Get expiration details
            var expUnit = this.b1Exp.getExpUnit();
            var expInterval = this.b1Exp.getExpInterval();
        } catch (err) {
            logDebug("Could not set the expiration date, no expiration unit defined for expiration code: " + itemCap + " Error: "+err);
            return false;
        }
 
        if(expUnit == null) {
            logDebug("Could not set the expiration date, no expiration unit defined for expiration code: " + this.b1Exp.getExpCode());
            return false;
        }

        if(expUnit == "Days") {
            tmpNewDate = dateAdd(calcDateFrom, expInterval);
        }

        if(expUnit == "Months") {
            tmpNewDate = dateAddMonths(calcDateFrom, expInterval);
        }

        if(expUnit == "Years") {
            tmpNewDate = dateAddMonths(calcDateFrom, expInterval * 12);
        }
    }

    thisLic = new licenseObject(licNum,itemCap); 

   if(dateOverride == null) {
       thisLic.setExpiration(dateAdd(tmpNewDate,0));
    } else {
       thisLic.setExpiration(dateAdd(dateOverride,0));
    }

    if(renewalStatus != null) {
        thisLic.setStatus(renewalStatus); 
    } else {
        thisLic.setStatus("Active"); 
    }

    logDebug("Successfully set the expiration date and status");

    return true;

}
function setLicsToIssued() {
    var wFlowTask = "Issuance";
    var wNewflowStatus = "Issued";
  
  if ((isTaskActive(wFlowTask))) {
        //Update and close task
        closeTask(wFlowTask, wNewflowStatus, "Closed via script", "");
        return true;
    }
    return false;
}
function setTemplateValueByForm(templateModel, subGroupName, fieldName, value) {
    var field = getFieldAttributeByName(templateModel.getTemplateForms(), subGroupName, fieldName);
    if (field != null) {
        field.setDefaultValue(value);
        return true;
    }
    return false;
}
function setTransactionLicensesToDeceased(altId) {
   //Create a capModel for use with the get records method
   var capModel = aa.cap.getCapModel().getOutput();
   var capTypeModel = capModel.getCapType();
   capTypeModel = capModel.getCapType();
   capTypeModel.setGroup("License");
   capTypeModel.setCategory("License");
   capModel.setCapType(capTypeModel);

   appListResult = aa.cap.getCapIDListByCapModel(capModel);
   if (appListResult.getSuccess()) {
      appList = appListResult.getOutput();
   }

   for (al in appList) {
      var capId = aa.cap.getCapID(appList[al].getCapID().getID1(),appList[al].getCapID().getID2(),appList[al].getCapID().getID3()).getOutput();
      if (capId.getCustomID() == altId) {
         logDebug("Updating CustomID '" + altId + "' record License task to Deceased status.");
         updateTask("License", "Deceased", "");
      }
   }
}
/* @desc This function is used to skip Health Care Attestation if the answer to ASI is No.
 * Release B CR 134
 */
function skipHealthCareAttestation() {
   var asiComplaintRelated = AInfo["Is your application for complaint related to any medical, mental health or veterinary treatment?"];
   var asiHealthCareFraud = AInfo["Is this application for complaint related to healthcare fraud?"];
   if (asiComplaintRelated == "No" && asiHealthCareFraud == "No") {
      // StepNumber is the tab number of the ACA.
      // PageNumber is the page number of the tab.
      aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '4', 'PageNumber':'1'}}");
   }
}
function syncContacts() {
  var vCapId;
  if(arguments.length > 0)
  {
    vCapId = arguments[0];
  }
  else
  {
    vCapId = capId;
  }
  var fvExceptTypes = "";
  iArr = new Array();
  iArr.push("SORB_LEVEL,PROCESSING_DATE");
  if (appMatch("Enforce/*/*/*"))
    fvExceptTypes = "Respondent,Respondent Business,Business,Licensed Individual";
      

  var fvContactTypes = null;
  if (fvExceptTypes != "")
    fvContactTypes = buildContactTypeArrayFromException(fvExceptTypes);
  // ETW - 12/20/18 - Begin Defect EPAWS-946,955
  createRefContactsFromCapContactsAndLink(capId, fvContactTypes, null, false, true, peopleDuplicateCheck);
  //createRefContactsFromCapContactsAndLinkForMA(vCapId, fvContactTypes, null, false, true, peopleDuplicateCheck);
  // ETW - 12/20/18 - End Defect EPAWS-946,955
  setContactsSyncFlag("N");
}

function templateObj(template) {

    this.getTemplateValueByForm = function(gName,fName) {

        if (template == null) return null;

        var asiForms = template.getTemplateForms();
        if(asiForms == null || asiForms.size() == 0) {
           return null;
        }
        
        var subGroups = asiForms.get(0).getSubgroups();
        for(var groupsIndex = 0; groupsIndex < subGroups.size(); groupsIndex++) {
            
            var subGroup = subGroups.get(groupsIndex);
            if(gName == subGroup.getSubgroupName()) {
                
                var asiFields = subGroup.getFields();
                for(var fieldIndex = 0 ; fieldIndex < asiFields.size() ; fieldIndex++) {
                    
                    var field = asiFields.get(fieldIndex);
                    if(field.getFieldName() == fName) {
                        return field.getDefaultValue();
                    }
                }
            }
        }

        return null;
    }

    this.setTemplateValueByForm = function(gName,fName,fValue) {

        if (template == null) return false;

        var asiForms = template.getTemplateForms();
        if(asiForms == null || asiForms.size() == 0) {
           return false;
        }
        
        var subGroups = asiForms.get(0).getSubgroups();
        for(var groupsIndex = 0; groupsIndex < subGroups.size(); groupsIndex++) {
            
            var subGroup = subGroups.get(groupsIndex);
            if(gName == subGroup.getSubgroupName()) {
            
                var asiFields = subGroup.getFields();
                for(var fieldIndex = 0 ; fieldIndex < asiFields.size() ; fieldIndex++) {
                    var field = asiFields.get(fieldIndex);
                    if(field.getFieldName() == fName) {
                        field.setDefaultValue(fValue);
                        return true;
                    }
                }
            }
        }

        return false;
    }

    this.loadTemplateValuesByForm = function() {
        
        var templateArray = new Array();
        var eduTemplate;
        if (template !=null)
            eduTemplate = template.getTemplateForms().toArray();
        if (eduTemplate != null && eduTemplate.length != 0) {
            
            var eduSubGroups = eduTemplate[0].getSubgroups().toArray();

            for (ii in eduSubGroups) {
                
                var tArray = new Array();
                var eduSubGroup = eduSubGroups[ii];
                var asiFields = eduSubGroup.getFields().toArray();

                for (ee in asiFields) {
                    tArray["Template." + asiFields[ee].getFieldName()] = asiFields[ee].getDefaultValue();

                }
            }

            templateArray.push(tArray);
        }
        return templateArray;
    }

    //methods to add
    //any methods for ASIT as templates

}function tempPermitDesignation(newLicId) {
  logDebug("Setting Type Class to LP : " + newLicId);
  editAppSpecific("Type Class", "LP", newLicId);
}
function updateAddressOnAllRelatedLicenses(renewalCapId)
{
  var capContactResult = aa.people.getCapContactByCapID(renewalCapId);
  if (capContactResult && capContactResult.getSuccess())
  {
    capContacts = capContactResult.getOutput();
    logDebug("Cap Contacts for Renewal: " + renewalCapId.getCustomID() + " = " + capContacts.length);
    for (var vCounter1 in capContacts)
    {
try {
      thisCapContact = capContacts[vCounter1];
      thisPeople = thisCapContact.getPeople();
      thisContactModel = thisCapContact.getCapContactModel();
      var contactType = thisPeople.contactType;

      if( contactType != "Licensed Individual" && contactType != "Business" )
      {
        logDebug("Skipping contact type: " + contactType);
        continue;
      }

      logDebug("Renewal Cap Seq.: " + thisPeople.contactSeqNumber + " Cap Ref Num: " + thisCapContact.getCapContactModel().refContactNumber + " Contact Type: " + contactType);

      var renRefContactNum = thisContactModel.refContactNumber;
      var licCapsArray = getLicenseCapsByRefContact(renRefContactNum);
                               /*JIRA#2974*/
        var lastContactAddressAdded;
        if(publicUser){
          lastContactAddressAdded = getLatestContactAddress_Bus(thisContactModel, "Mailing Address");
        }else{
                      lastContactAddressAdded = getLatestContactAddress(thisContactModel, "Mailing Address");
                                    }
        if (!lastContactAddressAdded || lastContactAddressAdded == "Undifined")
                    continue;     
                         var fvModified= isAddressModified(renewalCapId,thisContactModel,lastContactAddressAdded);
      if (!fvModified)
          continue;
                              /*JIRA#2974*/
        if (publicUser) {
          updateContactAddress1(renRefContactNum, thisContactModel, contactType, licCapsArray);
        } else {
      // Update contact address on license records
      updateContactAddress(thisContactModel, contactType, licCapsArray);
                                 }
      // Update Address on the Reference License Professional on license records
      updateAddressOnLicenseProfessional(thisContactModel, licCapsArray);

      break; 
           } catch (err) {
        logDebug("Error occurred inside updateAddressOnAllRelatedLicenses: " + err.message);
      }
    }
  }
}



// Updates the contact addresses on the records in the array
// with the latest CA on the contact passed in.
function updateContactAddress(iContact, pContactType, pLicenseCapsArray)
{
  // Get the most recently added address
  var lastContactAddressAdded = getLatestContactAddress(iContact, "Mailing Address");

  if(lastContactAddressAdded)
  {
    for ( var capCount in pLicenseCapsArray )
    {
      var fvCapID = pLicenseCapsArray[capCount];
      var fvAltID = fvCapID.getCustomID();
      var capContactResult = aa.people.getCapContactByCapID(fvCapID);
      if (capContactResult && capContactResult.getSuccess())
      {
        var licContacts = capContactResult.getOutput();

        // Loop through contact in search for Licensed Individual or Business contact type
        for (var contactCount in licContacts)
        {
          var fvCapContact = licContacts[contactCount];
          var fvCapContactModel = fvCapContact.getCapContactModel();
          var fvCapContactNbr = fvCapContactModel.getPeople().contactSeqNumber;
          var fvContactType = fvCapContactModel.getPeople().getContactType();
          var fvContactRefID =  fvCapContactModel.refContactNumber;

          if ( fvContactType == pContactType && fvContactRefID == iContact.refContactNumber )
          {
            logDebug("********************************************************");
            logDebug(fvContactType + " with contact number " + fvCapContactNbr+ " found on License record: " +  fvAltID );
            logDebug("********************************************************");

            logDebug("DEACTIVATING CONTACT ADDRESSES ON LICENSE START");
            deactivateContactAddressesOnLicense(fvCapID, fvCapContact, fvContactRefID, fvCapContactNbr);
            logDebug("DEACTIVATING CONTACT ADDRESSES ON LICENSE END");

            logDebug("ASSOCIATE NEW CONTACT ADDRESSES ON LICENSE START");
            // Associate the Newly created contact address to the License record
            var result = associateRefContactAddressToRecordContact(fvCapID, fvCapContactNbr, lastContactAddressAdded.getContactAddressModel());
            logDebug("New Contact Address added to License " + fvCapID.getCustomID() + " ? " + result );
            logDebug("ASSOCIATE NEW CONTACT ADDRESSES ON LICENSE END");
          }
        }
      }
    }
  }
}

// Updates the LP addresses on the records in the array
// with the latest CA on the contact passed in.
function updateAddressOnLicenseProfessional(iContact, pLicenseCapsArray)
{   
  logDebug("********************************************************");
  logDebug("LICENSE PROFESSIONAL ADDRESS UPDATE");
  logDebug("********************************************************");
  
  // Get the most recently added address
  var lastContactAddressAdded = getLatestContactAddress(iContact, "Mailing Address");

  if(lastContactAddressAdded)
  {
    for ( var capCount in pLicenseCapsArray )
    {
      var curCapId = pLicenseCapsArray[capCount]; 

      logDebug("LICENSE PROFESSIONAL ADDRESS UPDATE FOR " +  curCapId.getCustomID() + " START");    
      // Get reference LP
      var vRefLP = getRefLicenseProf(curCapId.getCustomID());

      // Update the Reference License Professional
      if (vRefLP) {
        
        //Sagar : PRD Defect 4160 Fix - START
        if (lastContactAddressAdded.getHouseNumberAlphaStart() == null)
        {
          vRefLP.setAddress1(" " + lastContactAddressAdded.getAddressLine1());
        }
        else
        {
          vRefLP.setAddress1(lastContactAddressAdded.getHouseNumberAlphaStart() + " " + lastContactAddressAdded.getAddressLine1());
        }
        //Sagar : PRD Defect 4160 Fix - END
        
        vRefLP.setAddress2(lastContactAddressAdded.getAddressLine2());
        vRefLP.setAddress3(lastContactAddressAdded.getAddressLine3());
        vRefLP.setCity(lastContactAddressAdded.getCity());
        vRefLP.setState(lastContactAddressAdded.getState());
        vRefLP.setZip(lastContactAddressAdded.getZip());
        vRefLP.setContryCode(lastContactAddressAdded.getCountryCode());
        vRefLP.setCountry(lastContactAddressAdded.getCountryCode());      
    
        var result = aa.licenseScript.editRefLicenseProf(vRefLP);
        logDebug("Reference LP successfully updated ? " + result.getSuccess());       
      }   
      
      // Remove the LP link from License tab and replace with updated Reference LP  
      var capLicenseResult = aa.licenseScript.getLicenseProf(curCapId);     
      if( useAppSpecificGroupName)
        var typeClass = getAppSpecific("TYPE CLASS.Type Class", curCapId);
      else 
        var typeClass = getAppSpecific("Type Class", curCapId);
      if (capLicenseResult.getSuccess() && typeClass) 
      {
        var capLicenseArr = capLicenseResult.getOutput();
        for (xx in capLicenseArr)
        {
          if( typeClass == capLicenseArr[xx].getBusinessLicense() )
          {
            // Get reference LP
            //var vRefLP = getRefLicenseProf(curCapId.getCustomID());
            if( capLicenseArr[xx].getPrintFlag() == "Y")
            {
                capLicenseArr[xx].setPrintFlag("N");
                var result = aa.licenseProfessional.editLicensedProfessional(capLicenseArr[xx]);
                logDebug("Setting primary flag to N " +  result.getSuccess());
            }           
            logDebug("Removing license LP: " + capLicenseArr[xx].getLicenseNbr() + " with Type Class = " + typeClass + " from CAP " + curCapId.getCustomID());
            var remCapResult = aa.licenseProfessional.removeLicensedProfessional(capLicenseArr[xx]);

            capListResult = aa.licenseScript.associateLpWithCap(curCapId, vRefLP);
            retVal = capListResult.getSuccess();
            logDebug("Linked New license LP successfully ?" + retVal);
            break;
          }
        }
      }   
      logDebug("LICENSE PROFESSIONAL ADDRESS UPDATE FOR " +  curCapId.getCustomID() + " END");        
    }
  } 
}

function getLatestContactAddress(iContact) {
  var useAddressType = false;
  var addressType;

  if (arguments.length == 2) {
    addressType = arguments[1];
    useAddressType = true;
  }

  var fvContactAddress;
  var fvAddressResult = aa.address.getContactAddressListByCapContact(iContact).getOutput();
  var latestDate = new Date(0);
  var addId = -1;
  if (fvAddressResult && fvAddressResult.length > 0) {
    for (rr in fvAddressResult) {
      try {
        addressAuditDate = new Date(fvAddressResult[rr].getAuditDate().getEpochMilliseconds());
        addressId = fvAddressResult[rr].addressID;
        if (addressAuditDate > latestDate && fvAddressResult[rr].getExpirationDate() == null && (!useAddressType || addressType == fvAddressResult[rr].getContactAddressModel().getAddressType())) {
          latestDate = new Date(addressAuditDate);
          addId = fvAddressResult[rr].addressID;
          fvContactAddress = fvAddressResult[rr];
        } else if (addressAuditDate >= latestDate && addressId > addId && fvAddressResult[rr].getExpirationDate() == null && (!useAddressType || addressType == fvAddressResult[rr].getContactAddressModel().getAddressType())) {
          latestDate = new Date(addressAuditDate);
          addId = fvAddressResult[rr].addressID;
          fvContactAddress = fvAddressResult[rr];

        }
      } catch (err) {
        logDebug("Warning**" + err.message);
      }
    }

    if (fvContactAddress) {
      var fvContactAddressModel = fvContactAddress.contactAddressModel;
      aa.print("Latest " + fvContactAddressModel.getAddressType() + " address found (Address ID " + fvContactAddress.addressID + ") for contact " + iContact.getPeople().contactSeqNumber + " ref num " + iContact.refContactNumber + " with audit date " + addressAuditDate);
    }
  }
  return fvContactAddress;
}

function deactivateContactAddressesOnLicense(pLicenseCapId, pLicenseContact, pRefNum, pLicenseContactNbr)
{
  var fvContactAddresses = getContactAddressesByType(pLicenseContact.getCapContactModel(), "Mailing Address");

  if ( fvContactAddresses && fvContactAddresses.length > 0 )
  {
    for ( i in fvContactAddresses)
    {
      var fvContactAddress = fvContactAddresses[i];
      var fvContactAddressID = fvContactAddress.addressID;
      var fcContactAddressEndDate = fvContactAddress.getExpirationDate();

      // If the end date for the address has already been set don't deactivate
      if( !fcContactAddressEndDate)
      {
        // Copy the existing contact address on license
        var fvCopiedContactAddress = createRefContactAddressFromAddress(pRefNum, fvContactAddress, "Mailing Address");

        // Remove the existing contact address from license
        removeContactAddress(pLicenseContact, fvContactAddressID );

        // // Set the expiration date for the contact address that was copied
        var fvCopiedContactAddressModel = fvCopiedContactAddress.getContactAddressModel();
        fvCopiedContactAddressModel.setExpirationDate(new Date());
        var editResult = aa.address.editContactAddress(fvCopiedContactAddressModel).getOutput();
        logDebug("Deactivated Contact Address (" + fvCopiedContactAddress.addressID + ") ? " + editResult);

        // Associate the expired contact address to the license
        var result = associateRefContactAddressToRecordContact(pLicenseCapId, pLicenseContactNbr, fvCopiedContactAddressModel);
      }
    }
  }
  else
    logDebug("No Contact Addresses found on License Record.");
}

function removeContactAddress(ipCapContact, ipContactAddressID)
{
  var fvXRef = aa.address.createXRefContactAddressModel().getOutput();
  fvXRef.setEntityID(parseInt(ipCapContact.getPeople().contactSeqNumber));
  fvXRef.setEntityType("CONTACT");
  fvXRef.setCapID(ipCapContact.getCapID());
  fvXRef.setAddressID(ipContactAddressID);

  var fvXRefContactAddresses = aa.address.getXRefContactAddressList(fvXRef.getXRefContactAddressModel()).getOutput();
  for (var fvCounter in fvXRefContactAddresses)
  {
    var fvXRefContactAddress = fvXRefContactAddresses[fvCounter];
    if ( ipContactAddressID == fvXRefContactAddress.getAddressID())
    {
     var fvSuccess = aa.address.deleteXRefContactAddress(fvXRefContactAddress.getXRefContactAddressModel());
     logDebug("Contact Address (" + ipContactAddressID + ") removed successfully? " + fvSuccess.getSuccess() );
    }
  }
}

function associateRefContactAddressToRecordContact(itemCap, cSeqNumber, rConAddrModel) {
  if (itemCap && cSeqNumber && rConAddrModel) {
    var xRefContactAddress = aa.address.createXRefContactAddressModel().getOutput();
    xRefContactAddress.setCapID(itemCap);
    xRefContactAddress.setAddressID(rConAddrModel.getContactAddressPK().addressID);
    // Set the daily contact id to xRefContactAddress model
    xRefContactAddress.setEntityID(aa.util.parseLong(cSeqNumber));
    xRefContactAddress.setEntityType(rConAddrModel.getEntityType());
    // Create
    var xrefResult = aa.address.createXRefContactAddress(xRefContactAddress.getXRefContactAddressModel());
    if (xrefResult.getSuccess) {
      logDebug("Successfully associated reference contact address to cap contact: " + cSeqNumber);
      return true;
    } else {
      logDebug("Failed to associate reference contact address to cap: " + xrefResult.getErrorMessage());
      return false;
    }
  } else {
    logDebug("Could not associate reference contact address no address model, capId or cap contact sequence number");
    return false;
  }
}

function createRefContactAddressFromAddress(rSeqNbr, nAddrModel, addrType) {
  if (nAddrModel && rSeqNbr) {
    var contactAddressScriptModel = aa.address.createContactAddressModel().getOutput();
    contactAddressScriptModel.setServiceProviderCode(servProvCode);
    contactAddressScriptModel.setAuditStatus("A");
    contactAddressScriptModel.setAuditID(currentUserID);
    contactAddressScriptModel.setEffectiveDate(nAddrModel.getEffectiveDate());
    var contactAddressModel = contactAddressScriptModel.getContactAddressModel();
    contactAddressModel.setEntityID(parseInt(rSeqNbr));
    contactAddressModel.setEntityType("CONTACT");
    contactAddressModel.setAddressType(addrType);
    contactAddressModel.setAddressLine1(nAddrModel.getAddressLine1());
    contactAddressModel.setAddressLine2(nAddrModel.getAddressLine2());
    contactAddressModel.setAddressLine3(nAddrModel.getAddressLine3());
    contactAddressModel.setHouseNumberStart(nAddrModel.getHouseNumberStart());
    contactAddressModel.setHouseNumberEnd(nAddrModel.getHouseNumberEnd());
    contactAddressModel.setHouseNumberAlphaStart(nAddrModel.getHouseNumberAlphaStart());
    contactAddressModel.setHouseNumberAlphaEnd(nAddrModel.getHouseNumberAlphaEnd());
    contactAddressModel.setStreetName(nAddrModel.getStreetName());
    contactAddressModel.setCity(nAddrModel.getCity());
    contactAddressModel.setState(nAddrModel.getState());
    contactAddressModel.setZip(nAddrModel.getZip());
    contactAddressModel.setCountryCode(nAddrModel.getCountryCode());

    var contactAddressModel = contactAddressScriptModel.getContactAddressModel();
    var returnModel = aa.address.createContactAddress(contactAddressModel);
    if (returnModel.getSuccess()) {
      logDebug("Create Contact Address Successfully: " + returnModel.getOutput().getAddressID());
      return returnModel.getOutput();
    } else {
      logDebug("Create Contact Address Failed:" + returnModel.getErrorMessage());
      return false;
    }
  } else {
    logDebug("Could not create reference contact address no address model or reference contact sequence number");
    return false;
  }
}

function getContactAddressesByType(iContact, iAddressType)
{
  var cArray = new Array();
  var fvAddressResult = aa.address.getContactAddressListByCapContact(iContact).getOutput();

  if( fvAddressResult && fvAddressResult.length > 0 )
  {
    for (rr in fvAddressResult)
    {
      var fvContactAddressModel = fvAddressResult[rr].contactAddressModel;
      if (fvContactAddressModel.getAddressType() == iAddressType)
      {
        cArray.push(fvAddressResult[rr]);
      }
    }
  }
  return cArray;
}

function getLicenseCapsByRefContact(ipRefContact)
{
  var licArray = new Array();
  var fvPeople = aa.people.createPeopleModel().getOutput().getPeopleModel();
  var fvCcb = aa.proxyInvoker.newInstance("com.accela.aa.aamain.people.CapContactDAOOracle").getOutput();
  fvPeople.setServiceProviderCode(aa.getServiceProviderCode());
  fvPeople.setContactSeqNumber(ipRefContact);
  var fvCapsQry = fvCcb.getCapContactsByRefContactModel(fvPeople);
  if (!fvCapsQry)
    return licArray;
  var fvCaps = fvCapsQry.toArray();
  if (!fvCaps)
    return licArray;
  for (var fvCounter in fvCaps)
  {
    var fvCap = fvCaps[fvCounter];
    if (!fvCap)
      continue;
    var fvCapIDTmp = fvCap.getCapID();
    if (!fvCapIDTmp)
      continue;
    var fvCapIDQry = aa.cap.getCapID(fvCapIDTmp.getID1(), fvCapIDTmp.getID2(), fvCapIDTmp.getID3());
    if (!fvCapIDQry || !fvCapIDQry.getSuccess())
      continue;
    var fvCapID = fvCapIDQry.getOutput();
    if(!fvCapID)
      continue;
    var fvCapMQry = aa.cap.getCap(fvCapID);
    if (!fvCapMQry || !fvCapMQry.getSuccess())
      continue;
    var fvCapM = fvCapMQry.getOutput();
    if (!fvCapM)
      continue;
    var fvCapType = fvCapM.getCapType();
    if (!fvCapType)
      continue;
    if ( fvCapType.getCategory() == "License" && fvCapM.getCapStatus() == "Current")
    {
      licArray.push(fvCapID);
    }
  }
  aa.print("Found " + licArray.length + " License records with record status of Current and references contact "+ ipRefContact);
  return licArray;
}
function updateAltID(licId,newAltID)
{
   
   var updateCapAltIDResult = aa.cap.updateCapAltID(licId, newAltID);
        if (updateCapAltIDResult.getSuccess())
            logDebug(licId+" AltID changed from "+licId.getCustomID()+" to "+newAltID);
        else
            logDebug("**ERROR: AltID was not changed from "+licId.getCustomID()+" to "+newAltID+": "+updateCapAltIDResult.getErrorMessage())
}
function updateLicRef()
{
  //made updates to function based on defect 4645 and 4628
  if (wfTask == "License") {
    var newLicStatus = capStatus;
    var altId = capId.getCustomID();
    var newLicenseType = null;
    var boardName = getLicensingBoard(capId);
    if (AInfo["Type"])
      newLicenseType = AInfo["Type"];
    else if (AInfo["Type Class"])
      newLicenseType = AInfo["Type Class"];
    else
      newLicenseType = boardName;
    logDebug("newLicenseType : " + newLicenseType);
    var licProfObj = getRefLicenseProf(altId, boardName, newLicenseType);

    if (licProfObj) {
      // licProfObj.setAuditStatus("I"); 
      //as part of defect 3992
      if (wfStatus != "Current" && wfStatus != "Reactivate License" ) {
        licProfObj.setWcExempt("N");
      licProfObj.setAuditStatus("A");
        if (wfStatus == "Voided"){
          licProfObj.setAuditStatus("I"); 
          logDebug("license has been voided");
        }
        newLicStatus = wfStatus;
      }
      if(wfStatus == "Reactivate License") {
        licProfObj.setWcExempt("Y");
        newLicStatus = "Current";
        //add license to print set
        logDebug("re-activated");
        updateTask("License", newLicStatus, "", "","", capId);
        reportName = "DPL|LICENSE_REGISTRATION_CARD";
        callReport(reportName, false, true,"DPL License Print Set");
      }
      if(wfStatus == "Current") {
        licProfObj.setWcExempt("Y");
        licProfObj.setAuditStatus("A");
      }   
      //end defect 3992
      licProfObj.setPolicy(newLicStatus);

      myResult = aa.licenseScript.editRefLicenseProf(licProfObj);
      if (myResult.getSuccess()) {
        logDebug("Successfully updated License No. " + altId + ".");
        logMessage("Successfully updated License No. " + altId + ".");
        addToLicenseSyncSet(capId);
      } else {
        logDebug("**ERROR: can't create ref lic prof: " + myResult.getErrorMessage());
        logMessage("**ERROR: can't create ref lic prof: " + myResult.getErrorMessage());
      }
    }

    // Set all transaction licenses to Deceased
    if (wfStatus == "Deceased")
      setTransactionLicensesToDeceased(altId);
  }
  logDebug("License added to syncset");
}

//Updates the Contact ASI Template on a reference contact.  Takes a reference contact ID (int)
function updateRefContactASI(refID,conPeople) {
               var pModel = aa.people.getPeople(refID).getOutput();
               var cType = pModel.getContactType();
               var sPrvCode = pModel.getServiceProviderCode();
               var asiGroupName = getContactASIGroup(sPrvCode, cType);
               var asiTemplateNew = aa.genericTemplate.getTemplateStructureByGroupName(asiGroupName).getOutput();
               var asiTemplateOld = conPeople.getTemplate();
               //Process ASI
               var aGroupsNew = asiTemplateNew.getTemplateForms().toArray();
               if (asiTemplateOld) {
                              for (var x in aGroupsNew){
                                             var sGroupsNew = aGroupsNew[x].getSubgroups().toArray();
                                             for (var xx in sGroupsNew) {
                              var matchGroup = getSubGroup(asiTemplateOld,sGroupsNew[xx].getSubgroupName());
                                                            if (matchGroup) {
                                                                           //refresh values in the group
                                                                           sGroupsNew[xx] = matchGroup;
                                                                           setContactASIByObj(asiTemplateNew,sGroupsNew[xx].getFields().toArray());
                                                            }
                                             }
                              }
               }
               //Process ASITs
               //getTemplateTables()
               //Commit the edits
               pModel.setTemplate(asiTemplateNew);
               aa.people.editPeople(pModel)
}
/*
 *
 * This function is used to update 'Work Experience Time' ASI using the different between address Start Date and End Date.
 */
function updateWorkExperienceTimeASI(thisContact) {
   var contactAddressList = thisContact.people.getContactAddressList();
   for (var index = 0; index < contactAddressList.size(); index++) {
      var contactAddress = contactAddressList.get(index);
      var startDate = contactAddress.getEffectiveDate();
      var endDate = contactAddress.getExpirationDate();
      if (endDate != null) {      
         var dateDiff = days_between(endDate, startDate);
         editAppSpecific("Work Experience Time", dateDiff);

         aa.print("Updating 'Work Experience Time' ASI with " + dateDiff);        
         logDebug("Updating 'Work Experience Time' ASI with " + dateDiff);
      }
   }
}
/*
 * Closes the current status of the workflow and activates another workflow.
 * used by workflows that require a loopback or a branch and need the task status updated.
 *
 */
function updateWorkflow(closeTask, closeTaskStatus, openTask, openTaskStatus) {

      var wfTaskResult = aa.workflow.getTasks(capId);
      var taskArray = "";
      if (wfTaskResult.getSuccess()) {
         taskArray = wfTaskResult.getOutput();
      } else {
         aa.print("**ERROR: Failed to get workflow object: " + wfTaskResult.getErrorMessage());
         return false;
      }

      for (var i in taskArray) {
         var fTask = taskArray[i];
         var desc = fTask.getTaskDescription(); 
         var disp = fTask.getDisposition(); 
         logDebug("Description: " + desc + ", " + "Status:" + disp); 
     // 2. Check to see if Intake task is complete
         if (desc == closeTask && disp == closeTaskStatus) {
         //updateTask(closeTask, closeTaskStatus, "");
     deactivateTask(closeTask);
         activateTask(openTask);
         updateTask(openTask, openTaskStatus, "");
    }
      }
   }
/* end function
*///Check to see if active affiliated broker is active and one of the types.
function validateAffiliatedBrokerActiveLicense(vFirst, vMiddle, vLast, contactType) {
   var isLicenseTypeExist = false;
   if (contactType == "Affiliated Broker") {
      var refLicProf = aa.licenseScript.getRefLicensesProfByName(aa.serviceProviderCode, vFirst, vMiddle, vLast);
      if (refLicProf.getSuccess()) {
         var tmp = refLicProf.getOutput();
         for (li in tmp) {
            var lic = tmp[li];
            aa.print("License Type: " + lic.getLicenseType() + ", Status: " + lic.getAuditStatus());
            if (lic.getAuditStatus() == "A" && matches(lic.getLicenseType(), "Broker", "Reciprocal Broker", "Attorney Broker")) {
               isLicenseTypeExist = true;
            }
         }
      }
   }

   return isLicenseTypeExist;
}// This fuctions checks to see if continuing educations requirements are met on a record
// Returns true if no requirements are defined
// Retuns true if configured requirements are met
// Returns false if configured requirements are not met
// Note: the agency can add custom rules to this function to handle validation that cannot be configured with standard product functionality
// The function capCEtoArray will probably be very useful if implementing custom rules.
function validateCEMass(CEcap){
  var passed = false;
  var capIDModel = new com.accela.aa.emse.dom.CapIDScriptModel(CEcap);
  var passed = aa.continuingEducation.isContinuingEducationPassed(capIDModel).getOutput();
  //put Agency specific rules here
  
  //end Agency specific rules
  
  //Return the result
  return passed;
}/*
 * Program: WTUB;Enforce!Investigation!Intake!~.js
 *          WTUB;Enforce!Investigation!Field Inspection!~.js
 * 
 * Event: Workflow Task Update Before - WTUB
 *
 * If Complaint Closed via workflow when no Decision code is selected, then 
 * Prevent worflow advancement and display error message 
 * "At least one Decision code is required."
 *
 */

function validateDecisionCode() {
   var isDecisionCode = true;

   var tblDecisionCode = loadASITable("DECISION CODE");
   var tblLength = tblDecisionCode.length;
   if (tblDecisionCode && tblLength > 0) {
      isDecisionCode = true;
   } else {
      isDecisionCode = false;
   }

   return isDecisionCode;
}
/* @desc This function is used to validate the Healtcare Violation(s) ASI
 * Release B CR 134
 */
function validateHealthcareViolations()
{
   var asiOverUtil = AInfo["Overutilization (excessive charges/costs)"];
   var asiFraud = AInfo["Fraud (false claim)"];
   var asiUpcoding = AInfo["Upcoding (over billing)"];
   var asiUnjustified = AInfo["Unjustified referrals"];
   var asiRunners = AInfo["Use of runners"];
   var asiImpPresMed = AInfo["Improperly prescribing medications"];
   var asiMisrepServices = AInfo["Misrepresentation of services"];
   var asiOther = AInfo["Other"];

   if (asiOther == "UNCHECKED" && asiOverUtil == "UNCHECKED" && asiFraud == "UNCHECKED" && asiUpcoding == "UNCHECKED" &&
       asiUnjustified == "UNCHECKED" && asiRunners == "UNCHECKED" && asiImpPresMed == "UNCHECKED" && asiMisrepServices == "UNCHECKED")
   {
      cancel = true;
      showMessage = true;
      comment("At least one checkbox must be selected for Healthcare Violation(s).");
   }
}
/*------------------------------------------------------------------------------------------------------/
/ Function : validateMasterLicensee
/ Purpose: Check if Master Licensee contact type exists and has an active license. 
/
/------------------------------------------------------------------------------------------------------*/
function validateMasterLicensee(masterLicenseeLic) {
  logDebug("validateMasterLicensee - Working with capId:" + masterLicenseeLic);


  if (matches(masterLicenseeLic, null, "")) {
    return false;
  }

  //check to see if license is valid
  var licCapId = aa.cap.getCapID(masterLicenseeLic).getOutput();

  if (licCapId == null) {
    return false;
  }

  myCap = aa.cap.getCap(licCapId).getOutput();

  if (!appMatch("License/Sheet Metal/Master/License", licCapId)) {
    logDebug("Invalid license type");
    return false;
  }

  // get the License Holder contact
  var cc = getContactObj(licCapId, "License Holder");
  if (!cc) {
    logDebug("License Holder contact not found");
    return false;
  }
}
function validEmail(email) {
  var reEx = /\S+@\S+\.\S+/;
  return (reEx.test(email));
}// This function will remove all contact conditions that are associated to that particular record id.
function viewCondInvestigativeIntakePendingRecordIdASI() {
   var subGroupName = "RECORD DETAILS";
   var fieldName = "Record ID"; 
   var contactResult = aa.people.getCapContactByCapID(capId).getOutput();
   for ( var index in contactResult) {
      var thisCapContact = contactResult[index];
      var thispeople = thisCapContact.getPeople();
      if ((thispeople.contactType == 'Respondent') || (thispeople.contactType == 'Respondent Business') || (thispeople.contactType == 'Business') || (thispeople.contactType == 'Licensed Individual')) {

         var capContactModel = thisCapContact.getCapContactModel();
         var vrefNumber = capContactModel.refContactNumber;
  
         var contactCondArray = getContactCondutions(vrefNumber);
         for (cc in contactCondArray) {
            var thisCond = contactCondArray[cc];
            if (thisCond != null) {
               if (thisCond.condition.getConditionDescription() == "Investigative Intake Pending" && thisCond.condition.getConditionStatus() == "Applied") 
         {
          var altId = capId.getCustomID()
          removeInvestigativeIntakeCondition(thisCond, altId, vrefNumber);
                }
            }
         }
      }
   }
}

//The following function returns the value in Record id template field of the Condition added on Contact
function viewCond_InvestigativeIntakePending() {
   var subGroupName = "RECORD DETAILS";
   var fieldName = "Record ID"; 
   var contactResult = aa.people.getCapContactByCapID(capId).getOutput();
   for ( var index in contactResult) {
      var thisCapContact = contactResult[index];
      var thispeople = thisCapContact.getPeople();
      if ((thispeople.contactType == 'Respondent') || (thispeople.contactType == 'Respondent Business') || (thispeople.contactType == 'Business') || (thispeople.contactType == 'Licensed Individual')) {


         var capContactModel = thisCapContact.getCapContactModel();
         var vrefNumber = capContactModel.refContactNumber;
  
         var contactCondArray = getContactCondutions(vrefNumber);
         var vCond = isMatchedNotice(contactCondArray, "Notice", "Investigative Intake Pending", -1);
    
         if (vCond!=null) {
            var tmpl = vCond.condition.getTemplateModel();
            if (tmpl != null) {
               var templateGroups = tmpl.getTemplateForms();
               var subGroups = templateGroups.get(0).getSubgroups();
               for (var subGroupIndex = 0; subGroupIndex < subGroups.size(); subGroupIndex++) {
                  var subGroup = subGroups.get(subGroupIndex);
                  if (subGroupName == subGroup.getSubgroupName()) {
                     var fields = subGroup.getFields();
                     for (var fieldIndex = 0; fieldIndex < fields.size(); fieldIndex++) {
                        var field = fields.get(fieldIndex);
                        //aa.print("Fieldname: " + field.getDisplayFieldName());
                        if (field.getDisplayFieldName() == fieldName) {
                           return field.defaultValue;
                        }
                     }
                  }
               }
            }
         }
      }
   }
}
function voidLateFees()
{
  var fvCapID = null;
  if (arguments.length > 0)
    var fvCapID = arguments[0];
  else
    var fvCapID = capId;
  var fvCap = aa.cap.getCap(fvCapID).getOutput();
  var fvCapStatus = fvCap.getCapStatus();
  var fvTaskStatus = taskStatus("License",null,fvCapID);

  if (fvCapStatus != "Expired" || fvTaskStatus != "Lapsed")
    return;

  var fvExpDate =  convertDate(aa.expiration.getLicensesByCapID(fvCapID).getOutput().getExpDate());
  var fvASITLFW = loadASITable("LATE FEE WAIVERS",fvCapID);
  if (!fvASITLFW)
    return;
  var fvDateFound = false;
  for (var fvRowNum in fvASITLFW)
  {
    var fvRow = fvASITLFW[fvRowNum];
    var fvGrantDate = new Date(fvRow["Date Granted"]);
    if (fvGrantDate.getTime() > fvExpDate.getTime())
    {
      fvDateFound = true;
      break;
    }
  }
  if (!fvDateFound)
    return;
  var fvLicRenewalsResult = aa.cap.getProjectByMasterID(fvCapID, "Renewal", "");
  if (!fvLicRenewalsResult)
    return;
  if (!fvLicRenewalsResult.getSuccess())
    return;
  var fvLicRenewals = fvLicRenewalsResult.getOutput();
  if (!fvLicRenewals)
    return;
  if (fvLicRenewals.length < 1)
    return;
  for (var fvCounter in fvLicRenewals)
  {
    var fvLicRenewal = fvLicRenewals[fvCounter];
    var fvLicRen = fvLicRenewal.capID;
    var fvRenewalCapID = aa.cap.getCapID(fvLicRen.ID1,fvLicRen.ID2,fvLicRen.ID3).getOutput();
    var fvRenewalCap = aa.cap.getCap(fvRenewalCapID).getOutput();
    if (fvRenewalCap.isCompleteCap())
      continue;
    var fvFeeArrayResult = aa.finance.getFeeItemByCapID(fvRenewalCapID);
    if (!fvFeeArrayResult)
      continue;
    if (!fvFeeArrayResult.getSuccess())
      continue;
    var fvFeeArray = fvFeeArrayResult.getOutput();
    if (!fvFeeArray)
      continue;
    if (fvFeeArray.length < 1)
      continue;
    for (var fvFeeCounter in fvFeeArray)
    {
      var fvFees = fvFeeArray[fvFeeCounter];
      var fvFeesDesc = fvFees.getFeeDescription();
      if (fvFeesDesc.length() < 16)
        continue;
      if (fvFeesDesc.substr(0,16) != "Late Renewal Fee")
        continue;
      var fvFeeStatus = fvFees.getFeeitemStatus();
      var fvFeeSeqNum = fvFees.getFeeSeqNbr();
      if (fvFeeStatus == "NEW")
      {
        var fvResult = aa.finance.removeFeeItem(fvRenewalCapID, fvFeeSeqNum);
        if (fvResult.getSuccess())
          logDebug("Late Fees removed successfully from Renewal: " + fvRenewalCapID.getCustomID());
        else
          logDebug("Error: " + fvResult.getErrorMessage() + " while removing Late Fees from Renewal: " + fvRenewalCapID.getCustomID());
      }
      else if (fvFeeStatus == "INVOICED")
      {
        var fvResult = aa.finance.voidFeeItem(fvRenewalCapID, fvFeeSeqNum);
        if (fvResult.getSuccess())
          logDebug("Late Fees voided successfully from Renewal: " + fvRenewalCapID.getCustomID());
        else
          logDebug("Error: " + fvResult.getErrorMessage() + " while voiding Late Fees from Renewal: " + fvRenewalCapID.getCustomID())
      }
    }
  }
}
function waiveCondition(condname)
{
  var condResult = aa.capCondition.getCapConditions(capId);    
  if (condResult.getSuccess()) 
  {
  var capConds = condResult.getOutput();
  } 
  else 
  { 
   logMessage("ERROR: getting cap conditions: " + condResult.getErrorMessage());
   logDebug("ERROR: getting cap conditions: " + condResult.getErrorMessage());
  }

  if (capConds != null)
   {
  logDebug("There are " + capConds.length + " condition(s).");
  for (cc in capConds) 
  {
    var thisCond = capConds[cc];
    var cName = thisCond.getConditionDescription();
    var cStatus = thisCond.getConditionStatus();
    var cStatusType = thisCond.getConditionStatusType();
    if (cName == condname)
    {
       thisCond.setConditionStatus("Met");
       thisCond.setConditionStatusType("Not Applied");
       thisCond.setImpactCode("");
       aa.capCondition.editCapCondition(thisCond);
    }
  }
  }
}
/*
 * Program: ASA;License!DPL!Amendments!Amendment.js
 * Event: ASA
 *
 * If ASI is not a name change, then waive the condition.
 *
 */

function waiveConditionNotNameChange() {
   var isYourRequest = getAppSpecific("What is your request?");
   if (isYourRequest && isYourRequest != "Name Change") {
      var condResult = aa.capCondition.getCapConditions(capId);
      var condArr = null;
      if (condResult.getSuccess()) {
         condArr = condResult.getOutput();
      }

      if (condArr != null) {
         for (ca in condArr) {
            var thisCond = condArr[ca];
            var condType = thisCond.getConditionType();
            var condDesc = thisCond.getConditionDescription();
            var condStatus = thisCond.getConditionStatus();
            if (condType == "Application Checklist" && condDesc == "Validate Name Change Documentation") {
               aa.print("Condition has been waived since it's not a Name Change.");
               thisCond.setConditionStatus("Met");
               thisCond.setConditionStatusType("Not Applied");
               thisCond.setImpactCode("");
               aa.capCondition.editCapCondition(thisCond);
            }
         }
      }
   }
}
function CWM_ELP_CR240_WTUA_UpdateNewDateASI(){
   var sysDate = aa.date.getCurrentDate();
   var sysDateMMDDYYYY = dateFormatted(sysDate.getMonth(), sysDate.getDayOfMonth(), sysDate.getYear(), "MM/DD/YYYY");
   editAppSpecific("New Hearing Date" ,sysDateMMDDYYYY);
 }
/* @desc This method counts number of MasterLIcensees on Journeymans Applications
 * Release B Master Script List ID: 1294
 */

function CWM_ELP_1294_ASA_DPL_getCountofMasterLicensees(){
   try{
      var countOfJourneyman = 0;
      countOfJourneyman = getCountOfJourneymanMasterLicensees();

      if(countOfJourneyman > 6){
         ///var cType = "";
         //var cDesc = ""; 
         //CWM_ELP_Generic_DPL_addConditionOnCap(cType, cDesc);
         //addStdCondition("Notice", "Number of Related Apprentices Warning");
         showMessage=true;
         comment("The Master Licensee already has at least 6 apprentices. " + countOfJourneyman);
      }
   }
   catch(err){
      showMessage=true;
      comment("There is an error on function CWM_ELP_1294_ASA_DPL_getCountofMasterLicensees. Contact System Administrator");
   }
}

/* @desc This method counts number of MasterLIcensees on Journeymans Applications
 * Release B Master Script List ID: 1294
 */

function getCountOfJourneymanMasterLicensees() {
   var countOfJourneyman = 0;
   var contactArray = getContactArray(capId);

   for (cc in contactArray) {
      thisContact = contactArray[cc];

      // Check contact type
      if (thisContact["contactType"] == "Applicant") {
         var refContactId = thisContact["refSeqNumber"];
         countOfJourneyman = getApprenticesByContactNumber(refContactId);
         logDebug("Number of apprentices with reference contact id (" + refContactId + "): " + countOfJourneyman);
      }
   }

   return countOfJourneyman;
}
/**
* @desc This method returns a boolean value true if the application is already processed for License
* @param capIDModel String [] - Contains the capIDModel
* @return a boolean value True/False
*/
function checkIfLicenseExists(capIDModel)
{

  var flag = false;
//try catch added by kpreeti
try{
  var parentListResult = aa.cap.getProjectParents(capIDModel,1);
  if(parentListResult.getSuccess())
  {
    var parentList = parentListResult.getOutput();
    if (parentList.length)
    {     
      var relatedRecordID = parentList[0].getCapID();
      var b1ExpResult = aa.expiration.getLicensesByCapID(relatedRecordID);

      //Get License Status from B1Expiration
      if (b1ExpResult.getSuccess())
      {
        b1Exp = b1ExpResult.getOutput();

        if("Active" == b1Exp.getExpStatus())
        {
          flag = true;
        }
      }
    }
  }
  else
  {
    logDebug("**WARNING: no related record found: "+capIDModel+" "+parentListResult.getErrorMessage());
  }
  
}catch(err){
logDebug("error catched in checkiflicenseexists "+err.message);
}
  return flag;

}
function addCourseFees(){
  addFee("RACO","RA-CECOURSE-APP","STANDARD",1,"Y");
}
function CWM_ELP_808_ASA_DPL_SetExpDateThirtyDaysAfter(licID) {
  var useAppSpecificGroupName = false;
  var expDateString = "";
  var asiDate = getAppSpecific("On what date do you wish your 30 DAY PERMIT to start?", capId);
  logDebug("Start 30 Day Permit on: " + asiDate);
  if(asiDate != null)
  {
    
    var calcExpDate = dateAdd(asiDate,30);
    expDateString = calcExpDate; 
    logDebug("Exp Date: " + expDateString);
    licCustID = licID.getCustomID();
    logDebug("Parent ID: " + licCustID + " " + licID);
    thisLic=new licenseObject(licCustID,licID);
    thisLic.setExpiration(expDateString);
    thisLic.setStatus("Active");
  }
  else
  {
    var calcExpDate = dateAdd(null,30);
    expDateString = calcExpDate; 
    logDebug("Exp Date: " + expDateString);
    licCustID = licID.getCustomID();
    logDebug("Parent ID: " + licCustID + " " + licID);
    thisLic=new licenseObject(licCustID,licID);
    thisLic.setExpiration(expDateString);
    thisLic.setStatus("Active");
  }
}
/* @desc This method copies Other name fields to AKA fields on a contact
 * Release B Master Script List ID: 1337
 */
function CWM_ELP_1337_ASA_DPL_CopyOtherNameFieldsToAKA()
{

var capContactResult = aa.people.getCapContactByCapID(capId);
if (capContactResult.getSuccess()) {
  capContactResult = capContactResult.getOutput();
  for (yy in capContactResult) {
    thisCapContact = capContactResult[yy];
    thisPeople = thisCapContact.getPeople();
    aa.print(thisPeople.contactType);

    // if (thisPeople.contactType == "Business")
    // {
    var asiTemplate = thisPeople.template;
    if (asiTemplate != null) {
      var templategroup = asiTemplate.getTemplateForms();
      var field1 = getFieldAttributeByName(templategroup, "APPLICANT OTHER NAMES", "Classification");
      if (field1)
        var classification = field1.getDefaultValue();

      var field2 = getFieldAttributeByName(templategroup, "APPLICANT OTHER NAMES", "First Name");
      if (field2)
        var firstname = field2.getDefaultValue();

      var field3 = getFieldAttributeByName(templategroup, "APPLICANT OTHER NAMES", "Middle Name");
      if (field3)
        var middlename = field3.getDefaultValue();

      var field4 = getFieldAttributeByName(templategroup, "APPLICANT OTHER NAMES", "Last Name");
      if (field4)
        var lastname = field4.getDefaultValue();

      capContactModel = thisCapContact.getCapContactModel();

      //Add an AKA row to Ref contact

      aa.print(capContactModel);
      var c = getContactObj(capId, thisPeople.contactType);
      aa.print(c);
      //add a row when there is atleast one value in any of the AKA fields.
      if (classification != null || firstname != null || middlename != null || lastname != null) {
        c.addAKA(firstname, middlename, lastname, classification, new Date(), null);
      }

    }
  }
}
}

/* @desc This function sets the expiration date on the license
 * Release B Master Script List ID: 753
 * Defect 3717
 */
function CWM_ELP_753_WTUA_DPL_renewalExpirationDate()
{
    try
    {
        if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
        {
            var licId = getParent();
      
            //var vParentCapID = getParentLicenseCapID(capId);
            if(licId)
            {
               //var licNum = vParentCapID.getCustomID();
         var licCustId = licId.getCustomID();
               thisLic = new licenseObject(licCustId,licId);
               var renewStatus = getAppSpecificValue ("I am renewing as", capId);
                logDebug("renewStatus:" +renewStatus);
                if (renewStatus == "Inactive")
        {
                         thisLic.setExpiration((dateAddMonths(thisLic.b1ExpDate,24)));
              thisLic.setStatus("Inactive");
                  } else {
                          thisLic.setExpiration((dateAddMonths(thisLic.b1ExpDate,24)));
              thisLic.setStatus("Active");
                }  
            }
        }
        
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUA function CWM_ELP_753_WTUA_DPL_renewalExpirationDate, Please contact administrator");
    }
}
/* @desc: this function will validate that no more than 1 Affiliated Broker is added
 * Release B Master Script List
 * ID: 1093
 */
function CWM_ELP_1093_CUB_DPL_onlyActiveAffiliatedBrokers(){
   try{
      var numOfAffiliatedBrokers = getActiveAffiliatedBrokerUpdated();
      if(numOfAffiliatedBrokers < 1){
         cancel=true;
         showMessage=true;
         comment("Only Active Affiliated Brokers must be added.");
      }
   }
   catch(err){
    showMessage=true;
    comment("Error on function CWM_ELP_1093_CUB_DPL_onlyActiveAffiliatedBrokers. Contact Administrator")
   }
}
/*
 *
 * This function is used and updated to validate that one and only one 'Active' Affiliated Broker Contact exists.
 */
function getActiveAffiliatedBrokerUpdated() {
   var activeAffiliatedBroker = 0;
   var contactArray = getContactArray();
   if (contactArray != null) {
      for (cc in contactArray) {
         thisContact = contactArray[cc];
         if (matches(thisContact["contactType"],"Affiliated Broker","License Individual","Reciprocal Broker","Attorney Broker")) {
            var conSeqNum = thisContact["contactSeqNumber"];
            var contactAddressModel = aa.address.getContactAddressModel(capId, conSeqNum).getOutput();
            var contactAddressList = aa.address.getContactAddressList(contactAddressModel).getOutput();
            if (contactAddressList.length > 0) {
               for (ca in contactAddressList) {
                  var contactAddress = contactAddressList[ca];
                  var startDate = contactAddress["effectiveDate"];
                  var endDate = contactAddress["expirationDate"];
                  if (startDate != null && endDate == null) {
                     activeAffiliatedBroker++;
                  }
               }
            }
         }
      }
   }
   return activeAffiliatedBroker;
}
function getAcaDocumentList(pTempCapId)
{
   if(pTempCapId == null || pTempCapId == "")
   {
      logDebug("Error in function getAcaDocumentList");
      return null;
   }
   var docResult = aa.document.getDocumentListByEntity(pTempCapId, "TMP_CAP");
   if( ! docResult.getSuccess())
   {
      logDebug("Could not retrieve documents in function getAcaDocumentList.");
      return null;
   }
   else
   return docResult.getOutput();
 
}
// end function getAcaDocumentList


function CWM_ELP_870_DPL_ASA_addConditionForDisciplinaryHistoryGroup()
{
  var answer = "N";
  var capContactResult = aa.people.getCapContactByCapID(capId);
  if (capContactResult.getSuccess()) 
  {
    capContactResult = capContactResult.getOutput();
    for (yy in capContactResult) 
    {
      thisCapContact = capContactResult[yy];
      thisPeople = thisCapContact.getPeople();
      if (thisPeople.contactType == "Applicant")
      {
        var asiTemplate = thisPeople.template;
        if (asiTemplate != null) 
        {
          var templategroup = asiTemplate.getTemplateForms();
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "1. Has disciplinary action been taken against you by a licensing board in any jurisdiction?");
            if (question)
              answer = question.getDefaultValue();
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "2. Are you the subject of pending disciplinary action by a licensing board in any jurisdiction?");
            if (question)
              answer = question.getDefaultValue();
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "3. Have you voluntarily surrendered a professional license to a licensing board in any jurisdiction?");
            if (question)
              answer = question.getDefaultValue();
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "4. Have you ever applied for and been denied a professional license in any jurisdiction?");
            if (question)
              answer = question.getDefaultValue();
          }
          if (answer == "N")
          {
            var question = getFieldAttributeByName(templategroup, "DISCIPLINE HISTORY", "5. Have you been convicted of a felony or misdemeanor in any jurisdiction?");
            if (question)
              answer = question.getDefaultValue();
          }
        }
      }
    }
  }

  var CondType = "Application Checklist";
  var CondDesc = "Validation of Discipline History Questions";
  if (answer == "Y")
  {
    if (appHasCondition(CondType, null, CondDesc, null))
      editCapConditionStatus(CondType, CondDesc, "Pending", "Applied");
    else
      addAppCondition(CondType, "Pending", CondDesc, CondDesc, "Required");
    addStdCondition(CondType, "Disciplinary Action", capId);
  }
  else if (appHasCondition(CondType, "Pending", CondDesc, null))
    editCapConditionStatus(CondType, CondDesc, "Met", "Not Applied");
}

/* @desc  The Real Estate School Renewal should be printed in-line.  The School Renewal does not use the same *renewal document as standard licences.
 * Release B Master Script List ID: 1357
 */

function CWM_ELP_1357_DPL_WTUA_RESchoolRenInlinePrint()
{
  if((wfTask == "Validate" && wfStatus == "Approved") || (wfTask == "Validate" && wfStatus == "Approved with Conditions"))
  {
    InlinePrint("SM|RENEWAL_NOTIFICATION", capId);
  } 
}

/* addSubmitAppraiserApplicationFees
*  This function will add Application and License Fees when Military Status is N/A
*  This function is added as part of Defect 3166
*  ASA: Application Submit After
*/
function CWM_ELP_addSubmitAppraiserApplicationFees(){
  useAppSpecificGroupName = true;
  var militaryStatus = getAppSpecific("MILITARY STATUS.Military Status");
  var feeCodeApp = "RASA";
  var feeCodeLicense = "RASO";
  var feeSchedule = "RA";
  //Updated to add License Real Estate Appraiser Application
  try{
      //if fee exists, then update. Else add
    if (militaryStatus == "N/A"){
      if (feeExists(feeCodeApp)) {
        updateFee(feeCodeApp, feeSchedule, "STANDARD", 1, "Y");
        logDebug("Fee Updated.");
      }  
      else {
        addFee(feeCodeApp, feeSchedule, "STANDARD", 1, "Y");
        logDebug("Fee Added.");   
      }

      if (feeExists(feeCodeLicense)) {
        updateFee(feeCodeLicense, feeSchedule, "STANDARD", 1, "Y");
        logDebug("Fee Updated.");
      }  
      else {
        addFee(feeCodeLicense, feeSchedule, "STANDARD", 1, "Y");
        logDebug("Fee Added.");   
      }
    }
  }
  catch(err){
    logDebug("Error on function CWM_ELP_addSubmitAppraiserApplicationFees. Please contact System Administrator. " + err.stack);
  }
}

function setPremiseAddressValidatedFlag(addCapId)
{
    var capAddrResult = aa.address.getAddressByCapId(addCapId);
    if (capAddrResult.getSuccess())
    {
        var addresses = capAddrResult.getOutput();
        for (zz in addresses)
        {
            if(addresses[zz].getLevelPrefix()) {
                                                                if (addresses[zz].getLevelPrefix() == "Y") {
                                                                                addresses[zz].setValidateFlag("Y");
                                                                }
                                                                else {
                                                                                addresses[zz].setValidateFlag("N");
                                                                }
                                                                addresses[zz].setLevelPrefix("");
                                                                //Still need to Commit the edits
                                                                aa.address.editAddress(addresses[zz]);
                                                }
        }
    }
}

/* addSubmitAppraiserApplicationFees
*  This function will add Application and License Fees
*  This function is added as part of Defect 3251
*  ASA: Application Submit After
*/
function CWM_ELP_Defect3251_addSubmitAppraiserApplicationFees(){
  var feeCodeApp = "RASA";
  var feeCodeLicense = "RASO";
  var feeSchedule = "RA";
  //Updated to add License Real Estate Appraiser Application
  try{
      //if fee exists, then update. Else add
    
      if (feeExists(feeCodeApp)) {
        updateFee(feeCodeApp, feeSchedule, "STANDARD", 1, "Y");
        logDebug("Fee Updated.");
      }  
      else {
        addFee(feeCodeApp, feeSchedule, "STANDARD", 1, "Y");
        logDebug("Fee Added.");   
      }

      if (feeExists(feeCodeLicense)) {
        updateFee(feeCodeLicense, feeSchedule, "STANDARD", 1, "Y");
        logDebug("Fee Updated.");
      }  
      else {
        addFee(feeCodeLicense, feeSchedule, "STANDARD", 1, "Y");
        logDebug("Fee Added.");   
      }
    
  }
  catch(err){
    logDebug("Error on function CWM_ELP_Defect3251_addSubmitAppraiserApplicationFees. Please contact System Administrator. " + err.Stack);
  }
}

/* @desc This function is used to skip the Complaint documentation page when Health Care is selected.
 * Release B CR 134
 */
function skipComplaintDocPage()
{
   var hcaSignature = AInfo["HEALTH CARE ATTESTATION.Signature"];
   if (hcaSignature != null || hcaSignature != "") {
      aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '6', 'PageNumber':'1'}}");
   }
}

function editCOAStatus(cType, cDesc)
{
var itemCapId = capId;

if(arguments.length>2)
itemCapId = arguments[2];

var condResult = aa.capCondition.getCapConditions(itemCapId);
  var condArr = null;
  if (condResult.getSuccess()) 
  {
     condArr = condResult.getOutput();
  }

  if (condArr != null) {
     for (var ca in condArr) {
        var thisCond = condArr[ca];
        var condType = thisCond.getConditionType();
        var condDesc = thisCond.getConditionDescription();
        var condStatus = thisCond.getConditionStatus();
     
        if (condType.toUpperCase() == String(cType).toUpperCase() && condDesc.toUpperCase() == String(cDesc).toUpperCase())
       {
           thisCond.setConditionStatus("Met");
           thisCond.setConditionStatusType("Not Applied");
           thisCond.setImpactCode("");
           var cRes = aa.capCondition.editCapCondition(thisCond);
           
          if(cRes.getSuccess())
           logDebug("Condition has been Met.");
           else
           logDebug("Error setting condition: "+cRes.getErrorMessage())
        }
     }
  }
}

/* Release B Master Script 
 * Defect ID: 3731
 */
 function CWM_ELP_Defect_3731_CRCA_DPL_copyBoardFromLicense(){
  try{
    useAppSpecificGroupName = true;
    var vParent = getParentLicenseCapID(capId);
    var boardString = getAppSpecific("LICENSE TYPE.Board");
    if(vParent){
      if(boardString != null && boardString != ""){
        editAppSpecific("LICENSE TYPE.Board", boardString, vParent);
      }
    }
  }
  catch(err){
    logDebug("Error on CRCA function CWM_ELP_Defect3498_DPL_CRCA_addCourseRenewalFee, Please contact administrator");
  }
 }

function CWM_ELP_Defect_3758_CRCA_DPL_AddApplicationFeeonACA(){
   try{
      if(publicUser){
         updateFee("RACO","RA-CECOURSE-APP", "STANDARD", 1, "Y");
      }
   }
   catch(err){
      showMessage=true;
      comment("Error on WTUA function CWM_ELP_Defect_3758_CRCA_DPL_AddApplicationFeeonACA, Please contact administrator");
   }
}

/* @desc This method Adds Renewal Fee on Appraiser ACA and AA.
 * Release B Defect: 3758
 * Event: CRCA
 */

function CWM_ELP_Defect_3770_CRCA_DPL_AddFeesonAppraiserRenewalACA(){
   try{
      useAppSpecificGroupName = true;
      var typeClass = getAppSpecific("TYPE CLASS.Type Class");
      if(typeClass == "CG"){
         updateFee("RAGW","RA", "STANDARD", 1, "Y");
      }
      if(typeClass == "CR"){
         updateFee("RARW","RA", "STANDARD", 1, "Y");
      }
      if(typeClass == "LA"){
         updateFee("RASR","RA", "STANDARD", 1, "Y");
      }
   }
   catch(err){
      showMessage=true;
      comment("Error on WTUA function CWM_ELP_Defect_3770_CRCA_DPL_AddFeesonAppraiserRenewalACA, Please contact administrator");
   }
}

/* @desc This method Copy Individual contact from License to Renewal
 * Release B Defect: 3842
 * Event: CRCA
 */

function CWM_ELP_Defect_3842_CRCA_DPL_copyContactstoRenewal(){
   try{
      useAppSpecificGroupName = true;
      var vParentCap = getParentLicenseCapID(capId);
      if(vParentCap){
         //copy Contacts
         copyContactsByTypeWithAddress(vParentCap, capId, "Instructor");
         logDebug("Contact copied");
      }
   }
   catch(err){
      showMessage=true;
      comment("Error on WTUA function CWM_ELP_Defect_3842_CRCA_DPL_copyContactstoRenewal, Please contact administrator");
   }
}

function CWM_ELP_CRCA_DPL_copyContactstoRenewalBusiness(){
   try{
      useAppSpecificGroupName = true;
      var vParentCap = getParentLicenseCapID(capId);
      if(vParentCap){
         //copy Contacts
         copyContactsByTypeWithAddress(vParentCap, capId, "Business");
         logDebug("Contact copied");
      }
   }
   catch(err){
      showMessage=true;
      comment("Error on CRCA function CWM_ELP_CRCA_DPL_copyContactstoRenewalBusiness, Please contact administrator");
   }
}

/* @desc This method Copy only Licensed Individual contact from License to Renewal
 * Release B Defect: 3854
 * Event: CRCA
 */

function CWM_ELP_Defect_3854_CRCA_DPL_copyPrimaryContacttoRenewal(){
   try{
      var vParentCap = getParentLicenseCapID(capId);
      var contactObj = aa.people.getCapContactByCapID(capId).getOutput();
logDebug ("contactObj len" + contactObj.length);
      
      if(vParentCap){
         //copy only Licensed Individual Contact
         for(i in contactObj){ 
            var peopleModel= contactObj[i].getPeople();
            if(peopleModel.getContactType()!="Licensed Individual"){
               var conSeqNum = peopleModel.getContactSeqNumber();
               aa.people.removeCapContact(capId, conSeqNum);
               logDebug("Contact sequence Number deleted: " + conSeqNum + " from record: " + capId.getCustomID());
            }
         }
      }
   }
   catch(err){
      showMessage=true;
      comment("Error on WTUA function CWM_ELP_Defect_3854_CRCA_DPL_copyPrimaryContacttoRenewal, Please contact administrator");
   }
}
  

/* @desc This method performs the following when an application/renewal is approved:
*   1. Update the expiration date according to the expiration policy of the license 
*   2. Update the Renewal status on the license record to be 'Active'
*/
function CWM_ELP_3863_WTUA_DPL_renewalApprovedUpdateLic(){
  try{
    var issueDateObj = new Date();
    var expDate = new Date();
      //if renewal is approved
      if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions")){
        //get parent license
        var vParentCapID = getParentLicenseCapID(capId);
        if(vParentCapID){
          
          //get Contact Birthdate
          var capContactResult = aa.people.getCapContactByCapID(capId);
            if (capContactResult.getSuccess()) {
              
                capContactResult = capContactResult.getOutput();
                for (i in capContactResult) {
                  
                    var peopleModel = capContactResult[i].getPeople();
                    
                    if (peopleModel.getContactType() == "Licensed Individual"){
                      
                        var capContactScriptModel = capContactResult[i];
                        var capContactModel = capContactScriptModel.getCapContactModel();
                        var bDate = capContactModel.getBirthDate();
                        if (bDate) {
                            bDateObj = new Date(bDate.getTime());
                            logDebug("Birth date:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
                        }
                    }
                }
              }


              // Calculate Expire Date from Birthdate
              if (issueDateObj && bDateObj) {
                  //var issueDateYear = issueDateObj.getFullYear();
                  if (bDateObj.getMonth() > issueDateObj.getMonth()) {
                      expDate.setFullYear(issueDateObj.getFullYear() + 2); // setting to current year since setLicExpirationDate will add 2 years
                      logDebug("If expDate Year " + expDate.getFullYear());
                  } 
                  else {
                      expDate.setFullYear(issueDateObj.getFullYear() + 3); // setting to next year if birth date is past already and setLicExpirationDate will add 2 years
                      logDebug("Else expDate Year " + expDate.getFullYear());
                  }
                  
                  expDate.setMonth(bDateObj.getMonth());
                  expDate.setDate(bDateObj.getDate());
              }
            

          // get expiration date
          var expDateString = ((expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear());
          logDebug("Expiration date to pass: " + (expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear());
          var licNum = vParentCapID.getCustomID();
          thisLic = new licenseObject(licNum,vParentCapID);
          thisLic.setExpiration(expDateString); 
thisLic.setStatus("Active");     
        }
      }
    }
    catch(err){
      showMessage=true;
      comment("Error on function CWM_ELP_3863_WTUA_DPL_renewalApprovedUpdateLic. Contact Administrator. " + err.stack);
    }
}


function CWM_ELP_4066_DPL_ASB_CheckBrokerLicNo()
{
  try
  {
                  
    var boardCode = lookup("BOARDS", "Real Estate Brokers & Salespersons");
                useAppSpecificGroupName = true;
    var myAInfo = new Array();
                loadAppSpecificBefore(myAInfo);
                var licenseNum = myAInfo["ADD NEW RELATIONSHIP.License Number"];

    var changeType = myAInfo["CHANGE TYPE.Change Type"];
                 logDebug ("boardCode " + boardCode );
                logDebug ("licenseNum " + licenseNum );
                logDebug ("changeType " + changeType );

    if (changeType.equals("Add New Relationship") && (licenseNum != undefined && licenseNum != null && licenseNum != "") )
    {

       
                        var isActive = CWM_ELP_4066_DPL_isLicenseActive(licenseNum , boardCode, "S");
      if (!isActive) 
      {
        cancel = true;
        showMessage = true;
        message = "";
        comment("License entered is not Current, please contact the Board.");
      }
    }
  }
  catch(err)
  {
                                 cancel = true;
    showMessage=true;
    comment("Error on ASB function CWM_ELP_4066_DPL_ASB_CheckBrokerLicNo, Please contact administrator");
  }
}

/* @desc The method checks if Real Estate Broker  is active
 * Defect 4066
 */

function CWM_ELP_4066_DPL_isLicenseActive(licenseNum, boardName, licenseType) 
{
   var isLicenseActive = true;
   var licProfObj = getRefLicenseProf(licenseNum, boardName, licenseType);
   
  if (licProfObj) {
       var capResult = aa.cap.getCapID( licenseNum). getOutput();
  
    var parentCap = aa.cap.getCap(capResult ).getOutput();
    var parentCapStatus = parentCap.getCapStatus();
     logDebug ("parentCapStatus" + parentCapStatus);

      //if (licProfObj.getAuditStatus() == "I") {
      
      if (licProfObj.getWcExempt() == "N" || parentCapStatus != "Current") {  
         isLicenseActive = false;
      }
   } else {
      isLicenseActive = false;
   }
   return isLicenseActive;
   }

/* Set ExpDate For RE Business
*  This function will Set ExpDate For RE Business
*  This function is added as part of Defect 4070
*  WTUA: Workflow Task Update After
*/
function CWM_ELP_Defect4070_setExpDateForREBusiness()
{
  try
  {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
      {
      logDebug("Inside setExpDateForREBusiness"); 
      var currDate = new Date();
      var expDate = new Date();   
      
      var firstDayOfNextMonth = new Date();
      
      var licId = getParent();
      var licCustId = licId.getCustomID();
      logDebug("Parent ID: " + licId + " " + licCustId);
          
      expDate.setFullYear((currDate.getFullYear() + 2));
        
      expDate.setMonth(currDate.getMonth());
      expDate.setDate(currDate.getDate());
      var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
      logDebug("Exp date: " + expDateString);

      thisLic= new licenseObject(licCustId,licId);
      thisLic.setExpiration(expDateString); 
                        thisLic.setStatus("Active");    
      
      }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_Defect4070_setExpDateForREBusiness, Please contact administrator");
  }
  
}
/*  Start : 06/01/2015- TKAHN
Added this function for Defect#4112 */
function CWM_ELP_Defect4112_DPL_WTUA_setExpDateForRE(str, capId)
{
  if ((wfTask == "Validate" && wfStatus == "Approved") || (wfTask == "Validate" && wfStatus == "Approved with Conditions"))
  {
    var licID;
    var licCustID;
    var currDate = new Date();
    var expDate = new Date();
    var calExpDate = 0;
    
    if(str == "app")
    {
      licID = getParent(capId);
      logDebug("licID "+licID);
      if(licID)
        calExpDate = 1;
    }
    else if(str == "ren")
    {
      licID = getParentCapID4Renewal(capId);
      logDebug("licID inside else "+licID+" capId "+capId);
      if(licID)
      {
        if(appMatch("License/Real Estate/Business/Renewal", capId))
        {
          calExpDate = 1;
        }
      }
    }
    
    if(calExpDate == 1)
    {
      licCustID = licID.getCustomID();
      logDebug("Parent ID: " + licCustID + " " + licID);
      
      var year = currDate.getFullYear();
      var month = currDate.getMonth();
      var day = currDate.getDate();

      var expYear = year + 2;
      expDate.setFullYear(expYear);

      if(month == 1 && day == 29)
      {
        expDate.setMonth(2);
        expDate.setDate(1);
      }
      else
      {
        expDate.setMonth(month);
        expDate.setDate(day);
      }
      licID = aa.cap.getCapID(licID.getID1(),licID.getID2(),licID.getID3()).getOutput();
      thisLic=new licenseObject(licCustID,licID);
      var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
      logDebug("thisLic: " + thisLic+" expDateString "+expDateString);
      thisLic.setExpiration(expDateString);
      thisLic.setStatus("Active");
          
    }
  }
}
/*   End TKAHN */

function CWM_DPL_767_WTUA_renewalREATraineeUpdateLicense(pcapId)
{
  logDebug("Entering to update License.")
  parentCapId = getParentCapID4Renewal(pcapId);

  var birthDate = getLicensedIndividualBirthDate(pcapId);
  logDebug("BirthDate: "+birthDate);
  
  var licExpDate = null;
  var b1ExpResult = aa.expiration.getLicensesByCapID(parentCapId);
  
//grab the current license and update the month and day to licensed Individual birth date
  if (b1ExpResult.getSuccess()) {
    var expObj = b1ExpResult.getOutput();
    licExpDate = expObj.getExpDate();
  }
  licExpDate.setMonth(birthDate.getMonth());
  licExpDate.setDayOfMonth(birthDate.getDate());
  setLicExpirationDate(parentCapId, null, jsDateToASIDate(convertDate(licExpDate)));

  aa.print("Get Ref License Prof to update expiration date from ." + convertDate(licExpDate) );
    
  var refLP = getRefLicenseProf(parentCapId.getCustomID());
  if (refLP && refLP != null) {
    var licExpDateOldValue = refLP.getLicenseExpirationDate();
    refLP.setLicenseExpirationDate(licExpDate);
    var res = aa.licenseScript.editRefLicenseProf(refLP);
    if (res.getSuccess()) logDebug("2 Ref LP expiration date updated.");
    else logDebug("Ref LP expiration date not updated. " + res.getErrorMessage());
  } else {
    logDebug("Ref LP not found.");
  }
}//end renewalTraineeUpdateLicense
function getLicensedIndividualBirthDate(pCapId)
{
var jsBirthDate = null;

 var capContactResult = aa.people.getCapContactByCapID(pCapId);
        if (capContactResult.getSuccess()) {
            capContactResult = capContactResult.getOutput();
            for (var zz in capContactResult) {
                var peopleModel = capContactResult[zz].getPeople();
                if (peopleModel.getContactType() == "Licensed Individual") {
                    var capContactScriptModel = capContactResult[zz];
                    var capContactModel = capContactScriptModel.getCapContactModel();
                    var bDate = capContactModel.getBirthDate();
                    if (bDate) {
                        bDateObj = new Date(bDate.getTime());
                        logDebug("Birth date:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
            jsBirthDate = convertDate(bDateObj);
                    }//
                }
            }
  }
return jsBirthDate;

}
function getBoardEmail(){
  var fvCC = "";
         var fvCapTaskSR = aa.workflow.getTask(capId,"Intake");
         if (fvCapTaskSR && fvCapTaskSR.getSuccess())
         {
            var fvCapTask = fvCapTaskSR.getOutput();
            if (fvCapTask)
            {
               var fvAssignedStaff = fvCapTask.assignedStaff;
               var fvUserSR = aa.person.getUser(fvAssignedStaff.firstName,fvAssignedStaff.middleName,fvAssignedStaff.lastName);
               if (fvUserSR && fvUserSR.getSuccess())
               {
                  var fvUser = fvUserSR.getOutput();
                  if (fvUser)
                  {
                     var fvEmail = fvUser.email;
                     if (fvEmail && fvEmail != "")
                        fvCC = fvEmail;
                  }
               }
            }
         }
  return fvCC;
}
// Added by TKAHN, For defect#4644
function CWM_ELP_Defect4644_licenseValidation(){
 try
    {
    if(!publicUser){
      var activeLic = true;
            var boardName = getAsbBoard(appTypeArray[1]);
            var boardCode = lookup("BOARDS",boardName);
      var changeType = AInfo['Change Type'];
      logDebug("---- changeType---- "+changeType);
      for (loopk in AppSpecificInfoModels)
      {
        var appSpecificObj = AppSpecificInfoModels[loopk];
        if((appSpecificObj.getCheckboxType() == "END EXISTING RELATIONSHIP" && changeType == "Remove Existing Relationship") || (appSpecificObj.getCheckboxType() == "ADD NEW RELATIONSHIP" && changeType == "Add New Relationship"))
        { 
          logDebug("---- Inside if condition ---- ");
          if(appSpecificObj.checkboxDesc == "License Number")
          {
            var licNumber = appSpecificObj.checklistComment;
            if(licNumber)
            {
              activeLic = isLicenseActive(licNumber, boardCode, "M1");
            if (!activeLic)
              activeLic = isLicenseActive(licNumber, boardCode, "M2");
              //logDebug("Active Lic: " + activeLic);
              if (!activeLic)
              {
                cancel = true;
                showMessage = true;
                message = "";
                comment("The license # provided is not valid. Please contact the board for further details.");
              }
            }
          }
        }
      }
            /*var licenseNum = AInfo["License Number"];
            logDebug("boardCode "+boardCode+"licenseNum "+licenseNum);
            if (licenseNum != undefined && licenseNum != null && licenseNum != "")
            {
                var isActive = isLicenseActive(licenseNum);
                if (!isActive)
                {
                    cancel = true;
                    showMessage = true;
                    message = "";
                    comment("The license # provided is not valid. Please contact the board for further details.");
                }
            }*/
        }
    else{
      logDebug("---- Else Part---- ");
    }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on ASB function CWM_ELP_Defect4644_licenseValidation, Please contact administrator");
    }
}

function CWM_ELP_Defect4279_WTUA_DPL_setExpDateForDietAndNU(licId)
{
  try
  {
    logDebug("Inside setExpDateForDietAndNU");
    var currDate = new Date();
    var expDate = new Date();
    var oneDay = 24*60*60*1000;
    var bDateObj;
    var firstDayOfNextMonth = new Date();
    
    var licCustId = licId.getCustomID();
    logDebug("Parent ID: " + licId + " " + licCustId);
  
    //Get applicant's birthday
    var capContactResult=aa.people.getCapContactByCapID(capId);
    if(capContactResult.getSuccess())
    {
      capContactResult=capContactResult.getOutput();
      for(i in capContactResult)
      {
        var peopleModel= capContactResult[i].getPeople();
        if(peopleModel.getContactType()=="Applicant" )
        {
          var capContactScriptModel= capContactResult[i];
          var capContactModel= capContactScriptModel.getCapContactModel();
          var bDate = capContactModel.getBirthDate();
          if(bDate != null) 
          {
            bDateObj = new Date(bDate.getTime());
            logDebug("Birth date of applicant:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
          }
        }
      }
    }

    if(bDateObj)
    {
      bDateObj.setFullYear(currDate.getFullYear());
          
      
      // Calculate Expire Date from Birthdate
      var issueDateObj = new Date();
            if (issueDateObj && bDateObj) {
                var issueDateYear = issueDateObj.getFullYear();
                //added below logic to compare birth date and issue date JIRA 3339
        if (bDateObj.getMonth() == issueDateObj.getMonth())
        {
          if (bDateObj.getDate() >= issueDateObj.getDate())
          {
            expDate.setFullYear(issueDateYear + 2); 
          }
          else
          {
            expDate.setFullYear(issueDateYear + 3);
          }
          
        }
                  //Update 3339 end
                else if (bDateObj.getMonth() > issueDateObj.getMonth()) {
                    expDate.setFullYear(issueDateYear + 2); 
                } 
                else 
                {
                    expDate.setFullYear(issueDateYear + 3); 
                }
                expDate.setMonth(bDateObj.getMonth()); 
                expDate.setDate(bDateObj.getDate());    
            }
      
      
      var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
      logDebug("Exp date: " + expDateString);

      thisLic= new licenseObject(licCustId,licId);
      thisLic.setExpiration(expDateString);
      thisLic.setStatus("Active");
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_Defect4279_WTUA_DPL_setExpDateForDietAndNU, Please contact administrator");
  }
}


function CWM_ELP_Defect_4768_DPL_renewPSYLicense(itemCapId) {
    useAppSpecificGroupName = false;
    var result = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
  
   
  //----------------------------------------------------------------------------------------------
  //Get  Attestation ASI field - START
  //----------------------------------------------------------------------------------------------
    // this to avoid a script error from special character.
	var splChar = String.fromCharCode(167);
    var asiName = "A. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
    var educationAsi = getAppSpecific("B. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS.");
    var inComplianceGLC = getAppSpecific(asiName);
    var reportedDicipline = getAppSpecific("C. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
    var reportedPleas = getAppSpecific("D. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");
    var legalObligation = getAppSpecific("E. I UNDERSTAND MY LEGAL OBLIGATION TO REPORT ABUSE/NEGLECT OF CHILDREN, DISABLED PERSONS & ELDERLY.");
    asiName = "F.  AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
    var reportedSSN = getAppSpecific(asiName);

	var attestPain = getAppSpecific("I attest under the pains and penalties of perjury that the above responses are truthful & accurate.");

	// FA 04/09/2018 Ticket 6515. G added. if the attestation is answered with a "NO", upon submission the renewal should go to WF task and status Validate/ Attestation Review 
	var gMassHealth = getAppSpecific("G. I HAVE SUBMITTED A APPLICATION TO BE A FULLY PARTICIPATING/NONBILLING PROVIDER TO MASSHEALTH.");
	
	//----------------------------------------------------------------------------------------------
	//Get SM Attestation ASI field - END
	//----------------------------------------------------------------------------------------------  
	//added for defect 625

	// if (educationAsi != undefined && educationAsi != null && educationAsi != "") {
	var haveCompleted = getAppSpecific("B. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS.").toUpperCase().equals("YES");

	if (!haveCompleted) {
		//CWM_ELP_Generic_DPL_addConditionOnCap("Renewal","Positive Renewal Attestation");
		logDebug("Have not completed.");
		closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
		updateTask("Validate", "CE Attestation Review", "Updated via script.", "Updated via script.");
		activateTask("Validate");
		assignedToByShortNotes("Validate", getBoard(capId));
	}
     //   }
   else {
      if (inComplianceGLC.toUpperCase().equals("NO") || reportedDicipline.toUpperCase().equals("NO") ||
        reportedPleas.toUpperCase().equals("NO") || legalObligation.toUpperCase().equals("NO") ||
        reportedSSN.toUpperCase().equals("NO") || attestPain.toUpperCase().equals("NO") || gMassHealth.toUpperCase().equals("NO")) {
        //FA 04/09/2018 Ticket 6515. DONT update the exp date if (renewalApproval(capId)) {
			closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
			activateTask("Validate");
			updateTask("Validate", "Attestation Review", "Updated via script.", "Updated via script.");
			// FA 04/09/2018 Ticket 6515 -- Rule changed. activateTask("Issuance");
			// FA 04/09/2018 Ticket 6515 -- Rule changed. updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
			//CWM_ELP_Generic_DPL_addConditionOnCap("Renewal","Positive Renewal Attestation");          
			// FA 04/09/2018 Ticket 6515 -- assignedToByShortNotes("Issuance", getBoard(capId));
			assignedToByShortNotes("Validate", getBoard(capId));
			result = true;
        // FA 04/09/2018 Ticket 6515 } else result = false;
      } else {
        if (renewalApproval(capId)) {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
    
   }



  //----------------------------------------------------------------------------------------------
  //Modification to account for SM Attestation fields available in different record types - END
  //----------------------------------------------------------------------------------------------
  
    capId = tmpCapId;
    return result;
}

function CWM_ELP_Defect_4768_DPL_renewDPLNonCELicense(itemCapId) {
    useAppSpecificGroupName = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
    var result = false;

    
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - START
  //----------------------------------------------------------------------------------------------
    // this to avoid a script error from special character.
  var splChar = String.fromCharCode(167);
    var asiName = "1. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";

    var inComplianceGLC = getAppSpecific(asiName);
    var reportedDicipline = getAppSpecific("2. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
    var reportedPleas = getAppSpecific("3. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");
    var reportedAdmissions = getAppSpecific("4. I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.");

    asiName = "6. AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
    var reportedSSN = getAppSpecific(asiName);
    var liabilityInsurance = getAppSpecific("5. I HAVE REPORTED IF I WAS A DEFENDANT IN A CIVIL PROCEEDING RESULTING IN SETTLEMENT OR JUDGEMENT.");
  
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - END
  //----------------------------------------------------------------------------------------------  

      if (inComplianceGLC.toUpperCase().equals("NO") || reportedDicipline.toUpperCase().equals("NO") ||
        reportedPleas.toUpperCase().equals("NO") || reportedAdmissions.toUpperCase().equals("NO") ||
        reportedSSN.toUpperCase().equals("NO") || liabilityInsurance.toUpperCase().equals("NO")) {
        if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
      } else {
        if (renewalApproval(capId)) {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
    
  



  //----------------------------------------------------------------------------------------------
  //Modification to account for SM Attestation fields available in different record types - END
  //----------------------------------------------------------------------------------------------
  
    capId = tmpCapId;
    return result;
}


/* Release B Defect 3679
 * Function will remove Real Estate Salesperson contacts from Parent License
 */
function CWM_ELP_Defect_3679_DPL_TerminateBusinessWithLicenseRecord(){
  try{
    useAppSpecificGroupName = true;
    var theParentRecord = getAppSpecific("MY LICENSE.License Number");
    var theChildRecord = getAppSpecific("END EXISTING RELATIONSHIP.License Number");
    var changeType = getAppSpecific("CHANGE TYPE.Change Type");
    if(changeType == "Remove Existing Relationship"){
      logDebug("Parent Record: " + theParentRecord);
      logDebug("Child Record: " + theChildRecord);
      if(theParentRecord != null && theChildRecord != null){
        var pRecordCap = aa.cap.getCapID(theParentRecord).getOutput();
        var cRecordCap = aa.cap.getCapID(theChildRecord).getOutput();
        //Remove Contact

        var cons = aa.people.getCapContactByCapID(cRecordCap).getOutput();
        var pCons = aa.people.getCapContactByCapID(pRecordCap).getOutput();
          
        for(i in pCons){  
            var pRefNum = pCons[i].getCapContactModel().getRefContactNumber();
            var pConSeqNum = pCons[i].getPeople().getContactSeqNumber();
            var pConEmail = pCons[i].getPeople().getEmail();
            //if (pConEmail.equals(conEmail)){  
            logDebug("Contact to be removed: " + pConSeqNum);
              logDebug("Contact Email to be removed: " + pConEmail);
              logDebug("Contact Reference Number to be removed: " + pRefNum); 
            for (x in cons){
              var refNum = cons[x].getCapContactModel().getRefContactNumber();
                var conSeqNum = cons[x].getPeople().getContactSeqNumber();
                var conEmail = cons[x].getPeople().getEmail();
                if(refNum.equals(pRefNum)){ 
              aa.people.removeCapContact(cRecordCap, conSeqNum);
              //logDebug("Contact sequence Number deleted: " + pConSeqNum + " from record: " + pRecordCap.getCustomID());
              logDebug("Contact Reference Number deleted: " + refNum + " from record: " + cRecordCap.getCustomID());
                  break;
                      }
            }
          }
          
          


        
        //Remove LP Link from License Tab
        var vRefLP = getRefLicenseProf(pRecordCap.getCustomID());
        var vreflpBusinessLicense = vRefLP.businessLicense;
        var vreflpStateLicense = vRefLP.stateLicense;
        logDebug("vRefLP Master License: " + vreflpBusinessLicense);
        logDebug("vRefLP State License: " + vreflpStateLicense);
        
        var capLicenseResult = aa.licenseScript.getLicenseProf(cRecordCap);
        if(capLicenseResult.getSuccess()){
          var capLicenseArr = capLicenseResult.getOutput();
          for(i in capLicenseArr){
            
            logDebug("child License: " + capLicenseArr[i].getBusinessLicense());
            //logDebug("child Lic Nbr: " + capLicenseArr[i].getLicenseNbr());
            // Get child reference LP
            if(vreflpBusinessLicense == capLicenseArr[i].getBusinessLicense() && (vreflpStateLicense == capLicenseArr[i].getLicenseNbr() || vreflpStateLicense == (capLicenseArr[i].getLicenseNbr() + "-" + capLicenseArr[i].getBusinessLicense()))){
              //var vRefLP = getRefLicenseProf(curCapId.getCustomID());
              if( capLicenseArr[i].getPrintFlag() == "Y"){
                capLicenseArr[i].setPrintFlag("N");
                var result = aa.licenseProfessional.editLicensedProfessional(capLicenseArr[i]);
                logDebug("Setting primary flag to N " +  result.getSuccess());
              }           
              logDebug("Removing license LP: " + capLicenseArr[i].getLicenseNbr() +  " from CAP " + cRecordCap.getCustomID());
              var remCapResult = aa.licenseProfessional.removeLicensedProfessional(capLicenseArr[i]); 
            }
          }
        }
      }
    }
  } 
  catch(err){
    logDebug("Error on function CWM_ELP_Defect_3679_DPL_TerminateBusinessWithLicenseRecord. Please Call System Administrator. " + err.stack);
    logDebug("Error Message: " + err.message);
  }
}
function CWM_ELP_Defect_4768_DPL_renewLPLicense(itemCapId) {
    useAppSpecificGroupName = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
    var result = false;

    
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - START
  //----------------------------------------------------------------------------------------------
    // this to avoid a script error from special character.
  var splChar = String.fromCharCode(167);
    var asiName = "1. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A REGARDING TAX REPORTING AND CHILD SUPPORT";
    var inComplianceGLC = getAppSpecific(asiName);
    var reportedDicipline = getAppSpecific("2.  I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN");  
var reportedPleas = getAppSpecific("3.  I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS  IN ANY JURISDICTION");  
  asiName = "4.  AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER (SSN)";
 
   var reportedSSN = getAppSpecific(asiName);

   // var liabilityInsurance = getAppSpecific("5. I HAVE REPORTED IF I WAS A DEFENDANT IN A CIVIL PROCEEDING RESULTING IN SETTLEMENT OR JUDGEMENT.");
  
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - END
  //----------------------------------------------------------------------------------------------  

      if (inComplianceGLC.toUpperCase().equals("NO") || reportedDicipline.toUpperCase().equals("NO") ||
        reportedPleas.toUpperCase().equals("NO") ||
        reportedSSN.toUpperCase().equals("NO")) {
        if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
      } else {
        if (renewalApproval(capId)) {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
    
  



  //----------------------------------------------------------------------------------------------
  //Modification to account for SM Attestation fields available in different record types - END
  //----------------------------------------------------------------------------------------------
  
    capId = tmpCapId;
    return result;
}

function CWM_ELP_Defect_4768_DPL_renewLTDLPLicense(itemCapId) {
    useAppSpecificGroupName = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
    var result = false;

    
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - START
  //----------------------------------------------------------------------------------------------
    // this to avoid a script error from special character.
  var splChar = String.fromCharCode(167);
    var asiName = "1.  I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
           
    var inComplianceGLC = getAppSpecific(asiName);
    var reportedDicipline = getAppSpecific("2.  I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN");
    var reportedPleas = getAppSpecific("3.  I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.");
     var reportedFacts = getAppSpecific("4.  I HAVE REPORTED TO THE BOARD ADMISSIONS TO SUFFICIENT FACTS.");  
    asiName = "5.  AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
    var reportedSSN = getAppSpecific(asiName);
   // var liabilityInsurance = getAppSpecific("5. I HAVE REPORTED IF I WAS A DEFENDANT IN A CIVIL PROCEEDING RESULTING IN SETTLEMENT OR JUDGEMENT.");
  
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - END
  //----------------------------------------------------------------------------------------------  

      if (inComplianceGLC.toUpperCase().equals("NO") || reportedDicipline.toUpperCase().equals("NO") ||
        reportedPleas.toUpperCase().equals("NO") || reportedFacts.toUpperCase().equals("NO") ||
        reportedSSN.toUpperCase().equals("NO")) {
        if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
      } else {
        if (renewalApproval(capId)) {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
    
  



  //----------------------------------------------------------------------------------------------
  //Modification to account for SM Attestation fields available in different record types - END
  //----------------------------------------------------------------------------------------------
  
    capId = tmpCapId;
    return result;
}
function CWM_ELP_Defect_4802_DPL_renewPLMBLicense(itemCapId) {
    useAppSpecificGroupName = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
    var result = false;

    
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - START
  //----------------------------------------------------------------------------------------------
    // this to avoid a script error from special character.
  var splChar = String.fromCharCode(167);
    var asiName = "1.  I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
         //1.  I AM IN COMPLIANCE WITH G.L.c.62C 
    var inComplianceGLC = getAppSpecific(asiName);
    var reportedDicipline = getAppSpecific("2.I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
                      //2.I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.
    var reportedPleas = getAppSpecific("3.  I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.");
                    //3.  I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.
    var reportedAdmissions = getAppSpecific("4.  I HAVE REPORTED TO THE BOARD ADMISSIONS TO SUFFICIENT FACTS.");
                       //4.  I HAVE REPORTED TO THE BOARD ADMISSIONS TO SUFFICIENT FACTS.
  asiName = "5.  AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
       //5.  AS REQUIRED BY M.G.L. C. 30A, 
 var reportedSSN = getAppSpecific(asiName);
   // var liabilityInsurance = getAppSpecific("5. I HAVE REPORTED IF I WAS A DEFENDANT IN A CIVIL PROCEEDING RESULTING IN SETTLEMENT OR JUDGEMENT.");
  
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - END
  //----------------------------------------------------------------------------------------------  

      if (inComplianceGLC.toUpperCase().equals("NO") || reportedDicipline.toUpperCase().equals("NO") ||
        reportedPleas.toUpperCase().equals("NO") || reportedAdmissions.toUpperCase().equals("NO") ||
        reportedSSN.toUpperCase().equals("NO")) {
        if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
      } else {
        if (renewalApproval(capId)) {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
    
  



  //----------------------------------------------------------------------------------------------
  //Modification to account for SM Attestation fields available in different record types - END
  //----------------------------------------------------------------------------------------------
  
    capId = tmpCapId;
    return result;
}

function CWM_ELP_Defect_4802_DPL_renewGFLicense(itemCapId) {
    useAppSpecificGroupName = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
    var result = false;

    
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - START
  //----------------------------------------------------------------------------------------------
    // this to avoid a script error from special character.
  var splChar = String.fromCharCode(167);
    var asiName = "1. ARE YOU IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A REGARDING TAX REPORTING AND CHILD SUPPORT?";

    var inComplianceGLC = getAppSpecific(asiName);
    var reportedDicipline = getAppSpecific("2. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
    var reportedPleas = getAppSpecific("3. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS IN ANY JURISDICTION.");
    //var reportedAdmissions = getAppSpecific("4. I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.");

    asiName = "4. HAVE YOU REPORTED YOUR SOCIAL SECURITY NUMBER TO THE BOARD AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A?";
    var reportedSSN = getAppSpecific(asiName);
   // var liabilityInsurance = getAppSpecific("5. I HAVE REPORTED IF I WAS A DEFENDANT IN A CIVIL PROCEEDING RESULTING IN SETTLEMENT OR JUDGEMENT.");
  
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - END
  //----------------------------------------------------------------------------------------------  

      if (inComplianceGLC.toUpperCase().equals("NO") || reportedDicipline.toUpperCase().equals("NO") || 
        reportedPleas.toUpperCase().equals("NO") || reportedSSN.toUpperCase().equals("NO")) {
        if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
      } else {
        if (renewalApproval(capId)) {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
  //----------------------------------------------------------------------------------------------
  //Modification to account for SM Attestation fields available in different record types - END
  //----------------------------------------------------------------------------------------------
  
    capId = tmpCapId;
    return result;
}

function CWM_ELP_Defect_4768_DPL_renewPLALicense(itemCapId) {
  useAppSpecificGroupName = false;
  var tmpCapId = null;
  if (capId) {
    tmpCapId = capId;
    capId = itemCapId;
  } else {
    capId = itemCapId;
  }
  var result = false;
  // ---- tofek
  var vParentCapID = getParentLicenseCapID(capId);
  copySingleASITable("LICENSE IN OTHER JURISDICTIONS", capId, vParentCapID);
  // ----

  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - START
  //----------------------------------------------------------------------------------------------
  // this to avoid a script error from special character.
  var splChar = String.fromCharCode(167);
  var asiName = "1. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";

  var inComplianceGLC = getAppSpecific(asiName);
  //Sagar : EPLACE-1258 :DPL_PROD_submitted status on renewals
  var reportedDicipline = getAppSpecific("2. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
  //var reportedPleas = getAppSpecific("3. HAVE YOU HAD ANY CRIMINAL CONVICTIONS ISSUED AGAINST YOU IN ANY JURISDICTION?");
  var reportedPleas = getAppSpecific("3. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS IN ANY JURISDICTION.");

  asiName = "4. HAVE YOU REPORTED YOUR SOCIAL SECURITY NUMBER TO THE BOARD AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A?";
  var reportedSSN = getAppSpecific(asiName);
  // var liabilityInsurance = getAppSpecific("5. I HAVE REPORTED IF I WAS A DEFENDANT IN A CIVIL PROCEEDING RESULTING IN SETTLEMENT OR JUDGEMENT.");

  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - END
  //----------------------------------------------------------------------------------------------

  if (inComplianceGLC.toUpperCase().equals("NO") || reportedDicipline.toUpperCase().equals("NO") ||
    reportedPleas.toUpperCase().equals("NO") ||
    reportedSSN.toUpperCase().equals("NO")) {
    if (renewalApproval(capId)) {
      closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
      activateTask("Issuance");
      updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
      assignedToByShortNotes("Issuance", getBoard(capId));
      result = true;
    } else
      result = false;
  } else {
    if (renewalApproval(capId)) {
      logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
      closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
      activateTask("Issuance");
      updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
      //assignedToByShortNotes("Issuance", "SM");
      result = true;
    } else
      result = false;
  }

  //----------------------------------------------------------------------------------------------
  //Modification to account for SM Attestation fields available in different record types - END
  //----------------------------------------------------------------------------------------------

  capId = tmpCapId;
  return result;
}

function CWM_ELP_Defect_4713_WTUA_verifyAdjRecord() {
//get the adjudication record
var adjParent = getParent();
if(!adjParent){
    cancel = true;
      showMessage = true;
      comment("This record must be related as a child to an Adjudication case prior to being allowed");
}
}

// Added by tofek.khan, For defect#4644 07/13/2015
/*function CWM_ELP_Defect4644_licenseValidation(){
 try
  {   
    var boardName = getAsbBoard(appTypeArray[1]);
    var boardCode = lookup("BOARDS",boardName);
    var licenseNum = AInfo["License Number"];
    logDebug("boardCode "+boardCode+"licenseNum "+licenseNum);
    if (licenseNum != undefined && licenseNum != null && licenseNum != "") 
    {
      var isActive = isLicenseActive(licenseNum, boardCode, "B"); 
      if (!isActive) 
      {
        cancel = true;
        showMessage = true;
        message = "";
        comment("The license # provided is not valid. Please contact the board for further details.");
      }
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASB function CWM_ELP_Defect4644_licenseValidation, Please contact administrator");
  }
}*/
function CWM_ELP_Defect_4909_DPL_renewHOLicense(itemCapId) {
    useAppSpecificGroupName = false;
    var result = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
  
   
  //----------------------------------------------------------------------------------------------
  //Get  Attestation ASI field - START
  //----------------------------------------------------------------------------------------------
    // this to avoid a script error from special character.
  var splChar = String.fromCharCode(167);
    var asiName = "A. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
    //var educationAsi = getAppSpecific("B. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS.");

    var inComplianceGLC = getAppSpecific(asiName);
    var reportedDicipline = getAppSpecific("B. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
    var reportedPleas = getAppSpecific("C. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");
    //var legalObligation = getAppSpecific("D. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS.");

    asiName = "E.  AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
    var reportedSSN = getAppSpecific(asiName);
    //var admissionFacts = getAppSpecific("G. I HAVE REPORTED TO THE BOARD ALL ADMISSIONS TO SUFFICIENT FACTS");
  //var attestPain = getAppSpecific("I attest under the pains and penalties of perjury that the above responses are truthful & accurate.");
  
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - END
  //----------------------------------------------------------------------------------------------  
        //added for defect 625

       // if (educationAsi != undefined && educationAsi != null && educationAsi != "") {
            var haveCompleted = getAppSpecific("D. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS.").toUpperCase().equals("YES");

            if (!haveCompleted) {
        //CWM_ELP_Generic_DPL_addConditionOnCap("Renewal","Positive Renewal Attestation");
                logDebug("Have not completed.");
                closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                updateTask("Validate", "CE Attestation Review", "Updated via script.", "Updated via script.");
                activateTask("Validate");
                assignedToByShortNotes("Validate", getBoard(capId));
            }
     //   }
   else {
      if (inComplianceGLC.toUpperCase().equals("NO") || reportedDicipline.toUpperCase().equals("NO") ||
        reportedPleas.toUpperCase().equals("NO") ||
        reportedSSN.toUpperCase().equals("NO")) {
        if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
      } else {
        if (renewalApproval(capId)) {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
    
   }



  //----------------------------------------------------------------------------------------------
  //Modification to account for SM Attestation fields available in different record types - END
  //----------------------------------------------------------------------------------------------
  
    capId = tmpCapId;
    return result;
}

function CWM_ELP_Defect_4732_DPL_ASB_checkLicenseNumber()
{
  var activeLic = true;
  var thisArr = new Array();
  var changeType = AInfo['Change Type'];

  for (loopk in AppSpecificInfoModels)
  {
    var appSpecificObj = AppSpecificInfoModels[loopk];
    if((appSpecificObj.getCheckboxType() == "END EXISTING RELATIONSHIP" && changeType == "Remove Existing Relationship") || (appSpecificObj.getCheckboxType() == "ADD NEW RELATIONSHIP" && changeType == "Add New Relationship"))
    {
      if(appSpecificObj.checkboxDesc == "License Number")
      {
        var licNumber = appSpecificObj.checklistComment;
        if(licNumber)
        {
          var boardCode = lookup("BOARDS", "Sheet Metal Workers");
          //activeLic = checkActiveLic(licNumber, boardCode, "I");
          activeLic = isLicenseActive(licNumber, boardCode, "I");
                                        //logDebug("activeLic: " + activeLic);
          break;
          
          /*var licID = aa.cap.getCapID(licNumber).getOutput();
          if(!licID)
          {
            activeLic = false;
          }
          else
          {
            var licCap = aa.cap.getCap(licID).getOutput();
            var licCapStatus = licCap.getCapStatus();
            var licCapType = licCap.getCapType();
            if(licCapType != "License/Sheet Metal/Instructor/License")
            {
              activeLic = false;
            }
            else if(licCapType == "License/Sheet Metal/Instructor/License" && licCapStatus == "Inactive")
            {
              activeLic = false;
            }
          }*/

        }
      }
    }
  }

  if(!activeLic)
  {
    cancel = true;
    comment("Please enter active Sheet Metal Instructor License Number.")
  }
}

function CWM_ELP_Defect_4548_DPL_ASA_PLProductFee() {
  //modified the function to only determine the qty and return it to the addDplApplicationfee function
  try
  {
var plProdQty = AInfo["Number of Parts"];
  if(plProdQty <= 10) {
    feeQty = 1;
  }
  else if(plProdQty >=11 && plProdQty <= 20) {
    feeQty = 2;
  }
  else if(plProdQty >=21 && plProdQty <= 30) {
    feeQty = 3;
  }
  else if(plProdQty >=31 && plProdQty <= 40) {
    feeQty = 4;
  }
  else if(plProdQty >=41 && plProdQty <= 50) {
    feeQty = 5;
  }
  else if(plProdQty >=51 && plProdQty <= 60) {
    feeQty = 6;
  }
  else if(plProdQty >=61 && plProdQty <= 70) {
    feeQty = 7;
  } 
  else if(plProdQty >=71 && plProdQty <= 80) {
    feeQty = 8;
  }
  else if(plProdQty >=81 && plProdQty <= 90) {
    feeQty = 9;
  }
  else  {
    feeQty = 10;
  }   
  return feeQty;
  }

  catch(err)
  {
    showMessage=true;
    comment("Error on ASA function CWM_ELP_Defect_4548_DPL_ASA_PLProductFee, Please contact administrator");
  }


}

// For defect #4565 and 4623
function CWM_ELP_Def4565_ASB_licenseValidation(){
 try
    {
        if(!publicUser){
      
      var licenseNum = AInfo["License Number"];
            var boardName = "Plumbers";
            var boardCode = lookup("BOARDS",boardName);
            logDebug("boardCode "+boardCode+", licenseNum "+licenseNum);
            if (licenseNum != undefined && licenseNum != null && licenseNum != "") 
            {
                var isActive = isLicenseActive(licenseNum, boardCode, "M"); 
                if (!isActive) 
                {
                    cancel = true;
                    showMessage = true;
                    message = "";
                    comment("License entered is not Current, please contact the Board.");
                }
            }
        }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on ASB function CWM_ELP_Def4565_ASB_licenseValidation, Please contact administrator");
    }
}

// For defect #4624
function CWM_ELP_Def4624_ASB_licenseValidation(){
 try
    {
        var licenseNum = AInfo["License Number"];
        var boardName = "Gas Fitters";
        var boardCode = lookup("BOARDS",boardName);
        logDebug("boardCode "+boardCode+", licenseNum "+licenseNum);
        if (licenseNum != undefined && licenseNum != null && licenseNum != "") 
        {
            var isActive = isLicenseActive(licenseNum, boardCode, "M"); 
            if (!isActive) 
            {
                cancel = true;
                showMessage = true;
                message = "";
                comment("License entered is not Current, please contact the Board.");
            }
        }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on ASB function CWM_ELP_Def4624_ASB_licenseValidation, Please contact administrator");
    }
}

function CWM_ELP_isAmendmentLicenseActive(){
  try{
  var changeType = AInfo['Change Type'];
  var boardName = getAsbAmendBoard();
if(changeType == "Add New Relationship"){
    for (loopk in AppSpecificInfoModels)
    {
      var appSpecificObj = AppSpecificInfoModels[loopk];
      if(appSpecificObj.getCheckboxType() == "ADD NEW RELATIONSHIP")
      {
        if(appSpecificObj.checkboxDesc == "License Number")
        {
          var addLicenseNum = appSpecificObj.checklistComment;
          break;
          
        }
      }
    } 
    logDebug("addLicenseNum: " + addLicenseNum);

  //var boardName = "RE";
  var vLicType = lookup("lookup:amendment License Type", appTypeString);  
  logDebug("boardName:"+boardName);
  logDebug("vLicType: "+vLicType);
  //Sagar : Fix for PROD Defect 13506 : DPL_PROD_RE/RA_Terminate affiliation - Impacts One Record
  //var licNum = returnCompleteAltId(addLicenseNum, boardName, vLicType);
  var licProfObj = getRefLicenseProf(addLicenseNum);
  logDebug("licProfObj : "+licProfObj)
  if(licProfObj){
    if (licProfObj.getPolicy() != "Current") {
      showMessage=true;
      cancel=true;
        message="";
      comment("The License "+addLicenseNum+" is not Current, please contact the Board.");
    }
    
    
  }
  else {
        showMessage=true;
      cancel=true;
        message="";
      comment("The License "+addLicenseNum+" does not exist. Please contact the board for further details.");
    
  }
    
    
}   
else if(changeType == "Remove Existing Relationship") {
    for (loopk in AppSpecificInfoModels)
    {
      var appSpecificObj = AppSpecificInfoModels[loopk];
      if(appSpecificObj.getCheckboxType() == "END EXISTING RELATIONSHIP")
      {
        if(appSpecificObj.checkboxDesc == "License Number")
        {
          var addLicenseNum = appSpecificObj.checklistComment;
          break;
          
        }
      }
    } 
  logDebug("addLicenseNum: " + addLicenseNum);
  var vLicType = lookup("lookup:amendment License Type", appTypeString);    
  //Sagar : Fix for PROD Defect 13506 : DPL_PROD_RE/RA_Terminate affiliation - Impacts One Record 
  //var licNum = returnCompleteAltId(addLicenseNum, boardName, vLicType);
    logDebug("addLicenseNum: " + addLicenseNum);
  logDebug("boardName:"+boardName);
  logDebug("vLicType: "+vLicType);  
  var licProfObj = getRefLicenseProf(addLicenseNum);
  logDebug("licProfObj : "+licProfObj);
  if(!licProfObj){
      showMessage=true;
        message= "";
      cancel=true;
      comment("The License "+addLicenseNum+" is not valid, please contact the Board."); 
  }

  
}   
  }
  catch(err){
    logDebug("Error on function CWM_ELP_isAmendmentLicenseActive." + err.stack);
    logDebug("Error Message: " + err.message);
  }
}


// Added Function For Defect#4833, set Due Date +5 from create Date.
// By tofek.khan
// ASA;License!Plumbers and Gas Fitters!Permits!Plumbing Permit
function CWM_ELP_Defect4833_DPL_ASA_setDueDateForPermitApplication(capId){
  capIdScriptModel = aa.cap.getCap(capId).getOutput(); 
  var fileDate = capIdScriptModel.getFileDate();
  fileDate = convertDate(fileDate);
  logDebug("fileDate "+fileDate);
  var taskObj = aa.workflow.getTasks(capId).getOutput()[0].getTaskItem();
  logDebug("Created Date "+fileDate);
  fileDate.setDate(fileDate.getDate()+5);
  logDebug(fileDate);
  var currDate = new Date(fileDate);
  var year = currDate.getFullYear();
  var month = currDate.getMonth();
  var day = currDate.getDate();
  var newDueDate = month+1+"/"+day+"/"+year;
  logDebug("newDueDate "+newDueDate);
  editTaskDueDate("*", newDueDate);
}

//updated by Chris Louis-Jean on 7.21.15
function CWM_ELP_ASB_DEFECT_5044(){
logDebug("Entering CWM_ELP_ASB_DEFECT_5044");
  useAppSpecificGroupName = true;
    var asi = new Array();
    var licNbr = null;
    loadAppSpecificBefore(asi);
    for(asiLabel in asi)
    {
      if(asiLabel=="ADD NEW RELATIONSHIP.License Number")
      {
        if(asi[asiLabel]!= "")
        {
//logDebug("ADD NEW RELATIONSHIP has a license number entered");
          licNbr = asi[asiLabel];
          if(isInactive(licNbr,"SM")){
logDebug("license is inactive");
              cancel = true;
              showMessage = true;
              comment("License entered is not current, please contact the Board");
            }
          break;
        }
      } 
    }
  useAppSpecificGroupName = false;
}
//checks to see if the master licensee is inactive 
//returns true if the licensee is inactive
function isInactive(licNbr,boardCode){
//logDebug("entering isInactive");
  try{
      var lp = getRefLicenseProf(licNbr,boardCode);
      return(lp.getWcExempt() == "N");
  }
  catch(error){
    showMessage = true;
    comment("There is an error in isExpired. Please called administrator.");
    comment(error.name);
    comment(error.message);
  }
}



/* IF the workflow is set to 'Review/Not in Compliance'
 *  THEN 1. Assign the record to a specific user or Department (TBD) based on the license type associated to the CE Audit record.
 *    XX|BOARDSTAFF from TASK_ASSIGNMENT
 */
function CWM_ELP_CEAudit_WTUA_DPL_assignReviewNotInComp()
{
    try
    {
        if(wfTask == "Review" && wfStatus == "Not in Compliance"){
            var parentCapId = getParent(capId);
            if(parentCapId){
                logDebug("License to be audited is: " + parentCapId);
                
        var nextWfTask = "Consent Agreement";
                    
        var parentAltId = parentCapId.getCustomID();
                var boardName = getBoardType(parentCapId);
                var boardCode = getBoard(parentCapId);
        logDebug("The parent altid is " + parentAltId + " with Board Name " + boardName + " and Board Code " + boardCode);
        
                var assignUser = lookup("TASK_ASSIGNMENT", boardCode + "|BOARDSTAFF");
        logDebug("Assigning task " + nextWfTask + " to " + assignUser);
        
        if (assignUser != undefined && assignUser != null && assignUser != "") {
          dplTaskAssign(nextWfTask, assignUser);
        }
        else
          logDebug("WARNING: Could not assign workflow task " + nextWfTask);
            }
            else{
                logDebug("WARNING: Record to be audited was not found!!!");
            }
        }
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUA function CWM_ELP_CEAudit_WTUA_DPL_assignReviewNotInComp, Please contact administrator");
    }
}
// end CWM_ELP_CEAudit_WTUA_DPL_assignReviewNotInComp
function CWM_ELP_Defect_5093_DPL_ASB_checkLicenseNumber()
{
  var activeLic = true;
  var thisArr = new Array();
  var changeType = AInfo['Change Type'];
  if(changeType == "Remove Existing Relationship")
  {
    for (loopk in AppSpecificInfoModels)
    {
      var appSpecificObj = AppSpecificInfoModels[loopk];
      if(appSpecificObj.getCheckboxType() == "END EXISTING RELATIONSHIP")
      {
        if(appSpecificObj.checkboxDesc == "License Number")
        {
          var licNumber = appSpecificObj.checklistComment;
          if(licNumber)
          {
            var boardCode = lookup("BOARDS", "Sheet Metal Workers");
            //activeLic = checkActiveLic(licNumber, boardCode, "B");
                                                activeLic = isLicenseActive(licNumber, boardCode, "B");
            break;
          }
        }
      }
    }
  }
  
  if(!activeLic)
  {
    cancel = true;
showMessage = true;
message = "";
    comment("Please enter valid License Number under End Existing Relationship.")
  }
}

/* CWM_ELP_DPL_DEFECT_4260_addLPandContactToLicenseRecord()
 * Function will add amendment License and Contact to License Record
 */
function CWM_ELP_DPL_DEFECT_4260_addLPandContactToLicenseRecord(){
  try{
    logDebug("Begin CWM_ELP_DPL_DEFECT_4260_addLPandContactToLicenseRecord");
    useAppSpecificGroupName = true;
    var pRecordCap = getParentLicenseCapID(capId); //getAppSpecific("MY LICENSE.License Number");
    var theChildRecord = getAppSpecific("KEY INDIVIDUAL.License Number");
    //var changeType = getAppSpecific("CHANGE TYPE.Change Type");
    if(wfTask == "Validate" && (wfStatus == "Approved" || wfStatus == "Approved w/Conditions")){
      logDebug("Parent Record: " + pRecordCap);
      logDebug("Child Record: " + theChildRecord);
      if(pRecordCap != null && theChildRecord != null){
        //var pRecordCap = aa.cap.getCapID(theParentRecord).getOutput();
        var cRecordCap = aa.cap.getCapID(theChildRecord).getOutput();
        
        //copy Contacts
        copyContactsByTypeWithAddress(cRecordCap, pRecordCap, "Licensed Individual");
        logDebug("Contact copied");

        //Link pRecordCap and cRecordCap on Related Records
        /*var result = aa.cap.createAppHierarchy(pRecordCap,cRecordCap);
        if(result.getSuccess()){
          logDebug("Child application successfully linked");
        }
            else{
                logDebug("Could not link applications");
                result.getErrorMessage(); 
        }*/
      }

      //get LP from Child to assign to parent Record Licenses Tab.
      var vRefLP = getRefLicenseProf(cRecordCap.getCustomID());
      if(vRefLP){
        var capListResult = aa.licenseScript.associateLpWithCap(pRecordCap, vRefLP);
        var retVal = capListResult.getSuccess();
        logDebug("Linked New license LP successfully ? " + retVal);
      }
    }
    logDebug("End CWM_ELP_DPL_DEFECT_4260_addLPandContactToLicenseRecord");
  } 
  catch(err){
    logDebug("Error on function CWM_ELP_DPL_DEFECT_4260_addLPandContactToLicenseRecord. Please Call System Administrator. " + err.stack);
    logDebug("Error Message: " + err.message);
  }
}

function generateCourseAltID(licCapId, licBoardName, licType, cSchool) {
   
  var licNumber;
  var licSchoolNum = lookup("Real Estate Appraiser Schools", cSchool)

      if (licSchoolNum)
      {
        licSchoolNum = licSchoolNum.toString();
        var school =new Array();
        school = licSchoolNum.split("|");
        schoolId = school[0];
        schoolIdStr = schoolId.toString();
        logDebug("school id:"+schoolIdStr);
        //increase our value by 1
        schoolCounter = parseInt(school[1],10) + 1
        schoolCounterstr = schoolCounter.toString();
        logDebug("new school counter:"+schoolCounterstr);
        //padd the values
        schoolCounterstr = (("0000" + schoolCounterstr).slice(-4));
        schoolIdStr = (("0000" + schoolIdStr).slice(-4));
        //update the counter in the standard choice
        editLookup("Real Estate Appraiser Schools", cSchool, schoolIdStr+"|"+schoolCounterstr);
        licNumber = schoolIdStr.toString() + schoolCounterstr.toString();
      }
      else
      {
        //var licNumber = licCapId.getCustomID();
        logDebug("Could not find the school in the standard choice")
        licNumber ="1";
      }
    return "" + licNumber + "-" + licBoardName.trim() + "-" + licType.trim();
}

function isMasterLicenseeActive(licNbr, board) // Optional Parameter for CapID
{
  try{
    useAppSpecificGroupName = false;
    var fvMasterLicenseActive = false;
    var fvBoard = board;
    var fvLicenseNbr = licNbr;
    
    var fvActive = isLicenseActive(fvLicenseNbr, fvBoard, "M1");
    if (!fvActive)
      fvActive = isLicenseActive(fvLicenseNbr, fvBoard, "M2");
    if (fvActive)
    {
      fvMasterLicenseActive = true;
    }
    
  return fvMasterLicenseActive;
 }
 catch(error){
      cancel = true;
      showMessage = true;
      comment("There is an error is isActiveLicensee");
      comment(error.message);
 }
}

function CWM_ELP_Defect_5235_DPL_WTUA_AssociatedLPToLicense()
{
  var keyIndLicenseStr = getAppSpecific("License Number", capId);
  
  if(keyIndLicenseStr)
  {
    var keyIndLp = getRefLicenseProf(keyIndLicenseStr);
    if (keyIndLp)
    {   
      var parentcapId = getParentLicenseRecord(capId);
      associateLpWithCap(keyIndLp, parentcapId);
      logDebug("Associated Reference LP " + keyIndLicenseStr + " to "  + parentcapId.getCustomID());
    }
  }
}

function CWM_ELP_Defect_4587_DPL_ASA_WaiveCorpLicenseNumCondition()
{
  var corpNumASI = AInfo["Corporation License Number (if applicable)"];

  if (corpNumASI == null || corpNumASI == "")
  {
    waiveCondition("Validate Corporation License Number");
    logDebug("Waiving Validate Corporation License Number Condition of Approval due to NULL Corporation License Number");
  }
  else
  {
    var licenseNumASI = AInfo["License Number"];
    var licCapId = aa.cap.getCapID(licenseNumASI).getOutput();
    if( licCapId )
    {
      var licenseBoard = getBoard(licCapId);
      var vSplit = licenseNumASI.split("-");
      if( vSplit.length == 3 && isLicenseActive(vSplit[0], licenseBoard, vSplit[2]) )
      {
        waiveCondition("Validate Corporation License Number");
        logDebug("Waiving Validate Corporation License Number Condition of Approval due to ACTIVE License Number: " + licenseNumASI);
      }
    }
  }
}
function CWM_ELP_DEFECT_5141_validateGFMasters(){
try{
var boardCode = "GF";
var licNbr = AInfo["Master Gas Fitter License Number"];
var licNbr2 = AInfo["Second Partner - Master Gas Fitter License Number"];
      
//validate the first # given
   if (licNbr != undefined && licNbr != null && licNbr != "") {
      var isActive = isLicenseActive(licNbr, boardCode, "M"); 


      if (!isActive) {
         cancel = true;
         showMessage = true;
         message = "";
         comment("The master license # "+licNbr+"  is not valid or is not a master license. Please contact the board for further details.");
      }
   }
//validate the 2nd # given
   if (licNbr2 != undefined && licNbr2 != null && licNbr2 != "") {
      var isActive = isLicenseActive(licNbr2, boardCode, "M"); 


      if (!isActive) {
         cancel = true;
         showMessage = true;
         message = "";
         comment("The master license # "+licNbr2+" is not valid or is not a master license. Please contact the board for further details.");
      }
   }
    }
  catch(error){
    showMessage=true;
    comment("Error on function CWM_ELP_DEFECT_141_validateMasters. Please contact administrator");
    comment(error.message);
  }
}
 
 function CWM_ELP_DEFECT_5141_validatePLMasters(){
try{
var boardCode = "PL";
var licNbr = AInfo["Master Plumber License Number"];
var licNbr2 = AInfo["Second Partner - Master Plumber License Number"];
      
//validate the first # given
   if (licNbr != undefined && licNbr != null && licNbr != "") {
      var isActive = isLicenseActive(licNbr, boardCode, "M"); 


      if (!isActive) {
         cancel = true;
         showMessage = true;
         message = "";
         comment("The master license # "+licNbr+"  is not valid or is not a master license. Please contact the board for further details.");
      }
   }
//validate the 2nd # given
   if (licNbr2 != undefined && licNbr2 != null && licNbr2 != "") {
      var isActive = isLicenseActive(licNbr2, boardCode, "M"); 


      if (!isActive) {
         cancel = true;
         showMessage = true;
         message = "";
         comment("The master license # "+licNbr2+" is not valid or is not a master license. Please contact the board for further details.");
      }
   }
    }
  catch(error){
    showMessage=true;
    comment("Error on function CWM_ELP_DEFECT_141_validateMasters. Please contact administrator");
    comment(error.message);
  }
}
 
 function CWM_DEFECT_4314_DPL_ASA_addReferenceContactFromMasterLicense() {
    var newLicenseType = null;
    var boardName = getBoard(capId);
  var licType = "M";
  var contactType = "Master Licensee";
    if (arguments.length == 1) {
    licType = arguments[0];
    contactType = "Instructor";
  }
  if (boardName == "GF"){
    var mLicNum = AInfo["Master Gas Fitter License Number"];
    var mLicNum2 = AInfo["Second Partner - Master Gas Fitter License Number"];    
  }
  else if (boardName == "PL") {
      var mLicNum = AInfo["Master Plumber License Number"];
    var mLicNum2 = AInfo["Second Partner - Master Plumber License Number"];

  }
  else {
    var mLicNum = AInfo["License Number"]
  }
  if (boardName == "SM") {
    var mTypeClass = "M1";
    var mTypeClass2 = "M2";
  }
  else if (boardName == "EL") {
    mTypeClass = "A";
  }
  else {
    mTypeClass = "M";
  }
  
  
  if(!licType) {
  
    var refLP = getRefLicenseProf(mLicNum, boardName, mTypeClass);
     if (!refLP && boardName == "SM")
      refLP = getRefLicenseProf(mLicNum, boardName, mTypeClass2);
    }
  else {
     refLP = getRefLicenseProf(mLicNum, boardName, licType);
  } 
    if (refLP) {
        var fvAddResult = aa.licenseScript.associateLpWithCap(capId, refLP);

        // get the license number and licensee name
        var licNum = refLP.stateLicense + "-"+boardName+"-" + refLP.businessLicense;
        var refLPFirstName = refLP.contactFirstName;
        var refLPLastName = refLP.contactLastName;

        logDebug("Master License: " + licNum);
        logDebug("Master Licensee: " + refLPFirstName + " " + refLPLastName);

        if (isDPLLicenseFormat(licNum) && refLPFirstName && refLPLastName) {
            // get the contacts from the master license record
            var licCapId = aa.cap.getCapID(licNum).getOutput();
            var licContacts = getPeople(licCapId); 
            for (c in licContacts) {
                var licContact = licContacts[c];
                var licContactModel = licContact.getCapContactModel();
                var refContactNumber = licContactModel.refContactNumber;
                var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput();
                logDebug(">> " + licContact.firstName + " " + licContact.lastName + " ref:" + refContactNumber);

                if (licContact.firstName && licContact.lastName &&
                    licContact.firstName.toUpperCase().equals(refLPFirstName.toUpperCase()) &&
                    licContact.lastName.toUpperCase().equals(refLPLastName.toUpperCase())) {

                    var getResult = aa.people.getPeople(refContactNumber);
                    if (getResult.getSuccess()) {
                        var peopleObj = getResult.getOutput();
                        // add the reference contact from the people object to the application record
                        var contactNbr = addReferenceContactFromPeopleModel(peopleObj);
                        var appContacts = aa.people.getCapContactByCapID(capId).getOutput();

                        for (c in appContacts) {
                            var appContact = appContacts[c];
                            if (appContact.getPeople().getContactSeqNumber() == contactNbr) {
                                
                                // change the contact type of the newly added contact
                                appContact.getPeople().setContactType(contactType);
                                var updateResult = aa.people.editCapContact(appContact.getCapContactModel());
                                if (updateResult.getSuccess()) {
                                    logDebug("Contact " + contactNbr + " updated successfully");
                                } else {
                                    logDebug("Contact " + contactNbr + " update failed: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                                }

                                // copy addresses
                                for (add in contactAddressList) {
                                    var transactionAddress = false;
                                    contactAddressModel = contactAddressList[add].getContactAddressModel();
                                    if (contactAddressModel.getEntityType() == "CAP_CONTACT") {
                                        transactionAddress = true;
                                        contactAddressModel.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                                    }
                                    // Commit if transaction contact address
                                    if (transactionAddress) {
                                        var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                                        contactAddressModel.setContactAddressPK(newPK);
                                        aa.address.createCapContactAddress(capId, contactAddressModel);
                                    }
                                    // Commit if reference contact address
                                    else {
                                        // build model
                                        var Xref = aa.address.createXRefContactAddressModel().getOutput();
                                        Xref.setContactAddressModel(contactAddressModel);
                                        Xref.setAddressID(contactAddressList[add].getAddressID());
                                        Xref.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                                        Xref.setEntityType(contactAddressModel.getEntityType());
                                        Xref.setCapID(capId);
                                        // commit address
                                        aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                                    }
                                }
                                break;
                            }
                        }
                        break;
                    } else {
                        logDebug("Can't find " + refLPFirstName + " " + refLPLastName + " reference contact number: " + refContactNumber + " : " + getResult.getErrorType() + ":" + getResult.getErrorMessage());
                    }
                }
            }
        }
    } else return null;

  //added in case we have a 2nd master to add
  if(mLicNum2 !=null && mLicNum2 != undefined && mLicNum2 != ""){
    refLP2 = getRefLicenseProf(mLicNum2, boardName, licType);
        if (refLP2) {
        var fvAddResult = aa.licenseScript.associateLpWithCap(capId, refLP2);

        // get the license number and licensee name
        var licNum = refLP2.stateLicense + "-"+boardName+"-" + refLP2.businessLicense;
        var refLPFirstName = refLP2.contactFirstName;
        var refLPLastName = refLP2.contactLastName;

        logDebug("Master License: " + licNum);
        logDebug("Master Licensee: " + refLPFirstName + " " + refLPLastName);

        if (isDPLLicenseFormat(licNum) && refLPFirstName && refLPLastName) {
            // get the contacts from the master license record
            var licCapId = aa.cap.getCapID(licNum).getOutput();
            var licContacts = getPeople(licCapId); 
            for (c in licContacts) {
                var licContact = licContacts[c];
                var licContactModel = licContact.getCapContactModel();
                var refContactNumber = licContactModel.refContactNumber;
                var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput();
                logDebug(">> " + licContact.firstName + " " + licContact.lastName + " ref:" + refContactNumber);

                if (licContact.firstName && licContact.lastName &&
                    licContact.firstName.toUpperCase().equals(refLPFirstName.toUpperCase()) &&
                    licContact.lastName.toUpperCase().equals(refLPLastName.toUpperCase())) {

                    var getResult = aa.people.getPeople(refContactNumber);
                    if (getResult.getSuccess()) {
                        var peopleObj = getResult.getOutput();
                        // add the reference contact from the people object to the application record
                        var contactNbr = addReferenceContactFromPeopleModel(peopleObj);
                        var appContacts = aa.people.getCapContactByCapID(capId).getOutput();

                        for (c in appContacts) {
                            var appContact = appContacts[c];
                            if (appContact.getPeople().getContactSeqNumber() == contactNbr) {
                                
                                // change the contact type of the newly added contact
                                appContact.getPeople().setContactType(contactType);
                                var updateResult = aa.people.editCapContact(appContact.getCapContactModel());
                                if (updateResult.getSuccess()) {
                                    logDebug("Contact " + contactNbr + " updated successfully");
                                } else {
                                    logDebug("Contact " + contactNbr + " update failed: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                                }

                                // copy addresses
                                for (add in contactAddressList) {
                                    var transactionAddress = false;
                                    contactAddressModel = contactAddressList[add].getContactAddressModel();
                                    if (contactAddressModel.getEntityType() == "CAP_CONTACT") {
                                        transactionAddress = true;
                                        contactAddressModel.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                                    }
                                    // Commit if transaction contact address
                                    if (transactionAddress) {
                                        var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                                        contactAddressModel.setContactAddressPK(newPK);
                                        aa.address.createCapContactAddress(capId, contactAddressModel);
                                    }
                                    // Commit if reference contact address
                                    else {
                                        // build model
                                        var Xref = aa.address.createXRefContactAddressModel().getOutput();
                                        Xref.setContactAddressModel(contactAddressModel);
                                        Xref.setAddressID(contactAddressList[add].getAddressID());
                                        Xref.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                                        Xref.setEntityType(contactAddressModel.getEntityType());
                                        Xref.setCapID(capId);
                                        // commit address
                                        aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                                    }
                                }
                                break;
                            }
                        }
                        break;
                    } else {
                        logDebug("Can't find " + refLPFirstName + " " + refLPLastName + " reference contact number: " + refContactNumber + " : " + getResult.getErrorType() + ":" + getResult.getErrorMessage());
                    }
                }
            }
        }
    } else return null;

  }
  }

function CWM_DEFECT_5309_ASA_DPL_addPendingRequirementCondition()
{
  //Do you have 50 hours of advanced Gas Fitting theory credit ?
  var minCredits = getAppSpecific("Do you have 50 hours of advanced Gas Fitting theory credit ?");
  logDebug("ASI value: " + minCredits);

  if (minCredits == "No")
  {
    var cType = "Notice";
    var cDesc = "Application on Hold Pending Requirement"; 
    CWM_ELP_Generic_DPL_addConditionOnCap(cType, cDesc, capId);
  }
}

function CWM_ELP_Defect_5305_DPL_ASB_checkLicenseNumber() 
{
  try{
    var isActive = true;
    var changeType = AInfo['Change Type'];
    
    for (loopk in AppSpecificInfoModels)
    {
      var appSpecificObj = AppSpecificInfoModels[loopk];
      if((appSpecificObj.getCheckboxType() == "END EXISTING RELATIONSHIP" && changeType == "Remove Existing Relationship") || (appSpecificObj.getCheckboxType() == "ADD NEW RELATIONSHIP" && changeType == "Add New Relationship"))
      {
        //logDebug("Change Type: " + changeType);
        if(appSpecificObj.checkboxDesc == "License Number")
        {
          var licNumber = appSpecificObj.checklistComment;
          //logDebug("License Number: " + licNumber);
          isActive = isLicenseActive(licNumber,"GF","M");
          //logDebug("Is Active: " + isActive);
          break;
        }
      }
    }
    
    if(!isActive)
    {
      //logDebug("License is not active: " + isActive);
      showMessage=true;
      comment("License entered is not Current, please contact the Board.");
      cancel=true;
    }
  }
  catch(err){
    logDebug("Error on function CWM_ELP_isAmendmentLicenseActive." + err.stack);
    logDebug("Error Message: " + err.message);
  }
}

/*  if new school value under the approved course information is not null, then add it to approved school standard choice
// also look up the ra course school counter and give it the next number in sequence

*/
function CWM_ELP_DEFECT_5363_WTUA_AddNewSchool() {
vNewSchool = AInfo["New School Name"];
if(vNewSchool){
  //new school to add. look up the Real Estate Appraiser School counter to get the latest value and increase by 1.
  //then add an entry the Real Estate Appraiser Schools standard choice and set that new value as the approved school on the license.
  var newSchoolId = lookup("lookup:Real Estate Appraiser School Counter", "Counter");
  editLookup("lookup:Real Estate Appraiser School Counter", "Counter", parseInt(newSchoolId) + 1);
  //add the new school to the approved schools list
  newSchoolId = newSchoolId.toString();
  newSchoolId = (("0000" + newSchoolId).slice(-4));
  var newSchoolValue = newSchoolId+"|0000";
  addLookup("Real Estate Appraiser Schools",vNewSchool,newSchoolValue);
  return vNewSchool;
  
} 
else{
  return null;
}
}
//added by Chris LJ on 8/6/15

/*----------------------------------------------------------------------------------
/ Program : ASB;License!PlumberandGasFitter!GasFitterandPlumber!Permit!NA
/ Event : ApplicationSumbitBefore
/ Application : Defect 4280 PlumbingandGasFitter Permit Applicant or Permit Business
/-----------------------------------------------------------------------------------*/
function CWM_ELP_Defect_4280_DPL_ASB_addConditionContactPermit() {
  try{
  var appLicNum = AInfo["License Number"];
  var busLicNum = AInfo["Business License #"];
  var vLicType = AInfo["License Type"];
  if(vLicType=="Master Plumber" || vLicType=="Journeyman Plumber"){
      var boardCode = lookup("BOARDS", "Plumbers");
  }
  else {
      var boardCode = lookup("BOARDS", "Gas Fitters");        
  }
  if(appMatch("License/Plumbers and Gas Fitters/Permits/Gas Fitting Permit")){
      var fullLicNum = returnCompleteAltId(appLicNum, boardCode, vLicType);
  if(fullLicNum){
      var licProfObj = getRefLicenseProf(fullLicNum);
  if(licProfObj){
    if (licProfObj.getPolicy() != "Current") {
      showMessage=true;
      cancel=true;
        message="";
      comment("The "+vLicType+" "+appLicNum+" is not Current, please contact the Board.");
    }
    
    
  }
  else {
        showMessage=true;
      cancel=true;
        message="";
      comment("The "+vLicType+" "+appLicNum+" does not exist. Please contact the board for further details.");
    
  }
  }
    else {
        showMessage=true;
      cancel=true;
        message="";
      comment("The "+vLicType+" "+appLicNum+" does not exist. Please contact the board for further details.");
    
    }
  }
  else {
      var fullLicNum = returnCompleteAltId(appLicNum, boardCode, vLicType);
      if(fullLicNum){
      if(vLicType=="Master Plumber" || vLicType=="Journeyman Plumber"){
      var licProfObj = getRefLicenseProf(fullLicNum);
        if(licProfObj){
          if (licProfObj.getPolicy() != "Current") {
            showMessage=true;
            cancel=true;
            message="";
            comment("The "+vLicType+" "+appLicNum+" is not Current, please contact the Board.");
          }
          
          
        }
        else {
            showMessage=true;
            cancel=true;
            message="";
            comment("The "+vLicType+" "+appLicNum+" does not exist. Please contact the board for further details.");
          
        }
      }
      else {
            showMessage=true;
            cancel=true;
            message="";
            comment("You must provide a current Master or Journeyman Plumber license. Please contact the board for further details.");
        
        
      }
      }
      else {
        showMessage=true;
      cancel=true;
        message="";
      comment("The "+vLicType+" "+appLicNum+" does not exist. Please contact the board for further details.");
    
    }
  }





  var contactCount = 0;
  var peopleModel;
  var arrayList = aa.env.getValue("ContactList");
  var capContactArray = arrayList.toArray();
  logDebug("capContactArray = " + capContactArray[0]);

  if (capContactArray) {
    for (var yy in capContactArray) {
      peopleModel = capContactArray[yy].getPeople();
      logDebug("CONTACT TYPE" + peopleModel.getContactType());
      if ((peopleModel.getContactType() == "Permit Applicant") || (peopleModel.getContactType() == "Permit Business")) {
        contactCount = contactCount + 1;
      }

      //******Permit Applicant and Permit Business validation START ******
      if (peopleModel.getContactType() == "Permit Applicant") {
        //Required field validation
        if (!peopleModel.firstName || !peopleModel.lastName || !peopleModel.preferredChannel) {
          cancel = true;
          showMessage = true;
          message = "";
          comment("First name, last name and Preferred Communication fields are required for Permit Applicant contact.");
        }

        //If preferred channel is Email, the Email field required
        if (peopleModel.preferredChannel == 1 && !peopleModel.email) {
          cancel = true;
          showMessage = true;
          message = "";
          comment("For Permit Applicant Contact, please provide email address if preferred communication channel is Email.");
        }
      } else if (peopleModel.getContactType() == "Permit Business") {
        //Required field validation
        if (!peopleModel.businessName || !peopleModel.preferredChannel) {
          cancel = true;
          showMessage = true;
          message = "";
          comment("Entity name and Preferred Communication fields are required for Permit Business contact.");
        }

        //If preferred channel is Email, the Email field required
        if (peopleModel.preferredChannel == 1 && !peopleModel.email) {
          cancel = true;
          showMessage = true;
          message = "";
          comment("For Permit Business contact, please provide email address if preferred communication channel is Email.");
        }
      }
      //******Permit Applicant and Permit Business Contact validation END ******
    }
  }
  if (contactCount < 1) {
    cancel = true;
    showMessage = true;
    message = "";
    comment("Either Permit Applicant or Permit Business Contact must be added to submit the record.");
  } 
}
catch(error){
  cancel = true;
  logDebug("An error has been thrown in CWM_ELP_Defect_4280_DPL_ASB_addConditionContactPermit.");
  logDebug(error.message);
}
  
}

function CWM_ELP_Defect4975_WTUA_DPL_setExpDateForHO(licID) {
  try 
  {
    var currDate = new Date();
    var expDate = new Date();
    var year = currDate.getFullYear();
    var month = currDate.getMonth();

    if (month > 8) 
    {
      expDate.setFullYear((year+1));
      expDate.setDate(31); 
      expDate.setMonth(11);
    }
    else
    {
      expDate.setFullYear(year);
      expDate.setDate(31);
      expDate.setMonth(11);
    }
    
    if(expDate.getDate() == 1){
      expDate.setDate(31);
    }

    var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
    logDebug("Exp date: " + expDateString);
    licCustID = licID.getCustomID();
    logDebug("Parent ID: " + licCustID + " " + licID);
    thisLic=new licenseObject(licCustID,licID);
    thisLic.setExpiration(expDateString);
    thisLic.setStatus("Active");
  }
  catch(err)
  {
        showMessage = true;
    logDebug("Error on ASA function CWM_ELP_Defect4975_WTUA_DPL_setExpDateForHO, " + err.message);
        comment("Error on ASA function CWM_ELP_Defect4975_WTUA_DPL_setExpDateForHO, Please contact administrator");
    }
}

function dplTaskAssign(vTask,assignToUser){
  if(assignToUser){
if(assignToUser.indexOf("/") > -1){
  //value contains a / is is a department
   updateTaskDepartment(vTask, assignToUser);
}
else {
 //value is a user id
   assignTask(vTask, assignToUser);
}

logDebug(vTask+" task has been assigned to "+ assignToUser);
  }
  logDebug("The username passed is null");
}
function updateFeeAmount(feeCode,feeSched,feeAmt)
//this function takes a fee code, fee schedule and fee amount as variables.
//the fee code and schedule represent the fee on the current capid that you wish to update and the amoutn is the $amoutn that you wish to set it to.
{
  var fvCapID = capId;
  var fvCap = aa.cap.getCap(fvCapID).getOutput();
  var fvFeeArrayResult = aa.finance.getFeeItemByCapID(fvCapID)
  var fvFeeArray = fvFeeArrayResult.getOutput();

    for (var fvFeeCounter in fvFeeArray)
    {
      var fvFees = fvFeeArray[fvFeeCounter];
      var fvFeesCod = fvFees.getFeeCod();
      var fvFeesSched = fvFees.getFeeSchudle();

      if (fvFeesCod == feeCode && fvFeesSched == feeSched){
        logDebug("current fee is:"+fvFees.getFee());
        logDebug("fee schedule is:"+fvFeesSched);
        logDebug("fee code is:"+fvFeesCod);
        var fvFeeSeqNum = fvFees.getFeeSeqNbr();
        var fsm = aa.finance.getFeeItemByPK(fvCapID, fvFeeSeqNum).getOutput().getF4FeeItem();
        fsm.setFee(feeAmt);
        var fvResult = aa.finance.editFeeItem(fsm)
          if (fvResult){
            logDebug("Updated Fee code: " +fvFeesCod+" on "+ fvCapID.getCustomID());
            logDebug("new fee is:"+fsm.getFee());
          }
          else
          {
          logDebug("failed to update the fee");
          }
      }
    }
  
}


function checkForPreferredCommunicationMethod(pCapId)
{
  //Check for communication method for Business or Licensed Individual contact type only
  var co = new Array();
  var capContactResult = aa.people.getCapContactByCapID(pCapId);
  if (capContactResult.getSuccess()) {
    var capContactArray = capContactResult.getOutput();
  }

  if (capContactArray) {
    for (var yy in capContactArray) {
        co.push(new contactObj(capContactArray[yy]));
    }
  }
  for (i in co) {
    var po = co[i].people;
    var contactType = po.getContactType();
    if( contactType == "Licensed Individual" || contactType == "Business" )
    {
      var pc = getContactPreferredChannelDesc(po.getPreferredChannel());
      logDebug(po.getContactName() + " - " + po.getContactType() + " - PreferredChannel:" + pc);
      
      if( pc == "Email") return pc;
    } 
  }
  return "Postal Mail"
}
function addFeeWithAmount(fcode, fsched, fperiod, fqty, finvoice, feeAmount) {
  var feeCap = capId;
  var feeCapMessage = "";
  var feeSeq_L = new Array(); // invoicing fee for CAP in args
  var paymentPeriod_L = new Array(); // invoicing pay periods for CAP in args
  assessFeeResult = aa.finance.createFeeItem(feeCap, fsched, fcode, fperiod, fqty);
  if (assessFeeResult.getSuccess()) {
    feeSeq = assessFeeResult.getOutput();
    logDebug("Successfully added Fee " + fcode + ", Qty " + fqty + feeCapMessage);
    logDebug("The assessed fee Sequence Number " + feeSeq + feeCapMessage);
    fsm = aa.finance.getFeeItemByPK(feeCap, feeSeq).getOutput().getF4FeeItem();
    logDebug("old fee amount:"+fsm.getFee());
    if (feeAmount)
      fsm.setFee(feeAmount);
    aa.finance.editFeeItem(fsm)
    logDebug("new fee amount: " +fsm.getFee());
    if (finvoice == "Y" && arguments.length == 6) // use current CAP
    {
      feeSeqList.push(feeSeq);
      paymentPeriodList.push(fperiod);
    }
    if (finvoice == "Y" && arguments.length > 6) // use CAP in args
    {
      feeSeq_L.push(feeSeq);
      paymentPeriod_L.push(fperiod);
      var invoiceResult_L = aa.finance.createInvoice(feeCap, feeSeq_L, paymentPeriod_L);
      if (invoiceResult_L.getSuccess())
        logDebug("Invoicing assessed fee items is successful.");
      else
        logDebug("**ERROR: Invoicing the fee items assessed was not successful.  Reason: " + invoiceResult.getErrorMessage());
    }
  } else {
    logDebug("**ERROR: assessing fee (" + fcode + "): " + assessFeeResult.getErrorMessage());
    return null;
  }
  return feeSeq;
}

function addDPLApplicationFee()
{
  logDebug("Adding Application Fee on the record.");
  /*-------------------------------------------------------------------------------------------------------/
                Logic for DPL Application fee calculation
  --------------------------------------------------------------------------------------------------------*/
  
  //Variables to add fee
  var feeCode;
  var feeSchedule;
    var feeCode1;
  var feeSchedule1;
  var feeQty = 1;
  var feeQty1 = 1;
  var feeAmount = null;

  //Variables to remove fee
  var feeCodeRemove;
  var feeScheduleRemove;
  var feeCodeRemove1;
  var feeScheduleRemove1;
  var feeAmount1 = null;

  //Obtain Military Status values
  var militaryStatus = getAppSpecific("Military Status", capId);
  logDebug("militaryStatus: "+militaryStatus);
  
  //********************************* Remove Fee START ********************************************//
  
  //Remove any added Fee if Military Status is not N/A
  if(militaryStatus !="N/A")
  {
    //Mark Fahey - Feb 2/2016
    //removed all code the was individually removing fees based on app type. 
    removeAllFees(capId);
  }   
  //**************************** Remove Fee END *************************************************//
  
  
  //***************************** Add Fee START *********************************************//
  
  //Add fee if Military Status is N/A
  //ALL INDIVIDUAL APPLICATIONS GO INSIDE THIS IF STATEMENT!
  if(militaryStatus && militaryStatus =="N/A")
  {

      //Added by BYellapu
    if (appMatch("License/Barbers/Instructor/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "BI-APP");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      
    }

    //Added by Vishakha for Defect#11209
    //Updated By Kanhaiya
  if (appMatch("License/Electrology/Electrology Instructor/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "Electrology_Instructor");  
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
  
  //Added by Prateek for Defect#11228
  //Updated By Kanhaiya for #12740
  if (appMatch("License/Electrology/Electrology Lecturer/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "ET-LA-APP"); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }

// Added by Prateek defect 9774
        
    if (appMatch("License/Electrology/Electrologist/Out of State Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "ET-RP-APP"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      
    }
                      // added by SKumar (Script ID: 502)
    if (appMatch("License/Barbers/Master/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "BR-MA-APP"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
    if (appMatch("License/Barbers/Lapsed/Application"))
    {
    var appTypeASI = getAppSpecific("What type of lapsed license do you hold?");
    if(appTypeASI == "Master Barber"){
      var feeInfo = lookup("LKUP_Application_Fees", "BR-MA-APP"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
    }
    
        if (appMatch("License/Real Estate Appraiser/Appraiser/Application"))
    {

      //function to get the business contact corp structure
      var reaAppType = AInfo["Please select application type"];
      if(reaAppType == "State-Certified Residential Real Estate Appraiser"){
        var feeInfo = lookup("LKUP_Application_Fees", "REA-APP-RES"); 
      }
      else if(reaAppType == "State-Certified General Real Estate Appraiser"){
        var feeInfo = lookup("LKUP_Application_Fees", "REA-APP-GEN"); 
      }
      else {
        var feeInfo = lookup("LKUP_Application_Fees", "REA-APP-LIC"); 
        
      }
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        
      }
    }
    if (appMatch("License/Real Estate Appraiser/Temporary Appraiser/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "REA-TMP-APP"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        
      }
    }
    if (appMatch("License/Real Estate Appraiser/Trainee/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "REA-TR-APP");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        
      }
      var feeInfo1 = lookup("LKUP_Application_Fees", "REA-TR-APP1");  
      if (feeInfo1)
      {
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
        
      }
    }
  
    //ELECTRICIANS
      if (appMatch("License/Electricians/Master Electrician/Application"))  
    {
      var recELM = AInfo["Source"];
      if(recELM =="Reciprocity") {
        var feeInfo = lookup("LKUP_Application_Fees", "EL-M-A");  
        if (feeInfo)
        {
          feeInfo = feeInfo.toString();
          var fee =new Array();
          fee = feeInfo.split("/");
          feeCode = fee[0];
          feeSchedule = fee[1];
        }
       var feeInfo1 = lookup("LKUP_Application_Fees", "EL-M-A2"); 
       if (feeInfo1)
        {
            feeInfo1 = feeInfo1.toString();
          var fee1 =new Array();
          fee1 = feeInfo1.split("/");
          feeCode1 = fee1[0];
          feeSchedule1 = fee1[1];
        }
      }
      else{
          var feeInfo = lookup("LKUP_Application_Fees", "EL-M-A1"); 
          if (feeInfo)
          {
            feeInfo = feeInfo.toString();
            var fee =new Array();
            fee = feeInfo.split("/");
            feeCode = fee[0];
            feeSchedule = fee[1];
          }
          
          var feeInfo1 = lookup("LKUP_Application_Fees", "EL-M-A2");  
          if (feeInfo1)
          {
            feeInfo1 = feeInfo1.toString();
            var fee1 =new Array();
            fee1 = feeInfo1.split("/");
            feeCode1 = fee1[0];
            feeSchedule1 = fee1[1];
          }
        
        
      }
    } 
      if (appMatch("License/Electricians/Journeyman Electrician/Application"))  
    {
      var recELM = AInfo["Source"];
    //added by Priyanka for JIRA#558
    if(publicUser) //If form is accessed online; the value for this field is "Reciprocity"; for the interface the value for this field is "Exam"
    {  
        recELM = "Reciprocity";
    }
      if(recELM =="Reciprocity") {
        var feeInfo = lookup("LKUP_Application_Fees", "EL-JP-A2");  
        if (feeInfo)
        {
          feeInfo = feeInfo.toString();
          var fee =new Array();
          fee = feeInfo.split("/");
          feeCode = fee[0];
          feeSchedule = fee[1];
        }
                  var feeInfo1 = lookup("LKUP_Application_Fees", "EL-JP-A3"); 
          if (feeInfo1)
          {
            feeInfo1 = feeInfo1.toString();
            var fee1 =new Array();
            fee1 = feeInfo1.split("/");
            feeCode1 = fee1[0];
            feeSchedule1 = fee1[1];
          }
      }
      else{
          var feeInfo = lookup("LKUP_Application_Fees", "EL-JP-A"); 
          if (feeInfo)
          {
            feeInfo = feeInfo.toString();
            var fee =new Array();
            fee = feeInfo.split("/");
            feeCode = fee[0];
            feeSchedule = fee[1];
          }
          
          var feeInfo1 = lookup("LKUP_Application_Fees", "EL-JP-A3"); 
          if (feeInfo1)
          {
            feeInfo1 = feeInfo1.toString();
            var fee1 =new Array();
            fee1 = feeInfo1.split("/");
            feeCode1 = fee1[0];
            feeSchedule1 = fee1[1];
          }
        
        
      }
    }     
  //Architects
    //Check for the different fee codes and fee schedules for different record types  
    if (appMatch("License/Architect/Architect/Application"))
    {
      var vappType = AInfo["Are you applying for this license via reciprocity?"];
      if(vappType=="Yes"){
      var feeInfo = lookup("LKUP_Application_Fees", "AR-APP-RC"); 
      }
      else {
      var feeInfo = lookup("LKUP_Application_Fees", "AR-APP");  
      }
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      } 
    if (appMatch("License/Architect/Architect Emeritus/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "AR-APP-E");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
// DRINKING WAER  BOARD Board (Added by KPREETI)
  // Release C, ScriptID:277 --------------------
  if (appMatch("License/Drinking Water/Drinking Water Operator/Application")) {

    var feeInfo = lookup("LKUP_Application_Fees", "Drinking Water APP");
    if (feeInfo) {
      feeInfo = feeInfo.toString();
      var fee = new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    var feeInfo1 = lookup("LKUP_Application_Fees", "Drinking Water LIC");
    if (feeInfo1) {
      feeInfo1 = feeInfo1.toString();
      var fee1 = new Array();
      fee1 = feeInfo1.split("/");
      feeCode1 = fee1[0];
      feeSchedule1 = fee1[1];

    }

  }   
  //Hearing Instrument Specialist
    //Check for the different fee codes and fee schedules for different record types  
    if (appMatch("License/Hearing Instrument/Specialist/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "HE-HES-APP");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
  //Hearing Instrument Apprentice
    //Check for the different fee codes and fee schedules for different record types  
    if (appMatch("License/Hearing Instrument/Apprentice/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "HE-HEA-APP");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }     
  //SHEET METAL
    //Check for the different fee codes and fee schedules for different record types  
    if (appMatch("License/Sheet Metal/Apprentice/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "Apprentice");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }

    if (appMatch("License/Sheet Metal/Instructor/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "Instructor");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      
    }

    if (appMatch("License/Sheet Metal/Journeyperson/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "Journeyperson"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      
    }

    if (appMatch("License/Sheet Metal/Master/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "Master");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      
    }

    //VETS
    if (appMatch("License/Veterinarian/Veterinarian License/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "Veterinarian License");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      
            var feeInfo1 = lookup("LKUP_Application_Fees", "Veterinarian License1");  
      if (feeInfo1)
      {
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
      }

// FA 06/13/2018 Ticket 5060 add Veterinary License - Original fee.
		var feeInfoOrg = lookup("LKUP_Application_Fees", "Veterinary License Original");  
		if (feeInfoOrg)
		{
			feeInfoOrg = feeInfoOrg.toString();
			var feeOrg =new Array();
			feeOrg = feeInfoOrg.split("/");
			feeCodeOrg = feeOrg[0];
			feeScheduleOrg = feeOrg[1];
			if (feeCodeOrg && feeScheduleOrg)
			{
				if (feeExists(feeCodeOrg)) 
				{
					if(feeAmount1!=null){
						logDebug("updating Veterinary License Original fee with custom function");
						updateFeeAmount(feeCodeOrg,feeScheduleOrg,feeAmount1);  
					}
					else {
						logDebug("updating Veterinary License Original fee with standard function");
						updateFee(feeCodeOrg, feeScheduleOrg, "STANDARD", feeQty1, "Y");
					}
					logDebug("Fee Updated.");
				} 
				else 
				{
					if(feeAmount1!=null){
						logDebug("adding Veterinary License Original fee with custom function");
						addFeeWithAmount(feeCodeOrg, feeScheduleOrg, "STANDARD", feeQty1, "Y", capId, feeAmount1) 
					}
					else {
						logDebug("adding Veterinary License Original fee with standard function");
						addFee(feeCodeOrg, feeScheduleOrg, "STANDARD", feeQty1, "Y");
					}
					logDebug("Fee Added.");   
				}

			}

		}	  
		//END FA 06/13/2018 Ticket 5060 add Veterinary License - Original fee.

    }
   //Plumbers
    if (appMatch("License/Plumbers and Gas Fitters/Apprentice/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "PL-A-A");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
    if (appMatch("License/Plumbers and Gas Fitters/Journeyman/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "PL-J-A");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
    if (appMatch("License/Plumbers and Gas Fitters/Master/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "PL-M-A");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
/*      var feeInfo1 = lookup("LKUP_Application_Fees", "PL-M-A1");  
      if (feeInfo1)
      {
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
      } */
    } 
    
    //GAS FITTERS
    if (appMatch("License/Plumbers and Gas Fitters/Gas Fitter Apprentice/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "GF-A-A");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
    if (appMatch("License/Plumbers and Gas Fitters/Gas Fitter Journeyman/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "GF-J-A");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
    if (appMatch("License/Plumbers and Gas Fitters/Gas Fitter Master/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "GF-M-A");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }   
    if (appMatch("License/Plumbers and Gas Fitters/LP Installer/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "GF-LP-A"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    } 
    if (appMatch("License/Plumbers and Gas Fitters/LTD LP Installer/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "GF-LTD-A");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }   
    
    //DIETITIANS AND NUTRITIONISTS
    if (appMatch("License/Dietitians and Nutritionists/Dietitians and Nutritionists/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "NU-A");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
    //HEALTH OFFICERS
    if (appMatch("License/Health Officers/Certified Health Officer/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "HO-A");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
  //PSYCHOLOGISTS
  if (appMatch("License/Psychologist/Psychologist/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "PY-A");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
/*      var feeInfo1 = lookup("LKUP_Application_Fees", "PY-L"); 
      if (feeInfo1)
      {
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
      } */
    }
//REAL Estate/Reciprocal
    if (appMatch("License/Real Estate/Reciprocal Salesperson/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "RE-RS-A"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        //work around for defect 4360
        //set the value to a hidden field on the app and let the fee schedule handle the calculation of the field X $1
        var appfee = CWM_ELP_965_DPL_ASA_AddProRatedLicFeeRESApp(capId);
        editAppSpecific("Application Fee", appfee, capId);



      }
      var feeInfo1 = lookup("LKUP_Application_Fees", "RE-RS-A1"); 
      if (feeInfo1)
      {
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
      }
    } 
      
    //REAL Estate/Reciprocal BROKER
    if (appMatch("License/Real Estate/Reciprocal Broker/Application") || appMatch("License/Real Estate/Attorney Broker/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "RE-RB-A"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        //work around for defect 4360
        //set the value to a hidden field on the app and let the fee schedule handle the calculation of the field X $1
        var appfee = CWM_ELP_1354_DPL_ASA_AddProRatedFee(capId);
        editAppSpecific("Application Fee", appfee, capId);        
      }
      var feeInfo1 = lookup("LKUP_Application_Fees", "RE-RB-A1"); 
      if (feeInfo1)
      {
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
      }
    } 
    
      // Funeral Directors and Embalmers Board (Added by Ankush Kshirsagar)
  // Release C, ScriptID:273 --------------------
  if (appMatch("License/Funeral Directors/Embalmer Apprentice/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "EM-EA-APP"); 
      if (feeInfo){
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
  } 
  // End ScriptID:273 -------------------------
  
  // Release C - Script ID: 182 (added by SKumar)
  CWM_ELP_182_ASA_DPL_addLAApplicationFees();
      // Record Type "Massage Therapist Application"  Added by tofek
  // Begin of Script#575--
  if (appMatch("License/Massage Therapy/Massage Therapist/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "MT-MT-APP"); 
      if (feeInfo){
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
  }// End of Script#575--
        
  // End ScriptID:540, 575 -------------------------

    
  // Funeral Directors and Embalmers Board (Added by Nilkanth Patel)
  // Release C, ScriptID:685 --------------------
  if (appMatch("License/Funeral Directors/Funeral Assistant/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "FA-SME-APP");  
      if (feeInfo){
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
  } 
  // End ScriptID:685 -------------------------
    // Dispensing Opticians Board (Added by tofek khan)
  // Release C, ScriptID:339
  if (appMatch("License/Dispensing Opticians/Dispensing Optician/Application"))
  {
    var appType = AInfo["Application Type"];
    if(appType == "Reciprocity"){
      var feeInfo = lookup("LKUP_Application_Fees", "DO-Reciprocity-App");  
      if (feeInfo){
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      
      var feeInfo1 = lookup("LKUP_Application_Fees", "DO-WallCert-App");  
      if (feeInfo1){
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
      }
    } else if(appType == "Initial Certification"){
        var feeInfo = lookup("LKUP_Application_Fees", "DO-APP");  
        if (feeInfo){
          feeInfo = feeInfo.toString();
          var fee =new Array();
          fee = feeInfo.split("/");
          feeCode = fee[0];
          feeSchedule = fee[1];
        }
      
        var feeInfo1 = lookup("LKUP_Application_Fees", "DO-WallCert-App");  
        if (feeInfo1){
          feeInfo1 = feeInfo1.toString();
          var fee1 =new Array();
          fee1 = feeInfo1.split("/");
          feeCode1 = fee1[0];
          feeSchedule1 = fee1[1];
        }     
         
       }
        
  } // End ScriptID:339
  
    // Speech Pathologist Application Script#409. Added by tofek khan
    if (appMatch("License/Speech and Audiology/Speech Language Pathologist/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "SP-SL-APP"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      
    }// End of Script#409   
    // Speech Pathologist Application Script#409. Added by tofek khan
    if (appMatch("License/Barbers/Reciprocal/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "BR-RC-APP"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      
    }// End of Script#409     
    // Audiology Assistant Application Script#395. Added by tofek khan
    if (appMatch("License/Speech and Audiology/Audiology Assistant/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "SP-AA-APP"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      
    }// End of Script#395
    
    // Release C - Script ID: 192 (added by SKumar)
    if (appMatch("License/Home Inspector/Home Inspector Associate/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "HI-HIA-APP");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    } 
    // END OF Script ID: 192
    if (appMatch("License/Cosmetology/Out of State/Application") || appMatch("License/Cosmetology/Out of Country/Application"))
    {
      var vappType = AInfo["Type of License requested in Massachusetts"];
      var feeInfo = lookup("LKUP_Application_Fees", "OutOfState:"+vappType);  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    } 
    if (appMatch("License/Cosmetology/Type 5/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "OutOfState:demonstrator"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
                 //added by k preeti for defect 10649
if (appMatch("License/Cosmetology/Type 6/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "HD-Type 6-APP"); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    
  }
    
    // Release C - Script ID: 399 (added by Sagar Cheke)
    if (appMatch("License/Speech and Audiology/Audiologist/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "SP-AU-APP"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
    //Script 405 (added by Sagar Cheke)
    if (appMatch("License/Speech and Audiology/Speech Language Pathology Asst/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "SP-SA-APP"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }

    //Added by Kanhaiya for #11152
if (appMatch("License/Landscape Architects/Landscape Architect/Application"))
  {
  var appTypeASI = getAppSpecific("Application Type");
  logDebug("value in ASI application type lower: "+appTypeASI);
  if(appTypeASI == "First-Time Registration/Licensure by Examination"){
    var feeInfo = lookup("LKUP_Application_Fees", "LA-EXAM-APP"); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
  else if(appTypeASI == "Registration/Licensure by Reciprocity Applicants"){
    var feeInfo = lookup("LKUP_Application_Fees", "LA-REC-APP");  
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
}


    //added by kpreeti fro defect# 10969
    //Updated by Kanhaiya for #11044
if (appMatch("License/Home Inspector/Home Inspector/Application"))
  {
  var appTypeASI = getAppSpecific("Application Type:");
  logDebug("value in ASI aplication type lower: "+appTypeASI);
  if(appTypeASI == "Initial Certification"){
    var feeInfo = lookup("LKUP_Application_Fees", "HI-AP-APP"); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
  else if(appTypeASI == "Reciprocity"){
    var feeInfo = lookup("LKUP_Application_Fees", "HI-RC-APP"); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
}

    //Script 647 (added by Kanhaiya)
    if (appMatch("License/Cosmetology/Forfeiture/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "HD-F-APP");
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
    //Script 115 (added by Sagar Cheke)
    if (appMatch("License/Public Accountancy/CPA/Non-Reporting Application"))
    {
      var appTypeASI = getAppSpecific("Application Type");
      logDebug("appTypeASI : "+appTypeASI);
      if(appTypeASI == "Initial Application"){
        var feeInfo = lookup("LKUP_Application_Fees", "CPA_NRA"); 
        if (feeInfo)
        {
          feeInfo = feeInfo.toString();
          var fee =new Array();
          fee = feeInfo.split("/");
          feeCode = fee[0];
          feeSchedule = fee[1];
        }
      }
      else
      {
        var feeInfo = lookup("LKUP_Application_Fees", "CPA_NRA"); 
        if (feeInfo)
        {
          feeInfo = feeInfo.toString();
          var fee =new Array();
          fee = feeInfo.split("/");
          feeCode = fee[0];
          feeSchedule = fee[1];
        }
        
        var feeInfo1 = lookup("LKUP_Application_Fees", "CPA_NRA_REC");  
        if (feeInfo1)
        {
          feeInfo1 = feeInfo1.toString();
          var fee =new Array();
          fee = feeInfo1.split("/");
          feeCode1 = fee[0];
          feeSchedule1 = fee[1];
        }
      }
    }
    
    //Sagar : Added for Script #302
    if (appMatch("License/Public Accountancy/CPA/Full Reporting Application"))
    {
      var appTypeASI = getAppSpecific("Application Type");
      logDebug("appTypeASI : "+appTypeASI);
      if(appTypeASI == "Initial Application"){
        var feeInfo = lookup("LKUP_Application_Fees", "CA-FR-APP"); 
        if (feeInfo)
        {
          feeInfo = feeInfo.toString();
          var fee =new Array();
          fee = feeInfo.split("/");
          feeCode = fee[0];
          feeSchedule = fee[1];
        }
      }
      else
      {
        var feeInfo = lookup("LKUP_Application_Fees", "CA-FR-APP"); 
        if (feeInfo)
        {
          feeInfo = feeInfo.toString();
          var fee =new Array();
          fee = feeInfo.split("/");
          feeCode = fee[0];
          feeSchedule = fee[1];
        }
        
        var feeInfo1 = lookup("LKUP_Application_Fees", "CA-FR-APP-REC");  
        if (feeInfo1)
        {
          feeInfo1 = feeInfo1.toString();
          var fee =new Array();
          fee = feeInfo1.split("/");
          feeCode1 = fee[0];
          feeSchedule1 = fee[1];
        }
      }
    }
      if (appMatch("License/Public Accountancy/CPA/Short Form Application"))
    {
        var feeInfo = lookup("LKUP_Application_Fees", "CA-FR-APP"); 
        if (feeInfo)
        {
          feeInfo = feeInfo.toString();
          var fee =new Array();
          fee = feeInfo.split("/");
          feeCode = fee[0];
          feeSchedule = fee[1];
        }
        
        var feeInfo1 = lookup("LKUP_Application_Fees", "CA-FR-APP-REC");  
        if (feeInfo1)
        {
          feeInfo1 = feeInfo1.toString();
          var fee =new Array();
          fee = feeInfo1.split("/");
          feeCode1 = fee[0];
          feeSchedule1 = fee[1];
        }
    }
    //Added by Ankush. Script#221
    if (appMatch("License/Cosmetology/Type 1/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "HD-TYPE 1-APP"); 
        if (feeInfo){
          feeInfo = feeInfo.toString();
          var fee =new Array();
          fee = feeInfo.split("/");
          feeCode = fee[0];
          feeSchedule = fee[1];
        }
    }
    
    //Added by Ankush. Script#264
    if (appMatch("License/Cosmetology/Jr Instructor/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "HD-JR-APP"); 
        if (feeInfo){
          feeInfo = feeInfo.toString();
          var fee =new Array();
          fee = feeInfo.split("/");
          feeCode = fee[0];
          feeSchedule = fee[1];
        }
    }
    
    if (appMatch("License/Cosmetology/Instructor/Application")) {
      var vLicenseType = AInfo["Type of License Requested"];
      var vFeeInfo;
      if (matches(vLicenseType, "cosmetology instructor")) {
        vFeeInfo = lookup("LKUP_Application_Fees", "HD-HDIA-APP");
      }
      
      if (matches(vLicenseType, "aesthetic instructor")) {
        vFeeInfo = lookup("LKUP_Application_Fees", "HD-HAIA-APP");
      }
      if (vFeeInfo) {
        vFeeInfo = vFeeInfo.toString();
        var fee =new Array();
        fee = vFeeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
      // Release C - Script ID: 753 (added by debashish.barik Dt:3/21/2016)
  if (appMatch("License/Occupational Schools/Sales Representative/Application"))
  {
    logDebug("Checking Application Fee for :OS-SR-APP");
    var feeInfo = lookup("LKUP_Application_Fees", "OS-SR-APP"); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
    // Release C - Script ID: 705 (added by SKumar)
    if (appMatch("License/Allied Mental Health/*/Application"))
    {
      var feeInfo;
      if (appMatch("License/Allied Mental Health/Educational Psychologist/Application")) {
        feeInfo = lookup("LKUP_Application_Fees", "MH-EDAP-APP");
      }
      if (appMatch("License/Allied Mental Health/Marriage and Family Therapist/Application")) {
        feeInfo = lookup("LKUP_Application_Fees", "MH-MFAP-APP");
      }
      if (appMatch("License/Allied Mental Health/Mental Health Counselor/Application")) {
        feeInfo = lookup("LKUP_Application_Fees", "MH-MHAP-APP");
      }
      if (appMatch("License/Allied Mental Health/Rehabilitation Counselor/Application")) {
        feeInfo = lookup("LKUP_Application_Fees", "MH-RCAP-APP");
      }
      if (appMatch("License/Allied Mental Health/Applied Behavior Analyst/Application")) {
        feeInfo = lookup("LKUP_Application_Fees", "MH-MABA-APP");
      }
      if (appMatch("License/Allied Mental Health/Asst Applied Behavior Analyst/Application")) {
        feeInfo = lookup("LKUP_Application_Fees", "MH-AABA-APP");
      }
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
    }
  if(appMatch("License/Real Estate Appraiser/Reciprocal Appraiser/Application")){
      removeAllFees(capId);
      var reaAppType = AInfo["Please select application type"];
      if(reaAppType == "State-Certified Residential Real Estate Appraiser"){
        var feeInfo1 = lookup("LKUP_Application_Fees", "REA-LIC-RES");  
        updateFee("RARA", "RA", "STANDARD", 1, "Y");
      }
      else if(reaAppType == "State-Certified General Real Estate Appraiser"){
        var feeInfo1 = lookup("LKUP_Application_Fees", "REA-LIC-GEN");  
        updateFee("RAGA", "RA", "STANDARD", 1, "Y"); 
 
     }
      else {
        var feeInfo1 = lookup("LKUP_Application_Fees", "REA-LIC-LIC");  
        updateFee("RASA", "RA", "STANDARD", 1, "Y");
      }
      if (feeInfo1)
      {
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
      }

      
    }   

    if (appMatch("License/Real Estate Appraiser/Temporary Appraiser/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "REA-TMP-APP"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        
      }
    }
    if (appMatch("License/Real Estate Appraiser/Trainee/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "REA-TR-APP");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        
      }
      var feeInfo1 = lookup("LKUP_Application_Fees", "REA-TR-APP1");  
      if (feeInfo1)
      {
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
        
      }
    } 
  
  }
  
  logDebug("after military");
  //ONLY PUT AMENDMENTS AND BUSINESS APPLICATIOSN AFTER THIS LINE!!!!!
      //if the user requests a wall cert, add the fee defect 9328
      if (appMatch("License/Architect/Architect/Application"))
      {
        var wallcert = AInfo["Would you like to purchase a Wall Certificate upon licensure?"];
        if(wallcert=="Yes")
        {
          var feeInfo1 = lookup("LKUP_Application_Fees", "AR-APP-E"); 
          if (feeInfo1)
          {
            feeInfo1 = feeInfo1.toString();
            var fee1 =new Array();
            fee1 = feeInfo1.split("/");
            feeCode1 = fee1[0];
            feeSchedule1 = fee1[1];
          }
        }
      }
  //For the records below, the military status does not exist or does not apply (businesses or schools or permits)
  //added by kpreeti for defect# 10755
  if (appMatch("License/Barbers/School/Application"))
  {
            logDebug("calculating for Barber2 fee");
      var feeInfo = lookup("LKUP_Application_Fees", "Barber_School"); 
      if (feeInfo)
      {
    feeInfo = feeInfo.toString();
    var fee =new Array();
    fee = feeInfo.split("/");
    feeCode = fee[0];
    feeSchedule = fee[1];
       }
  }

  // Release C - Script ID: 266 (added by kumari preeti)
  if (appMatch("License/Cosmetology/Shop/Application"))
  {
    logDebug("calculating for salon fee");
    var feeInfo = lookup("LKUP_Application_Fees", "HD-SALON-APP");  
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
  
  //Sagar: Added for script #295 + #299 +293
  // SKumar: Added for Script# 226 and 297
  if(appMatch("License/Public Accountancy/CPA Firm for LLC/Application") || appMatch("License/Public Accountancy/CPA Firm License for LLP/Application") || appMatch("License/Public Accountancy/CPA Firm for Professional Corp/Application") || 
  appMatch("License/Public Accountancy/CPA Firm for Business Corp/Application") || 
  appMatch("License/Public Accountancy/CPA Firm for Partnership/Application")) 
  {
    var feeInfo = lookup("LKUP_Application_Fees", "CA-LC-APP"); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
//ADD BUSINESS NAME FOR ELECTRICIANS
  if (appMatch("License/Electricians/Remove Business Name/Application"))
    {
      var busType = getAppSpecific("Is this application to only remove a DBA from your license?", capId);

        var feeInfo = lookup("LKUP_Application_Fees", "EL-ABN-AP"); 
        var feeInfo1 = lookup("LKUP_Application_Fees", "EL-ABN-AP1"); 
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
        
      if (feeInfo && busType == "No")
      {
        //assess fee and remove fee1
        feeCodeRemove = fee1[0];
        feeScheduleRemove = fee1[1];
            //if fee exists, then remove.
        if (feeCodeRemove && feeScheduleRemove)
        {
          if (feeExists(feeCodeRemove)) 
          {
            removeFee(feeCodeRemove, "STANDARD");
            logDebug("Fee Removed.");
          }       
        }
        feeCode1 = null;
        feeSchedule1 = null;
        
        
      }
      else
      {

        //assess fee1 and remove fee
        feeCodeRemove1 = fee[0];
        feeScheduleRemove1 = fee[1];
            //if fee exists, then remove.
        if (feeCodeRemove1 && feeScheduleRemove1)
        {
          if (feeExists(feeCodeRemove1)) 
          {
            removeFee(feeCodeRemove1, "STANDARD");
            logDebug("Fee Removed.");
          }       
        }
        feeCode = null;
        feeSchedule = null;
      }     
      
    }
  
  if (appMatch("License/Electricians/Add Business Name/Application"))
    {
      var busType = getAppSpecific("Select Business Type", capId);

        var feeInfo = lookup("LKUP_Application_Fees", "EL-ABN-AP"); 
        var feeInfo1 = lookup("LKUP_Application_Fees", "EL-ABN-AP1"); 
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
        
      if (feeInfo && busType != "DBA Only")
      {
        //assess fee and remove fee1
        feeCodeRemove = fee1[0];
        feeScheduleRemove = fee1[1];
            //if fee exists, then remove.
        if (feeCodeRemove && feeScheduleRemove)
        {
          if (feeExists(feeCodeRemove)) 
          {
            removeFee(feeCodeRemove, "STANDARD");
            logDebug("Fee Removed.");
          }       
        }
        feeCode1 = null;
        feeSchedule1 = null;
        
        
      }
      if (feeInfo1 && busType == "DBA Only")
      {

        //assess fee1 and remove fee
        feeCodeRemove1 = fee[0];
        feeScheduleRemove1 = fee[1];
            //if fee exists, then remove.
        if (feeCodeRemove1 && feeScheduleRemove1)
        {
          if (feeExists(feeCodeRemove1)) 
          {
            removeFee(feeCodeRemove1, "STANDARD");
            logDebug("Fee Removed.");
          }       
        }
        feeCode = null;
        feeSchedule = null;
      }     
      
    }
    
  
  // Allied health/physical health facility (Added by KPREETI)
  // Release C, ScriptID:28 --------------------
  if (appMatch("License/Allied Health/Physical Therapy Facility/Application")) {

    var feeInfo = lookup("LKUP_Application_Fees", "AHPTF");
    if (feeInfo) {
      feeInfo = feeInfo.toString();
      var fee = new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }

  } 
  
  
  // Added by Ankush Kshirsagar
  // Release C, ScriptID:199 --------------------
  if (appMatch("License/Chiropractor/Chiropractor Facility/Application")) {

    var feeInfo = lookup("LKUP_Application_Fees", "CH-CF-APP");
    if (feeInfo) {
      feeInfo = feeInfo.toString();
      var fee = new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }

  }
  
  // Release C - Script ID: 767 (added by Ankush Kshirsagar)
  if (appMatch("License/Occupational Schools/School/Application"))
  {
    var vSchoolType = AInfo["Type of School"];
    var feeInfo = lookup("LKUP_Application_Fees", "OS-APP-"+vSchoolType); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
  
  //BUSINESSES
  //SM School and SM Business do not have military status associated with them.
  
  if (appMatch("License/Sheet Metal/School/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "School");  
    if (feeInfo)
    {
      var schooltype = getAppSpecific("School Type", capId);
      if(schooltype && schooltype!="Public")
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }         
    }   
  }
    if (appMatch("License/Real Estate/School/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "RE-SC-APP"); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    var feeInfo1 = lookup("LKUP_Application_Fees", "RE-SC-APP1"); 
      if (feeInfo1)
      {
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
        
      }
    
  }
    if (appMatch("License/Real Estate/Business/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "RE-BUS-APP");  
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    var feeInfo1 = lookup("LKUP_Application_Fees", "RE-BUS-APP1");  
      if (feeInfo1)
      {
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
        
      }
    
  }
  if (appMatch("License/Sheet Metal/Permit/NA"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "SM-PMT");  
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    
  } 
  if (appMatch("License/Sheet Metal/Business License/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "Business License");  
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    
  }
  if (appMatch("License/Plumbers and Gas Fitters/Gas Fitter Business/Application"))
  {
    //function to get the business contact corp structure
    corpStruc = CWM_ELP_1336_DPL_ASA_getCorpStructure("Business");
    if(corpStruc && corpStruc == "Partnership"){
      var feeInfo = lookup("LKUP_Application_Fees", "GF-B-A-P");  
    }
    else {
      var feeInfo = lookup("LKUP_Application_Fees", "GF-B-A-C");  
    }
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    
  }
  if (appMatch("License/Allied Health/Physical Therapy Facility/Propose PT Compliance Officer")){
      var feeInfo = lookup("LKUP_Application_Fees", "AH_Propose");  
      if (feeInfo){
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
  }
  if (appMatch("License/Plumbers and Gas Fitters/Business/Application"))
  {
    //function to get the business contact corp structure
    corpStruc = CWM_ELP_1336_DPL_ASA_getCorpStructure("Business");
    if(corpStruc && corpStruc == "Partnership"){
      var feeInfo = lookup("LKUP_Application_Fees", "PL-B-A-P");  
    }
    else {
      var feeInfo = lookup("LKUP_Application_Fees", "PL-B-A-C");  
    }
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    
  }  
      if (appMatch("License/Plumbers and Gas Fitters/Products/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "PL-PR-A"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        feeQty = CWM_ELP_Defect_4548_DPL_ASA_PLProductFee(capId)
      }
    } 
  
      if (appMatch("License/Real Estate Appraiser/Course/CE Course Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "RA-CE-A"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        
      }
    } 
      if (appMatch("License/Real Estate Appraiser/Course/Primary Course Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "RA-PC-A"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        
      }
    } 
    if (appMatch("License/Real Estate Appraiser/Course/Seminar Course Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "RA-SC-A"); 
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        
      }
    }
      if (appMatch("License/Real Estate Appraiser/Course/USPAP Course Application"))
    {
      
        var feeInfo = lookup("LKUP_Application_Fees", "RA-USPAP-A");  
        var feeInfo1 = lookup("LKUP_Application_Fees", "RA-USPAP-A1");  
        var courseType = AInfo["Select Course Type"];
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
        
      }
      if (feeInfo1)
      {   
        feeInfo1 = feeInfo1.toString();
        var fee1 =new Array();
        fee1 = feeInfo1.split("/");
        feeCode1 = fee1[0];
        feeSchedule1 = fee1[1];
      }
      if (feeInfo && courseType == "15-hour USPAP")
      {
        //assess fee and remove fee1
        feeCodeRemove = fee[0];
        feeScheduleRemove = fee[1];
            //if fee exists, then remove.
        if (feeCodeRemove && feeScheduleRemove)
        {
          if (feeExists(feeCodeRemove)) 
          {
            removeFee(feeCodeRemove, "STANDARD");
            logDebug("Fee Removed.");
          }       
        }
        feeCode = null;
        feeSchedule = null;
        
        
      }
      else
      {

        //assess fee and remove fee1
        feeCodeRemove = fee1[0];
        feeScheduleRemove = fee1[1];
            //if fee exists, then remove.
        if (feeCodeRemove && feeScheduleRemove)
        {
          if (feeExists(feeCodeRemove)) 
          {
            removeFee(feeCodeRemove, "STANDARD");
            logDebug("Fee Removed.");
          }       
        }
        feeCode1 = null;
        feeSchedule1 = null;
        
      } 
      
    } 

if (appMatch("License/Trade Boards/Appeal/NA"))
  {
    //function to get the business contact corp structure
    var vBoard = AInfo["Board"];
    if(vBoard == "Electricians"){
      var feeInfo = lookup("LKUP_Application_Fees", "Appeal-EL"); 
    }
    else if(vBoard == "Plumbing and Gas Fitting"){
      var feeInfo = lookup("LKUP_Application_Fees", "Appeal-PL"); 
    }
    else {
      var feeInfo = lookup("LKUP_Application_Fees", "Appeal-SM"); 
      
    }
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    
  }
      if (appMatch("License/Barbers/Shop/Application"))
    {
      var feeInfo = lookup("LKUP_Application_Fees", "BS-APP");  
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
      
    } 
  if (appMatch("License/Plumbers and Gas Fitters/Amendment/Update PL Corporate Master"))
  {
    var vBoard = AInfo["Change Type"];
    if(vBoard == "Add New Relationship"){
      var feeInfo = lookup("LKUP_Application_Fees", "PL-B-A-C");  
    }
    //else {
    //  var feeInfo = lookup("LKUP_Application_Fees", "PL-UCM-1");  
      
    //}

    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    
  } 
    if (appMatch("License/Plumbers and Gas Fitters/Amendment/Update GF Corporate Master"))
  {
    var vBoard = AInfo["Change Type"];
    if(vBoard == "Add New Relationship"){
      var feeInfo = lookup("LKUP_Application_Fees", "GF-B-A-C");  
    }
    //else {
    //  var feeInfo = lookup("LKUP_Application_Fees", "PL-UCM-1");  
      
    //}

    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    
  } 

  
  // Massage Therapy Board (Added by tofek khan)
  // Record Type "Solo Massage Establishment Application"
  // Release C, ScriptID:540,575  --------------------
  if (appMatch("License/Massage Therapy/Solo Massage Establishment/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "MT-SME-APP");  
      if (feeInfo){
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
  } // End of Script#540--

  // Funeral Directors and Embalmers Board/ Funeral Establishment (Added by Nilkanth Patel)
  // Release C, ScriptID:680 --------------------
  if (appMatch("License/Funeral Directors/Funeral Establishment/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "EM-FE-APP"); 
      if (feeInfo){
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
  } 
  // End ScriptID:680 -------------------------
  
  if (appMatch("License/Podiatry/Podiatrist Limited License/New Hospital or Preceptorship"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "PD-PDLL-AMEND"); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
    
  }

      
  
    
  if (appMatch("License/Massage Therapy/Multiple Massage Establishment/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "MT-MM-APP"); 
      if (feeInfo){
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
      }
  } 

  if (appMatch("License/Chiropractor/Chiropractor Facility/Propose Chiropractor of Record"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "Propose_Chiro"); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
  

//Added by Vishakha for Defect#11211
  if (appMatch("License/Electrology/Electrology School/Application"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "Electrology_School");  
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
    

  //if fee exists, then update. Else add
  if (feeCode && feeSchedule)
  {
    if (feeExists(feeCode)) 
    {
      if(feeAmount!=null){
        logDebug("updating fee with custom function");
      updateFeeAmount(feeCode,feeSchedule,feeAmount); 
      }
      else {
        logDebug("updating fee with standard function");
      updateFee(feeCode, feeSchedule, "STANDARD", feeQty, "Y");
      }
      logDebug("Fee Updated.");
    } 
    else 
    {
      if(feeAmount!=null){
        logDebug("adding fee with custom function and amount:"+feeAmount);
        addFeeWithAmount(feeCode, feeSchedule, "STANDARD", feeQty, "Y", capId, feeAmount);
        updateFee(feeCode, feeSchedule, "STANDARD", feeQty, "Y");
      //invoiceFee(feeCode,"STANDARD");     
      }
      else {
        logDebug("adding fee with standard function");
      addFee(feeCode, feeSchedule, "STANDARD", feeQty, "Y");
      }
      logDebug("Fee Added.");   
    }
    
  }



  if (feeCode1 && feeSchedule1)
  {
    if (feeExists(feeCode1)) 
    {
      if(feeAmount1!=null){
        logDebug("updating fee with custom function");
      updateFeeAmount(feeCode1,feeSchedule1,feeAmount1);  
      }
      else {
        logDebug("updating fee with standard function");
      updateFee(feeCode1, feeSchedule1, "STANDARD", feeQty1, "Y");
      }
      logDebug("Fee Updated.");
    } 
    else 
    {
      if(feeAmount1!=null){
        logDebug("adding fee with custom function");
        addFeeWithAmount(feeCode1, feeSchedule1, "STANDARD", feeQty1, "Y", capId, feeAmount1) 
      }
else {
        logDebug("adding fee with standard function");
      addFee(feeCode1, feeSchedule1, "STANDARD", feeQty1, "Y");
      //invoiceFee(feeCode1,"STANDARD");
}
      logDebug("Fee Added.");   
    }

  }
  

  
  //**************************** Add Fee END ***********************************************//
  /*-------------------------------------------------------------------------------------------------------/
                End of Logic for DPL Application fee calculation
  --------------------------------------------------------------------------------------------------------*/
  
  
  
  
}




function getAppSpecificValue(pItemName, pItemCapId) {
  //modified version of getAppSpecific function created for this batch script
  //
  var appSpecInfoResult = aa.appSpecificInfo.getByCapID(pItemCapId);
  if (appSpecInfoResult.getSuccess()) {
    var appspecObj = appSpecInfoResult.getOutput();

    if (pItemName != "")
      for (i in appspecObj)
        if (appspecObj[i].getCheckboxDesc() == pItemName) {
          return appspecObj[i].getChecklistComment();
          break;
        }
  } else {
    logDebug("ERROR: getting app specific info for Cap : " + appSpecInfoResult.getErrorMessage())
  }
  return false;
}

function CWM_ELP_DPL_ASB_EL_Journeyman_checkHrsCompletedInSchoolCollegeAttendedASIT()
{
  //cancel = true;
  var asiSource = AInfo["Source"];
  var totalHours = 0;
  var minRows = 1;
  var rowNum = 0;
  
  loadASITablesBefore();
  
  if(asiSource!=null && asiSource=="Reciprocity")
  {
    try
    {
      rowNum = SCHOOLSCOLLEGESATTENDED.length;
      var schCollAttendedASIT = SCHOOLSCOLLEGESATTENDED;
      
      if(schCollAttendedASIT)
      {
        var tableLength = schCollAttendedASIT.length;
        //logDebug("Table length: " + tableLength);
        if(tableLength>0)
        {
          for(i in schCollAttendedASIT)
          {
            var hours = schCollAttendedASIT[i]["Hours Completed"];
            totalHours = totalHours + parseFloat(hours);
            //logDebug(i + " " + totalHours);
          }
        }
      }
      
      if(totalHours<600)
      {
        cancel = true;
        showMessage = true;
        comment("You are required to have 600 hours of education to apply for this license.  Please contact the board.");
      }
    }
    catch(ex)
    {
      cancel = true;
      showMessage = true;
      comment("You are required to have 600 hours of education to apply for this license.  Please contact the board.");
    }
  }
}

function CWM_ELP_DPL_ASB_EL_Journeyman_checkTotalHoursOfExperience()
{
  //cancel = true;
  var asiSource = AInfo["Source"];
  var asiTotalHours = AInfo["Total # of Hours"];
  logDebug("Total Hours: " + asiTotalHours);
  var totalHours = 0;
  var minRows = 1;
  var rowNum = 0;
  
  loadASITablesBefore();
  
  if(asiSource!=null && asiSource=="Reciprocity")
  {
    if(asiTotalHours!=null && asiTotalHours!="")
    {
      totalHours = parseFloat(asiTotalHours);
    }
    else
    {
      totalHours = 0;
    }
    
    if(totalHours<8000)
    {
      try
      {
        //if(asiTotalHours!=null)
        
        rowNum = PREVIOUSEMPLOYER.length;
        var prevEmployerASIT = PREVIOUSEMPLOYER;  

        if(prevEmployerASIT)
        {
          var tableLength = prevEmployerASIT.length;
          if(tableLength>0)
          {
            for(i in prevEmployerASIT)
            {
              var hours = prevEmployerASIT[i]["Total # of Hours"];
              totalHours = totalHours + parseFloat(hours);
              //logDebug(i + " " + totalHours);
            }
          }
        }
        
        if(totalHours<8000)
        {
          cancel = true;
          showMessage = true;
          comment("You are required to have 8000 hours of experience to apply for this license.");
        }
      }
      catch(ex)
      {
        cancel = true;
        showMessage = true;
        comment("You are required to have 8000 hours of experience to apply for this license.");
      }
    } 
  }
}

function CWM_ELP_DPL_ASB_EL_Master_checkHrsCompletedInSchoolCollegeAttendedASIT()
{
  //cancel = true;
  var asiSource = AInfo["Source"];
  var totalHours = 0;
  var minRows = 1;
  var rowNum = 0;
  
  
	if(!publicUser){
		loadASITablesBefore();
	}else if(publicUser){
		loadASITables4ACA_4MasterElectricianApp();
	}
	
  if(asiSource!=null && asiSource=="Reciprocity")
  {
    try
    {
	  rowNum = SCHOOLSCOLLEGESATTENDED.length;
      var schCollAttendedASIT = SCHOOLSCOLLEGESATTENDED;
      
      if(schCollAttendedASIT)
      {
        var tableLength = schCollAttendedASIT.length;
		//logDebug("Table length: " + tableLength);
        if(tableLength>0)
        {
          for(i in schCollAttendedASIT)
          {
            var hours = schCollAttendedASIT[i]["Hours Completed"];
			totalHours = totalHours + parseFloat(hours);
			//logDebug(i + " " + totalHours);
          }
        }
      }
      
      if(totalHours<150)
      {
        cancel = true;
        showMessage = true;
        comment("You are required to have 150 hours of education to apply for this license.  Please contact the board.");
      }
    }
    catch(ex)
    {
      cancel = true;
      showMessage = true;
      comment("You are required to have 150 hours of education to apply for this license.  Please contact the board.");
    }
  }
}

function CWM_ELP_DPL_ASA_AddConditionCheckJourneyManLic()
{
  logDebug("Inside CWM_ELP_DPL_ASA_AddConditionCheckJourneyManLic");
  var response = getAppSpecific("Have you ever applied for and/or taken the MA Electrician/Systems exam(s)?",capId);
  var source = getAppSpecific("Source",capId);
  
  logDebug(response + " " + source);
  
  var cType = "Application Checklist";
  var cStatusType = "";
  var cDesc = "Check Journeyman License";

  CWM_ELP_Generic_DPL_addConditionOnCap(cType,cDesc);
  logDebug("Condition added");

  if ((typeof(CURRENTMAELFSLICENSES) == "object" && CURRENTMAELFSLICENSES.length == 0) || (response == "Yes" && source == "Reciprocity"))
  {
    logDebug("Applied");
    cStatusType = "Applied";  
    editCapConditionStatus(cType, cDesc, "Pending", cStatusType);
  }
  else
  {
    logDebug("Not applied");
    cStatusType = "Not Applied";
    editCapConditionStatus(cType, cDesc, "Met", cStatusType);
  }
}

//added by preeti FOR SCRIPT#1603
//added by preeti FOR SCRIPT#1603
function CWM_ELP_1603_DPL_ASB_Check1RowFuneralEstablishment()

{
  if(!publicUser){
  loadASITablesBefore();
  }else if(publicUser){
  loadASITForACA();
  }
  var ownershipRow = 0; 
  var minRows = 1;
  try 
  {
    ownershipRow = OWNERSHIPINFORMATION.length;
    logDebug("Number of ownershipRow: "+ownershipRow);
  } 
  catch (ex) 
  {
      if (ownershipRow < minRows) 
      {
        cancel = true;
        showMessage = true;
        logDebug("There is no row in the ownership information table");
        comment("You must add at least 1 row in License In OWNERSHIP INFORMATION ASIT.");
        comment("Error msg from env: "+ex.message);
      }
    
  }
  
}
//Added by Chris LJ on 8.19.2015
function getAuditType(capId)
{
  var boardType = "";
  
  if (appMatch("License/Veterinarian/*/*",capId)){
    boardType = "VT";
  }
  else if (appMatch("License/Real Estate/*/*",capId)){
    boardType = "RE";
  }
  else if (appMatch("License/Real Estate Appraiser/*/*",capId)){
    boardType = "RA";
  }
  else if (appMatch("License/Psychologist/*/*",capId)){
    boardType = "PY";
  } 
  else if (appMatch("License/Health Officers/*/*",capId)){
    boardType = "HO";
  } 
  else if (appMatch("License/Dietitians and Nutritionists/*/*",capId)){
    boardType = "NU";
  } 
  else{ 
    boardType == "INVALID";
  }
  
  return boardType;
}
/*
* @desc This function sends correspondence via email or postal mail according the user's preference
 * Release B Master Script List ID: 1479
 */
function sendCorrespondence(reportName, emailTemplate, emailParameters, contactType,external)
{
    try
    {
      var complainantFullName = "";
            var emailAddr = "";
            var prefContactChnl  = "";
            
            
            var capContactResult = aa.people.getCapContactByCapID(capId);
            if (capContactResult.getSuccess())
            {
                capContactResult = capContactResult.getOutput();
                
                for (yy in capContactResult) 
                {
                    thisCapContact = capContactResult[yy];
                    thisPeople = thisCapContact.getPeople();
                    
                    var thisContactType = thisPeople.getContactType();
                    
                    if(thisContactType == contactType)
                    {
                        complainantFullName = thisPeople.getContactName();
            if(!complainantFullName){
              complainantFullName = thisPeople.getFirstName() + " " + thisPeople.getLastName();
            }
            if(external){
              emailAddr = thisPeople.getEmail();
              prefContactChnl  = getContactPreferredChannelDesc(thisPeople.getPreferredChannel());
            }
            else{
              emailAddr = getBoardEmail();
            }
                    }
          else{
            if(appMatch("License/Sheet Metal/Permit/NA") || appMatch("License/Plumbers and Gas Fitters/Permits/Gas Fitting Permit") || appMatch("License/Plumbers and Gas Fitters/Permits/Plumbing Permit"))
            {
              if(thisContactType == "Permit Business")
              {
                complainantFullName = thisPeople.getBusinessName();
                if(external){
                  emailAddr = thisPeople.getEmail();
                  prefContactChnl  = getContactPreferredChannelDesc(thisPeople.getPreferredChannel());
                }
                else{
                  emailAddr = getBoardEmail();
                }
              }             
            }
          }
                }
            }
            
            if(prefContactChnl == "Email")
            {
        if(reportName != null)
        {
          var reportParameterHashMap = aa.util.newHashMap();
          reportParameterHashMap.put("ALT_ID", String(capId.getCustomID()));
          if(appMatch("License/Sheet Metal/Permit/NA") || appMatch("License/Plumbers and Gas Fitters/Permits/Gas Fitting Permit") || appMatch("License/Plumbers and Gas Fitters/Permits/Plumbing Permit")){
          reportParameterHashMap.put("UserFullName",complainantFullName);
          var userID = aa.person.getCurrentUser().getOutput().userID;
          reportParameterHashMap.put("UserID",userID);
          }
          aa.print("Sending email to " + emailAddr + " about record " + capId.getCustomID());
          if (!generateReportSaveAndEmail(reportName, reportParameterHashMap, emailTemplate, emailParameters, emailAddr, capId)) {
            logDebug("**WARNING Report not generated or sent for " + emailAddr);
          }
        }
        else{
          var sender =  "Noreply@elicensing.state.ma.us";
          var arr = new Array();
          aa.document.sendEmailByTemplateName(sender,emailAddr,"",emailTemplate,emailParameters,arr);
        }
            }
            else
            if(prefContactChnl == "Postal Mail") {
                aa.print("Adding set to record " + capId.getCustomID());
                callReport(reportName, false, true, "Batch Print", capId);
            }
    }
    catch(err)
    {
        showMessage=true;
        logDebug("Error on WTUA function sendCorrespondence. Please contact administrator");
    logDebug(err.message);
    }
}

function CWM_ELP_DPL_ASB_validateELMasterLicNum()
{
  if(!publicUser)
  {
    var licNum = AInfo["Submitted Licensee of Record license number"];
    var parentID = AInfo["Parent License ID"];
    //var boardCode = lookup("BOARDS", "Electricians");
    if(parentID)
    {
      var parentLicID = aa.cap.getCapID(parentID).getOutput();
      var pCap = aa.cap.getCap(parentLicID).getOutput();
      var pType = pCap.getCapType();
      pType = pType.toString();
      
      logDebug("Parent ID: " + parentID + " " + pCap.getCapType());
      
      if(pType.equalsIgnoreCase("License/Electricians/Master Electrician/License"))
      {
        var activeLic1 = false;
        var activeLic2 = false;
        var activeLic3 = false;
        var activeLic4 = false;
      
        if(licNum!= null && licNum!= "")
        {
          
          activeLic1 = isLicenseActive(licNum, "EL", "A");
          activeLic2 = isLicenseActive(licNum, "EL", "AA");
          activeLic3 = isLicenseActive(licNum, "EL", "MR");
          activeLic4 = isLicenseActive(licNum, "EL", "RA");
          
          if(!activeLic1 && !activeLic2 && !activeLic3 && !activeLic4)
          {
            cancel = true;
            showDebug = true;
            logDebug("Please enter an active Master Electrician License Number.")
          }
        }
      }
      else if(pType.equalsIgnoreCase("License/Electricians/Fire Alarm Systems Contractor/License"))
      {
        if(licNum!= null && licNum!= "")
        {
        var activeLic = false;
        activeLic = isLicenseActive(licNum, "FA", "C");
          
        if(!activeLic)
        {
          cancel = true;
          showDebug = true;
          logDebug("Please enter an active System Contractor License Number.")
        }
        }
      }
    }
  }
}

function CWM_ELP_DPL_ASB_checkContactOnAddBusName()
{
  //cancel = true;
  var busContactCount = 0;
  var partnerContactCount = 0;
  var businessType = AInfo["Select Business Type"];
  //logDebug("Business Type: " + businessType);
  
  var arrayList = aa.util.newArrayList();
  arrayList = aa.env.getValue("ContactList");
  var capContactArray = arrayList.toArray();
  
  if(businessType)
  {
    //logDebug("Inside 1st if");
    if(businessType == "Corporation" || businessType == "LLC")
    {
      //logDebug("Corp or LLC");
      if (capContactArray)
      {
        //logDebug("Contact Array Length: " + capContactArray.length);
        for (var yy in capContactArray) 
        {
          peopleModel = capContactArray[yy].getPeople();
          //logDebug("Contact Type: " + peopleModel.getContactType());
          if(peopleModel.getContactType() == "Business")
          {
            busContactCount = busContactCount +1;
          }
        }
      }
      else
      {
        busContactCount = 0;
      }
      if(busContactCount == 0)
      {
        cancel = true;
        showMessage = true;
        comment("Please add Business Contact.");
      }
    }
    else if(businessType == "Partnership" || businessType == "LLP")
    {
      //logDebug("Partnership or LLP");
      if (capContactArray)
      {
        //logDebug("Contact Array Length: " + capContactArray.length);
        for (var yy in capContactArray) 
        {
          peopleModel = capContactArray[yy].getPeople();
          //logDebug("Contact Type: " + peopleModel.getContactType());
          if(peopleModel.getContactType() == "Partner/Associate")
          {
            partnerContactCount = partnerContactCount +1;
          }
        }
      }
      else
      {
        partnerContactCount = 0;
      }
      if(partnerContactCount == 0)
      {
        cancel = true;
        showMessage = true;
        comment("Please add Partner/Associate Contact.");
      }
    }
  }
}

function CWM_ELP_Defect5688_setExpDateForRecipElec()
{
  try
  {
    // FA 10/31/2018 Ticket# 7547. Source is returning null for those submitted on ACA. If source is null still generate exp date.
		if (AInfo["Source"] == "Reciprocity" || AInfo["Source"] == null) {
      var licId = getParent();
      var licCustId = licId.getCustomID();
      logDebug("Parent ID: " + licId + " " + licCustId);
//set variables for today's date and for expiry date
            var today = new Date();
            var currentYear = today.getFullYear();
      var currDate = new Date();
      var expDate = new Date();   
      expDate.setDate(31);
      expDate.setMonth(6);
      if(expDate.getDate() == 1){
        expDate.setDate(31);
      }
  
var currDateString = currDate.getMonth() + 1 + "/" + currDate.getDate() + "/" + currDate.getFullYear();
logDebug("current date: " + currDateString);

//determine where we are in the 3yr cycle
var yearDiff = currDate.getFullYear() /3;
var decYear = yearDiff % 1;
logDebug("yearDiff:"+yearDiff);
logDebug("decYear:"+decYear);
if(decYear==0){
    //we are in a renewal year
    //determine if we are within 90 days of expiry date
            var ninetyDaysBefore = new Date();
      ninetyDaysBefore.setDate(31);
      ninetyDaysBefore.setMonth(6);
      if(ninetyDaysBefore.getDate() == 1){
        ninetyDaysBefore.setDate(31);
      }
            ninetyDaysBefore.setDate(ninetyDaysBefore.getDate() - 90);
      ninetyDaysBefore.setFullYear(2016);

     if(ninetyDaysBefore <= today && expDate >= today){
      expDate.setFullYear(currDate.getFullYear());
      var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
      logDebug("current Date is more than 90 days before July 31. new expiry Date is: " + expDateString);
     }
     else {
      expDate.setFullYear(currDate.getFullYear()+3);
      var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
      logDebug("current Date is less than 90 days before July 31 or it is after July 31. new expiry is: " + expDateString);   
       
     }
}
else if(decYear<0.4 && decYear > 0){
//we are 1 year after expiration year
    expDate.setFullYear(currDate.getFullYear()+2);
    var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
    logDebug("Expiry Date set to: " + expDateString);
}
//if(decYear<0.9 && decYear > 0.6){
else{
//we are 1 year before the next expiration date
    expDate.setFullYear(currDate.getFullYear()+1);
    var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
    logDebug("Expiry Date set to: " + expDateString);
}

      thisLic= new licenseObject(licCustId,licId);
      thisLic.setExpiration(expDateString); 
            thisLic.setStatus("Active");    
      
      }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUA function CWM_ELP_Defect5688_setExpDateForRecipElec, Please contact administrator");
  }
  
}


// Defect 5510
function isPaymentDonebyLockbox(renewalRecordID)
{
  var paymentFlag = false;
  var payResult = aa.finance.getPaymentByCapID(renewalRecordID, null);

  var payments = payResult.getOutput();
  for (var paynum in payments) 
  {
    var payment = payments[paynum];
    if (payment.getPaymentMethod() == "Lockbox" && !payment.getAmountNotAllocated())
    {
      paymentFlag = true;
      break;
    }
  }
  
  return paymentFlag;
}
function dateFormatToMMDDYYYY(pJavaScriptDate) {

   //converts javascript date to string in YYYYMMDD format
   if (pJavaScriptDate != null) {
      if (Date.prototype.isPrototypeOf(pJavaScriptDate)) {
         var month = pJavaScriptDate.getMonth() + 1;
         if (month < 10)
            var formattedMonth = "0" + month;
         else
            var formattedMonth = month.toString();
         var dayOfMonth = pJavaScriptDate.getDate();
         if (dayOfMonth < 10)
            var formattedDay = "0" + dayOfMonth.toString();
         else
            var formattedDay = dayOfMonth.toString();
         return (pJavaScriptDate.getFullYear() + formattedMonth + formattedDay);
         logDebug("Date: " + pJavaScriptDate.getFullYear() + formattedMonth + formattedDay);
      } else {
         // logDebug("Parameter is not a javascript date");
         return ("INVALID JAVASCRIPT DATE");
      }
   } else {
      //  logDebug("Parameter is null");
      return ("NULL PARAMETER VALUE");
   }
}
function addRefContactFromPeopleModel(peopleObj, vcapId) {
    //Add the reference contact record to the current CAP
    var contactAddResult = aa.people.createCapContactWithRefPeopleModel(vcapId, peopleObj);
    if (contactAddResult.getSuccess()) {
        logDebug("Contact successfully added to CAP.");
        var capContactResult = aa.people.getCapContactByCapID(vcapId);
        if (capContactResult.getSuccess()) {
            var Contacts = capContactResult.getOutput();
            var csnArray = new Array();
            for (c in Contacts)
                csnArray.push(Contacts[c].getCapContactModel().getPeople().getContactSeqNumber());

            var contactNbr = Math.max.apply(Math, csnArray);
            logDebug("Contact Nbr = " + contactNbr);
            return contactNbr;
        } else {
            logDebug("**ERROR: Failed to get Contact Nbr: " + capContactResult.getErrorMessage());
            return false;
        }
    } else {
        logDebug("**ERROR: Cannot add contact: " + contactAddResult.getErrorMessage());
        return false;
    }
}
function copyActiveContactsByTypeWithAddress(pFromCapId, pToCapId, pContactType){
   // Copies all contacts that do not have an end date from pFromCapId to pToCapId
   // where type == pContactType
   if (pToCapId == null)
   var vToCapId = capId;
   else
   var vToCapId = pToCapId;
   var capContactResult = aa.people.getCapContactByCapID(pFromCapId);
   var copied = 0;
   if (capContactResult.getSuccess())
   {
      var Contacts = capContactResult.getOutput();
      for (yy in Contacts)
      {
         if(Contacts[yy].getCapContactModel().getContactType() == pContactType && Contacts[yy].getPeople().getEndDate() == null)
         {
            var newContact = Contacts[yy].getCapContactModel();
            var newPeople = newContact.getPeople();
            var addressList = aa.address.getContactAddressListByCapContact(newContact).getOutput();
            newContact.setCapID(vToCapId);
            aa.people.createCapContact(newContact);
            newerPeople = newContact.getPeople();
           // contact address copying
            if (addressList)
            {
               for (add in addressList)
               {
                  var transactionAddress = false;
                  contactAddressModel = addressList[add].getContactAddressModel();
                  if (contactAddressModel.getEntityType() == "CAP_CONTACT")
                  {
                     transactionAddress = true;
                     contactAddressModel.setEntityID(parseInt(newerPeople.getContactSeqNumber()));
                  }
                  // Commit if transaction contact address
                  if(transactionAddress)
                  {
                     var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                     contactAddressModel.setContactAddressPK(newPK);
                     aa.address.createCapContactAddress(vToCapId, contactAddressModel);
                  }
                  // Commit if reference contact address
                  else
                  {
                    // build model
                     var Xref = aa.address.createXRefContactAddressModel().getOutput();
                     Xref.setContactAddressModel(contactAddressModel);
                     Xref.setAddressID(addressList[add].getAddressID());
                     Xref.setEntityID(parseInt(newerPeople.getContactSeqNumber()));
                     Xref.setEntityType(contactAddressModel.getEntityType());
                     Xref.setCapID(vToCapId);
                     // commit address
                     aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                  }
               }
               // end for
            }
            // end if
         logDebug("Master Licensee copied to the temp renewal")
     }
      }
   }
   else
   {
      logMessage("**ERROR: Failed to get contacts: " + capContactResult.getErrorMessage());
      return false;
   }
   return copied;
}
function getLatestTempRenewal(capId) {
   var result = aa.cap.getProjectByMasterID(capId, "Renewal", "Incomplete");
   if (result.getSuccess()) {
      var partialProjects = result.getOutput();
      if (partialProjects != null && partialProjects.length > 0) {
         var latestRenewalCapID;
         var latestDate = 0;
         for (var index in partialProjects) {
            // loop through each  record
            var thisChild = partialProjects[index];
            var capIDModel = thisChild.getCapID();
            var renewalCap = aa.cap.getCap(capIDModel).getOutput();
            if (renewalCap)
               var perID1 = capIDModel.getID1();

            var createdDate = aa.util.parseInt(dateFormatToMMDDYYYY(convertDate(renewalCap.getFileDate())));

            if ((createdDate > latestDate) && (perID1.indexOf("EST") > 0)) {
               latestDate = createdDate;
               latestRenewalCapID = renewalCap.getCapID();
            }

         }
         return latestRenewalCapID;
      }
   }
}

function CWM_ELP_ASA_DPL_waiveVerifyBackgroundQuestionsCondForAddBusName()
{
  var answer = "No";
  var CondType = "Application Checklist";
    var CondDesc = "Verification of Background Questions";
  
  var ques1 = getAppSpecific("1. Has disciplinary action been taken against you by a licensing board in any jurisdiction?", capId);
  var ques2 = getAppSpecific("2. Are you the subject of pending disciplinary action by a licensing board in any jurisdiction?", capId);
  var ques3 = getAppSpecific("3. Have you voluntarily surrendered a professional license to a licensing board in any jurisdiction?", capId);
  var ques4 = getAppSpecific("4. Have you ever applied for and been denied a professional license in any jurisdiction?", capId);
  var ques5 = getAppSpecific("5. Have you been convicted of a felony or misdemeanor in any jurisdiction?", capId);
  //var ques6 = getAppSpecific("6. Has your registration/license to dispense controlled substances ever been disciplined?", capId);
  //var ques7 = getAppSpecific("7. Have you been charged with a crime for which you admitted to sufficiency of facts?", capId);
  //logDebug("Question: " + ques1 + " " + ques2 + " " + ques3 + " " + ques4 + " " + ques5);
  
  if (answer == "No") 
  {
    if(ques1)
    {
      answer = ques1;
    }
  }
  
  if (answer == "No") 
  {
    if(ques2)
    {
      answer = ques2;
    }
  }
  
  if (answer == "No") 
  {
    if(ques3)
    {
      answer = ques3;
    }
  }
  
  if (answer == "No") 
  {
    if(ques4)
    {
      answer = ques4;
    }
  }
  
  if (answer == "No") 
  {
    if(ques5)
    {
      answer = ques5;
    }
  }
  
  /*if (answer == "No") 
  {
    if(ques6)
    {
      answer = ques6;
    }
  }
  
  if (answer == "No") 
  {
    if(ques7)
    {
      answer = ques7;
    }
  }*/
  
  if (answer == "No")
  {
        if (appHasCondition(CondType, null, CondDesc, null)) 
    {
            conditionUpdated = editCapConditionStatus(CondType, CondDesc, "Met", "Not Applied");
            if (conditionUpdated)
                logDebug(CondDesc + " was updated to Met & Not Applied.");
            else
                logDebug(CondDesc + " was not updated with Met & Not Applied.");
        } 
    else 
    {
            logDebug(CondDesc + " was not found so it could not be waived.");
        }
    } 
  else 
  {
        logDebug(CondDesc + " was not waived. Discipline History has items to be reviewed.");
    }
}
function returnCompleteAltId(vLicNum, vBoard, vType){
//this function will take a license #, a board code and a license TYPE as parameters
//performs a lookup based on the board code and license type to determine what type classes it needs to search for
//looks thru all of those type classes to return a valud LP if found or false it doesn't find one.

try 
{

  var licenseNumber = vLicNum;
  var licNum = "";
  var vTypeClass = new Array();
  if (vType != undefined && vType != null && vType != "")
  {
    vTypeClass = String(lookup("lookup:LP to Type Class",vType)).split(";");
  }
  else {
    vTypeClass = "M"
  }
  
  if (isDPLLicenseFormat(vLicNum)) {
    licenseNumber = getDPLLicenseNumber(vLicNum).toString();
  } 
  
  
  
for (tc in vTypeClass) {
    //logDebug("type class:"+vTypeClass[tc]);
    //the license doesn't need to be active, it just needs to be a valid license #
    var vLicCheck = getRefLicenseProf(licenseNumber, vBoard, vTypeClass[tc]);
    if (vLicCheck) {
      var licNum = licenseNumber + "-" +vBoard+"-" + vLicCheck.businessLicense;
    }
  }
  logDebug("Returning License #:" +licNum);
return licNum;
} catch (err) { logDebug(err) } 
}
function autoApproveAmmendment(){
// used by the following amendments to auto-approve the submitted amendment.
//SM : Update Employing Master, Update Apprentice Employee, Terminate School Association
//PL: Update Employing Master
//GF: Update Employing Master
//RE: Update Affilated Broker, Update Affiliated Salesperson, Terminate Salesperson Affiliation, Terminate Business Affiliation
 CWM_ELP_Defect_3679_DPL_RemoveContactsToLicenseRecord();
 CWM_ELP_DPL_addAmendmentToLicenseRecord();
 closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
 activateTask("Validate");
 updateTask("Validate", "Ready for Printing", "Updated via script.", "Updated via script.");
 logDebug(message + "Approved");
}

function getAsbAmendBoard(){
  var opBoard = "";
  if (appMatch("License/Sheet Metal/*/*"))
    opBoard = lookup("BOARDS","Sheet Metal Workers");
  else if (appMatch("License/Plumbers and Gas Fitters/Amendment/Terminate GF Business Assoc"))
    opBoard = lookup("BOARDS","Gas Fitters"); 
  else if (appMatch("License/Plumbers and Gas Fitters/Amendment/Terminate PL Business Assoc"))
    opBoard = lookup("BOARDS","Plumbers");  
  else if (appMatch("License/Plumbers and Gas Fitters/Amendment/Update GF Corporate Master"))
    opBoard = lookup("BOARDS","Gas Fitters"); 
  else if (appMatch("License/Plumbers and Gas Fitters/Amendment/Update GF Employing Master"))
    opBoard = lookup("BOARDS","Gas Fitters");
  else if (appMatch("License/Plumbers and Gas Fitters/Amendment/Update PL Corporate Master"))
    opBoard = lookup("BOARDS","Plumbers");      
  else if (appMatch("License/Plumbers and Gas Fitters/Amendment/Update PL Employing Master"))
    opBoard = lookup("BOARDS","Plumbers");  
  else if (appMatch("License/Real Estate/*/*"))
    opBoard = lookup("BOARDS","Real Estate Brokers & Salespersons");

  return opBoard;
}

function removeLPsExceptPrimary(pCapId)
{
  pCapId = aa.cap.getCapID(pCapId.getID1(), pCapId.getID2(), pCapId.getID3()).getOutput();
  var capLicenseResult = aa.licenseScript.getLicenseProf(pCapId);
  var licenseNum = String(pCapId.getCustomID()).split("-")[0];
  if (capLicenseResult.getSuccess())
  {
    var refLicArr = capLicenseResult.getOutput();
    for( ii in refLicArr)
    {
      var currLicType = refLicArr[ii].getLicenseType();
      var currLicNbr = refLicArr[ii].getLicenseNbr();
      //Remove all LPs except the license LP
      if(licenseNum != currLicNbr)
      {
        if( refLicArr[ii].getPrintFlag() == "Y")
        {
          refLicArr[ii].setPrintFlag("N");
          var result = aa.licenseProfessional.editLicensedProfessional(refLicArr[ii]);
          logDebug("Setting primary flag to N " +  result.getSuccess());
        }           
        logDebug("Removing license LP: " + refLicArr[ii].getLicenseNbr() +  " from CAP " + pCapId.getCustomID());
        var remCapResult = aa.licenseProfessional.removeLicensedProfessional(refLicArr[ii]);        
      }
    }
  }
}

//updated by debashish.barik for custom date.
function setEndDateOnContactByType(pContactType, pCapId)
{
  var vRelDate = new Date();
  if (arguments.length > 2)
        vRelDate = arguments[2];
  logDebug("vRelDate:"+vRelDate);
  var cons = aa.people.getCapContactByCapID(pCapId).getOutput();
  for (x in cons)
  {
    currContactType = cons[x].getPeople().getContactType();
    currEndDate = cons[x].getPeople().getEndDate();
    currRefNum = cons[x].getCapContactModel().getRefContactNumber();
    currConSeqNum = cons[x].getPeople().getContactSeqNumber();  
    if( currContactType == pContactType &&  currEndDate == null)
    {
      // Set End Date
      //var vRelDate = new Date();
      cons[x].getPeople().setEndDate(vRelDate);
      var updateResult = aa.people.editCapContact(cons[x].getCapContactModel());
      if (updateResult.getSuccess()) {
          logDebug("Contact " + currConSeqNum + " updated successfully on the license");
      } else {
          logDebug("Contact " + currConSeqNum + " update failed on the license: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
      }             
      logDebug("Contact Reference Number end dated: " + currRefNum + " from license record: " + pCapId.getCustomID());    
    }
  }
}

//@By:debashish.barik for custom date.
function setStartDateOnContactByType(pContactType, pCapId) //optional custom date pCustomDate
{
  
  var vRelDate = new Date();
  if (arguments.length > 2)
        vRelDate = arguments[2];
  logDebug("setStartDateOnContactByType(),vRelDate:"+vRelDate);
  var cons = aa.people.getCapContactByCapID(pCapId).getOutput();
  for (x in cons)
  {
    currContactType = cons[x].getPeople().getContactType();
    currSatrtDate = cons[x].getPeople().getStartDate();
                 var currEndDate = cons[x].getPeople().getEndDate();
    currRefNum = cons[x].getCapContactModel().getRefContactNumber();
    currConSeqNum = cons[x].getPeople().getContactSeqNumber();  
    if( currContactType == pContactType && currEndDate ==null)
    {
      // Set End Date
      //var vRelDate = new Date();
      cons[x].getPeople().setStartDate(vRelDate);
      var updateResult = aa.people.editCapContact(cons[x].getCapContactModel());
      if (updateResult.getSuccess()) {
          logDebug("Contact " + currConSeqNum + " updated successfully on the license");
      } else {
          logDebug("Contact " + currConSeqNum + " update failed on the license: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
      }               
    }
  }
}
//for engineers
function CWM_ELP_DEFECT_5871_WTUA_DPL_RenewalApprovedUpdateLic()
{
  try
  { 
    var splChar = String.fromCharCode(167);
    var asiName = "A. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
    var inComplianceGLC = getAppSpecific(asiName);

    var prov250CMR = getAppSpecific("B. I AM FAMILIAR WITH THE PROVISIONS OF 250 CMR WHICH GOVERN THE PRACTICE OF EN AND LS.");

    var reportedDiscipline = getAppSpecific("C. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");

    var reportedConvictions = getAppSpecific("D. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");

    var noContestPlea = getAppSpecific("E. I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.");
    var asiNameSSN = "F.  AS REQUIRED BY M.G.L. C. 30A, "+ splChar +"13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
    var reportedSSN = getAppSpecific(asiNameSSN, capId);
      var attestPain = getAppSpecific("I attest under the pains and penalties of perjury that the above responses are truthful & accurate.");

    if(inComplianceGLC.toUpperCase().equals("NO") || prov250CMR.toUpperCase().equals("NO") || reportedDiscipline.toUpperCase().equals("NO") || reportedConvictions.toUpperCase().equals("NO") || noContestPlea.toUpperCase().equals("NO") || reportedSSN.toUpperCase().equals("NO") || attestPain.toUpperCase().equals("NO"))
    { 
      logDebug("At least 1 of the renewal attestation is No.");
      //CWM_ELP_1330_WTUA_DPL_renewalApprovedUpdateLic();
              if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", getBoard(capId));
          result = true;
        } else result = false;
    }
      else {
        if (renewalApproval(capId)) {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on ASA function CWM_ELP_DEFECT_5871_WTUA_DPL_RenewalApprovedUpdateLic, Please contact administrator");
  } 
}
function copySpecificASITables(pFromCapId,pToCapId) {

// Function dependencies on addASITable()

// par3 is optional 0 based string array of table to ignore

var itemCap = pFromCapId;

var gm = aa.appSpecificTableScript.getAppSpecificTableGroupModel(itemCap).getOutput();

var ta = gm.getTablesArray()

var tai = ta.iterator();

var tableArr = new Array();

var ignoreArr = new Array();

var limitCopy = false;

if (arguments.length > 2) 

{

ignoreArr = arguments[2];

limitCopy = true;

}

while (tai.hasNext())

 {

 var tsm = tai.next();

 var tempObject = new Array();

 var tempArray = new Array();

 var tn = tsm.getTableName() + "";

 var numrows = 0;

 //Check list

 if(limitCopy){

  var ignore=false;

  for(var i = 0; i < ignoreArr.length; i++)

  if(ignoreArr[i] == tn){

  ignore=true;

  break;

  }

  if(ignore)

  continue;

 }

 if (!tsm.rowIndex.isEmpty())

  {

   var tsmfldi = tsm.getTableField().iterator();

 var tsmcoli = tsm.getColumns().iterator();

 var readOnlyi = tsm.getAppSpecificTableModel().getReadonlyField().iterator(); // get Readonly filed

 var numrows = 1;

 while (tsmfldi.hasNext())  // cycle through fields

{

if (!tsmcoli.hasNext())  // cycle through columns

{

var tsmcoli = tsm.getColumns().iterator();

tempArray.push(tempObject);    // end of record

var tempObject = new Array();  // clear the temp obj

numrows++;

}

var tcol = tsmcoli.next();

var tval = tsmfldi.next();

var readOnly = 'N';

if (readOnlyi.hasNext()) {

readOnly = readOnlyi.next();

}

var fieldInfo = new asiTableValObj(tcol.getColumnName(), tval, readOnly);

tempObject[tcol.getColumnName()] = fieldInfo;

//tempObject[tcol.getColumnName()] = tval;

}

tempArray.push(tempObject);  // end of record

}

      addASITable(tn,tempArray,pToCapId);

 logDebug("ASI Table Array : " + tn + " (" + numrows + " Rows)");

 }
}

function CWM_ELP_5780_DPL_ASB_checkContactsForAppealofInspDecApp()
{
  var checkRespondent = false;
  var checkAppellant = false;
  
  var arrayList = aa.util.newArrayList();
  arrayList = aa.env.getValue("ContactList");
  var capContactArray = arrayList.toArray();
  
  for (var yy in capContactArray)
  {
    peopleModel = capContactArray[yy].getPeople();
    //logDebug("Contact Type: " + peopleModel.getContactType());
    if(peopleModel.getContactType() == "Respondent")
    {
      //logDebug("Found respondent");
      checkRespondent = true;
    }
    else if((peopleModel.getContactType() == "Appellant Business") || (peopleModel.getContactType() == "Appellant Individual"))
    {
      //logDebug("Found " + peopleModel.getContactType());
      checkAppellant = true;
    }
  }
  
  if(!checkRespondent || !checkAppellant)
  {
    cancel = true;
    showMessage = true;
    comment("This application requires either Appellant Business or Appellant Individual and Respondent Contact for submission.");
  }
}
function CWM_ELP_6012_DPL_WTUA_InvoiceLicenseFee() {
    var feeCode;
  var feeSchedule;
       if(wfTask == "Validate" && matches(wfStatus, "Approved to Sit for Exam"))
        {
      //function to get the business contact corp structure
      var reaAppType = AInfo["Please select application type"];
      if(reaAppType == "State-Certified Residential Real Estate Appraiser"){
        var feeInfo = lookup("LKUP_Application_Fees", "REA-LIC-RES"); 
      }
      else if(reaAppType == "State-Certified General Real Estate Appraiser"){
        var feeInfo = lookup("LKUP_Application_Fees", "REA-LIC-GEN"); 
      }
      else {
        var feeInfo = lookup("LKUP_Application_Fees", "REA-LIC-LIC"); 
        
      }
      if (feeInfo)
      {
        feeInfo = feeInfo.toString();
        var fee =new Array();
        fee = feeInfo.split("/");
        feeCode = fee[0];
        feeSchedule = fee[1];
          //if fee exists, then update. Else add
      if (feeCode && feeSchedule)
      {
      if (feeExists(feeCode)) {
      updateFee(feeCode, feeSchedule, "STANDARD", 1, "Y");
      logDebug("Fee Updated.");
      }
      else {
      addFee(feeCode, feeSchedule, "STANDARD", 1, "Y");
      logDebug("Fee Added.");   
      }
      }
         }
    }

}
function CWM_ELP_Defect_3935_DPL_RenewRESchool_License(renewalCapId, parentCapId){
  try{
      
      //copy extra asit to license
      copySingleASITable("AUTHORIZED SCHOOL INSTRUCTOR", renewalCapId, parentCapId);
      copySingleASITable("BRANCH LOCATIONS", renewalCapId, parentCapId);
      copySingleASITable("BOND INFORMATION", renewalCapId, parentCapId);
      //remove all existing instructor LPs
        var capLicenseResult = aa.licenseScript.getLicenseProf(parentCapId);
        if(capLicenseResult.getSuccess()){
          var capLicenseArr = capLicenseResult.getOutput();
          for(i in capLicenseArr){
            
            logDebug("parent License: " + capLicenseArr[i].getBusinessLicense());
            // Get child reference LP
            if(capLicenseArr[i].getBusinessLicense == "SI"){
              //var vRefLP = getRefLicenseProf(curCapId.getCustomID());
              if( capLicenseArr[i].getPrintFlag() == "Y"){
                capLicenseArr[i].setPrintFlag("N");
                var result = aa.licenseProfessional.editLicensedProfessional(capLicenseArr[i]);
                logDebug("Setting primary flag to N " +  result.getSuccess());
              }           
              logDebug("Removing license LP: " + capLicenseArr[i].getLicenseNbr() +  " from CAP " + parentCapId.getCustomID());
              var remCapResult = aa.licenseProfessional.removeLicensedProfessional(capLicenseArr[i]); 
            }
          }
        }
      
      //add all instructor LPs in the asit on the renewal
      if(typeof(AUTHORIZEDSCHOOLINSTRUCTOR)=="object"){
        var authorizedASIT = AUTHORIZEDSCHOOLINSTRUCTOR;
        var tableLength = authorizedASIT.length;
        logDebug("Table length: " + tableLength);
      } 
      if(tableLength>0)
      {
        for(i in authorizedASIT)
        {
          var apprNum = authorizedASIT[i]["Approval Number"];
          logDebug("Approval Number: " + apprNum);
          apprNum = apprNum.toString();
          var refLP = getRefLicenseProf(apprNum, "RE", "SI");
          if (refLP) {
            var fvAddResult = aa.licenseScript.associateLpWithCap(parentCapId, refLP);
          }
        }
      }
      //end date any removed authorized reps and add any new ones
      //compare auth rep on renewal to license. if the auth rep on the license does not exist on the renewal, end date them on the license (if they are not end dated already).
      //
            // get the contacts from the master license record
            var licCapId = aa.cap.getCapID(parentCapId.getCustomID()).getOutput();
            var licContacts = getPeople(licCapId); 
      var renCapId = aa.cap.getCapID(renewalCapId.getCustomID()).getOutput();
            var renContacts = getPeople(renCapId); 
            for (c in licContacts) {
                var licContact = licContacts[c];
                var licContactModel = licContact.getCapContactModel();
                var refContactNumber = licContactModel.refContactNumber;
        var pConSeqNum = licContactModel.getContactSeqNumber();
                var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput();
                logDebug(">>>> " + licContactModel.firstName + " " + licContactModel.lastName + " ref:" + refContactNumber);

        //loop thru the renewal contacts and see if we match the license contact. if we do not find a match, end date the license contact
        var lrMatch = true;
              for (r in renContacts) {
                  var renContact = renContacts[r];
                  var renContactModel = renContact.getCapContactModel();
                  var renrefContactNumber = renContactModel.refContactNumber;
                  var rencontactAddressList = aa.address.getContactAddressListByCapContact(renContactModel).getOutput();
                  logDebug(">> " + renContactModel.firstName + " " + renContactModel.lastName + " ref:" + renrefContactNumber);
          
            //if the name and ref contact # match, then no need to end date

            if(refContactNumber.equals(renrefContactNumber) && licContactModel.getEndDate() == null){
            lrMatch = false;
            logDebug("set lrMatch to: " + lrMatch);
            break;
          }
        }
        
        if(lrMatch){
          var today = new Date(dateAdd(null,0));
          licContactModel.setEndDate(today);
          logDebug("setting End Date: " + today);
                    var updateResult = aa.people.editCapContact(licContactModel);
                    if (updateResult.getSuccess()) {
                        logDebug("Contact " + pConSeqNum + " updated successfully on the license");
                    } else {
                        logDebug("Contact " + pConSeqNum + " update failed on the license: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                    }             
          logDebug("Contact Reference Number end dated: " + refContactNumber + " from license record: " + parentCapId.getCustomID());
                                // After we edit the contact type, we need to re-copy addresses
                    for (add in contactAddressList) {
                        var transactionAddress = false;
                        contactAddressModel = contactAddressList[add].getContactAddressModel();
                        if (contactAddressModel.getEntityType() == "CAP_CONTACT") {
                            transactionAddress = true;
                            contactAddressModel.setEntityID(parseInt(licContactModel.getContactSeqNumber()));
                        }
                        // Commit if transaction contact address
                        if (transactionAddress) {
                            var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                            contactAddressModel.setContactAddressPK(newPK);
                            aa.address.createCapContactAddress(parentCapId, contactAddressModel);
                        }
                        // Commit if reference contact address
                        else {
                            // build model
                            var Xref = aa.address.createXRefContactAddressModel().getOutput();
                            Xref.setContactAddressModel(contactAddressModel);
                            Xref.setAddressID(contactAddressList[add].getAddressID());
                            Xref.setEntityID(parseInt(licContactModel.getContactSeqNumber()));
                            Xref.setEntityType(contactAddressModel.getEntityType());
                            Xref.setCapID(parentCapId);
                            // commit address
                            aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                        }
                    }                      
        }//*/
      }
        
 }
  catch(err){
    logDebug("Error on function CWM_ELP_DPL_addAmendmentToLicenseRecord. Please Call System Administrator. " + err.stack);
    logDebug("Error Message: " + err.message);
  }
}

function getBoardType(capId)
{
  var boardType = "";
  
  if (appMatch("License/Sheet Metal/*/*",capId)){
    boardType = "Sheet Metal ";
  }
  else if (appMatch("License/Veterinarian/*/*",capId)){
    boardType = "Veterinary";
  }
  else if (appMatch("License/Engineers and Land Surveyors/*/*",capId)){
    boardType = "Engineering";
  }
  else if (appMatch("License/Real Estate/*/*",capId)){
    boardType = "Real Estate Brokers & Salespersons";
  }
  else if (appMatch("License/Real Estate Appraiser/*/*",capId)){
    boardType = "Real Estate Appraisers";
  }
  else if (appMatch("License/Electricians/*/*",capId)){
    boardType = "Electricians";
  }
  else if (appMatch("License/Psychologist/*/*",capId)){
    boardType = "Psychology";
  } 
  else if (appMatch("License/Health Officers/*/*",capId)){
    boardType = "Health Officers";
  } 
  else if (appMatch("License/Dietitians and Nutritionists/*/*",capId)){
    boardType = "Dietitians and Nutritionists";
  } 
  else if (appMatch("Enforce/*/*/*",capId)){
     boardType = getAppSpecific("Board",capId);
  }
  else if (appMatch("License/*/*/License Verification",capId)){
     boardType = getAppSpecific("Board",capId);
  } 
  //by preeti
  else if(appMatch("License/Funeral Directors/Funeral Establishment/Amendment")){
    var vBoardASI = getAppSpecific("Board",ipCapID);
  }
  else if(appMatch("License/Funeral Directors/Apprentice/Amendment")){
    var vBoardASI = getAppSpecific("Board",ipCapID);
  }
  else if(appMatch("License/Funeral Directors/Type 3/Amendment")){
    var vBoardASI = getAppSpecific("Board",ipCapID);
  }
  else if (appMatch("License/Plumbers and Gas Fitters/*/*",capId)){
  if (appMatch("License/Plumbers and Gas Fitters/Permits/Gas Fitting Permit",capId) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Apprentice/*",capId) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Business/*",capId) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Journeyman/*",capId) || appMatch("License/Plumbers and Gas Fitters/Gas Fitter Master/*",capId)){     boardType = "Gas Fitters";
    }
    else
    {
      boardType = "Plumbers";
    }
  }
  if (boardType == undefined || boardType == null || boardType == ""){ 
    boardType == "INVALID";
  }
  
  return boardType;
}
function generateEL_AltID(licCapId, licBoardName, licType) {
    var licNumber = lookup("lookup:EL_LIC_NUM", licType)
  if(licNumber){
    logDebug("License # in lookup is:"+licNumber)
  editLookup("lookup:EL_LIC_NUM", licType, parseInt(licNumber) + 1);
  logDebug("returning new lic id:"+licNumber + "-" + licBoardName.trim() + "-" + licType.trim())
    return "" + licNumber + "-" + licBoardName.trim() + "-" + licType.trim();
  }
  else {
    return null;
  }
}
function CWM_ELP_WTUB_DPL_confirmFullAltID() {
  if (wfTask == "Validate" && wfStatus == "Completed") {
    if (getAppSpecific("Type of Request",capId) == "License Verification") {

      if (!isDPLLicenseFormat(AInfo["License Number"])) {
        cancel = true;
        showMessage = true;
        comment("You must enter the full license number prior to completing this request (ex. 123-SM-M1)");
      }
    }
  }
}
function CWM_ELP_6326_DPL_WTUA_InvoiceLicenseFee(){
    var feeCode;
    var feeSchedule;
       if(wfTask == "Validate" && matches(wfStatus, "Approved to Sit for Exam"))
        {
          var feeInfo1 = lookup("LKUP_Application_Fees", "PL-M-A1");  
          if (feeInfo1)
          {
            feeInfo1 = feeInfo1.toString();
            var fee1 =new Array();
            fee1 = feeInfo1.split("/");
            feeCode1 = fee1[0];
            feeSchedule1 = fee1[1];
      
            if (feeCode && feeSchedule)
            {
              if (feeExists(feeCode)) {
                updateFee(feeCode, feeSchedule, "STANDARD", 1, "Y");
                logDebug("Fee Updated.");
              }
              else {
                    addFee(feeCode, feeSchedule, "STANDARD", 1, "Y");
                    logDebug("Fee Added.");   
              }
            }
          }
        }
}

function addDPLRenewalFee()
{
  /*-------------------------------------------------------------------------------------------------------/
                Logic for DPL fee calculation
  --------------------------------------------------------------------------------------------------------*/
  var feeCode;
  var feeSchedule;
  var vfeeQty = 1;
  
  var vCap = aa.cap.getCap(capId).getOutput();
  var vCapType = vCap.getCapType().toString();
  
  // Add IF statement for special cases, otherwise add record type with fee schedule and code to standard choice
  if (appMatch("License/Plumbers and Gas Fitters/Gas Fitter Business/Renewal"))
  {
    //function to get the business contact corp structure
    corpStruc = CWM_ELP_1336_DPL_ASA_getCorpStructure("Business");
    if(corpStruc && corpStruc == "Partnership"){
      var feeInfo = lookup("LKUP_Renewal_Fees", "Gas Fitter Business-P"); 
    }
    else {
      var feeInfo = lookup("LKUP_Renewal_Fees", "Gas Fitter Business-C"); 
    }
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
  else if (appMatch("License/Plumbers and Gas Fitters/Business/Renewal"))
  {
    //function to get the business contact corp structure
    corpStruc = CWM_ELP_1336_DPL_ASA_getCorpStructure("Business");
    if(corpStruc && corpStruc == "Partnership"){
      var feeInfo = lookup("LKUP_Renewal_Fees", "Plumber Business-P");  
    }
    else {
      var feeInfo = lookup("LKUP_Renewal_Fees", "Plumber Business-C");  
    }
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  } 
  else if (appMatch("License/Real Estate Appraiser/Course/Renewal"))
  {
    var courseCat = AInfo["Course Category"];
    if(courseCat =="Primary") {
      var feeInfo = lookup("LKUP_Renewal_Fees", "Real Estate Appraiser Course-Primary");  
    }
    else if(courseCat =="USPAP") {
      var feeInfo = lookup("LKUP_Renewal_Fees", "Real Estate Appraiser Course-USPAP");
    }
    else if(courseCat =="Seminar") {
      var feeInfo = lookup("LKUP_Renewal_Fees", "Real Estate Appraiser Course-Seminar");  
    }
    else  {
      var feeInfo = lookup("LKUP_Renewal_Fees", "Real Estate Appraiser Course-Continuing Education"); 
    }
    
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  } 
  else if (appMatch("License/Real Estate Appraiser/Appraiser/Renewal"))
  {
    //var typeClass = AInfo["Type Class"];// For eplace#1186 by tofek
                var typeClass = getAppSpecific("Type Class", capId);
    if(typeClass )
      var feeInfo = lookup("LKUP_Renewal_Fees", "Appraiser-" + typeClass);  
    
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
        //added by kpreeti for defect# 10170 on 4/11/2016
else if (appMatch("License/Funeral Directors/Type 3/Renewal"))
  {
    //var typeClass = AInfo["Type Class"];
    //var typeClass = getAppSpecific("Type Class", capId);
    //if(typeClass)
      var feeInfo = lookup("LKUP_Renewal_Fees", "EM_Type3");  
    logDebug("feeInfo value is "+feeInfo);
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
    }
  }
else if (appMatch("License/Funeral Directors/Type 6/Renewal"))
  {
    //var typeClass = AInfo["Type Class"];
    //var typeClass = getAppSpecific("Type Class", capId);
//logDebug("typeClass of type 6 license is : "+typeClass);
    //if(typeClass)
      var feeInfo = lookup("LKUP_Renewal_Fees", "EM_Type6");  
    logDebug("feeInfo value is "+feeInfo);
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
      logDebug("feeCode: "+feeCode+" feeSchedule : "+feeSchedule);
    }
  }   
  else if (appMatch("License/Sheet Metal/School/Renewal"))
  {
    var feeInfo = lookup("LKUP_Renewal_Fees", "License/Sheet Metal/School/Renewal");  
    if (feeInfo)
    {
      var vParentCapID = getParentLicenseCapID(capId);
      if (vParentCapID)
      {
        //var appCapId = childGetByCapType("License/Sheet Metal/School/Renewal", vParentCapID);
        //if(appCapId)
        //{
          //var schooltype = getAppSpecific("School Type", appCapId);
		  var typeClass = getAppSpecific("Type Class", vParentCapID);
          //if(schooltype && schooltype!="Public")
		  if(typeClass && typeClass == "S1")
          {
			logDebug("feeInfo value is "+feeInfo);
            feeInfo = feeInfo.toString();
            var fee =new Array();
            fee = feeInfo.split("/");
            feeCode = fee[0];
            feeSchedule = fee[1];
          } 
        //}     
      }   
    }   
  }
  else if (appMatch("License/Plumbers and Gas Fitters/Products/Renewal"))
  {
    var feeInfo = lookup("LKUP_Application_Fees", "License/Plumbers and Gas Fitters/Products/Renewal"); 
    if (feeInfo)
    {
      feeInfo = feeInfo.toString();
      var fee =new Array();
      fee = feeInfo.split("/");
      feeCode = fee[0];
      feeSchedule = fee[1];
      vfeeQty = CWM_ELP_Defect_4548_DPL_ASA_PLProductFee(capId)
    }
  } 
  else if (appMatch(vCapType,capId))
  {
            var feeInfo = lookup("LKUP_Renewal_Fees", vCapType);  
      if (feeInfo)
      {
    feeInfo = feeInfo.toString();
    var fee =new Array();
    fee = feeInfo.split("/");
    feeCode = fee[0];
    feeSchedule = fee[1];
      }
  }     
  
  //If fee exists, then update. Else add
  if (feeCode && feeSchedule)
  {
    var capArr = vCapType.split("/");
    var capVal = capArr[1]+"/"+capArr[2];
    //this line of code was commented out.  I am uncommenting to fix defect 12910
    // if the record type exists in the standard choice it means the record type qualifies to have an additional fee
    // set noAdditional to false if there is a row in the standard choice, which means the record has an additional fee.
    var noAdditional = lookup("LKUP_Additional_Renewal_Fees",capVal)==undefined;
    
        logDebug("noAdditional: " + noAdditional);
        logDebug("feeExists(feeCode): " + feeExists(feeCode));    
    //if (feeExists(feeCode))//&& noAdditional) 
    if (feeExists(feeCode))
    {
      //vfeeQty = feeQty(feeCode);
      //updateFee(feeCode, feeSchedule, "STANDARD", vfeeQty, "Y");
      invoiceAllFees(capId);
      logDebug("Fee Updated.");
    } 
    else 
    {
      addFee(feeCode, feeSchedule, "STANDARD", vfeeQty, "Y");
      logDebug("Fee Added.");   
    }
  }
}//END addDPLRenewalFee()
function CWM_ELP_6431_DPL_ASB_checkNoOfRowsInDeliveryMethodASIT()
{
  loadASITablesBefore();
  var delMethodRows = 0;  
  var minRows = 1;
  try 
  {
    delMethodRows = DELIVERYMETHOD.length;
  } 
  catch (ex) 
  {
    if (delMethodRows < minRows) 
    {
      cancel = true;
      showMessage = true;
      comment("You must add at least 1 row in Delivery Method ASIT.");
    }
  }
}
function generateRE_AltID(licCapId, licBoardName, licType) {
    var vCapModel = aa.cap.getCap(capId).getOutput();
  var vType = vCapModel.capType;
  vType = vType.toString();
  var ids=new Array();
  ids = vType.split("/");
    var licNumber = lookup("lookup:RE_LIC_NUM", ids[2])
  if(licNumber){
    logDebug("License # in lookup is:"+licNumber)
  editLookup("lookup:RE_LIC_NUM", ids[2], parseInt(licNumber) + 1);
  logDebug("returning new lic id:"+licNumber + "-" + licBoardName.trim() + "-" + licType.trim())
    return "" + licNumber + "-" + licBoardName.trim() + "-" + licType.trim();
  }
  else {
    return null;
  }
}

function CWM_ELP_ASA_DEFECT_6414_CreateCEchildren(capId){
var parentLic = getParent();
var children = getChildren("License/DPL/Continuing Education/CE Audit",parentLic); //find if the parent has an open CE Audit record
var ceSubChild = null;
  try{
      for(var child in children)
      {
        var childID = children[child];
        var childCap = aa.cap.getCap(childID).getOutput();
        if(childCap.getCapStatus != "Closed")
        {
          //copy CE-SUB to the CE-Audit as a child
          ceSubChild = createChild("License","DPL","Continuing Education","CE Submission","CE Sub child Created by Script", childID);
          aa.cap.createAppHierarchy(childID,ceSubChild);
          aa.cap.removeProjectChild(parentLic,capId);
          break;
        }
      }
    } 
  catch(error){
    logDebug(error);
  }
}

function CWM_ELP_DEFECT_6414_CESubmission_PartOne(){
  try{
      var parentCapID = getParent();  
      if(parentCapID){
        logDebug("License linked to the CE Submission:" + parentCapID);
        var vParentCapScriptModel = aa.cap.getCap(parentCapID).getOutput();
        var vParentCapTypeString = vParentCapScriptModel.getCapType().toString();
        var vParentCapTypeArray = vParentCapTypeString.split("/");
        var vParentLicPerType = vParentCapTypeArray[1];
        var vparentLicPerSubType = vParentCapTypeArray[2];
        var contactObj = "";
        var capList = "";
      
        var boardName = getBoard(parentCapID);
        contactObj = aa.people.getCapContactByCapID(parentCapID).getOutput();
        if(boardName.equals("PL") || boardName.equals("GF")){
          //loop through contacts to find License Individual contact type and get ref seq num
          for(i in contactObj){ 
                  var contactObjType = contactObj[i].getPeople().getContactType();
                  if(contactObjType == "Licensed Individual"){
                      var liRefNum = contactObj[i].getCapContactModel().getRefContactNumber();  
                  }
              }
              //if Contact Reference Sequence Number found, then search all the caps created by this contact.
              if(liRefNum){
                capList = getLicenseCapsByRefContact(liRefNum);
            var match = false;
            var sameBoard = false;
            var thisCapId = null;
            var capType = null;
            var capTypeString = null;
              var capTypeArray = null;
            var licPerType = null;
            var licPerSubType = null;
            var thisBoard = null;
            var licNbr = null;
            var altArray = null;
            var alt_id = null;
                  for(ii in capList){//search all his licenses and see if PL/GF exists
                    thisCapId = capList[ii];
                thisBoard = getBoard(thisCapId);
                sameBoard = (thisBoard == boardName);
                alt_id = thisCapId.getCustomID();
                altArray = alt_id.split("-");
                licNbr = altArray[0];
                if(sameBoard && isLicenseActive(licNbr,thisBoard,altArray[2])){
                  capType = aa.cap.getCapTypeModelByCapID(thisCapId).getOutput();
                  capTypeString = capType.toString();
                  capTypeArray = capTypeString.split("/");
                  licPerType = capTypeArray[1];
                  licPerSubType = capTypeArray[2];
                    //if parent is Journeyman, check for Master
                    if(((vparentLicPerSubType == "Gas Fitter Journeyman")||(vparentLicPerSubType == "Journeyman"))&&((licPerSubType == "Master")||(licPerSubType == "Gas Fitter Master"))){   
                      aa.cap.createAppHierarchy(thisCapId,capId);
                      //var newCECapID = createChild("License", "DPL", "Continuing Education", "CE Submission", "Cloned CE Submission", myItemCap); 
                    }
                    else if(((vparentLicPerSubType == "Gas Fitter Master")||(vparentLicPerSubType == "Master"))&&((licPerSubType == "Gas Fitter Journeyman")||(licPerSubType == "Journeyman"))){    
                      aa.cap.createAppHierarchy(thisCapId,capId);
                    }
                  //if parent is Master, check for Journeyman 
                }
                  }
              }
        }
      }

  }
  catch(err){
    logDebug("Error on function CWM_ELP_DEFECT_6414_CESubmission_PartOne. Please contact your system administrator" + err.message);
    cancel = true;
  }
}

//returns all apprentices tied to a Master
function getApprenticesByLicSeqNum(LicenseSeqNum2,capType) {
  var apprentices = new Array();
  var appTypeString = capType; // Convert application type to string ("Building/A/B/C")
  var appTypeArray = appTypeString.split("/");; // Array of application type string
  var contactNum = 0;
  //Create a capModel for use with the get records method
  var capModel = aa.cap.getCapModel().getOutput();
  var capTypeModel = capModel.getCapType();
  capTypeModel = capModel.getCapType();
  capTypeModel.setGroup(appTypeArray[0]);
  capTypeModel.setType(appTypeArray[1]);
  capTypeModel.setSubType(appTypeArray[2]);
  capTypeModel.setCategory("License");
  capModel.setCapType(capTypeModel);

  appListResult = aa.cap.getCapIDListByCapModel(capModel);
  if (appListResult.getSuccess()) {
    appList = appListResult.getOutput();
  }
  //logDebug("Searching for LP (" + licenseNum + ", " + board + ", " + typeClass + ") in Apprentice License records (" + appList.length + ").");

  if (appList.length > 0) {
    for (a in appList) {
      var thisApp = appList[a];
      // var status;
      var cap = thisApp.getCapID();

      var profLicenseCapId = aa.licenseProfessional.getLicensedProfessionalsByCapID(thisApp.getCapID());
      if (profLicenseCapId.getSuccess()) {
        var profLicense = profLicenseCapId.getOutput();
        for (var counter in profLicense) {
          var thisProfLicense = profLicense[counter];
          var LicenseSeqNum1 = thisProfLicense.getLicenseProfessionalModel().getLicSeqNbr();
          //if (thisProfLicense.getLicenseNbr() == licenseNum && thisProfLicense.getLicenseBoard() == board && thisProfLicense.getBusinessLicense() == typeClass) {
          if (LicenseSeqNum1 == LicenseSeqNum2) {
            var thisCap = aa.cap.getCap(thisApp.getCapID()).getOutput();
            if (thisCap.getCapStatus() == "Current") {
              apprentices.push(thisApp.getCapID());
            }
          }
        }
      }
    }
  }

  return apprentices;
}

function CWM_ELP_DEFECT6414_PartTwo() {
  useAppSpecificGroupName = false;
  try {
    var parentID = getParent();
    logDebug("parentID:" + parentID);
    var appTypeResult = aa.cap.getCapTypeModelByCapID(parentID).getOutput();
    var appTypeString = appTypeResult.toString();
    var appTypeArray = appTypeString.split("/");
    var refLic = getRefLicenseProf(parentID.getCustomID());
    var refLicType = refLic.getLicenseType();
    logDebug("refLic:" + refLic);
    if (appTypeArray[1] == 'Plumbers and Gas Fitters') {
      var contEducWaiver = getAppSpecificValue("Continuing Education Waiver", parentID);
      // If waiver not found, check CE credit hours to determine if Audit report should be sent.
      if (!matches(contEducWaiver, "Temporary", "Permanent")) {
        var childArray = getChildren("License/DPL/Continuing Education/CE Submission", parentID);
        if(matches(appTypeArray[2],"Master","Journeyman","Apprentice")){
          refLicType = appTypeArray[2] +" Plumber";
        }
        else if(appTypeArray[2] == "Business"){
          refLicType = "Plumbing Business";
        }
        else if(appTypeArray[2] == "Inspector"){
          refLicType = "Plumbing/Gas Inspector";
        }
        var licCEReq = lookup("CE_REQUIREMENTS", refLicType);
        if (!licCEReq) {
          logDebug("Unable to lookup License Type = " + refLic.getLicenseType() + ". Verify CE_REQUIREMENTS standard choice contains CE required hours for this license type.");
        }
        var totalCourseHours = 0;

        for (uch in childArray) {
          var ceId = childArray[uch];
          logDebug("CE id:" + ceId);
          var capIDScriptModel = aa.cap.createCapIDScriptModel(ceId.getID1(), ceId.getID2(), ceId.getID3());
          if (getAppSpecific("Processed") == null) {
            var contEducListObj = aa.continuingEducation.getContEducationList(capIDScriptModel);
            //aa.print(contEducListObj.getOutput().length);
            var contEducList = contEducListObj.getOutput();
            for (lCount in contEducList) {
              //aa.print("Hours: " + contEducList[xxx].getHoursCompleted());
              totalCourseHours = totalCourseHours + contEducList[lCount].getHoursCompleted();
            }
          }
        }

        if (parseInt(totalCourseHours) > parseInt(licCEReq)) {
          var setName = null;
          var boardCode = getBoard(parentID);
          // Mark the CE submission hours as processed
          setCERecordsToProcessed(parentID);
          //Check for communication method for Business or Licensed Individual contact type only
          var pc = checkForPreferredCommunicationMethod(parentID);
          if (pc == "Email") { //Preferred channel is email
            callReport(boardCode + "|RENEWAL_NOTIFICATION_EMAIL", false, true, "Email Notification",parentID);
          } else {
            callReport(boardCode + "|RENEWAL_NOTIFICATION", false, true, "DPL Renewal App Print Set",parentID);
          }
        }
      }
    } //End Continuing Education for PL and GF
  } catch (error) {
    logDebug("There is an error in CWM_ELP_DEFECT6414_PartTwo. Please contact your administrator.");
    logDebug("Error:" + error.message);
    cancel = true;
  }
}
function setCERecordsToProcessed(pCapId) {
  var ceArray = getChildren("License/DPL/Continuing Education/CE Submission", pCapId);
  logDebug("ceArray:" + ceArray + " " + pCapId.getCustomID())
  for (ii in ceArray) {
    var ceId = ceArray[ii];
    var capIDScriptModel = aa.cap.createCapIDScriptModel(ceId.getID1(), ceId.getID2(), ceId.getID3());
    var workflowResult = aa.workflow.getTasks(ceId);
    if (workflowResult.getSuccess()) {
      var wfObj = workflowResult.getOutput();
      for (i in wfObj) {
        var fTask = wfObj[i];
        var taskName = fTask.getTaskDescription();
        var taskStatus = fTask.getDisposition();
        if (taskName == "Intake" && taskStatus == "Credits Accepted" && getAppSpecific("Processed") == null) {
          logDebug("Setting to processed for " + ceId.getCustomID());
          editAppSpecific("Processed", "CHECKED", ceId);
        }
      }
    }
  }
}
//modified by Chris LJ on 10/2/15 
function assignTaskCustom(wfstr,username,capId) // optional process name
{
  // Assigns the task to a user.  No audit.
  //
  var useProcess = false;
  var processName = "";
  if (arguments.length == 4) {
    processName = arguments[3]; // subprocess
    useProcess = true;
  }
  var taskUserResult = aa.person.getUser(username);
  if (taskUserResult.getSuccess())
    taskUserObj = taskUserResult.getOutput(); //  User Object
  else {
    logDebug("**ERROR: Failed to get user object: " + taskUserResult.getErrorMessage());
    return false;
  }
  var workflowResult = aa.workflow.getTask(capId,wfstr);
  if (workflowResult.getSuccess())
    var wfObj = workflowResult.getOutput();
  else {
    logDebug("**ERROR: Failed to get workflow object: " + s_capResult.getErrorMessage());
    return false;
  }
  if (!useProcess || wfObj.getProcessCode().equals(processName)) {
    wfObj.setAssignedUser(taskUserObj);
    var taskItem = wfObj.getTaskItem();
    var adjustResult = aa.workflow.assignTask(taskItem);
    logMessage("Assigned Workflow Task: " + wfstr + " to " + username);
    logDebug("Assigned Workflow Task: " + wfstr + " to " + username);
  }
}

function getPermitDept(boardName) {
  var dept = null;
  if(boardName == "Sheet Metal" || boardName == "Plumbers" || boardName == "Gas Fitters")
  {
    dept = lookup("PERMIT_ASSIGNMENT",boardName)
    return dept;
  }
  else
   return -1;
}

//gets all licenses based on a contact sequence #
//accepts contact sequenec # and a license type and subtype
function getLicensesByRefContactforUpgrade(ipRefContact, licType, licSubtype)
{
    var opLic = [];
    var fvPeople = aa.people.createPeopleModel().getOutput().getPeopleModel();
    var fvCcb = aa.proxyInvoker.newInstance("com.accela.aa.aamain.people.CapContactDAOOracle").getOutput();
    fvPeople.setServiceProviderCode(aa.getServiceProviderCode());
    fvPeople.setContactSeqNumber(ipRefContact);

    var fvCapsQry = fvCcb.getCapContactsByRefContactModel(fvPeople);
    if (!fvCapsQry)
        return opLic;
    var fvCaps = fvCapsQry.toArray();
    if (!fvCaps)
        return opLic;

    for (var fvCounter in fvCaps) {
        var fvCap = fvCaps[fvCounter];
        if (!fvCap)
            continue;
        var fvCapIDTmp = fvCap.getCapID();
        if (!fvCapIDTmp)
            continue;
        var fvCapIDQry = aa.cap.getCapID(fvCapIDTmp.getID1(), fvCapIDTmp.getID2(), fvCapIDTmp.getID3());
        if (!fvCapIDQry || !fvCapIDQry.getSuccess())
            continue;
        var fvCapID = fvCapIDQry.getOutput();
        if(!fvCapID)
            continue;
        var fvCapMQry = aa.cap.getCap(fvCapID);
        if (!fvCapMQry || !fvCapMQry.getSuccess())
            continue;
        var fvCapM = fvCapMQry.getOutput();
        if (!fvCapM)
            continue;
        var fvCapType = fvCapM.getCapType();
        if (!fvCapType)
            continue;

        if (fvCapType.getGroup() != "License" )
           continue;
        if (fvCapType.getType() != licType)
           continue;
        if (fvCapType.getSubType() != licSubtype)
           continue;
        if (fvCapType.getCategory() != "License")
           continue;
        opLic.push(fvCapID.getCustomID());
    }
    return opLic;
}
function addReferenceContactandLicense(refLP, contactType)
{
  if (arguments.length == 3) {
    var vcapId = arguments[2];
    aa.print("using the parent id")
  }
  else {
  var vcapId = capId;
  }
  if (refLP) 
  {
    var fvAddResult = aa.licenseScript.associateLpWithCap(vcapId, refLP);
        
    // get the license number and licensee name
    var licNum = refLP.stateLicense +"-"+refLP.comment +"-"+refLP.businessLicense;
    var refLPFirstName = refLP.contactFirstName;
    var refLPLastName = refLP.contactLastName;

    logDebug("License: " + licNum);
    logDebug("Licensee: " + refLPFirstName + " " + refLPLastName); 
    if (refLPFirstName && refLPLastName) 
    {
      var licCapId = aa.cap.getCapID(licNum).getOutput();
      var licContacts = getPeople(licCapId); 
      for (c in licContacts) 
      {
        var licContact = licContacts[c];
        var licContactModel = licContact.getCapContactModel();
        var refContactNumber = licContactModel.refContactNumber;
        var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput();
        logDebug("Broker License Contact: " + licContact.firstName + " " + licContact.lastName + " ref:" + refContactNumber);
        if (licContact.firstName && licContact.lastName && licContact.firstName.toUpperCase().equals(refLPFirstName.toUpperCase()) && licContact.lastName.toUpperCase().equals(refLPLastName.toUpperCase())) 
        {
          var getResult = aa.people.getPeople(refContactNumber);
          if (getResult.getSuccess()) 
          {
            var peopleObj = getResult.getOutput();
            // add the reference contact from the people object to the application record
            var contactNbr = addReferenceContactFromPeopleModel(peopleObj);
            logDebug("contact Number of new Ref contact: " + contactNbr);
            var appContacts = aa.people.getCapContactByCapID(vcapId).getOutput();
            for (c in appContacts) 
            {
              var appContact = appContacts[c];
              if (appContact.getPeople().getContactSeqNumber() == contactNbr) 
              {
                // change the contact type of the newly added contact
                appContact.getPeople().setContactType(contactType);
                appContact.getPeople().setFlag("N");
                var updateResult = aa.people.editCapContact(appContact.getCapContactModel());
                if (updateResult.getSuccess()) 
                {
                  logDebug("Contact " + contactNbr + " updated successfully");
                } 
                else 
                {
                  logDebug("Contact " + contactNbr + " update failed: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                }
                // copy addresses
                for (add in contactAddressList) 
                {
                  var transactionAddress = false;
                  contactAddressModel = contactAddressList[add].getContactAddressModel();
                  if (contactAddressModel.getEntityType() == "CAP_CONTACT") 
                  {
                    transactionAddress = true;
                    contactAddressModel.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                  }
                  // Commit if transaction contact address
                  if (transactionAddress) 
                  {
                    var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                    contactAddressModel.setContactAddressPK(newPK);
                    aa.address.createCapContactAddress(vcapId, contactAddressModel);
                  }
                  // Commit if reference contact address
                  else 
                  {
                    // build model
                    var Xref = aa.address.createXRefContactAddressModel().getOutput();
                    Xref.setContactAddressModel(contactAddressModel);
                    Xref.setAddressID(contactAddressList[add].getAddressID());
                    Xref.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                    Xref.setEntityType(contactAddressModel.getEntityType());
                    Xref.setCapID(vcapId);
                    // commit address
                    aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                  }
                }
                break;
              }        
            }
            break;
          }
          else 
          {
            logDebug("Can't find " + refLPFirstName + " " + refLPLastName + " reference contact number: " + refContactNumber + " : " + getResult.getErrorType() + ":" + getResult.getErrorMessage());
          }
        }       
      }
    }   
  }
  else return null; 
}

// check if Professional Resume Document is attached or not when Current Employment Status = "Practiciing in another state (must upload resume)"; for Both ACA and AA.
function CWM_ELP_317_ACA_DPL_checkProfessionalResumeDoc(){
   var currEmpStatus = AInfo["Current Employment Status"];
   logDebug("currEmpStatus  "+currEmpStatus);
  var resumeDoc = true;
  var docName = "Professional Resume";
  

  if((currEmpStatus == "Practicing in another state") || (currEmpStatus == "Practicing in another state (must upload resume)"))
  {
                  if(!publicUser){
          resumeDoc = docCheckForASB(docName);
        }else{
          resumeDoc = docCheck(docName);
        }
  
    }
     if(!resumeDoc){
      cancel = true;
      showMessage = true;
      comment("You must upload your professional resume to reinstate your license.");
    } 
 }
 
 // check if document available or not at ASB Event
 function docCheckForASB(docName) {
  try {
    var docAttached = false;

    if (!publicUser) // HANDLE ASB EVENT AA ONLY
    {
      var documentList = aa.env.getValue("DocumentModelList");
      if (!documentList) {
        return false;
      } else {
        for (var counter = 0; counter < documentList.size(); counter++) {
          var doc = documentList.get(counter);
          if (doc.getDocCategory() == docName) {
            docAttached = true;
            break;
          }
        }
      }
    } else {
      docAttached = true;
    }
    return docAttached;
  } catch (error) {
    cancel = true;
    showMessage = true;
    comment(error.message);
    comment("An error occurred while retrieving the document array");
  }
}

// check if document available or not at ACA. added by tofek
function docCheck(docName) {
  try {
    var docAttached = false;

    if (publicUser) // HANDLE ACA PAGEFLOW
    {
      var cap = aa.env.getValue('CapModel');
      var currentCapId = cap.getCapID();
      var pcapIdString = currentCapId.getID1() + "-" + currentCapId.getID2() + "-" + currentCapId.getID3();

      var acaDocResult = getAcaDocumentList(pcapIdString);
      logDebug("Document Result:" + acaDocResult.size());

      if (acaDocResult.size() > 0) {
        acaDocResult = acaDocResult.toArray();
        docAttached = checkForUploadedDocumentACA(acaDocResult, docName);
      }
    }
    return docAttached;
  } catch (error) {
    cancel = true;
    showMessage = true;
    comment(error.message);

    if (cap == null) {
      comment("An error occurred while retrieving the cap");
    } else {
      comment("An error occurred while retrieving the document array");
    }
    return false;
  }
}

// Validate the license number For Physical Therapy Facility App Record.
function CWM_ELP_23_DPL_ASB_validateLicenseForPTFApplication(){
  try{
var boardCode = "AH";
var licNbr = AInfo["Existing Facility License Number"];

 // Validate the license number     
   if (licNbr != undefined && licNbr != null && licNbr != "") {
      var isActive = isLicenseActive(licNbr, boardCode, ""); 


      if (!isActive) {
       cancel = true;
       showMessage = true;
       message = "";
       comment("The License Number of the existing facility must be a valid license number for a Physical Therapy Facility. Please contact the board for further instructions.");
      }
    }

    }
  catch(error){
    showMessage=true;
    comment("Error on function CWM_ELP_23_DPL_ASB_validateLicenseForPTFApplication. Please contact administrator");
    comment(error.message);
  }
}
function CWM_ELP_DPL_338_WTUA_setExpDateForDO(itemCap) {
try
{
    var expDate = new Date();
    var issueDateObj = new Date();
    var expYear  = 0;
    var expMonth = 0;
    var expDay  = 0;
    var capContactResult=aa.people.getCapContactByCapID(capId);
    if(capContactResult.getSuccess())
    {
      capContactResult=capContactResult.getOutput();
      for(i in capContactResult)
      {
        var peopleModel= capContactResult[i].getPeople();
        if(peopleModel.getContactType()=="Applicant" )
        {
          var capContactScriptModel= capContactResult[i];
          var capContactModel= capContactScriptModel.getCapContactModel();
          var bDate = capContactModel.getBirthDate();
          if(bDate != null)
          {
           bDateObj = new Date(bDate.getTime());
          logDebug("Birth date:" + (bDateObj.getMonth() + 1) + "/" + bDateObj.getDate() + "/" + bDateObj.getFullYear());
          }
        }
      }
        
      if(issueDateObj && bDateObj)
      {
        var issueDateYear = issueDateObj.getFullYear();
        var mod = issueDateYear % 2;
        if(mod == 0)
        {
            expYear = issueDateYear + 1;
            expMonth = bDateObj.getMonth();
            expDay  = bDateObj.getDate();
        }
        else
        {
            expYear = issueDateYear + 2;
            expMonth = bDateObj.getMonth();
            expDay  = bDateObj.getDate();
        }
        
        expDate.setFullYear(expYear);
        expDate.setMonth(expMonth);
        expDate.setDate(expDay);
      }
      logDebug("Expiration date to pass: " + (expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear());
    
  var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
  
    logDebug("Expiration Date: " + expDateString);         

    licCustID = itemCap.getCustomID();
    if (licCustID)
      logDebug("Parent ID: " + licCustID + " " + itemCap);
    else
      logDebug("Unable to get Parent ID");
    
    thisLic = new licenseObject(licCustID,itemCap);
    thisLic.setExpiration(expDateString);
    thisLic.setStatus("Active"); 
  }
}       
catch(error)
{
  showMessage=true;
  comment("Error on CWM_ELP_DPL_338_WTUA_setExpDateForDO:" + error + "Please contact administrator");
}
} 
// END OF FUNCTION: CWM_ELP_DPL_338_WTUA_setExpDateForDO


// Script#542, Need to remove the condition of Approval. (Added by tofek)
function CWM_ELP_542_ASA_DPL_removeConditionOfApproval(){
  
  var cType = "Application Checklist";
  var cName = "Verification of Existing Establishment License Number";
  removeCapCondition(cType,cName);
}


/*adds standard condition to license record*/
function addStdConditionOnCapIDModel(cType, cDesc) // optional cap ID
{

  var itemCap = capId;
  if (arguments.length == 3) {
    itemCap = arguments[2]; // use cap ID specified in args
  }
  if (!aa.capCondition.getStandardConditions) {
    logDebug("addStdCondition function is not available in this version of Accela Automation.");
  } else {
    standardConditions = aa.capCondition.getStandardConditions(cType, cDesc).getOutput();
    for (i = 0; i < standardConditions.length; i++)
      // deactivate strict match for indy
      //if (standardConditions[i].getConditionType().toUpperCase() == cType.toUpperCase() && standardConditions[i].getConditionDesc().toUpperCase() == cDesc.toUpperCase()) //EMSE Dom function does like search, needed for exact match
      {
        standardCondition = standardConditions[i];

        var addCapCondResult = aa.capCondition.addCapCondition(itemCap, standardCondition.getConditionType(), standardCondition.getConditionDesc(), standardCondition.getConditionComment(), sysDate, null, sysDate, null, null, standardCondition.getImpactCode(), systemUserObj, systemUserObj, "Applied", currentUserID, "A", null, standardCondition.getDisplayConditionNotice(), standardCondition.getIncludeInConditionName(), standardCondition.getIncludeInShortDescription(), standardCondition.getInheritable(), standardCondition.getLongDescripton(), standardCondition.getPublicDisplayMessage(), standardCondition.getResolutionAction(), null, null, standardCondition.getConditionNbr(), standardCondition.getConditionGroup(), standardCondition.getDisplayNoticeOnACA(), standardCondition.getDisplayNoticeOnACAFee(), standardCondition.getPriority(), standardCondition.getConditionOfApproval());

        if (addCapCondResult.getSuccess()) {
          logDebug("Successfully added condition (" + standardCondition.getConditionDesc() + ")");
        } else {
          logDebug("**ERROR: adding condition (" + standardCondition.getConditionDesc() + "): " + addCapCondResult.getErrorMessage());
        }
      }
  }
}// END OF FUNCTION : addStdConditionOnCapIDModel

//Check license is not current
function isLicenseCurrent(licenseNumberCapID){
  //var fuEstCapID= aa.cap.getCapID(fuEstLicenseNumber).getOutput();
  logDebug("5.isLicenseCurrent" );
  try{
    var myCapStatus = getMyLicenseStatus(licenseNumberCapID);
    if(myCapStatus=='Current'){
      return true;
    }else{
      return false;
    }
  }catch(err){
    logDebug("5.isLicenseCurrent" );
  }
}
//Check Linked License i.e license tab having the license that been used for 'Funeral Establishment License Number' of ASI
function isLinkedWithAssLicense(licenseNumber){
  try{
    logDebug("2.isLinkedWithAssLicense "+licenseNumber);
  var myLicProf = aa.licenseScript.getLicenseProf(capId).getOutput();
  aa.print(myLicProf);
    if(myLicProf!=null){
      logDebug("3.isLinkedWithAssLicense " );
      for(x in myLicProf){
        aa.print(myLicProf[x].getLicenseNbr());
        aa.print(myLicProf[x].getLicenseType());
        if(myLicProf[x].getLicenseNbr()==licenseNumber){
          logDebug("finds correct match");
          return true;
        }
      }
    }
    logDebug("4.isLinkedWithAssLicense-No Match " );
    return false;
  }catch(err){
       logDebug("Error inside method isLinkedWithAssLicense.");
     return false;
  }
}

function addAppRecordToMonthlyPaymentSet(setName,capId){  
  addMonthlyPaymentSet(setName, capId);
}

/** 
 * @desc The Method Add Application record to Monthly payment set.
 * @param setName : Monthly payment set.
 * @param capID : Application ID.
 * @return boolean
 * @throws  N/A
 */ 
function addMonthlyPaymentSet(setName, capId)
{
  

  var capIDModel = capId;
  var setFlag  = false;

  var setDetailScriptModel = aa.set.getSetDetailsScriptModel().getOutput();
  
  setDetailScriptModel.setSetID(setName);
  setDetailScriptModel.setID1(capId.getID1());
  setDetailScriptModel.setID2(capId.getID2());
  setDetailScriptModel.setID3(capId.getID3());
  
  var memberListResult = aa.set.getSetMembers(setDetailScriptModel);
  
  if(memberListResult.getSuccess())
  {
    var memberList = memberListResult.getOutput();
    
    //If the member list size is more than zero then record present in the set
    if(memberList.size())
    {
      logDebug("Application record already exists in the set");
    }
    else
    {
      aa.set.add(setName,capIDModel); 
      logDebug("Application record added to the set - " + setName);
    }
    
    setFlag = true;
  }
  
  return setFlag;
}

/** 
 * @desc The Method will show the message if the OutstandingFee >0 and status is approved.
 * @param capId : Application ID.
 * @return boolean
 * @throws  N/A
 */ 
 
function updateWFStatusApproval(capId){
  try{
    var OutstandingFee = aa.fee.isFullPaid4Renewal(capId).getOutput() ;
    logDebug("OutstandingFee : "+OutstandingFee);
    if(OutstandingFee == false && (wfStatus == "Approved" || wfStatus == "Approval" || wfStatus == "APPROVED")){
      
      cancel = true;
      showMessage = true;
      comment("All fees must be paid prior to approval of the record..");
      
    }
    /*else{
      cancel = false;
    }*/
}catch(err){
logDebug("error catched inside isFullPaid4Renewal.message: "+err.message);
}
}


function CWM_ELP_DPL_123_WTUA_setExpDateForPD_LL(itemCap) {
try
{
    var currDate = new Date();
    var expDate = new Date();
    var expMonth = 5;
    var expDay  = 30;
    var expYear  = currDate.getFullYear() + 3;
        
    expDate.setFullYear(expYear);
    expDate.setMonth(expMonth);
    expDate.setDate(expDay); 

       
    var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
    logDebug("Exp date: " + expDateString);         

    licCustID = itemCap.getCustomID();
    if (licCustID)
    logDebug("Parent ID: " + licCustID + " " + itemCap);
  else
    logDebug("Unable to get Parent ID");

  
  thisLic=new licenseObject(licCustID,itemCap);
    thisLic.setExpiration(expDateString);
    thisLic.setStatus("Active");
}       
catch(error)
{
  showMessage=true;
  comment("Error on CCWM_ELP_DPL_123_WTUA_setExpDateForPD_LL:" + error + ". Please contact administrator");
}
} 
// END OF FUNCTION: CWM_ELP_DPL_123_WTUA_setExpDateForPD_LL



/*
 * @desc This method is used to display the error message when Document Type 'CORI Notarized Form' does not exist.
 *
 * @param String - pTempCapId ACA capId added by tofek khan
 *
 */
function CWM_ELP_549_ACA_DPL_checkCORINotarizedFormUploaded()
{
    var coriNotarizedFormDoc = false;
    var docName = "CORI Notarized Form";
        
    if(!publicUser){
          coriNotarizedFormDoc = docCheckForASB(docName);
        }else if(publicUser){
          coriNotarizedFormDoc = docCheck(docName);
        }
    
    if(!coriNotarizedFormDoc)
    {
      cancel = true;
      showMessage = true;
      comment("The CORI Acknowledgement Form must be uploaded for all signatories to proceed with  this application.");
    }
}

//added by preeti
function loadASITable(tname) {

  //
  // Returns a single ASI Table array of arrays
  // Optional parameter, cap ID to load from
  //

  var itemCap = capId;
  if (arguments.length == 2) itemCap = arguments[1]; // use cap ID specified in args

  var gm = aa.appSpecificTableScript.getAppSpecificTableGroupModel(itemCap).getOutput();
  var ta = gm.getTablesArray()
  var tai = ta.iterator();

  while (tai.hasNext())
    {
    var tsm = tai.next();
    var tn = tsm.getTableName();

    if (!tn.equals(tname)) continue;

    if (tsm.rowIndex.isEmpty())
    {
      logDebug("Couldn't load ASI Table " + tname + " it is empty");
      return false;
    }

    var tempObject = new Array();
    var tempArray = new Array();

    var tsmfldi = tsm.getTableField().iterator();
    var tsmcoli = tsm.getColumns().iterator();
    var readOnlyi = tsm.getAppSpecificTableModel().getReadonlyField().iterator(); // get Readonly filed
    var numrows = 1;

    while (tsmfldi.hasNext())  // cycle through fields
    {
    if (!tsmcoli.hasNext())  // cycle through columns
      {
      var tsmcoli = tsm.getColumns().iterator();
      tempArray.push(tempObject);  // end of record
      var tempObject = new Array();  // clear the temp obj
      numrows++;
      }
    var tcol = tsmcoli.next();
    var tval = tsmfldi.next();
    var readOnly = 'N';
    if (readOnlyi.hasNext()) {
      readOnly = readOnlyi.next();
    }
    var fieldInfo = new asiTableValObj(tcol.getColumnName(), tval, readOnly);
    tempObject[tcol.getColumnName()] = fieldInfo;

    }
    tempArray.push(tempObject);  // end of record
    }
    return tempArray;
  }

// Added by nilkanth.t.patel
// For script 526

function addDate(td,amt)
  // perform date arithmetic on a string
  // td can be "mm/dd/yyyy" (or any string that will convert to JS date)
  // amt can be positive or negative (5, -3) days
  // if optional parameter #3 is present, use working days only
{

  var useWorking = false;
  if (arguments.length == 3)
    useWorking = true;

  if (!td)
    dDate = new Date();
  else
    dDate = convertDate(td);
    
  var i = 0;
  if (useWorking)
    if (!aa.calendar.getNextWorkDay)
      {
      logDebug("getNextWorkDay function is only available in Accela Automation 6.3.2 or higher.");
      while (i < Math.abs(amt))
        {
        dDate.setTime(dDate.getTime() + (1000 * 60 * 60 * 24 * (amt > 0 ? 1 : -1)));
        if (dDate.getDay() > 0 && dDate.getDay() < 6)
          i++
        }
      }
    else
      {
      while (i < Math.abs(amt))
        {
        dDate = new Date(aa.calendar.getNextWorkDay(aa.date.parseDate(dDate.getMonth()+1 + "/" + dDate.getDate() + "/" + dDate.getFullYear())).getOutput().getTime());
        i++;
        }
      }
  else
    dDate.setTime(dDate.getTime() + (1000 * 60 * 60 * 24 * amt));

  return (dDate.getMonth()+1) + "/" + dDate.getDate() + "/" + dDate.getFullYear();
}



/**
 *SCRIPT#528, debashish.barik,[only for Script 528, with below conditions]
 *copy the Licensed Individual's contact to the Apprentice's license and set the contact type as "Sponsor".  
 *Set the "Start Date" of the contact as the value "Transaction Date" in the ASIT.
 *
 **/
function copyContactsByCapContactType(pFromCapId, pToCapId, pFromContactType, pToContactType, pStartDate){
  //Copies all contacts from pFromCapId to pToCapId
  //where type == pContactType
  logDebug("pFromCapId: "+pFromCapId);
  logDebug("pToCapId: "+pToCapId);
  logDebug("pFromContactType: "+pFromContactType);
  logDebug("pToContactType: "+pToContactType);
  logDebug("pStartDate: "+pStartDate);
  if (pToCapId==null)
    var vToCapId = capId;
  else
    var vToCapId = pToCapId;
  logDebug("vToCapId: "+vToCapId);
  
  var capContactResult = aa.people.getCapContactByCapID(pFromCapId);
  var copied = 0;
  if (capContactResult.getSuccess())
    {
    logDebug("cap contact result is success");
    var Contacts = capContactResult.getOutput();
    for (yy in Contacts)
      {
        logDebug("Contacts[yy].getCapContactModel().getContactType(): "+Contacts[yy].getCapContactModel().getContactType());
      if(Contacts[yy].getCapContactModel().getContactType() == pFromContactType)
          {
          var newContact = Contacts[yy].getCapContactModel();
          newContact.setCapID(vToCapId);
        if(pStartDate!=null){
        var vStartDate = new Date(pStartDate);
         newContact.setStartDate(vStartDate);
        }
        newContact.setContactType(pToContactType);
                                 newContact.setPrimaryFlag("N");
          aa.people.createCapContact(newContact);
          copied++;
          logDebug("Copied contact from "+pFromCapId.getCustomID()+" to "+vToCapId.getCustomID());
          }
    
      }
    }
  else
    {
    logMessage("**ERROR: Failed to get contacts: " + capContactResult.getErrorMessage()); 
    return false; 
    }
  return copied;
} 

// check if Insurance Policy Document is attached or not for Both ACA and AA.
// Release C, Script#578. added by tofek
function CWM_ELP_578_ACA_ASB_DPL_checkInsurancePolicyDoc(){
  var policyDoc = false;
  var docName = "Insurance Policy";
  
  if(!publicUser){
    policyDoc = docCheckForASB(docName);
  }else if(publicUser){
    policyDoc = docCheck(docName);
  }
  
       if(!policyDoc){
      cancel = true;
      showMessage = true;
      comment("You must attach your insurance policy declarations page that indicates the amount and effective date of coverage.");
    } 
 }

//Check Association in two license
//Added by Ankush Kshirsagar
function isAssociatedLicense(parentLicenseCapId,licenseNumber){
  try{
    logDebug("2.isAssociatedLicense "+licenseNumber );
  var myLicProf = aa.licenseScript.getLicenseProf(parentLicenseCapId).getOutput();
  logDebug(myLicProf);
    if(myLicProf!=null){
      logDebug("3.isAssociatedLicense " );
      for(x in myLicProf){
        logDebug(myLicProf[x].getLicenseNbr());
        logDebug(myLicProf[x].getLicenseType());
        if(myLicProf[x].getLicenseNbr()==licenseNumber){
          logDebug("finds correct match");
          return true;
        }
      }
    }
    logDebug("4.isAssociatedLicense-No Match " );
    return false;
  }catch(err){
       logDebug("Error inside method isAssociatedLicense.");
     return false;
  }
}// END OF FUNCTION: isAssociatedLicense() 
// check if CORI Acknowledgement Form is uploaded or not.Script#578. added by tofek khan
function CWM_ELP_578_ACA_ASB_DPL_checkCORIAcknowledgementFormUploaded()
{
    var coriNotarizedFormDoc = false;
    var docName = "CORI Acknowledgement Form";
        
    if(!publicUser){
          coriNotarizedFormDoc = docCheckForASB(docName);
        }
        else if(publicUser){ 
          coriNotarizedFormDoc = docCheck(docName);
        }
    
    if(!coriNotarizedFormDoc)
    {
      cancel = true;
      showMessage = true;
      comment("You must attach your CORI Acknowledgement Form to submit this application.");
    }
}// End of Function CWM_ELP_578_ACA_ASB_DPL_checkCORIAcknowledgementFormUploaded().

// Checked the document is available or not in ACA (added by tofek)
function checkForUploadedDocumentACA(pacaDocResult,docName)
{
   var bFound = false;
   var docTotal = 0;
   // Loop all the documents
   for (var counter in pacaDocResult)
   {
      var fvDocument = pacaDocResult[counter];
      // Check to see document exists
      if (fvDocument.getDocCategory().equals(docName))
      {
         bFound = true;
         break;
      }
   }

   return bFound;
}
function CWM_ELP_DPL_WTUA_createAffContact(){
  try{
var vHostpital = getAppSpecific("Affiliated Hospital/Preceptorship");
var vRelDate = getAppSpecific("Start Date at Hospital/Preceptorship Program");

if(!vHostpital){
  var vHostpital = getAppSpecific("New Affiliated Hospital/Preceptorship");
  var vRelDate = getAppSpecific("Start Date of new Affiliated Hospital/Preceptorship");
}
if(vRelDate==null){
  vRelDate = new Date();
}
else {
  vRelDate = new Date(vRelDate);
}
var vHosRefId;
var vParentCapID = getParent();

if(vHostpital=="Other Preceptorship"){
//Then create the new reference contact and set the ref id variable 
var contactType ="Affiliated Preceptorship"
  //Access ASI fields of application
  
  var companyName   = getAppSpecific("Entity Name");
  var buildingNo   = getAppSpecific("Street Number");
  var stAddr1   = getAppSpecific("Address Line 1");
  var stAddr2   = getAppSpecific("Address Line 2");
  var stAddr3   = getAppSpecific("Address Line 3");
  var city   = getAppSpecific("City");
  var state   = getAppSpecific("State");
  var zip   = getAppSpecific("Zip Code");
  var country   = getAppSpecific("Country");
  
      //Create a new cap Contact using the ASI values obtained from the Amendment.
    var fvCapContactModel = new com.accela.aa.aamain.people.CapContactModel();
    var fvPeople = fvCapContactModel.getPeople();
    fvPeople.setAuditStatus("A");
    fvCapContactModel.setPeople(fvPeople);
    fvCapContactModel.setContactType(contactType);
    fvCapContactModel.setBusinessName(companyName);
    fvCapContactModel.setCapID(vParentCapID);
    fvCapContactModel.setStartDate(vRelDate);
    var fvResult = aa.people.createCapContactWithAttribute(fvCapContactModel);
    if (!fvResult)
    {
      logDebug("Contact creation unsuccessful");          
    }
    else
    {
      logDebug("Contact creation successful");            
    }
    var fvContactID = fvCapContactModel.getContactSeqNumber();
    logDebug("Sequence number of the new contact:" + fvContactID);
    
    //Add Address to the Contact
    var fvCapContactAddressModel = new com.accela.orm.model.address.ContactAddressModel();
    
    fvCapContactAddressModel.setHouseNumberAlphaStart(buildingNo);
    fvCapContactAddressModel.setAddressLine1(stAddr1);
    fvCapContactAddressModel.setAddressLine2(stAddr2);
    fvCapContactAddressModel.setAddressLine3(stAddr3);    
    fvCapContactAddressModel.setCity(city);
    fvCapContactAddressModel.setState(state);
    fvCapContactAddressModel.setZip(zip);
    //fvCapContactAddressModel.setCountryCode(country);
    fvCapContactAddressModel.setAddressType("Mailing Address");   
    fvCapContactAddressModel.setEntityType("CAP_CONTACT");
    fvCapContactAddressModel.setEntityID(parseInt(fvContactID));
    var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
    fvCapContactAddressModel.setContactAddressPK(newPK);
    aa.address.createCapContactAddress(vParentCapID, fvCapContactAddressModel);   
    //copy the contact to reference
syncContacts();   

}
    else {

  //lookup the reference id of the hospital
  vHosRefId = lookup("PODIATRY_HOSPITAL_REFID",vHostpital);
  var contactType ="Affiliated Hospital (Organization)";
  var getResult = aa.people.getPeople(vHosRefId);
                    if (getResult.getSuccess()) {
                        var peopleObj = getResult.getOutput();
                        // add the reference contact from the people object to the license record
                        var contactNbr = addReferenceContactFromPeopleModel(peopleObj,vParentCapID);
                        var appContacts = aa.people.getCapContactByCapID(vParentCapID).getOutput();

                        for (c in appContacts) {
                            var appContact = appContacts[c];
              //var licContact = licContacts[c];
              var licCapId = aa.cap.getCapID(vParentCapID).getOutput();
                 var contactAddressScriptModel = aa.address.createContactAddressModel().getOutput();
                contactAddressScriptModel.setEntityID(parseInt(vHosRefId));
              var contactAddressModel = contactAddressScriptModel.getContactAddressModel();
              var contactAddressList = aa.address.getContactAddressList(contactAddressModel).getOutput();
              for (var g in contactAddressList){
                //logDebug(contactAddressList[g]);
              }       
                            if (appContact.getPeople().getContactSeqNumber() == contactNbr) {
                                // change the contact type of the newly added contact
                
                                appContact.getPeople().setContactType(contactType);
                appContact.getPeople().setStartDate(vRelDate);

                                var updateResult = aa.people.editCapContact(appContact.getCapContactModel());
                                if (updateResult.getSuccess()) {
                                    logDebug("Contact " + contactNbr + " updated successfully");
                                } else {
                                    logDebug("Contact " + contactNbr + " update failed: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                                }

                                // copy addresses
                                 for (add in contactAddressList) {
                   logDebug("address found")
                   //only copy the first mailing address you find without an end date
                                    var transactionAddress = false;
                                    contactAddressModel = contactAddressList[add].getContactAddressModel();
                  if(contactAddressModel.getAddressType()=="Mailing Address" && contactAddressModel.getExpirationDate()==null){
                  
                    if (contactAddressModel.getEntityType() == "CAP_CONTACT") {
                      transactionAddress = true;
                      contactAddressModel.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                    }
                    // Commit if transaction contact address
                    if (transactionAddress) {
                      var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                      contactAddressModel.setContactAddressPK(newPK);
                      aa.address.createCapContactAddress(vParentCapID, contactAddressModel);
                    }
                    // Commit if reference contact address
                    else {
                      // build model
                      var Xref = aa.address.createXRefContactAddressModel().getOutput();
                      Xref.setContactAddressModel(contactAddressModel);
                      Xref.setAddressID(contactAddressList[add].getAddressID());
                      Xref.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                      Xref.setEntityType(contactAddressModel.getEntityType());
                      Xref.setCapID(vParentCapID);
                      // commit address
                      aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                    }
                    break;
                  }
                                } 
                               
                            }
                        }
                      
                    } else {
                        logDebug("Can't find " + refLPFirstName + " " + refLPLastName + " reference contact number: " + refContactNumber + " : " + getResult.getErrorType() + ":" + getResult.getErrorMessage());
                    }
               
}
}
catch (err) {
            cancel = true;
            showMessage = true;     
      comment("An error has occurred in CWM_ELP_DPL_WTUA_createAffContact.")
      comment(err.message);
    }
}

//edit an ASIT with col/edit value
function editASITableRow(tableArr, tableCapId, tableName, editName, editValue,r) {
    if (tableArr) {
    logDebug(" Editing row " + r);
    var tssmResult = aa.appSpecificTableScript.removeAppSpecificTableInfos(tableName, tableCapId, currentUserID);
    var rowArr = new Array();
    var tempArr = new Array();
    for (var col in tableArr[r]) {
      if (tableArr[r][col].columnName.toString() == editName) {
        var tVal = tableArr[r][col];
        tVal.fieldValue = editValue;
        tableArr[r][col] = tVal;
      } else {
        var tVal = tableArr[r][col];
      }
    }
    addASITable(tableName, tableArr, tableCapId);
  }
} //end loop

function CWM_ELP_DPL_WTUA_EndDateHosptial(){
  try{
    var pRecordCap = getParent();
      
  if(pRecordCap){
      logDebug("Parent Record: " + pRecordCap);
      
        var rRecordCap = getLatestTempRenewal(pRecordCap);
        logDebug("Renewal Record: " + rRecordCap);
        //Remove Contact
    var RelationshipDate = getAppSpecific("End Date of previous Affiliated Hospital/Preceptorship");
  //set the relationship end date
  if(!RelationshipDate){
    RelationshipDate = new Date();
  }
    var vRelDate = new Date(RelationshipDate);
  var pCons = aa.people.getCapContactByCapID(pRecordCap).getOutput();
//end date all previous hospital or preceptor contacts without an end date
          
            for(i in pCons){
            var licContact = pCons[i];
            var licContactModel = licContact.getCapContactModel();
            var refContactNumber = licContactModel.refContactNumber;            
              var pRefNum = pCons[i].getCapContactModel().getRefContactNumber();
              var pConSeqNum = pCons[i].getPeople().getContactSeqNumber();
              var pConEmail = pCons[i].getPeople().getEmail();
            var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput(); 
            logDebug(pCons[i].getCapContactModel().getContactType());
              if((pCons[i].getCapContactModel().getContactType() == "Affiliated Preceptorship" || pCons[i].getCapContactModel().getContactType() == "Affiliated Hospital (Organization)") && pCons[i].getPeople().getEndDate() == null){  
              //aa.people.removeCapContact(pRecordCap, pConSeqNum);
              //logDebug("Contact sequence Number deleted: " + pConSeqNum + " from record: " + pRecordCap.getCustomID());
                                // change the contact type of the newly added contact
                pCons[i].getPeople().setEndDate(vRelDate);
                                var updateResult = aa.people.editCapContact(pCons[i].getCapContactModel());
                                if (updateResult.getSuccess()) {
                                    logDebug("Contact " + pConSeqNum + " updated successfully on the license");
                                } else {
                                    logDebug("Contact " + pConSeqNum + " update failed on the license: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                                }             
              logDebug("Contact Reference Number end dated: " + pRefNum + " from license record: " + pRecordCap.getCustomID());
                                // After we edit the contact type, we need to re-copy addresses
                                for (add in contactAddressList) {
                                    var transactionAddress = false;
                                    contactAddressModel = contactAddressList[add].getContactAddressModel();
                                    if (contactAddressModel.getEntityType() == "CAP_CONTACT") {
                                        transactionAddress = true;
                                        contactAddressModel.setEntityID(parseInt(pCons[i].getPeople().getContactSeqNumber()));
                                    }
                                    // Commit if transaction contact address
                                    if (transactionAddress) {
                                        var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                                        contactAddressModel.setContactAddressPK(newPK);
                                        aa.address.createCapContactAddress(pRecordCap, contactAddressModel);
                                    }
                                    // Commit if reference contact address
                                    else {
                                        // build model
                                        var Xref = aa.address.createXRefContactAddressModel().getOutput();
                                        Xref.setContactAddressModel(contactAddressModel);
                                        Xref.setAddressID(contactAddressList[add].getAddressID());
                                        Xref.setEntityID(parseInt(pCons[i].getPeople().getContactSeqNumber()));
                                        Xref.setEntityType(contactAddressModel.getEntityType());
                                        Xref.setCapID(pRecordCap);
                                        // commit address
                                        aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                                    }
                                }             
                      
                      }
            
          //remove the contact from the temp renewal if it exists
          if (rRecordCap != null) {
            var rCons = aa.people.getCapContactByCapID(rRecordCap).getOutput();
            logDebug("contact length:"+rCons.length);
            for(r in rCons) {
            var rRefNum = rCons[r].getCapContactModel().getRefContactNumber();
              var rConSeqNum = rCons[r].getPeople().getContactSeqNumber();
              var rConEmail = rCons[r].getPeople().getEmail();
              //if (pConEmail.equals(conEmail)){  
                if(rRefNum.equals(refNum)){ 
                  aa.people.removeCapContact(rRecordCap, rConSeqNum);
                  //logDebug("Contact sequence Number deleted: " + pConSeqNum + " from record: " + pRecordCap.getCustomID());
                  logDebug("Contact Reference Number deleted: " + pRefNum + " from renewal record: " + rRecordCap.getCustomID());
                    break;
                } 
              
              } 
            } 
          }
          }
      


  

  } 
  catch(err){
    logDebug("Error on function CWM_ELP_DPL_WTUA_EndDateHosptial. Please Call System Administrator. " + err.stack);
    logDebug("Error Message: " + err.message);
  }
}


function removeAssociatedLP(licenseNumTemp,removeFrom) { 
logDebug("Inside removeAssociatedLP function()");
licenseNumTemp = licenseNumTemp.toString();
    var licenseNum = "";
    if(licenseNumTemp.indexOf("-")==-1){//201
      licenseNum = licenseNumTemp;
    }else{
      var vchildLicNumArry = licenseNumTemp.split("-");
      licenseNum = vchildLicNumArry[0];
    }
    logDebug(licenseNum );
  try {
    var capLicenseResult = aa.licenseScript.getLicenseProf(removeFrom);
    if (capLicenseResult.getSuccess()) {
    logDebug("License found ("+removeFrom+") from link is to be removed");
      var refLicArr = capLicenseResult.getOutput();
      for (ii in refLicArr) {
        var currLicType = refLicArr[ii].getLicenseType();
        var currLicNbr = refLicArr[ii].getLicenseNbr();
        
        //Remove only the LP of the record that is passed in
        if (licenseNum == currLicNbr) {
          logDebug("Removing license LP: " + refLicArr[ii].getLicenseNbr() + " from CAP " + removeFrom.getCustomID());
          var remCapResult = aa.licenseProfessional.removeLicensedProfessional(refLicArr[ii]);
          logDebug(remCapResult.getSuccess());
          
        }
      }
    }
    else{
      logDebug("Failed to retrieve any LPs from the record: "+removalID.getCustomID());
    }
  } catch (err) {
    logDebug("An error has occurred while removing " + removalID.getCustomID() + " from " + removeFrom.getCustomID() + ".");
    logDebug("ERROR in removeAssociatedLP:" + err.message);
  }
}
function getContactByTypeXXX(conType, capId) {
  var contactArray = getPeople(capId);
  for (thisContact in contactArray) {
    if ((contactArray[thisContact].getCapContactModel().getContactType()).toUpperCase() == conType.toUpperCase())
      return contactArray[thisContact].getCapContactModel();
  }
  return false;
}
function setType6Status(parentID,refLic){
  var setStatusVal = getAppSpecific("Set Type 6 Status to");
  logDebug("Set Type 6 Status to: "+setStatusVal);
         if(setStatusVal == "" || setStatusVal == null){
    cancel = true;
    showMessage = true;
    comment('The field "Set Type 6 Status to" must have a value.');
  }
  else{
    updateAppStatus(setStatusVal,"Updated by amendment script",parentID);
    refLic.setPolicy(setStatusVal);
    aa.licenseScript.editRefLicenseProf(refLic);
  }
}
function addRelationship() {
  var fromContactType = "Licensed Individual";
  var toContactType = "Sponsor";
  var vLicenseType;
  var startDate;
  var vChildLicense;
  var childAlt;
  var vBoard = "EM";
  try {
    logDebug("capId:" + capId);
    var myTable = loadASITable("ADD NEW RELATIONSHIP", capId);
    var vParentRecordCap = getParentLicenseRecord(capId);
    var vParentLicense = aa.licenseProfessional.getLicenseProf(vParentRecordCap).getOutput()[0].getLicenseNbr();
    var vChildRecordCap;
    var parentCap = aa.cap.getCap(vParentRecordCap).getOutput();
    var parentCapType = (parentCap.getCapType().toString()).split("/");
    logDebug("vParentRecordCap:" + vParentRecordCap);

    for (x in myTable) {

      logDebug("License Type:" + myTable[x]["License Type"]);
      logDebug("License Number:" + myTable[x]["License Number"]);
      logDebug("Start Date:" + myTable[x]["Start Date of Relationship"]);

      vLicenseType = myTable[x]["License Type"];
      
      if(vLicenseType == "Funeral Assistant"){
        vBoard = "FE";
      }
      else if(vLicenseType == "Type 3 Funeral Director"){
        vBoard = "EM";
        vLicenseType = "Type 3";
      }
      else if(vLicenseType == "Type 6 Funeral Director"){
        vBoard = "EM";
        vLicenseType = "Type 6";
      }
      else if(vLicenseType == "Embalming Apprentice"){
        vBoard = "EM";
        vLicenseType = "Embalmer Apprentice";
      }
      
      startDate = myTable[x]["Start Date of Relationship"];
      vChildLicense = String(myTable[x]["License Number"]);
logDebug("vBoard:"+vBoard);     
childAlt = returnCompleteAltId(vChildLicense, vBoard, vLicenseType);
logDebug("childAlt:"+childAlt);
      vChildRecordCap = aa.cap.getCapID(childAlt).getOutput();
      logDebug("vChildRecordCap:" + vChildRecordCap);
      if((vParentRecordCap != null)&&(vChildRecordCap!=null)) {
        logDebug("vParentRecordCap and vChildRecordCap are valid record");
        var childLP = getRefLicenseProf(vChildRecordCap.getCustomID());
        var parentLP = getRefLicenseProf(vParentRecordCap.getCustomID());
        if ((childLP != null)&& (parentLP != null)) {
          var fvAddResult = aa.licenseScript.associateLpWithCap(vParentRecordCap, childLP);
          var fvAddResult2 = aa.licenseScript.associateLpWithCap(vChildRecordCap, parentLP);
          logDebug("Result:" + fvAddResult.getSuccess());
          if (fvAddResult.getSuccess()) {
            logDebug("SUCCESS:License professional successfully added to " + vParentRecordCap);
          } else {
            logDebug("FAILED:License professional cannot be added :" + fvAddResult.getErrorMessage());
          }
          if (fvAddResult2.getSuccess()) {
            logDebug("SUCCESS:License professional successfully added to " + vChildRecordCap);
          } else {
            logDebug("FAILED:License professional cannot be added :" + fvAddResult2.getErrorMessage());
          }
          copyContactsByCapContactType(vChildRecordCap, vParentRecordCap, fromContactType, toContactType, startDate);
          copyContactsByCapContactType(vParentRecordCap, vChildRecordCap, "Business", parentCapType[2], startDate);
        }
      } else {
        logDebug("Can not proceed with a null/empty parent cap ID");
        cancel = true;
      }

    } //for end
  } catch (err) {
    logDebug("An error occurred in addRelationship" + err.message);
    //for testing
    cancel = true;
  }
}
function endRelationship() {
  var fromContactType = "Licensed Individual";
  var toContactType = "Sponsor";
  var vLicenseType;
  var endDate;
  var vChildLicense;
  var childAlt;
  var vBoard = "EM";
  try {
    logDebug("capId:" + capId);
    var myTable = loadASITable("END EXISTING RELATIONSHIP", capId);
    var vParentRecordCap = getParent();
    var vParentLicense = aa.licenseProfessional.getLicenseProf(vParentRecordCap).getOutput()[0].getLicenseNbr();
    var parentCap = aa.cap.getCap(vParentRecordCap).getOutput();
    var parentCapType = (parentCap.getCapType().toString()).split("/");;
    var vChildRecordCap;
    logDebug("vParentRecordCap:" + vParentRecordCap);

    for (x in myTable) {

      logDebug("License Type:" + myTable[x]["License Type"]);
      logDebug("License Number:" + myTable[x]["License Number"]);
      logDebug("Start Date:" + myTable[x]["End Date of Relationship"]);

      vLicenseType = myTable[x]["License Type"];
      /*
      if(vLicenseType == "Funeral Assistant"){
        vBoard = "FE";
      }
      else{
        vBoard = "EM";
      }
      */
      endDate = myTable[x]["End Date of Relationship"];
      vChildLicense = myTable[x]["License Number"];
      childAlt = returnCompleteAltId(vChildLicense, vBoard, vLicenseType);
      vChildRecordCap = aa.cap.getCapID(childAlt).getOutput();

      if ((vParentRecordCap != null)&&(vChildRecordCap!=null)) {
        logDebug("vParentRecordCap and vChildRecordCap are valid record");
        var childLP = getRefLicenseProf(vChildRecordCap.getCustomID());
        if (childLP != null) {
          removeAssociatedLP(vChildLicense, vParentRecordCap);
          var contact = getContactByTypeXXX("Sponsor", vParentRecordCap);
          logDebug("contact:"+contact);
          var vEndDate = new Date(endDate);
          contact.setEndDate(vEndDate);
          aa.people.editCapContact(contact);
          logDebug("First removal complete");
          //2nd removal
          removeAssociatedLP(vParentLicense, vChildRecordCap);
          var contact2 = getContactByTypeXXX(parentCapType[2], vChildRecordCap);
          logDebug("contact2:"+contact2);
          var vEndDate2 = new Date(endDate);
          contact2.setEndDate(vEndDate2);
          aa.people.editCapContact(contact2);
          logDebug("Second removal complete");
        }
      } else {
        logDebug("Can not proceed with a null/empty parent cap ID");
        cancel = true;
      }

    } //for end
  } catch (err) {
    logDebug("An error occurred in endRelationship" + err.message);
    //for testing
    cancel = true;
  }
}



/*debashish.barik
 *Script#528
 */
function CWM_ELP_DPL_528_WTUA_SetApprenticeLicenseStatus(pTargetCapId,pTargetStatus){
  
  var vLicCustId = pTargetCapId.getCustomID();
   logDebug("Parent ID: " + vLicCustId + " " + pTargetCapId);
   var vLicenseObject =new licenseObject(vLicCustId,pTargetCapId);
   logDebug("Current License Status:"+vLicenseObject.getStatus());
   vLicenseObject.setStatus(pTargetStatus);
   logDebug("New Current Status:"+vLicenseObject.getStatus());
}

/*debashish.barik
 *Script#528
 */
function CWM_ELP_DPL_528_WTUA_SetReferenceLicenseStatus(pLicenseNumber,pTargetStatus){
  logDebug("CWM_ELP_DPL_528_WTUA_SetReferenceLicenseStatus start");
  var vRefLP = getRefLicenseProf(pLicenseNumber);
  if(vRefLP!=null){
    vLicenseModel = vRefLP.getLicenseModel();
    logDebug("vLicenseModel License Status before:"+vLicenseModel.getLicenseStatus());
    vLicenseModel.setLicenseStatus(pTargetStatus);
    logDebug("vLicenseModel License New Status after:"+vLicenseModel.getLicenseStatus());
  }
  logDebug("CWM_ELP_DPL_528_WTUA_SetReferenceLicenseStatus end");
}

// added by tofek khan
// this function will skip some page of renewal record as per value of ASI and uploaded document..
// this will execute only on ACA.
function CWM_ELP_392_ACA_DocumentPageFlow_SpeechLangPathologist(pcapId){
  
var currentPracticeStatus = AInfo["Current Practice Status"];
  //logDebug("currentEmploymentStatus --- "+currentEmploymentStatus);
    
  //cheking the ASI value and document which is uploaded.  
  var docName = "Professional Resume";
  var isUploaded = docCheck(docName);
  if(currentPracticeStatus == "Practicing in another state" && !isUploaded)
  {
    cancel = true;
    showMessage = true;
    comment("You are required to submit a copy of your professional  resume, plesae attach a copy");
  }
    
    
}


function CWM_ELP_257_DPL_CPA_FirmPartnershipValidation(){
  if(!docCheck("Copy of Partner License Card")){
    cancel = true;
    showMessage = true;
    comment("You must attach all copies of your partners' License Cards order to proceed with this application.");
  }
  else if(!docCheck("Non-CPA Owner Statement")){
    var admmitted = AInfo["Has the firm admitted non-CPA partners?"];
    if(admmitted == "Yes"){
      cancel = true;
      showMessage = true;
      comment("You must attach the Non-CPA Owner Statement for each non-CPA partner in the firm in order to proceed with this application.");
    }
  }
}




/*debashish.barik
 *Script#528
 *Remove the license from the licences tab
 */
function CWM_ELP_DPL_528_WTUA_removeLPsExceptPrimaryLicenseFromParent(pParentCapId,pChildCapId)
{
  //LicenseNumber of parent license
  var vParentlicenseNum = String(pParentCapId.getCustomID()).split("-")[0];
  var vChildlicenseNum = String(pChildCapId.getCustomID()).split("-")[0];
  var capLicenseResult = aa.licenseScript.getLicenseProf(pParentCapId);

  logDebug("vParentlicenseNum:"+vParentlicenseNum);
  logDebug("vChildlicenseNum:"+vChildlicenseNum);
  try{
    if (capLicenseResult.getSuccess())
    {
      var refLicArr = capLicenseResult.getOutput();
      //Looping through LPs and Extract the appropiated license need to removed
      for( ii in refLicArr)
      {
        var currLicType = refLicArr[ii].getLicenseType();
        var currLicNbr = refLicArr[ii].getLicenseNbr();
        logDebug("currLicNbr:"+currLicNbr);
        //1. Using the values in the "License Type" and "License Number" fields, remove the appropriate license as a key indiidual to the //Apprentice License.
        //1a. Remove the license from the licences tab on the Apprentice license record.
        if((vParentlicenseNum != currLicNbr) && (currLicNbr==vChildlicenseNum))
        {
          logDebug("Found matched: vParentlicenseNum is "+vParentlicenseNum);
          logDebug("Found matched: currLicNbr is "+currLicNbr);
          logDebug("Found matched: vChildlicenseNum is "+vChildlicenseNum);
          if( refLicArr[ii].getPrintFlag() == "Y")
          {
            refLicArr[ii].setPrintFlag("N");
            var result = aa.licenseProfessional.editLicensedProfessional(refLicArr[ii]);
            logDebug("Setting primary flag to N " +  result.getSuccess());
          }         
          logDebug("Removing license LP: " + refLicArr[ii].getLicenseNbr() +  " from CAP " + pParentCapId.getCustomID());
          var remCapResult = aa.licenseProfessional.removeLicensedProfessional(refLicArr[ii]);        
        }
      }
    }
  }catch(err){
    logDebug("Exception occured::"+err.message);
  }
}
/*debashish.barik
 *Script#528
 */
function CWM_ELP_DPL_528_WTUA_SetTransactionReferenceLicenseStatus(pTransCapId,pRefLicenseNumber,pTargetStatus){
   //Transaction License status
   updateAppStatus(pTargetStatus, "Updated via Script",pTransCapId);
   //Reference License Status
  var vRefLP = getRefLicenseProf(pRefLicenseNumber);
  if(vRefLP!=null){
    vRefLP.setPolicy(pTargetStatus);
    aa.licenseScript.editRefLicenseProf(vRefLP);
  }
}

/*
*SCRIPT:528 , debashish.barik
*/
function CWM_ELP_XXX_WTUA_DPL_AddConditionforNeedsRelationShip(vChildLicense){
logDebug("CWM_ELP_XXX_WTUA_DPL_AddConditionforNeedsRelationShip Start: vChildLicense:"+vChildLicense);
  var vlicSeqModel = getRefLicenseProf(vChildLicense.toString());
  var licSeq = vlicSeqModel.getLicSeqNbr();
var vLicenceeName = getLPLicenceeName(vChildLicense);
if(!vLicenceeName ){
vLicenceeName ="";
}

  var dueDt = addDate(sysDate,30);
  var dueDate = aa.date.getScriptDateTime(aa.util.parseDate(dueDt));
  var vAddCAEResult = aa.caeCondition.addCAECondition(licSeq, "Notice", "Need Relationship", "Need Relationship with in 30 Days[For "+vLicenceeName +"-License#"+vChildLicense+"]", null, null, "Notice", "Applied", sysDate, dueDate, sysDate, sysDate, systemUserObj, systemUserObj);
  if (vAddCAEResult.getSuccess()) {
    logDebug("Successfully added licensed professional SEQ Number (" + licSeq + ") condition (" + "Notice"+ ") " + "Notice");
  } else {
    logDebug("**ERROR: adding licensed professional SEQ Number(" + licSeq + ") condition (" + "Notice"+ "): " + vAddCAEResult.getErrorMessage());
  }
logDebug("CWM_ELP_XXX_WTUA_DPL_AddConditionforNeedsRelationShip End");  
}





function CWM_ELP_528_DPL_addNeedRelationShipConditionType6LicenseRecordAmendment(){
  var myTable = loadASITable("RELATIONSHIP APPROVAL",capId );
  var vChangeType ;
  var vLicenseType ;
  var vChildLicense ;
  for(x in myTable ){
    logDebug("myTable1 :"+myTable[x]["Change Type"] );  
    logDebug("myTable2:"+myTable[x]["License Type"] );
    logDebug("myTable3 :"+myTable[x]["License Number"] );
    vChangeType = myTable[x]["Change Type"];
    vChildLicense = myTable[x]["License Number"];
    vLicenseType = myTable[x]["License Type"];
    var vThirtyDayWarning = myTable[x]["30 Day Warning"];
logDebug("vLicenseType :"+vLicenseType );
    vThirtyDayWarning = vThirtyDayWarning.toString();
    if(vChildLicense!=null && vChildLicense!="" ){
       vChildLicense = vChildLicense.toString();
       if( vChildLicense.indexOf("-") == -1){
         logDebug("creating alt id from the license number:"+vChildLicense);
         if(vLicenseType == "Type 6 Funeral Director" || vLicenseType == "Type 6"){
           vChildLicense = vChildLicense+"-"+"EM"+"-"+"6";
         }else if(vLicenseType == "Funeral Establishment" ){
           vChildLicense = vChildLicense+"-"+"FE"+"-"+"FE";
         }else if(vLicenseType == "Type 3 Funeral Director" || vLicenseType == "Type 3"){
           vChildLicense = vChildLicense+"-"+"EM"+"-"+"3";
         }
       }
       if(vChangeType=="Add"){
         if(vThirtyDayWarning.equals("CHECKED")){
              logDebug("ADding condition start");
              CWM_ELP_XXX_WTUA_DPL_AddConditionforNeedsRelationShip(vChildLicense);
              logDebug("ADding condition end");
            }else{
              logDebug("ERROR::can not proceed as either or both of vParentRecordCap and vChildRecordCap are null/empty");
              //logDebug("vParentRecordCap:"+vParentRecordCap ",vChildRecordCap:"+vChildRecordCap);
            }
       }
     }
  }
  
}


/**
 * @Description the status of the license
 * @pLicenseNumberCap : capModel of the license number(alt id),
 * @by: debashish.barik
 * @Dt:2/10/2016
 * 
 **/
function getMyLicenseStatus(pLicenseNumberCap) {
  if (pLicenseNumberCap && pLicenseNumberCap != null) {
    var vALtId = pLicenseNumberCap.getCustomID();
    vALtId = String(vALtId);
    var vLic = getRefLicenseProf(vALtId);
    if (vLic && vLic != null) {
      var vMyCapStatus = vLic.getPolicy();
      return vMyCapStatus;
    }
  }
}

// calculating the Expiration Date for Speech and Audiology/Audiologist Record. Script#398. added by tofek
function CWM_ELP_398_DPL_WTUA_AudiologistExpDate(itemCap)
{
    try
    {
    //Update by Evan Cai for EPLACE-1979 from line 27312 to line27368
     var capContacts = null;
        var capContactsResult = aa.people.getCapContactByCapID(itemCap);
        if (capContactsResult.getSuccess()) {
            capContacts = capContactsResult.getOutput();
        } else {
            logDebug("**ERROR: No Contact found for license: "+ itemCap.getCustomID());
        }
        var birthDate = null;
        if(capContacts && capContacts!=null)
        {
            for (xx in capContacts)
            {
                var capContact = capContacts[xx];
                if(capContact && capContact.getCapContactModel() && capContact.getCapContactModel()!=null)
                {
                    if (capContact.getCapContactModel().getBirthDate()!=null)
                    {
                        birthDate = capContact.getCapContactModel().getBirthDate()
                        break;
                    }
                }
                
            }
        }
        var expDateString = null;
        if(birthDate!=null)
        {
            var now = new Date();
            var newDate = new Date(birthDate.getTime());
            if(newDate!=null)
            {
                if(newDate.getMonth()==1 && newDate.getDate()==29)
                {
                    newDate.setMonth(2);
                    newDate.setDate(1);
                }
                if(newDate.getMonth()>now.getMonth())
                {
                    newDate.setFullYear(now.getFullYear() + 2);
                }
                else if (newDate.getMonth()<now.getMonth())
                {
                     newDate.setFullYear(now.getFullYear() + 3);
                }
                else
                {
                    if(newDate.getDate()>=now.getDate())
                    {
                        newDate.setFullYear(now.getFullYear() + 2);
                    }
                    else
                    {
                        newDate.setFullYear(now.getFullYear() + 3);
                    }
                }
                expDateString=newDate.getMonth()+1 + "/" + newDate.getDate() + "/" + newDate.getFullYear();
            }
        }
 
        var licCustId = itemCap.getCustomID();      
        thisLic= new licenseObject(licCustId,itemCap);
        //var expDateString = newExpDate.getMonth()+1 + "/" + newExpDate.getDate() + "/" + newExpDate.getFullYear();
        thisLic.setExpiration(expDateString); 
                     thisLic.setStatus("Active");   
    }
    catch(err)
    {
        showMessage=true;
        comment("Error on WTUA function CWM_ELP_398_DPL_WTUA_AudiologistExpDate, Please contact administrator");
    }
}  

//Script 32
/* @desc This method Validates ASI Tables are not empty
 * Release C Master Script List ID: 32
 * Event: ASB
 */
function CWM_ELP_32_ASB_DPL_Enter_At_Least_One_ASITRow()
{
  loadASITables();
  var employeeInfo = 0;
    
  var minRows = 1;
  try
  {
    employeeInfo = EMPLOYEEINFORMATION.length; 
    
  }
  catch(err)
  {
    if(employeeInfo < minRows )
    {
      showMessage=true;
      comment("At least one record should be there in Employee Information table.");
      cancel=true;
    }
  }
}
/* @desc This method Validates ASI Tables are not empty
 * Release C Master Script List ID: 32
 * Event: ASB
 */
function CWM_ELP_32_ASB_DPL_Enter_At_Least_One_ASITRow_ACA()
{
  loadASITables4ACA();
            var arr = loadASITable("EMPLOYEE INFORMATION");
      var count =0;

      for (var i in arr){
         count= count+1;

      }
    
    if(count==0){
      cancel = true;
      showMessage = true;
      comment("At least one row in the EMPLOYEE INFORMATION ASIT.");
    }

}

function CWM_ELP_DPL_31_existingBusinessCheck() {
  try {
    var fvPeop = aa.people.createPeopleModel().getOutput().getPeopleModel();
    var capContact = null;
    if(publicUser){
      capContact = getContactByType4ACA("Business");
    }
    else{
      capContact = getContactByTypeAA("Business");//.getPeople();
    }
    fvPeop["businessName"] = capContact.getBusinessName(); 
    var temp = aa.people.getPeopleByPeopleModel(fvPeop).getOutput();
    var appReason = AInfo["Reason for Application"];
logDebug("appReason :"+appReason );
    if ((appReason == "New Application") && (temp.length != 0)) {
      cancel = true;
      showMessage = true;
      comment("The selected Entity Name has already been used, please return to the Contact page and enter a new Entity Name on the Business contact");
    }
  } catch (err) {
    //comment("An error has occurred in CWM_ELP_DPL_31_existingBusinessCheck."+err.message);
    logDebug("An error has occurred in CWM_ELP_DPL_31_existingBusinessCheck."+err.message);
  }
}



/* @desc This method is used to get contact model for ACA based on contact type.
 *
 */
function getContactByType4ACA(conType) {
   var capContactArray = cap.getContactsGroup().toArray() ;

   for(thisContact in capContactArray) {
      if((capContactArray[thisContact].getPeople().contactType).toUpperCase() == conType.toUpperCase())
         return capContactArray[thisContact].getPeople();
   }

   return false;
}

function checkRefLpExistsOnLicense(transLicNum,transLicBC,transLicTC,refLicNum, refLicBC, refLicTC) {
        //check if reference license exists on transaction license
        //transLicNum is the license number of the transaction license to check. can be # or full alt id
        //transLicBC is  the board code of the transaction license to check
        //transLicTC is  the Type Class of the transaction license to check
        //refLicNum is the license number of the reference license to check. can be # or full alt id
        //refLicBC is  the board code of the reference license to check
        //refLicTC is  the Type Class of the reference license to check
        var result = false;
    //showDebug = 3;
        //get the RefLP for each
        var vRefLP = getRefLicenseProf(refLicNum,refLicBC,refLicTC);
        var pRecordLP = getRefLicenseProf(transLicNum, transLicBC, transLicTC);
        if(vRefLP && pRecordLP){
                                          logDebug("GOT vRefLP & pRecordLP");
          //get the lic num, board code and type class of the LP 
        var vreflpBusinessLicense = vRefLP.businessLicense;
        var vreflpBoard = vRefLP.comment;
        var vreflpStateLicense = vRefLP.stateLicense;
        var vreflpStateLicense2= vRefLP.stateLicense+"-"+vreflpBusinessLicense;
        //build a full alt id for the transaction license
        var pRecordAltId = pRecordLP.stateLicense+"-"+pRecordLP.comment+"-"+pRecordLP.businessLicense;
        var pRecordCap = aa.cap.getCapID(pRecordAltId).getOutput();
        var capLicenseResult = aa.licenseScript.getLicenseProf(pRecordCap);
        if(capLicenseResult.getSuccess()){
          var capLicenseArr = capLicenseResult.getOutput();
          for(i in capLicenseArr){
            logDebug("parent License: " + capLicenseArr[i].getBusinessLicense());
            // Get child reference LP
logDebug("------------- Tofek ------------------");
            
            logDebug("vreflpBusinessLicense ="+vreflpBusinessLicense+ "== capLicenseArr[i].getBusinessLicense()="+capLicenseArr[i].getBusinessLicense());
            
            logDebug("vreflpStateLicense ="+vreflpStateLicense+ "== capLicenseArr[i].getLicenseNbr() ="+capLicenseArr[i].getLicenseNbr());
            
            logDebug("vreflpBoard ="+vreflpBoard+ "== capLicenseArr[i].getComment() ="+capLicenseArr[i].getComment());
            
            logDebug("vreflpStateLicense2 ="+vreflpStateLicense2+ "== capLicenseArr[i].getLicenseNbr() ="+capLicenseArr[i].getLicenseNbr());



            if((vreflpBusinessLicense == capLicenseArr[i].getBusinessLicense() && vreflpStateLicense == capLicenseArr[i].getLicenseNbr() && vreflpBoard == capLicenseArr[i].getComment()) || (vreflpBusinessLicense == capLicenseArr[i].getBusinessLicense() && vreflpStateLicense2 == capLicenseArr[i].getLicenseNbr()  && vreflpBoard == capLicenseArr[i].getComment())){
          //found the refLP
              result = true;
            }
          }
        }
        }
                         logDebug("result "+result);
      return result;
}


//added by preeti
function checkMinRows_Update(tName, minRows, errorMsg){
    try
    { 
    //pass the table name with space in the.
    var ownershipRow = tName.length;

      if(publicUser)
      {  
        loadASITables4ACA();
           if (ownershipRow < minRows){
            cancel = true; 
            showMessage = true;
            comment(errorMsg);
          }
      }else{
        loadASITablesBefore();
        if (ownershipRow < minRows){
            cancel = true; 
            showMessage = true;
            comment("lenght of OI table: "+ownershipRow);
            comment(errorMsg);
            }
    }
}
    
    catch(error){
      cancel = true; 
        showMessage = true;
      comment("checkMinRows has thrown an error. Please contact your administrator for help.");
        comment(error.message);
        comment("table length is :"+ownershipRow);
      }
      
    
  }



 

//Added by Ankush
function loadASITForACA() {

  //
  // Loads App Specific tables into their own array of arrays.  Creates global array objects
  //
  // Optional parameter, cap ID to load from.  If no CAP Id specified, use the capModel
  //
  var itemCap = capId;
  if (arguments.length == 1)
    {
    itemCap = arguments[0]; // use cap ID specified in args
    var gm = aa.appSpecificTableScript.getAppSpecificTableGroupModel(itemCap).getOutput();
    }
  else
    {
    var gm = cap.getAppSpecificTableGroupModel()
    }

  var ta = gm.getTablesMap();


  var tai = ta.values().iterator();

  while (tai.hasNext())
    {
    var tsm = tai.next();

    if (tsm.rowIndex.isEmpty()) continue;  // empty table

    var tempObject = new Array();
    var tempArray = new Array();
    var tn = tsm.getTableName();

    tn = String(tn).replace(/[^a-zA-Z0-9]+/g,'');

    if (!isNaN(tn.substring(0,1))) tn = "TBL" + tn  // prepend with TBL if it starts with a number

      var tsmfldi = tsm.getTableField().iterator();
    var tsmcoli = tsm.getColumns().iterator();
    var numrows = 1;

    while (tsmfldi.hasNext())  // cycle through fields
    {
    if (!tsmcoli.hasNext())  // cycle through columns
      {

      var tsmcoli = tsm.getColumns().iterator();
      tempArray.push(tempObject);  // end of record
      var tempObject = new Array();  // clear the temp obj
      numrows++;
      }
    var tcol = tsmcoli.next(); 
    var tval = tsmfldi.next().toString();//vTemp.getInputValue();
    tempObject[tcol.getColumnName()] = tval;
    }
    tempArray.push(tempObject);  // end of record
    var copyStr = "" + tn + " = tempArray";
    logDebug("ASI Table Array : " + tn + " (" + numrows + " Rows)");
    eval(copyStr);  // move to table name
    }

}

//ADDED BY Ankush ON 2/18/2016
function CWM_ELP_34_DPL_ASB_CheckMinRowPtcoOtherLicensesInMass()
{
  var ownershipRow = 0; 
  var minRows = 1;
  var flag = 0;
  
  if(!publicUser)
  {
    loadASITablesBefore();
  }
  else if(publicUser)
  {
    loadASITForACA();
  }
    
  try 
  {
    if(PTCOOTHERLICENSESINMASS)
    {
      ownershipRow = PTCOOTHERLICENSESINMASS.length;    
      for(x in PTCOOTHERLICENSESINMASS)
      {
        var col1 = PTCOOTHERLICENSESINMASS[x]["Other License Number"];
        var col2 = PTCOOTHERLICENSESINMASS[x]["Profession"];    
        if((col1.length() != 0) || (col2.length()!=0))
        {
          flag = 1;
        }
      }
      logDebug("Number of ownershipRow: "+ownershipRow);
      if(flag == 0)
      {
        cancel = true;
        showMessage = true;
        comment("Please indicate your license information for your professional licenses within Massachusetts not issued by DPL.");
      }
    }
  } 
  catch (ex) 
  {
    if (ownershipRow < minRows) 
    {
      //logDebug("No rows");
      cancel = true;
      showMessage = true;
      comment("Please indicate your license information for your professional licenses within Massachusetts not issued by DPL.");
    }
  }
}
//END OF FUNCTION: CWM_ELP_34_DPL_ASB_CheckMinRowPtcoOtherLicensesInMass

//ADDED BY Ankush ON 2/18/2016
function CWM_ELP_34_DPL_ASB_CheckMinRowPtcoLicensesOutsideMass()
{
  var ownershipRow = 0; 
  var minRows = 1;
  var flag = 0;
  
  if(!publicUser)
  {
    loadASITablesBefore();
  }
  else if(publicUser)
  {
     loadASITForACA();
  }
  
  try 
  {
    if(PTCOLICENSESOUTSIDEMASS)
    {
      ownershipRow = PTCOLICENSESOUTSIDEMASS.length;
      for(x in PTCOLICENSESOUTSIDEMASS)
      {
        var col1 = PTCOLICENSESOUTSIDEMASS[x]["Other License Number"];
        var col2 = PTCOLICENSESOUTSIDEMASS[x]["Profession"];    
        var col3 = PTCOLICENSESOUTSIDEMASS[x]["State"];   
        if((col1.length() != 0) || (col2.length()!=0) || (col3.length()!=0))
        {
          flag = 1;
        }
      }
      //logDebug("Number of ownershipRow: "+ownershipRow);
      if(flag == 0)
      {
        cancel = true;
        showMessage = true;
        comment("Please indicate your license information for your professional licenses issued by another state.");
      }
    }
  } 
  catch (ex) 
  {
    if (ownershipRow < minRows) 
    {
      cancel = true;
      showMessage = true;
      comment("Please indicate your license information for your professional licenses issued by another state.");
    }
    
  }
}

function CWM_ELP_34_DPL_ASB_CheckMinRowPtcoLicensesOutsideMass()
{
  var ownershipRow = 0; 
  var minRows = 1;
  var flag = 0;
  try 
  {
    if(!publicUser){
      loadASITablesBefore();
    }else if(publicUser){
      loadASITForACA();
    }
    ownershipRow = PTCOLICENSESOUTSIDEMASS.length;
    for(x in PTCOLICENSESOUTSIDEMASS){
      var col1 = PTCOLICENSESOUTSIDEMASS[x]["Other License Number"];
      var col2 = PTCOLICENSESOUTSIDEMASS[x]["Profession"];    
      var col3 = PTCOLICENSESOUTSIDEMASS[x]["State"];   
      if((col1.length() != 0) || (col2.length()!=0) || (col3.length()!=0)){
         flag = 1;
      }
    }
    logDebug("Number of ownershipRow: "+ownershipRow);
  } 
  catch (ex) 
  {
    if (ownershipRow < minRows) 
    {
      flag = 0;
    }
    
  }
  if(flag == 0){
    cancel = true;
    showMessage = true;
    comment("Please indicate your license information for your professional licenses issued by another state.");
  } 
}

//END OF FUNCTION: CWM_ELP_34_DPL_ASB_CheckMinRowPtcoLicensesOutsideMass
//ADDED BY Ankush ON 2/18/2016
function CWM_ELP_34_DPL_ASB_CheckMinRowPtcoOtherLicensesInDpl()
{
  var ownershipRow = 0; 
  var minRows = 1;
  var flag = 0;
  
  if(!publicUser)
  {
    loadASITablesBefore();
  }
  else if(publicUser)
  {
    loadASITForACA();
  }

  try 
  {
    if(PTCOOTHERLICENSESINDPL)
    {
      ownershipRow = PTCOOTHERLICENSESINDPL.length;
      
      //comment("Number of ownershipRow: "+PTCOOTHERLICENSESINDPL[0]["License Number"]);
      for(x in PTCOOTHERLICENSESINDPL)
      {
        var col1 = PTCOOTHERLICENSESINDPL[x]["License Number"];
        var col2 = PTCOOTHERLICENSESINDPL[x]["Profession"];   
        if((col1.length() != 0) || (col2.length()!=0))
        {
           flag = 1;
        }
      }
      
      if(flag == 0)
      {
        cancel = true;
        showMessage = true;
        comment("Please indicate your license information for professional licenses within DPL.");
      }
    } 
  } 
  catch (ex) 
  {
    if (ownershipRow < minRows) 
    {
      cancel = true;
      showMessage = true;
      comment("Please indicate your license information for professional licenses within DPL.");
    }
  }
}

// added by tofek. Script#340
// checking the ASIT row.
function CWM_ELP_340_DPL_ASB_CheckMinRowLicneseInOtherJuridictions()
{
  if(!publicUser){
    loadASITablesBefore();
  }else if(publicUser){
    loadASITables4ACA_Custom();
  }
  var ownershipRow = 0; 
  var minRows = 1;
  try 
  {
    ownershipRow = LICENSEINOTHERJURISDICTIONS.length;
    logDebug("Number of ownershipRow: "+ownershipRow);
  } 
  catch (ex) 
  {
    if (ownershipRow < minRows) 
    {
      cancel = true;
      showMessage = true;
                         logDebug("Number of ownershipRow2: "+ownershipRow);
      comment("<font color='red'><b>**ERROR:You must add at least 1 row in License In LICENSE IN OTHER JURISDICTIONS.</b></font>");
    }
    
  }
  
}

function getContactASIField(vcontact, conASI, vCap) {
//looks up the value of a contact asi field 
//vcontact is the contact type, confield is the field name and vCap is the capid
if(!vCap){
vCap = capId;
}
  var fieldValue;
  var capContactResult = aa.people.getCapContactByCapID(vCap);
  if(capContactResult.getSuccess())
  {
    capContactResult=capContactResult.getOutput();
    for(yy in capContactResult)
    {
      capContact = capContactResult[yy];
      peopleModel = capContact.getPeople();
      var conAppCon = peopleModel.getContactType();
      if (conAppCon == vcontact)
      {
      var genTemplateObj = peopleModel.getTemplate();
      if (genTemplateObj) {
            var formsResult = genTemplateObj.getTemplateForms().toArray();
            if (formsResult) {
              var asiResult = formsResult[0];
              var subGroups = asiResult.getSubgroups();
              for (var i = 0; i < subGroups.size(); i++) {
                var subGroup = subGroups.get(i);
                var asiFields = subGroup.getFields();
                for (var fieldIndex = 0; fieldIndex < asiFields.size(); fieldIndex++) {
                  var field = asiFields.get(fieldIndex);
                  if (field.getFieldName() == conASI) {
                    fieldValue = field.defaultValue;
                      logDebug("found the contact");
                      logDebug("Field Value:"+ fieldValue);
                  }

                }
              }
            }
          }
      }       
    }
  }
  return fieldValue;
}

function loadASITables4ACAXX() {
   //
   // Loads App Specific tables into their own array of arrays.  Creates global array objects
   //
   // Optional parameter, cap ID to load from.  If no CAP Id specified, use the capModel
   //
   var itemCap = capId;
   if (arguments.length == 1) {
      itemCap = arguments[0]; // use cap ID specified in args
      var gm = aa.appSpecificTableScript.getAppSpecificTableGroupModel(itemCap).getOutput();
   } else {
      var gm = cap.getAppSpecificTableGroupModel()
   }
   var ta = gm.getTablesMap();
   var tai = ta.values().iterator();
   while (tai.hasNext()) {
      var tsm = tai.next();
      if (tsm.rowIndex.isEmpty())
         continue; // empty table
      var tempObject = new Array();
      var tempArray = new Array();
      var tn = tsm.getTableName();
      tn = String(tn).replace(/[^a-zA-Z0-9]+/g, '');
      if (!isNaN(tn.substring(0, 1)))
         tn = "TBL" + tn // prepend with TBL if it starts with a number
      var tsmfldi = tsm.getTableField().iterator();
      var tsmcoli = tsm.getColumns().iterator();
      var numrows = 1;
      while (tsmfldi.hasNext()) // cycle through fields
      {
         if (!tsmcoli.hasNext()) // cycle through columns
         {
            var tsmcoli = tsm.getColumns().iterator();
            tempArray.push(tempObject); // end of record
            var tempObject = new Array(); // clear the temp obj
            numrows++;
         }
         var tcol = tsmcoli.next();
         var tval = tsmfldi.next();

         //var tval = tnxt.getInputValue();
         tempObject[tcol.getColumnName()] = tval;
      }
      tempArray.push(tempObject); // end of record
      var copyStr = "" + tn + " = tempArray";
      logDebug("ASI Table Array : " + tn + " (" + numrows + " Rows)");
      eval(copyStr); // move to table name
   }
}

// DPL Release C: Script ID: 188.0 added by SKumar
function CWM_ELP_188_DPL_ASB_validateMALicenseNbr() 
{
    try
    {
        // get the board code using lookup Standard Choice
    var boardCode = lookup("BOARDS", "Home Inspectors");
        var vSuperMALicNbr = AInfo["MA License Number"];

    logDebug("MA License Number: " + vSuperMALicNbr);
    
    // no need to check for License Type variable
    if (vSuperMALicNbr != undefined && vSuperMALicNbr != null && vSuperMALicNbr != "")
        {
            var licenseTC = "1";
            var isMALicenseActive = isLicenseActive(vSuperMALicNbr, boardCode, licenseTC);
            if (!isMALicenseActive)
      {
                // block user from continuing with submission of the application
        cancel = true;
                showMessage = true;
                //message = "";
                comment(vSuperMALicNbr + " is not a valid License Number. Contact the Board for further instructions.");
            }
        }
    }
    catch(err)
    {
        showMessage=true;
    logDebug("Error in CWM_ELP_188_DPL_ASB_validateMALicenseNbr: " + err.message);
        comment("Error on ASB function CWM_ELP_188_DPL_ASB_validateMALicenseNbr, Please contact administrator");
    }
} // END OF FUNCTION: CWM_ELP_188_DPL_ASB_validateMALicenseNbr() 


function CWM_ELP_DPL_267_validateDocs() {
  try {
    if (publicUser) {
      var docName = "Electrical/Plumbing or No Work Inspection Form";
      if(appMatch("License/Cosmetology/Shop/Renovation")){
        docName = "Inspection Form";
      }
                         var docName2 = "Labeled Floor Plan";
      var inspectionForm = false;
      var floorPlan = false;

      inspectionForm = docCheck(docName);
      floorPlan = docCheck(docName2);
      
      if (!inspectionForm) {
        cancel = true;
        showMessage = true;
        comment("You must upload your inspection form in order to proceed.");
      }
      if (!floorPlan) {
        cancel = true;
        showMessage = true;
        comment("You must upload your labeled floor plan in order to proceed.");
      }
    }
  } catch (err) {
    logDebug("An error occurred in CWM_ELP_DPL_267_validateDocs.")
    logDebug(err.message);
  }
}
function CWM_ELP_DPL_236_WTUB_validateLicType() {
  try {
    if (wfTask == "Validate" && wfStatus == "Approved to Sit for Exam") {
      var approvedLT = getAppSpecific("Approved License Type", capId);
      if ((!approvedLT) || (approvedLT == "")) {
        cancel = true;
        showMessage = true;
        comment("The Approved License Type field must be populated.");
      }
    }
  } catch (err) {
    logDebug("An error occurred in CWM_ELP_DPL_236_WTUB_validateLicType.");
    logDebug(err.message);
  }
}

/*
 *If the application is being entered on ACA 
 *AND 
 *the ASI "Application Type" has a value entered of "New Establishment"
 * Then:
 *Then skip the ACA page with the ASI Group "Funeral Establishments Affected".  An applicant should only see this page if they answered the *'Application Type" as "New Establishment due to Transfer of Ownership".
 *
 */
function CWM_ELP_682_ACA_DPL_skipFunEstAffected(){
var vAppType = AInfo["Application Type"];
  if(vAppType!=null && vAppType!='undefined' && vAppType=='New Establishment'){
    // StepNumber:Tab number of the ACA.
    // PageNumber:Page number of the tab.
    aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '2', 'PageNumber':'3'}}");
  }
}

//ADDED BY Ankush ON 2/23/2016
function CWM_ELP_401_DPL_ASB_CheckMinRowLicenseinOtherJurisdictions()
{
  var ownershipRow = 0; 
  var minRows = 1;
  var flag = 0;

  try 
  {
    if(!publicUser){
      loadASITablesBefore();
    }else if(publicUser){
      loadASITForACA();
    }
    ownershipRow = LICENSEINOTHERJURISDICTIONS.length;

    for(x in LICENSEINOTHERJURISDICTIONS){
      var col1 = LICENSEINOTHERJURISDICTIONS[x]["License Type"];
      var col2 = LICENSEINOTHERJURISDICTIONS[x]["License Number"];    
      var col3 = LICENSEINOTHERJURISDICTIONS[x]["Issuing State/Jurisdiction/Foreign Country"];    
      var col4 = LICENSEINOTHERJURISDICTIONS[x]["Expiration Date"];   
      var col5 = LICENSEINOTHERJURISDICTIONS[x]["Issue Date"];    
      var col6 = LICENSEINOTHERJURISDICTIONS[x]["Status"];    
      var col7 = LICENSEINOTHERJURISDICTIONS[x]["I have already forwarded or requested forwarding of my verification letter"].toString();   
      if((col1.length() != 0) || (col2.length()!=0) || (col3.length()!=0) || (col4.length()!=0) || (col5.length()!=0) || (col6.length()!=0) || (col7.length()!=0)){
         flag = 1;
      }
    }
  } 
  catch (ex) 
  {
    if (ownershipRow < minRows) 
    {
      flag = 0;
    }
  }
  if(flag == 0){
    return flag;
  }
  return flag;  
}

/*1. Do not allow the appllication to proceed via ACA
 *2. Display error message "When applying through Reciprocity, License in Other Jurisdictions must contain your current license information"
 *Added by Ankush
 */
function CWM_ELP_DPL_401_ASB_validateASITOnReciprocity() {
  try {
    var vYouAreApplyingThrough = null;
    //Get AppSpecificInfo details
    if (publicUser) // HANDLE ACA PAGEFLOW
    {
      /*var cap = aa.env.getValue('CapModel');
      var currentCapId = cap.getCapID();*/
      vYouAreApplyingThrough = AInfo["You are applying through"];
    }else if(!publicUser){
      useAppSpecificGroupName = true;
      var myAInfo = new Array();
      loadAppSpecificBefore(myAInfo);
      vYouAreApplyingThrough = myAInfo["APPLICATION TYPE.You are applying through"];
      useAppSpecificGroupName = false;
    }   
    if (vYouAreApplyingThrough != null &&  vYouAreApplyingThrough == "Reciprocity") {
      var rowCountFlag = CWM_ELP_401_DPL_ASB_CheckMinRowLicenseinOtherJurisdictions();
      if(rowCountFlag == 0){
        cancel = true;
        showMessage = true;
        comment("When applying through Reciprocity, License in Other Jurisdictions must contain your current license information.");
      }
    }
  } catch (err) {
    useAppSpecificGroupName = false;
    cancel = true;
    showMessage = true;
    comment("ERROR:When applying through Reciprocity, License in Other Jurisdictions must contain your current license information.");
  }
}// END OF FUNCTION: CWM_ELP_DPL_401_ASB_validateASITOnReciprocity

//SCRIPT#410,411, debashish.barik, DT:2/23/2016
function CWM_ELP_410_411_DPL_checkMinRowforASITJurisdications(pApplyingTh,pJurisdiction)
{
  var ownershipRow = 0; 
  var minRows = 1;
  var flag = 1;
  try 
  {
    if(!publicUser){
      loadASITablesBefore();
    }else if(publicUser){
      //loadASITForACA();
loadASITables4ACA_Custom();//updated for  defect#11035 prateek
    }

    ownershipRow = LICENSEINOTHERJURISDICTIONS.length;    
    for(x in LICENSEINOTHERJURISDICTIONS){
      var col1 = LICENSEINOTHERJURISDICTIONS[x]["License Type"];
      var col2 = LICENSEINOTHERJURISDICTIONS[x]["License Number"];
      var col3 = LICENSEINOTHERJURISDICTIONS[x]["Issuing State/Jurisdiction/Foreign Country"];
      var col4 = LICENSEINOTHERJURISDICTIONS[x]["Expiration Date"];
      var col5 = LICENSEINOTHERJURISDICTIONS[x]["Issue Date"];
      var col6 = LICENSEINOTHERJURISDICTIONS[x]["Status"];
      var col7 = LICENSEINOTHERJURISDICTIONS[x]["I have already forwarded or requested forwarding of my verification letter"];

logDebug("col1:"+col1);logDebug("col2:"+col2);logDebug("col3:"+col3);logDebug("col4:"+col4);logDebug("col5:"+col5);logDebug("col6:"+col6);logDebug("col7:"+col7);
      if((col1.length() == 0) || (col2.length()==0)|| (col3.length()==0)|| (col4==null || col4=='undefined')|| (col5==null || col5=='undefined')|| (col6.length()==0)|| (col7==null || col7=='undefined')){
         flag = 0;
        break;
      }
    }
    logDebug("Number of ownershipRow: "+ownershipRow);
  } 
  catch (ex) 
  {
    if (ownershipRow < minRows) 
    {
      flag = 0;
    }
    
  }
  if(flag == 0){
    cancel = true;
    showMessage = true;
    if(pApplyingTh == 'Reciprocity'){
        comment("When applying through Reciprocity, License in Other Jurisdictions must contain your current license information");
    }
    if(pJurisdiction == 'Yes'){
        comment("When ASI-Have you ever been professionally licensed or certified in any jurisdiction = YES ,ASIT License in Other Jurisdictions must contain your current license information");
    }

  }
  
}
//debashsih.barik, script#410,411,Dt:2/23/2016
function CWM_ELP_410_411_DPL_ASB_checkMinRowForASIT(){

  var myAInfo = new Array();
  useAppSpecificGroupName = true;
  if(!publicUser){//AA
    loadAppSpecificBefore(myAInfo);
  }else if(publicUser){//ACA
    loadAppSpecific4ACA(myAInfo);
  }
  var vApplyingTh   = myAInfo["APPLICATION TYPE.You are applying through"];
  var vJurisdiction = myAInfo["LICENSE IN OTHER JURISDICTIONS.Have you ever been professionally licensed or certified in any jurisdiction"];
  useAppSpecificGroupName = false;
  CWM_ELP_410_411_DPL_checkMinRowforASITJurisdications(vApplyingTh,vJurisdiction);
}

// added by Ankush. Script#812. updated by Debashish.barik, CR-540
// this function will check uploaded document..
// this will execute only on ACA.
function CWM_ELP_812_DPL_ACA_OutOfStateApplication() {
  var flag = true;
  // Passport Photo
  var docName = "Passport Photo";
  var isPassportPhotoUploaded = docCheck(docName);
  if (!isPassportPhotoUploaded) {
    flag = false;
  }

  // Copy of Driver's License
  var docName1 = "Copy of Driver's License";
  var isDriverLicenseUploaded = docCheck(docName1);
  if (!isDriverLicenseUploaded) {
    flag = false;
  }
  //Employer's Affidavit
  var docName2 = "Employer's Affidavit";
  var isEmployerAffidavitUploaded = docCheck(docName2);
  if (!isEmployerAffidavitUploaded) {
    flag = false;
  }
  //RCORI Notarized Form
  var docName3 = "CORI Notarized Form";
  var isCORINotarizedUploaded = docCheck(docName3);
  if(!isCORINotarizedUploaded){   
    flag = false;
  }
  if (!flag) {
    cancel = true;
    showMessage = true;
    comment("Please upload the required documents as specified in the instructions.");

  }
} // END OF FUNCTION: CWM_ELP_812_DPL_ACA_OutOfStateApplication

function CWM_ELP_DPL_650_ASB_validateLicNum() {
var approvedLicType = AInfo["Approved License Type"];

    if(!approvedLicType){
          cancel = true;
          showMessage = true;
          comment("The Approved License Type field must be populated.");
          aa.print("The Approved License Type field must be populated.");
    }

}
function CWM_ELP_DPL_190_validateIssueDate() {
  try {
    var variable0 = AInfo["Date of Associate Home Inspector License"];
    var issueDate = new Date(variable0);
    var today = new Date();
    var todayYear = today.getFullYear();
    today.setFullYear(todayYear - 1);

    if (issueDate > today) {
      cancel = true;
      showMessage = true;
      comment("Invalid Date - Associate Home Inspector License must be held for at least 1 year");
    }
  } catch (err) {
    logDebug("An error has occurred in CWM_ELP_DPL_190_validateIssueDate.");
    logDebug(err.message);
  }
}

//SCRIPT#221,debashish.barik,dt:2/24/2016
function CWM_ELP_221_DPL_checkLicenseType1(){
  var myAInfo = new Array();
  useAppSpecificGroupName = true;
  var flag = 1;
  var vIsActive = false;
  var vIsType2 = false;

  try{
    if(!publicUser){//AA
      loadAppSpecificBefore(myAInfo);
    }else if(publicUser){//ACA
      loadAppSpecific4ACA(myAInfo);
    }
    var vLicenseNum   = myAInfo["LICENSE INFORMATION.License Number"];

    if(vLicenseNum!=null && vLicenseNum!='undefined' && vLicenseNum!=""){
      vLicenseNum = vLicenseNum.toString();
      if(vLicenseNum.indexOf("-") < 0){
        vLicenseNum = vLicenseNum + "-" + "HD" + "-" + "2"; 
        vIsActive = isLicenseActive(vLicenseNum, "HD", "2");
        vIsType2 = true;
      }else{
        var vLiceArr = vLicenseNum.split("-");
        var vLic = vLiceArr[0];
        var vBoard = vLiceArr[1];
        var vType = vLiceArr[2];
        vIsActive = isLicenseActive(vLic, vBoard, vType);
                             }  
      var vLicenseNumCapId1 = aa.cap.getCapID(vLicenseNum).getOutput();
        if(vLicenseNumCapId1!=null){
          var vCapType = aa.cap.getCap(vLicenseNumCapId1).getOutput().getCapType().toString();
          var vLicArr = vCapType.split("/");
          if(vLicArr[2]=="Type 2"){
            vIsType2 = true;
          }
        }   

      //}
      if(vIsActive && vIsType2){
        var vLicenseNumCapId = aa.cap.getCapID(vLicenseNum).getOutput();
        var vLicStatus = getMyLicenseStatus(vLicenseNumCapId);//get license status here
        if(!matches(vLicStatus, "Current")){
          flag = 0;
        }else{
          logDebug("Valid status");
        }
      }else{
        flag = 0;
        logDebug("License is not active/ or Not a Type 1 license");
      }

    }else{
      flag = 0;
    }

    if(flag==0){
      cancel = true;
      showMessage = true;
      comment("The License number entered is not valid or Current.  Please contact the Board with any questions.");
    }

    useAppSpecificGroupName = false;
  }catch(err){
    logDebug("ERROR**:"+err.message);
    cancel = true;
    showMessage=true;
    comment("Error on function CWM_ELP_221_DPL_checkLicenseType1, Please contact administrator:"+err.message);
  }
}

function copyContactsByCapContactTypeWithASI(pFromCapId, pToCapId, pFromContactType, pToContactType, pStartDate, pLicenseNumber) {
  //Copies all contacts from pFromCapId to pToCapId
  //where type == pContactType
  if (pToCapId == null)
    var vToCapId = capId;
  else
    var vToCapId = pToCapId;

  var capContactResult = aa.people.getCapContactByCapID(pFromCapId);
  var copied = 0;
  if (capContactResult.getSuccess()) {
    var Contacts = capContactResult.getOutput();
    for (yy in Contacts) {
      if (Contacts[yy].getCapContactModel().getContactType() == pFromContactType) {
        var newContact = Contacts[yy].getCapContactModel();
        var addressList = aa.address.getContactAddressListByCapContact(newContact).getOutput();
        newContact.setCapID(vToCapId);
        if (pStartDate != null) {
          var vStartDate = new Date(pStartDate);
          newContact.setStartDate(vStartDate);
        }
        newContact.setContactType(pToContactType);
                                 newContact.setPrimaryFlag("N");
        var asiTemplate = null;
        if ((pToContactType == "Sponsor") || (pToContactType == "PT Compliance Officer")) {
          asiTemplate = aa.genericTemplate.getTemplateStructureByGroupName("CT-SPONSOR").getOutput();
          setTemplateValueByForm(asiTemplate, "LICENSE NUMBER", "License Number", pLicenseNumber);
        } else if (pToContactType == "Funeral Establishment") {
          asiTemplate = aa.genericTemplate.getTemplateStructureByGroupName("CT-TR-BEOWN").getOutput();
          setTemplateValueByForm(asiTemplate, "LICENSE NUMBER", "License Number", pLicenseNumber);
        } else if (pToContactType == "Manager") {
          //Added for Script#174
          logDebug("Editing License number of Manager contact");
          asiTemplate = aa.genericTemplate.getTemplateStructureByGroupName("CT-MAN").getOutput();
          setTemplateValueByForm(asiTemplate, "ADDITIONAL INFO", "License Number", pLicenseNumber);
        } else if (pToContactType == "Master Barber") { //RTC#10554,debashish.barik
          asiTemplate = aa.genericTemplate.getTemplateStructureByGroupName("CT-MAS-BAR").getOutput();
          logDebug("asiTemplate:" + asiTemplate);
          setTemplateValueByForm(asiTemplate, "ADDITIONAL INFO", "License Number", pLicenseNumber);
        }
        newContact.setTemplate(asiTemplate);
        //aa.people.editCapContact(capContactModel);
        aa.people.createCapContact(newContact);
        //debashish.barik ,coping Address, START
        var newPeople = newContact.getPeople();
        
        // contact address copying
        if (addressList) {
          for (add in addressList) {
            var transactionAddress = false;
            contactAddressModel = addressList[add].getContactAddressModel();
            if (contactAddressModel.getEntityType() == "CAP_CONTACT") {
              transactionAddress = true;
              contactAddressModel.setEntityID(parseInt(newPeople.getContactSeqNumber()));
            }
            // Commit if transaction contact address
            if (transactionAddress) {
              var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
              contactAddressModel.setContactAddressPK(newPK);
              aa.address.createCapContactAddress(vToCapId, contactAddressModel);
            }
            // Commit if reference contact address
            else {
              // build model
              var Xref = aa.address.createXRefContactAddressModel().getOutput();
              Xref.setContactAddressModel(contactAddressModel);
              Xref.setAddressID(addressList[add].getAddressID());
              Xref.setEntityID(parseInt(newPeople.getContactSeqNumber()));
              Xref.setEntityType(contactAddressModel.getEntityType());
              Xref.setCapID(vToCapId);
              // commit address
              aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
            }
          }
          // end for
        }
        //debashish.barik ,coping Address, END
        copied++;
        logDebug("Copied contact from " + pFromCapId.getCustomID() + " to " + vToCapId.getCustomID());
      }

    }
  } else {
    logMessage("**ERROR: Failed to get contacts: " + capContactResult.getErrorMessage());
    return false;
  }
  return copied;
}


function CWM_ELP_6980_Lockbox_RE_check(renewalCapId){
//added for defect 3717 pt 1 and defect 3736
var vCheck = true;
if (appMatch("License/Real Estate/Salesperson/Renewal", renewalCapId) || appMatch("License/Real Estate/Broker/Renewal", renewalCapId)) 
{
        //check if this is lockbox or aca/aa
            var lockBoxBatch = getAppSpecific("Lockbox Batch");
            var renewAs = getAppSpecific("I am renewing as");
          // Do the renewal without attestation checking if the renewal comes from LockBox.
if (lockBoxBatch && lockBoxBatch != null && lockBoxBatch != "") {
if(renewAs == null || renewAs == "") {
logDebug("Renewal from LockBox"); 
parentCapId = getParentCapID4Renewal(renewalCapId);
if (parentCapId) {
    logDebug("Parent CAP found: " + parentCapId);

    var capResult = aa.cap.getCap(parentCapId);
    if (!capResult.getSuccess()) {
      logDebug("getCap error: " + capResult.getErrorMessage());
      vCheck = false;
    }
    var parentCap = capResult.getOutput();
    var parentCapStatus = parentCap.getCapStatus();
    
    
    var workflowResult = aa.workflow.getTasks(parentCapId);
        if (workflowResult.getSuccess())
        var wfObj = workflowResult.getOutput();
        for (i in wfObj) 
                   {
                       var fTask = wfObj[i];
                       var parentTaskStatus = fTask.getDisposition(); 
                   } 
/***************** Start CR212 *********************/
    var splitter = renewalCapId.toString().split("-");
    var capIDModel = aa.cap.getCapID(splitter[0],splitter[1],splitter[2]).getOutput();
    var capScriptModel = aa.cap.getCap(capIDModel).getOutput();
    var capType = capScriptModel.getCapType();
    var scanner = capType.toString().split("/");
    var group = scanner[0];
    var type = scanner[1];
    var subType = scanner[2];
    var category = scanner[3];
    if(category != "Reinstatement")
    {
      if (parentCapStatus != "Current" 
        && (parentCapStatus != "Expired" 
        || (parentCapStatus == "Expired" && parentTaskStatus != "Lapsed")) && (parentCapStatus == "Inactive" && parentTaskStatus != "Inactive"))
      {
        logDebug("Can't process renewal for " + parentCapId.getCustomID() + ", license status: " + parentCapStatus);
        vCheck = false;
      }
    }
    /***************** End CR212 *********************/
              if (parentCapStatus == "Expired") {
              logDebug("parent status is expired.");
              var workflowhistory = aa.workflow.getWorkflowHistory(parentCapId, "License", null);
                        if (workflowhistory.getSuccess())
                          var workflowhistoryresult = workflowhistory.getOutput();
                    
                          if(workflowhistoryresult.length < 1 ) {
                          logDebug("workflow history is insufficient to set the license status");
                          vCheck = false;
                          }
             
              }            
} 
} 
}
}
return vCheck;
}

//debashish.barik,script#230,dt:2/24/2016
function CWM_230_ASB_ACA_checkLicenseInformation(){

  try{
    var myAInfo = new Array();
    useAppSpecificGroupName = true;
    var vMessage = "";
    var flag=1;
    if(!publicUser){//AA
      loadAppSpecificBefore(myAInfo);
    }else if(publicUser){//ACA
      loadAppSpecific4ACA(myAInfo);
    }
    var vTypeOfShop    = myAInfo["LICENSE INFORMATION.Type of Shop applying for"];
    var vMangLicType   = myAInfo["LICENSE INFORMATION.Manager License Type"];
    var vBoothRenterShop = myAInfo["LICENSE INFORMATION.Type of Booth Renter Shop"];

    logDebug("vTypeOfShop:"+vTypeOfShop);
        logDebug("vMangLicType:"+vMangLicType);
    logDebug("vBoothRenterShop:"+vBoothRenterShop);
    
    if(vTypeOfShop !=null && vTypeOfShop!='undefined'){
      if(vTypeOfShop=='Type 1 - Cosmetology (full service salon)'){
        if(vMangLicType==null || vMangLicType=='undefined' || vMangLicType!="Type 1 Cosmetologist"){
          flag=0;
          vMessage = "For a Type 1 Shop, the Manager License type must be a Type 1.";
        }
      }else if(vTypeOfShop=='Type 2 - Booth Shop (renting a space in a salon)'){
          if(!matches(vMangLicType,"Type 1 Cosmetologist","Type 3 Manicurist","Type 6 Aesthetician")){
            flag=0;
            vMessage = "For a Type 2 Shop, the Manager License type must be a Type 1, Type 3 or a Type 6.";
          }
      }else if(vTypeOfShop=='Type 3 - Manicure Only'){
        if(!matches(vMangLicType,"Type 1 Cosmetologist","Type 3 Manicurist")){
            flag=0;
            vMessage = "For a Type 3 Shop, the Manager License type must be a Type 1 or a Type 3";
        }
      }
      /*
       *If the ASI "Type of Shop applying for" has a value of "Type 4"
       *AND the ASI "Type of Booth Renter Shop" has a value of "Type 1" 
       *Then:Then validate that the ASI "Manager License Type" has a value of "Type 1"
      */
      else if(vTypeOfShop=='Type 4 - Booth Renter (owner of entire salon)'){
        
        if( vBoothRenterShop=='Type 1 - Cosmetology (full service salon)' ){
          if(vMangLicType!="Type 1 Cosmetologist"){
            flag=0;
            vMessage = "For a Type 3 Shop, the Manager License type must be a Type 1.";
          }
        }else if(vBoothRenterShop=='Type 3 - Manicure Only'){
          if(!matches(vMangLicType,"Type 1 Cosmetologist","Type 3 Manicurist")){
            flag=0;
            vMessage = "For a Type 3 Shop, the Manager License type must be a Type 1 or a Type 3.";
          }
        }else if(vBoothRenterShop=='Type 5 - Aesthetic Salon Only'){
          if(!matches(vMangLicType,"Type 1 Cosmetologist","Type 6 Aesthetician")){
            flag=0;
            vMessage = "For a Type 5 Shop, the Manager License type must be a Type 1 or a Type 6.";
          }
        }
      }else if(vTypeOfShop=='Type 5 - Aesthetic Salon Only'){
        if(!matches(vMangLicType,"Type 1 Cosmetologist","Type 6 Aesthetician")){
          flag=0;
          vMessage = "For a Type 5 Shop, the Manager License type must be a Type 1 or a Type 6.";
        }
      }

    }
    useAppSpecificGroupName = false;
    if(flag==0){
      cancel = true;
      showMessage = true;
      comment(vMessage);
    }
  }catch(err){
      cancel = true;
      showMessage = true;
      comment("Error on function CWM_230_ASB_ACA_checkLicenseInformation, Please contact administrator:"+err.message);
  }

}
//ADDED BY KPREETI ON 2/25/2016 FOR SCRIPT 210
function CWM_ELP_DPL_210_WTUB_checkWorkflowForLicenseIssueDate(){
  var wfTaskObj;
  var issueDateObj;
  try{
    logDebug("Mytask wfTask:" + wfTask); 
    logDebug("Mytask wfStatus: " + wfStatus);
    var issueTaskDate = getAppSpecific("License Issue Date",capId);
    logDebug("Mytask taskDate: " + issueTaskDate);
    if((wfTask == "Validate" && (matches(wfStatus, "Approved", "Approved with Conditions"))) )
    {
    logDebug("Validate and approved/approved with conditions entered");
    if(issueTaskDate==null || !issueTaskDate || issueTaskDate=="undefined"){
      cancel = true;
      showMessage = true;
      //logDebug("This record must have a License Issue Date value to continue.");
      comment("Thiss record must have a License Issue Date value to continue.");
    }else{
      logDebug("SUCESS!!!");
    }
    }
  }catch(err){  
    cancel = true;
    showMessage=true;
  comment("Error on WTUB;License!Cosmetology!Shop!Application, Please contact administrator. error msg "+err.message);
  }
  
} // end

//added by kumari preeti,script#218,dt:2/25/2016
function CWM_218_ASB_ACA_checkLicenseInformation(){

  try{
    var myAInfo = new Array();
    useAppSpecificGroupName = true;
    var vBoardCode = lookup("BOARDS", "Cosmetologists");
    if(publicUser){//ACA
      loadAppSpecific4ACA(myAInfo);
    }
    var vLicenseNbr = myAInfo["LICENSE INFORMATION.License Number"];
    logDebug("vLicenseNbr:"+vLicenseNbr);
        
    if(!isLicenseActive(vLicenseNbr, vBoardCode, "7")){
      cancel = true;
      showMessage = true;
      comment("The License number entered is not valid or Current.  Please contact the Board with any questions");
    }
    useAppSpecificGroupName = false;
  }catch(err){
    logDebug("Error occured in CWM_218_ASB_ACA_checkLicenseInformation:"+err.message);
  }
}
/*
ADDED BY PREETI FOR SCRIPT 218.DATE: 2/25/2016
*/

//Ankush Kshirsagar,script#174,dt:2/25/2016
function CWM_174_ASB_ACA_checkLicenseInformation(){

  try{
    var myAInfo = new Array();
    useAppSpecificGroupName = true;
    var vMessage = "";
    var flag=1;
    if(!publicUser){//AA
      loadAppSpecificBefore(myAInfo);
    }else if(publicUser){//ACA
      loadAppSpecific4ACA(myAInfo);
    }
    var vTypeOfShop    = myAInfo["LICENSE INFORMATION.Type of Shop applying for"];
    var vMangLicType   = myAInfo["LICENSE INFORMATION.Manager License Type"];
    var vBoothRenterShop = myAInfo["LICENSE INFORMATION.Type of Booth Renter Shop"];

    logDebug("vTypeOfShop:"+vTypeOfShop);
        logDebug("vMangLicType:"+vMangLicType);
    logDebug("vBoothRenterShop:"+vBoothRenterShop);
    
    if(vTypeOfShop !=null && vTypeOfShop!='undefined'){
      if(vTypeOfShop=='Type 1 - Cosmetology (full service salon)'){
        if(vMangLicType==null || vMangLicType=='undefined' || vMangLicType!="Type 1 Cosmetologist"){
          flag=0;
          vMessage = "For a Type 1 Shop, the Manager License type must be a Type 1.";
        }
      }else if(vTypeOfShop=='Type 2 - Booth Shop (renting a space in a salon)'){
          if(!matches(vMangLicType,"Type 1 Cosmetologist","Type 3 Manicurist","Type 6 Aesthetician")){
            flag=0;
            vMessage = "For a Type 2 Shop, the Manager License type must be a Type 1, Type 3 or a Type 6.";
          }
      }else if(vTypeOfShop=='Type 3 - Manicure Only'){
        if(!matches(vMangLicType,"Type 1 Cosmetologist","Type 3 Manicurist")){
            flag=0;
            vMessage = "For a Type 3 Shop, the Manager License type must be a Type 1 or a Type 3";
        }
      }
      /*
       *If the ASI "Type of Shop applying for" has a value of "Type 4"
       *AND the ASI "Type of Booth Renter Shop" has a value of "Type 1" 
       *Then:Then validate that the ASI "Manager License Type" has a value of "Type 1"
      */
      else if(vTypeOfShop=='Type 4 - Booth Renter (owner of entire salon)'){
        
        if( vBoothRenterShop=='Type 1 - Cosmetology (full service salon)' ){
          if(vMangLicType!="Type 1 Cosmetologist"){
            flag=0;
            vMessage = "For a Type 3 Shop, the Manager License type must be a Type 1.";
          }
        }else if(vBoothRenterShop=='Type 3 - Manicure Only'){
          if(!matches(vMangLicType,"Type 1 Cosmetologist","Type 3 Manicurist")){
            flag=0;
            vMessage = "For a Type 3 Shop, the Manager License type must be a Type 1 or a Type 3.";
          }
        }else if(vBoothRenterShop=='Type 5 - Aesthetic Salon Only'){
          if(!matches(vMangLicType,"Type 1 Cosmetologist","Type 6 Aesthetician")){
            flag=0;
            vMessage = "For a Type 5 Shop, the Manager License type must be a Type 1 or a Type 6.";
          }
        }
      }else if(vTypeOfShop=='Type 5 - Aesthetic Salon Only'){
        if(!matches(vMangLicType,"Type 1 Cosmetologist","Type 6 Aesthetician")){
          flag=0;
          vMessage = "For a Type 5 Shop, the Manager License type must be a Type 1 or a Type 6.";
        }
      }

    }
    useAppSpecificGroupName = false;
    if(flag==0){
      cancel = true;
      showMessage = true;
      comment(vMessage);
    }
  }catch(err){
      cancel = true;
      showMessage = true;
      comment("Error on function CWM_174_ASB_ACA_checkLicenseInformation, Please contact administrator:"+err.message);
  }

} //END OF FUNCTION: CWM_174_ASB_ACA_checkLicenseInformation
//SCRIPT#174,Ankush,dt:2/25/2016
//RTC#12102,debashish.barik
//@INCLUDES_CUSTOM 
function CWM_174_ASB_ACA_ValidateMngrLicNbrwithType() {
var flag = false;
  try {
    var myAInfo = new Array();
    useAppSpecificGroupName = true;
    if (!publicUser) { //AA
      loadAppSpecificBefore(myAInfo);
    } else if (publicUser) { //ACA
      loadAppSpecific4ACA(myAInfo);
    }
    // get ASI::Manager LicenseNumber and Manager License Type values
    var vMngrLicenseNbr = myAInfo["LICENSE INFORMATION.Manager License Number"];
    var vMngrLicenseType = myAInfo["LICENSE INFORMATION.Manager License Type"];
    logDebug("vMngrLicenseType:" + vMngrLicenseType);
    useAppSpecificGroupName = false;
    
    //Get the board code from the Std Choice list
    var vBoardCode = lookup("BOARDS", "Cosmetologists");
    if (vMngrLicenseNbr != null && vMngrLicenseNbr != "" && vMngrLicenseNbr != "undefined" && vMngrLicenseType != null && vMngrLicenseType != "" && vMngrLicenseType != "undefined") {
      // set the Manager LicenseTypeCode based on the input License Type
      var vLicenseTypeCode;
      if (vMngrLicenseType == "Type 1 Cosmetologist") {
        vLicenseTypeCode = "1";
      } else if (vMngrLicenseType == "Type 3 Manicurist") {
        vLicenseTypeCode = "3";
      } else if (vMngrLicenseType == "Type 6 Aesthetician") {
        vLicenseTypeCode = "6";
      } else {
        vLicenseTypeCode = "0";
      }
      var vLicenseActive = isLicenseActive(vMngrLicenseNbr, vBoardCode, vLicenseTypeCode);
      var vLicenseNum = vMngrLicenseNbr.toString();
      logDebug("vLicenseNum:" + vLicenseNum);
      logDebug("vLicenseActive:" + vLicenseActive);
      //RTC#12102 Chnages start, debashish.barik
      if (vLicenseNum.indexOf("-") < 0) {
        vLicenseNum = vLicenseNum + "-" + vBoardCode + "-" + vLicenseTypeCode;
        var vLicenseNumCapId = aa.cap.getCapID(vLicenseNum).getOutput();
        var vLicStatus = getMyLicenseStatus(vLicenseNumCapId);
        if (vLicStatus && vLicenseActive && matches(vLicStatus, "Current")) {
          logDebug("Sucess1!!");
          flag = true;
        }
      } else {
        var vLicenseNumArr = vLicenseNum.split("-");
        var vLic0 = vLicenseNumArr[0];
        var vBrd1 = vLicenseNumArr[1];
        var vTyp2 = vLicenseNumArr[2];
        if ((vBoardCode == vBrd1) && vLicenseTypeCode == vTyp2) {
          var vLicenseNumCapId = aa.cap.getCapID(vLicenseNum).getOutput();
          var vLicStatus = getMyLicenseStatus(vLicenseNumCapId);
          if (vLicStatus && vLicenseActive && matches(vLicStatus, "Current")) {
            logDebug("Sucess2!!");
            flag = true;
          }
        }
      }
      //RTC#12102 Chnages end
    }
    
  } catch (err) {
    logDebug("Error on ASB function CWM_174_ASB_ACA_ValidateMngrLicNbrwithType, Please contact administrator:" + err.message);
  }
               if (!flag) {
      cancel = true;
      showMessage = true;
      comment("The Manager License is not a valid or does not have a Current Status.");
    }

} //END OF FUNCTION: CWM_174_ASB_ACA_ValidateMngrLicNbrwithType

//SCRIPT#174,Ankush,dt:2/25/2016
function CWM_174_WTUA_updateLicenseLP(){
  try{    
    // get ASI::Manager LicenseNumber and Manager License Type values 
    var vMngrLicenseNbr = getAppSpecific("Manager License Number", capId);
    var vMngrLicenseType = getAppSpecific("Manager License Type", capId);
    logDebug("vMngrLicenseType:"+vMngrLicenseType);
    var vParentLicenseCapId = getParentLicenseRecord(capId);
    //Get the board code from the Std Choice list
    var vBoardCode = lookup("BOARDS", "Cosmetologists");
    if(vMngrLicenseNbr!=null && vMngrLicenseNbr!="" && vMngrLicenseNbr!="undefined" && vMngrLicenseType!=null && vMngrLicenseType!="" &&   vMngrLicenseType!="undefined"){
      // set the Manager LicenseTypeCode based on the input License Type
      var vLicenseTypeCode;
      if (vMngrLicenseType == "Type 1 Cosmetologist") {
        vLicenseTypeCode = "1";
      } else if (vMngrLicenseType == "Type 3 Manicurist") {
        vLicenseTypeCode = "3";
      } else if  (vMngrLicenseType == "Type 6 Aesthetician") {
        vLicenseTypeCode = "6";
      } else {
        vLicenseTypeCode = "0";
      }
      var vRefLP = getRefLicenseProf(vMngrLicenseNbr, vBoardCode, vLicenseTypeCode);
      if(vRefLP!=null){
        associateLpWithCap(vRefLP, vParentLicenseCapId);
        //associateLpWithCap(vRefLP, capId);
      }
      var vLicenseNum = vMngrLicenseNbr.toString();
      if(vLicenseNum.indexOf("-") < 0){
        vLicenseNum = vLicenseNum + "-"+vBoardCode+"-"+vLicenseTypeCode;
      }
      var vLicenseNumCapId = aa.cap.getCapID(vLicenseNum);
      if(vLicenseNumCapId!=null)
        vLicenseNumCapId = aa.cap.getCapID(vLicenseNum).getOutput();
      copyContactsByCapContactTypeWithASI(vLicenseNumCapId, vParentLicenseCapId, "Licensed Individual","Manager", new Date(), vMngrLicenseNbr);
      //copyContactsByCapContactTypeWithASI(vLicenseNumCapId, capId, "Licensed Individual","Manager", new Date(), vMngrLicenseNbr);
    }
  }catch(err){
    cancel = true;
    showMessage = true;
    comment("Error on ASB function CWM_174_ASB_updateLicenseLP, Please contact administrator:"+err.message);
  }
}//END OF FUNCTION: CWM_174_WTUA_updateLicenseLP
  //added by preeti CB_223_WTUA_GenerateTempCertNumber
  function CB_223_WTUA_GenerateTempCertNumber() {
  try {
  //var useAppSpecificGroupName = true
  //if (wfTask == "Validation" && wfStatus == "Approved to Sit for Exam") {
  // get Counter value using the Standard Choice Lookup
  var newTempCertNbr = lookup("HD_TEMP_CERTIFICATE_NUM", "Counter");
  logDebug("newTempCertNbr "+newTempCertNbr);

  // get ASI field:: Temporary Certificate Number
  var vLicenseTypeReq = getAppSpecific("Temporary Certificate Number",capId);
  logDebug(vLicenseTypeReq);
    // or var vLicenseTypeReq = AInfo["Temporary Certificate Number"];  

  // Store the new value in ASI
  editAppSpecific("Temporary Certificate Number", newTempCertNbr);

  // Increment the temp cert number by 1
  newTempCertNbr= parseInt(newTempCertNbr)+1;
  logDebug("newTempCertNbr "+newTempCertNbr);
    
  // set the Lookup counter with a new vaue
  editLookup("HD_TEMP_CERTIFICATE_NUM", "Counter", newTempCertNbr);
  logDebug("##"+lookup("HD_TEMP_CERTIFICATE_NUM", "Counter"));
  useAppSpecificGroupName = false;
  //}
  }
    catch (err) {
      showMessage=true;
  comment("Error on WTUA function CB_223_WTUA_GenerateTempCertNumber, Please contact administrator");
  }
  } // CB_223_WTUA_GenerateTempCertNumber()


// added by ankush on 2/25/2016
function CWM_ELP_WTUA_DPL_setExpDateBasedOnBirthDate(licID) {
  // Expiration Date is set based on the Birth Date and depending on the issue date
  // set variables for the current date and the expiration date
  var currDate = new Date();
  var currentDay = currDate.getDate();
    var currentMonth = currDate.getMonth();
  var expDate = new Date();

  // Get the DOB from the Applicant (Individual) Contact model
  var ApplicantModel = getContactByType("Applicant",capId);
  var vAppDOB = ApplicantModel.getBirthDate();
  var AppDOBDay = vAppDOB.getDate();
    var AppDOBMonth = vAppDOB.getMonth();

  //set the expiration date to 1 and the month to Applicant's DOB month to account for how JS handles dates 
  expDate.setDate(1);
    expDate.setMonth(AppDOBMonth);
  var year = currDate.getFullYear();
  var month = currDate.getMonth();
  // Compare Applicant's DOB Month and Day with the current Month and Day
  // set the license expiration date based on Applicant's DOB month
  // if application is approved prior to Applicant's birth month and day, then set the expiration year to next year
  // if application is approved after Applicant's birth month and day, then set the expiration year to 2 year from // the current year
  if (currentMonth < AppDOBMonth){
    expDate.setFullYear((year+1));
      expDate.setDate(AppDOBDay); 
    expDate.setMonth(AppDOBMonth);
  }else if (currentMonth == AppDOBMonth && currentDay < AppDOBDay){
    expDate.setFullYear((year+1));
      expDate.setDate(AppDOBDay); 
    expDate.setMonth(AppDOBMonth);
  }
  else {
      expDate.setFullYear((year+2));
      expDate.setDate(AppDOBDay);
      expDate.setMonth(AppDOBMonth);
  }
  var expDateString = (expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear();
  logDebug("Exp date: " + expDateString);
        
  licCustID = licID.getCustomID();
  logDebug("Parent ID: " + licCustID + " " + licID);
  thisLic=new licenseObject(licCustID,licID);
  thisLic.setExpiration(expDateString);
  thisLic.setStatus("Active");
} // End of function CWM_ELP_WTUA_DPL_setExpDateBasedOnBirthDate()


/*
/@pBoardName : board name of target license
/@pRecordType : license type of target license
/@pWflowStatus: workflow status to set
/@pRenewalStatus : renewal status to set
/
/1. If the above validation passes, then set the Workflow Status of the related Type X license to a value of 'Upgraded'.
/2. Set the Renewal Status of the Type X License to a value of Pending.
/3. Update the LP of the Type X license with it's new status
  by:debashish.barik ,dt:2/25/2016, all Scripts#213,... 
*/
function CWM_ELP_XXX_DPL_WTUA_UpdateWFlowRenLPLicensesStatus(pBoardName,pRecordType,pWflowStatus,pRenewalStatus,pWfTask) {
  try{
    if(wfTask == pWfTask && matches(wfStatus, "Approved", "Approved with Conditions")){
        var vLicNum = AInfo["License Number"];
        logDebug("LogDebug:"+vLicNum);
        if(vLicNum!=null && vLicNum!="undefined"){
          vLicNum = vLicNum.toString();
          if(vLicNum.indexOf("-")<0){
            vLicNum = vLicNum+"-"+pBoardName+"-"+pRecordType;
          }
          logDebug("License:"+vLicNum);
        }
        var vLicenseCapId = aa.cap.getCapID(vLicNum);
        if(vLicenseCapId && vLicenseCapId.getSuccess()){
          vLicenseCapId = vLicenseCapId.getOutput();
          if(vLicenseCapId!=null){
            vLicNum = vLicNum.toString();
            logDebug("Updating workflow status");
            // 1. Update license Workflow Status of the related Type 7 license to a value of 'Upgraded'.
            updateTask("License", pWflowStatus, "", "", "DPL_LICENSE", vLicenseCapId);

            //2. Set the Renewal Status of the Type X License to a value of Pending.
            var vTypeXLic = new licenseObject(vLicNum, vLicenseCapId);
            vTypeXLic.setStatus(pRenewalStatus);

            //3.Update the LP of the Type X license with it's new status :Update LP record to Upgraded
            var vRefLP = getRefLicenseProf(vLicenseCapId.getCustomID());
            vRefLP.setWcExempt("Y");
            vRefLP.setPolicy(pWflowStatus);
            aa.licenseScript.editRefLicenseProf(vRefLP);
          }else{
             logDebug("Something went wrong:"+vLicenseCapId);
            }
        }else{  
          logDebug("2.Something went wrong:"+vLicenseCapId);
        }
    }else{
      logDebug("3.Something went wrong");
    }
  }catch(err){
    logDebug("ERROR in function  CWM_ELP_XXX_DPL_WTUA_UpdateWFlowRenLPLicensesStatus:"+err.message);
  }
}

function CWM_ELP_DPL_651_WTUA_setExpDateForOutofStateCntry(licID) {
  try {
    if (appMatch("License/Cosmetology/Out of State/Application") || appMatch("License/Cosmetology/Out of Country/Application") || appMatch("License/Cosmetology/Forfeiture/Application")) {
      // Expiration Date is calculated based on the status of the Task:Validate is "Approved to Sit for Exam"
      // With reference to the existing wfObj, get the wfTask Description
      var desc = fTask.getTaskDescription();
      var disp = fTask.getDisposition();
      var taskDate = fTask.getStatusDate();

      if (desc == "Validate" && disp == "Approved to Sit for Exam") {
        // set variables for the current date and the expiration date
        var ApprovedDateObj = new Date(taskDate.getTime());
        var currentDay = ApprovedDateObj.getDate();
        var currentMonth = ApprovedDateObj.getMonth() + 1;
        var expDate = new Date();
        //set the expiration date to 1 and the month to the current month to account for how JS handles dates
        expDate.setMonth(currentMonth);
        expDate.setDate(1);
        var year = ApprovedDateObj.getFullYear();

        // set the expiration date based on Application approval date + 6 months
          expDate.setFullYear((year));
          expDate.setMonth(currentMonth + 6);
          expDate.setDate(currentDay);
          var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
          logDebug("Exp date: " + expDateString);

          // Copy the Expiration Date to ASI::"Temporary Certificate Expiration Date"
          var vTempCertExpDate = getAppSpecificValue("Temporary Certificate Expiration Date", capId);
          editAppSpecific("Temporary Certificate Expiration Date", expDateString, capId);
          var licCustID = licID.getCustomID();
          logDebug("Parent ID: " + licCustID + " " + licID);
          var thisLic = new licenseObject(licCustID, licID);
          thisLic.setExpiration(expDateString);
          thisLic.setStatus("Active");
        }
      }
    } catch (err) {
      logDebug("An error occurred in CWM_ELP_DPL_651_WTUA_setExpDateForOutofStateCntry.");
      logDebug(err.message);
    }
  } // End of function CWM_ELP_DPL_651_WTUA_setExpDateForOutofStateCntry
function CWM_ELP_DPL_651_WTUA_GenerateTempCertNumber() {
  try {
    if (wfTask == "Validate" && wfStatus == "Approved to Sit for Exam") {
      // get Counter value using the Standard Choice Lookup
      var newTempCertNbr = lookup("HD_TEMP_CERTIFICATE_NUM", "Counter");
      // get ASI field:: Temporary Certificate Number
      var vLicenseTypeReq = getAppSpecific("Temporary Certificate Number");
      // or var vLicenseTypeReq = AInfo["Temporary Certificate Number"];
      // Store the new value in ASI
      editAppSpecific("Temporary Certificate Number", newTempCertNbr);
      // Increment the temp cert number by 1
      newTempCertNbr= parseInt(newTempCertNbr)+1;
      logDebug("newTempCertNbr "+newTempCertNbr);
      // set the Lookup counter with a new vaue
      editLookup("HD_TEMP_CERTIFICATE_NUM", "Counter", newTempCertNbr);
      logDebug("##"+lookup("HD_TEMP_CERTIFICATE_NUM", "Counter"));
    }
  } catch (err) {
    showMessage=true;
    comment("Error on WTUA function CB_223_WTUA_GenerateTempCertNumber, Please contact administrator");
    logDebug("Error on WTUA function CWM_ELP_DPL_651_WTUA_GenerateTempCertNumber: "+err.message);
  }
} // End of CWM_ELP_DPL_651_WTUA_GenerateTempCertNumber
// Added for Script 176 : Nilkanth Patel
function updateManagerContact(){

// 2. to update the end date
var parentLicCap = getParent(capId);
var capContactResult = aa.people.getCapContactByCapID(parentLicCap);
    if (capContactResult.getSuccess()) {
      var capContactArray = capContactResult.getOutput();
    }
    for(xp in  capContactArray){
      var vContactsModel = capContactArray[xp].getCapContactModel();
                          
       if(vContactsModel!=null && vContactsModel.getContactType().equals("Manager")){
        if((vContactsModel.getEndDate() == null || vContactsModel.getEndDate() == undefined || vContactsModel.getEndDate() == "")){
          var vEndDate = new Date();
          vContactsModel.setEndDate(vEndDate);
          aa.people.editCapContact(vContactsModel);
        }
      }
    }

// 1. to add the new Manager Conact for the License
// written in CWM_174_WTUA_updateLicenseLP.

/*
License/Cosmetology/Shop/Renovation

 3. to Add the LP on the license
 
var parLicCap = getParent(capId);

var vLicenseScriptModel = getRefLicenseProf("3");
aa.print(vLicenseScriptModel );
             if(vLicenseScriptModel!=null){
               var fvAddResult = aa.licenseScript.associateLpWithCap(parLicCap , vLicenseScriptModel);
                         aa.print("Result:"+fvAddResult.getSuccess());       
                                 if(fvAddResult.getSuccess()){

                 aa.print("SUCCESS:License professional successfully added to "+parLicCap );
                               }else{
                 aa.print("ERROR::License professional cannot be added :"+fvAddResult.getErrorMessage());
               }
             }
             
OR

// get ASI::Manager LicenseNumber and Manager License Type values 
    var vMngrLicenseNbr = getAppSpecific("Manager License Number", capId);
    var vMngrLicenseType = getAppSpecific("Manager License Type", capId);
    logDebug("vMngrLicenseType:"+vMngrLicenseType);
    var vParentLicenseCapId = getParentLicenseRecord(capId);
    //Get the board code from the Std Choice list
    var vBoardCode = lookup("BOARDS", "Cosmetologists");
    if(vMngrLicenseNbr!=null && vMngrLicenseNbr!="" && vMngrLicenseNbr!="undefined" && vMngrLicenseType!=null && vMngrLicenseType!="" &&   vMngrLicenseType!="undefined"){
      // set the Manager LicenseTypeCode based on the input License Type
      var vLicenseTypeCode;
      if (vMngrLicenseType == "Type 1 Cosmetologist") {
        vLicenseTypeCode = "1";
      } else if (vMngrLicenseType == "Type 3 Manicurist") {
        vLicenseTypeCode = "3";
      } else if  (vMngrLicenseType == "Type 6 Aesthetician") {
        vLicenseTypeCode = "6";
      } else {
        vLicenseTypeCode = "0";
      }
      var vRefLP = getRefLicenseProf(vMngrLicenseNbr, vBoardCode, vLicenseTypeCode);
      if(vRefLP!=null){
        associateLpWithCap(vRefLP, vParentLicenseCapId);
        associateLpWithCap(vRefLP, capId);
      }
    } 
*/

} 
/*
-debashish.barik,SCRIPT#207,..
-ADDED ONDITION FOR COSMETOLOGY/Forfeiture/Application FOR DEFECT 10684
-Dt:6/6/2016 ,debashish.barik , RTC#12298
@
*/
function CWM_ELP_DPL_XXX_WTUA_setExpDateForOutofStateCntry() {
  try {
    if (appMatch("License/Cosmetology/Out of State/Application") || appMatch("License/Cosmetology/Out of Country/Application") || appMatch("License/Cosmetology/Forfeiture/Application")) {
      // Expiration Date is calculated based on the status of the Task:Validate is "Approved to Sit for Exam"
      // With reference to the existing wfObj, get the wfTask Description
      var workflowResult = aa.workflow.getTasks(capId);
      var wfObj = workflowResult.getOutput();
      for (i in wfObj) {
        var fTask = wfObj[i];
        var desc = fTask.getTaskDescription();
        var disp = fTask.getDisposition();
        var taskDate = fTask.getStatusDate();
        logDebug("desc:" + desc);
        logDebug("disp:" + disp);
        logDebug("taskDate:" + taskDate);
        if (desc == "Validate" && disp == "Approved to Sit for Exam") {
          // set variables for the current date and the expiration date
          var ApprovedDateObj = new Date(taskDate.getTime());
          var currentDay = ApprovedDateObj.getDate();
          var currentMonth = ApprovedDateObj.getMonth();
          var currentYear = ApprovedDateObj.getFullYear();
          //var expDate = new Date(year, month, day);
          var expDate = new Date(String(currentYear), String(currentMonth), String(currentDay));
          // set the expiration date based on Application approval date + 6 months
          expDate.setMonth(currentMonth + 6);
          var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
          logDebug("Exp date: " + expDateString);

          // Copy the Expiration Date to ASI::"Temporary Certificate Expiration Date"
          var vTempCertExpDate = getAppSpecificValue("Temporary Certificate Expiration Date", capId);
          editAppSpecific("Temporary Certificate Expiration Date", expDateString);
        }

      }
    }
  } catch (err) {
    logDebug("An error occurred in CWM_ELP_DPL_XXX_WTUA_setExpDateForOutofStateCntry.");
    logDebug(err.message);
  }
} // End of function CWM_ELP_DPL_XXX_WTUA_setExpDateForOutofStateCntry

function getLicensesByRefContactbyBoard(ipRefContact, licType)
{
    var opLic = [];
    var fvPeople = aa.people.createPeopleModel().getOutput().getPeopleModel();
    var fvCcb = aa.proxyInvoker.newInstance("com.accela.aa.aamain.people.CapContactDAOOracle").getOutput();
    fvPeople.setServiceProviderCode(aa.getServiceProviderCode());
    fvPeople.setContactSeqNumber(ipRefContact);

    var fvCapsQry = fvCcb.getCapContactsByRefContactModel(fvPeople);
    if (!fvCapsQry)
        return opLic;
    var fvCaps = fvCapsQry.toArray();
    if (!fvCaps)
        return opLic;

    for (var fvCounter in fvCaps) {
        var fvCap = fvCaps[fvCounter];
        if (!fvCap)
            continue;
        var fvCapIDTmp = fvCap.getCapID();
        if (!fvCapIDTmp)
            continue;
        var fvCapIDQry = aa.cap.getCapID(fvCapIDTmp.getID1(), fvCapIDTmp.getID2(), fvCapIDTmp.getID3());
        if (!fvCapIDQry || !fvCapIDQry.getSuccess())
            continue;
        var fvCapID = fvCapIDQry.getOutput();
        if(!fvCapID)
            continue;
        var fvCapMQry = aa.cap.getCap(fvCapID);
        if (!fvCapMQry || !fvCapMQry.getSuccess())
            continue;
        var fvCapM = fvCapMQry.getOutput();
        if (!fvCapM)
            continue;
        var fvCapType = fvCapM.getCapType();
        if (!fvCapType)
            continue;

        if (fvCapType.getGroup() != "License" )
           continue;
        if (fvCapType.getType() != licType)
           continue;
        if (fvCapType.getCategory() != "License")
           continue;
        opLic.push(fvCapID.getCustomID());
    }
    return opLic;
}



function getPremiseAddressDetails(capIDModel)
{
  //aa.print("Retrieving Premise Address Details for  : " +capIDModel);
  
  //Local variable declaration
  var businessAddressArray =  new Array();
  
  //getAddressByCapId() method retrieves the premise address details associated with the record
  var capAddressResult = aa.address.getAddressByCapId(capIDModel);
  
  if(capAddressResult.getSuccess())
  {
    var capAddressList = capAddressResult.getOutput();
    
    if(capAddressList)
    {
      var tempTime = "";  //Stores the temporary time
  
      for(capAddressIndex in capAddressList)
      { 
        // Get address date and status to retrieve latest mailing address
        var recDate = capAddressList[capAddressIndex].getAuditDate();
        var recStatus = capAddressList[capAddressIndex].getAuditStatus();
        
        // Assign first address date to temporary time when temporary time is null
        if(tempTime == "")
        {
          tempTime = recDate;
        }
        
        // To get latest premise address based on audit date and status.
        // Address with audit status as "A" and having latest time it will retrieve that address
        if( recStatus == "A")
        { 
          //Assign recDate to tempTime
          tempTime = recDate; 
          businessAddressArray["busAddress1"] = "";
          businessAddressArray["busAddress2"] = "";
          businessAddressArray["busCity"] = "";
          businessAddressArray["busState"] = "";
          businessAddressArray["busZip"] = "";
          // If HouseNumberAlphaStart is not null then it will concatenate the HouseNumberAlphaStart and address line1 
          if (capAddressList[capAddressIndex].getHouseNumberAlphaStart() != null)
          {
            businessAddressArray["busAddress1"] = capAddressList[capAddressIndex].getHouseNumberAlphaStart() + " " +capAddressList[capAddressIndex].getAddressLine1();
                                                 var a = capAddressList[capAddressIndex].getHouseNumberAlphaStart() + " " +capAddressList[capAddressIndex].getAddressLine1();

          }
          else
          {
            if(capAddressList[capAddressIndex].getAddressLine1() != null){
            businessAddressArray["busAddress1"] = capAddressList[capAddressIndex].getAddressLine1();  
                  var a = capAddressList[capAddressIndex].getAddressLine1();  
            }
                    }
          var b = "";
          if (capAddressList[capAddressIndex].getAddressLine2() != null)
          { 
            //Retrieving business address line2 if it is not null
            businessAddressArray["busAddress2"] = capAddressList[capAddressIndex].getAddressLine2();
                     }
          
          //Get business city, state and zip code.
          if(capAddressList[capAddressIndex].getCity()!=null) {
            businessAddressArray["busCity"] = capAddressList[capAddressIndex].getCity();
          } 
          if(capAddressList[capAddressIndex].getState() !=null) {
            businessAddressArray["busState"] = capAddressList[capAddressIndex].getState();
          } 
          if(capAddressList[capAddressIndex].getZip() !=null) {
            businessAddressArray["busZip"] = capAddressList[capAddressIndex].getZip();
          } 

        }       
      }
    }
  }

  
  var c = a + ", "+businessAddressArray["busAddress2"] +", " +businessAddressArray["busCity"]+", "+ businessAddressArray["busState"]+", "+ businessAddressArray["busZip"] ;
  
  var d = c.replace("null,", ",");
  return d.replace(",null", ",");
}


function checkASIExists(itemName) // optional: itemCap
{
//returns the value of the field if it finds it. returns false if the field does nto exist.
  var updated = false;
  var returnValue = false;
  var i = 0;
  var itemCap = capId;
  if (arguments.length == 2)
    itemCap = arguments[1]; // use cap ID specified in args
  if (useAppSpecificGroupName) {
    if (itemName.indexOf(".") < 0) {
      logDebug("**WARNING: editAppSpecific requires group name prefix when useAppSpecificGroupName is true");
      return false
    }
    var itemGroup = itemName.substr(0, itemName.indexOf("."));
    var itemName = itemName.substr(itemName.indexOf(".") + 1);
  }
  var appSpecInfoResult = aa.appSpecificInfo.getByCapID(itemCap);
  if (appSpecInfoResult.getSuccess()) {
    var appspecObj = appSpecInfoResult.getOutput();
    if (itemName != "") {
      for (i in appspecObj)
        if (appspecObj[i].getCheckboxDesc() == itemName && (!useAppSpecificGroupName || appspecObj[i].getCheckboxType() == itemGroup)) {
          returnValue =  appspecObj[i].getChecklistComment();
          break;
        }
    } 
  } else {
    logDebug("**ERROR: getting app specific info for Cap : " + appSpecInfoResult.getErrorMessage())
  }
  return returnValue;
}

function CWM_ELP_DPL_ACA_Check1RowLicenseInOtherJurASIT()
{
  loadASITables4ACA_Custom();
  var licInOtherJurRows = 0;  
  var minRows = 1;
  try 
  {
    if(AInfo["Are you professionally licensed or certified in any jurisdiction"]=="Yes"){
      if (typeof(LICENSEINOTHERJURISDICTIONS) != "object"){
        cancel = true;
        showMessage = true;
        comment("You must list any professional licenses or certifications you have in any jurisdictions.");
      }
    }
  } 
  catch (ex) 
  {
    /*
      if (licInOtherJurRows < minRows) 
      {
        cancel = true;
        showMessage = true;
        comment("You must list any professional licenses or certifications you have in any jurisdictions.");
      }
      */
showMessage = true;
    comment("LicInOtherJurRows cannot be empty"+ex.message);
    comment(ex.stack);
  }
}

/* @desc This method check Sum of Credits fields in Education ASIT should not less than 60.
 * Release C Script: 726
 * Added by tofek khan
 */

function CWM_ELP_726_ACA_DPL_checkCreditsASITMentalHealthCounselor()
{
  var educationRow = 0; 
  var credits = 0;
  var totalCredits=0;
  try 
  {
    if(!publicUser){
      loadASITablesBefore();
    }else if(publicUser){
      loadASITForACA();
    }
    educationRow = EDUCATION.length;
    if(educationRow == 1){
    totalCredits = parseFloat(EDUCATION[0]["Credits"]);
    }
    else if(educationRow > 1){
      for(x in EDUCATION)
      {
        credits = EDUCATION[x]["Credits"];
        //credits = parseFloat(credits) + parseFloat(credits);
        totalCredits = totalCredits + parseFloat(credits);
      }
    }  
  } 
  catch (err) 
  {
    logDebug("Error on function CWM_ELP_726_ACA_DPL_checkCreditsASITMentalHealthCounselor, Please call System Administrator. " + err.stack);
  } 
  if(totalCredits < 60){
      cancel = true;
      showMessage = true;
      comment("You must have accumulated at least 60 total credits to submit this application");
     }
}

//added by kpreeti on 3/1/2016 CWM_ELP_DPL_54_ASB_validateASIPTCOCheckbox
function CWM_ELP_DPL_54_ASB_validateASIPTCOCheckbox(){
try{
  var asiPTCO = AInfo["I certify under the pains and penalties of perjury that I am the board approved PTCO"];
  logDebug("asiPTCO "+asiPTCO);
  var vFlag = true;
  if(asiPTCO=="CHECKED"){
    vFlag = false;
  }
  if(vFlag){  
    cancel = true;
    showMessage = true;
    comment("The board approved PTCO must be the individual who completes the renewal of the license. Please contact the board for further instructions.");
  }
}catch(err){
  logDebug("Error message: "+err.message);
}
} // end of function

// Added for Script 53 : Neel Patel

function CWM_ELP_53_ASA_DPL_AH_attestationCheck(itemCapId){
    try{
    
  
      
    
        useAppSpecificGroupName = false;
        var result = false;
        var tmpCapId = null;
        if (capId) {
            tmpCapId = capId;
            capId = itemCapId;
        } else {
            capId = itemCapId;
        }
        // this to avoid a script error from special character.
        var splChar = String.fromCharCode(167);
        var asiName = "A. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
        var inComplianceGLC = getAppSpecific(asiName);
        var reportedDicipline = getAppSpecific("B. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
        var reportedPleas = getAppSpecific("C. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");
        asiName = "D. AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
        var reportedSSN = getAppSpecific(asiName);
        var undObligNonComp = getAppSpecific("E. I UNDERSTAND MY OBLIGATIONS UNDER M.G.L. C. 119, S. 51A AND THE PUNISHMENT FOR NONCOMPLIANCE.");
        var undObligDisabl = getAppSpecific("F. I UNDERSTAND AND WILL FULFILL MY STATUTORY OBLIGATION TO REPORT ABUSE/NEGLECT OF DISABLED PERSONS");
        var undObligElderly = getAppSpecific("G. I UNDERSTAND AND WILL FULFILL MY STATUTORY OBLIGATION TO REPORT ABUSE/NEGLECT OF THE ELDERLY.");
                 
        if(inComplianceGLC.toUpperCase().equals("NO") || reportedDicipline.toUpperCase().equals("NO") ||
           reportedPleas.toUpperCase().equals("NO") || reportedSSN.toUpperCase().equals("NO") ||
           undObligNonComp.toUpperCase().equals("NO") || undObligDisabl.toUpperCase().equals("NO") ||
           undObligElderly.toUpperCase().equals("NO")){
               if(renewalApproval(capId)){
         
                   logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
                   closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                   activateTask("Issuance");
                   updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
                   assignedToByShortNotes("Issuance", getBoard(capId));
                   result = true;
               }
               else{
        
             result = false;
         } 
        }
        else {
            if (renewalApproval(capId)) {
        
                        logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
                    closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
            activateTask("Issuance");
                         updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
             result = true;
        

            } else{

        result = false;
      } 
        }
        
        capId = tmpCapId;
        return result;
    }
    catch(err){
        showMessage = true;
        comment("Error on ASA function CWM_ELP_53_ASA_DPL_AH_attestationCheck, Please contact administrator");
    }
}/**
 * @desc This method will create Renewal records for CA (Public Accountancy) board.
 * @param {itemCapId} contains record ID.
 * @returns {boolean} - boolean value
 */
function  CWM_ELP_79_81_85_87_DPL_renewCALicense(itemCapId) 
{
  useAppSpecificGroupName = false;
    var result = false;
    var tmpCapId = null;
    if (capId) 
  {
        tmpCapId = capId;
        capId = itemCapId;
    }
  else
  {
        capId = itemCapId;
    }
  
  if((appMatch("License/Public Accountancy/CPA Firm for LLC/Renewal", capId)) || appMatch("License/Public Accountancy/CPA Firm for LLC/Renewal", capId) || appMatch("License/Public Accountancy/CPA Firm for Professional Corp/Renewal", capId))
  {
    if (renewalApproval(capId)) 
    {
      //Close initial task
      closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
      activateTask("Issuance");
      
      //Set the Renewal record Workflow Task/Status to 'Issuance/Attestation Review'
      updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
      
      //Assign the record to a user/department according to the TASK_ASSIGNMENT standard Choice
      assignedToByShortNotes("Issuance", getBoard(capId));
      result = true;
    }
    else
    {
      result = false;
    }
  }
  else if(appMatch("License/Public Accountancy/CPA/Renewal", capId))
  {
    //Script 79 changes needs to be add
    if (renewalApproval(capId)) 
    {
      //Close initial task
      closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
      activateTask("Issuance");
      
      //Set the Renewal record Workflow Task/Status to 'Issuance/Attestation Review'
      updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
      
      result = true;
    }
  }
}//

//added by kpreeti for script 55
function CWM_ELP_55_ASB_DPL_checkPTCO(){
    try{
    var apprNumStr = "";
        var boardCode = lookup("BOARDS", "Allied Health");
        var licenseType = "PF";
        var licenseNum = AInfo["PT Compliance Officer License Number:"];var flag = 0;
        var licHasCond = false;
        if (licenseNum != undefined && licenseNum != null && licenseNum != "") {
            var isActive = isLicenseActive(licenseNum, boardCode, licenseType);
      
            aa.print("Active: " + isActive);
            if(!isActive){
                flag = 1;
                if(apprNumStr == ""){
                    apprNumStr = licenseNum;
                }
                else{
                    apprNumStr = apprNumStr + ", " + licenseNum;
                }
            }
            else{
        var fullLicenseNum = licenseNum+"-"+boardCode+"-"+licenseType;
        var capLP = aa.cap.getCapID(fullLicenseNum).getOutput();
        aa.print("capLP####:"+capLP);
        vLicStatus = getMyLicenseStatus(capLP);//get license status here
        if(vLicStatus){
          aa.print("1.PT Facility License Number is valid license ,Now cheking for valid status;");
          if(vLicStatus == "Current"){
            aa.print("2.PT Facility License Number status is current. ");
        var refLPLicenseSeqNum1 = capLP.getLicenseProfessionalModel().getLicSeqNbr();
        var condArr = aa.caeCondition.getCAEConditions(refLPLicenseSeqNum1).getOutput();
        for (c in condArr)
        {
          var vCond = condArr[c];
          if ( vCond.getConditionDescription() == "Probation Condition")
            licHasCond == true;
        }
                }else{
          flag = 1;
        }
        }
        aa.print("Flag: " + flag);
        if(flag == 1 || licHasCond == true){
            cancel = true;
            showMessage = true;
            comment("The PT Facility License can not be renewed because the PTCO is not in good standing. Please contact the board for further instructions.");
        }
    }
  }
  }
    catch(ex) {
        showMessage=true;
        comment("Error on function CWM_ELP_55_ASB_DPL_checkPTCO, Please contact administrator");
    }
} // end

/* @desc This method checks Sum of 'Numbers of hours per week' fields in 'Post-Masters Experience' ASIT should not be greater than 35.
 * Release C Script: 725
 * Added by Ankush Kshirsagar
*  updated for 3614 :06/30/2017
 */
function CWM_ELP_725_ACA_DPL_checkHoursASITPostMastersExperience()
{
  var vPostMastersRow = 0;  
  var hours = 0;
  try 
  {
    if(!publicUser){
      loadASITablesBefore();
    }else if(publicUser){
      loadASITForACA();
    }

    if(POSTMASTERSEXPERIENCE && POSTMASTERSEXPERIENCE != null && POSTMASTERSEXPERIENCE != undefined)
    {
      vPostMastersRow = POSTMASTERSEXPERIENCE.length;
      if(vPostMastersRow == 1){
        hours = parseFloat(POSTMASTERSEXPERIENCE[0]["Number of Hours per week"]);
      }else if(vPostMastersRow > 1){
        for(x in POSTMASTERSEXPERIENCE){
          var tempHours= POSTMASTERSEXPERIENCE[x]["Number of Hours per week"];
                                         //if(!tempHours)tempHours = 0;
          tempHours = parseFloat(tempHours);
          if(isNaN(tempHours))tempHours = parseFloat(0);

          hours = parseFloat(hours) +tempHours;

        }
      }
    }
    
    if(hours > 35){
      cancel = true;
      showMessage = true;
      comment("You cannot have more than 35 Hours per week to submit this application");
      }   
  } 
  catch (err) 
  {
    //cancel = true;
    //showMessage = true;
    logDebug("Warning** No row found for POST-MASTERS EXPERIENCE ASIT " + err.message);
  } 
}//END OF FUNCTION: CWM_ELP_725_ACA_DPL_checkHoursASITPostMastersExperience

function getContactByTypeAA(contactType){
  try {
    var envContactList = aa.env.getValue("ContactList");
    var capContactArray = envContactList.toArray();
    var cArray = new Array();
    if (capContactArray) {
      logDebug("capContactArray is not null:"+capContactArray.length);
      for (yy in capContactArray) {
        var con = capContactArray[yy];
        logDebug("con:"+con);
        var p = con.getPeople();
        logDebug("checking contact type: " + p.getContactType());
        if (p.getContactType() == contactType) {
          return p;
        }
      }
    }
    logDebug("Your contact type was not found. Returning null.");
    return null;
  } catch (err) {
    logDebug("An error has occurred in getContactByTypeAA.");
    logDebug(err.message);
  }
}
function matchByCriteria() {
  try {
    var ipPeop = aa.people.createPeopleModel().getOutput().getPeopleModel();
    ipPeop["socialSecurityNumber"] = aa.env.getValue("ApplicantSocialSecurityNumber");
    ipPeop["birthDate"] = aa.env.getValue("ApplicantBirthDate");
    ipPeop["firstName"] = aa.env.getValue("ApplicantFirstName");
    ipPeop["lastName"] = aa.env.getValue("ApplicantLastName");
    ipPeop["phone1"] = aa.env.getValue("ApplicantPhone1");
    ipPeop["email"] = aa.env.getValue("ApplicantEmail");

    // This function uses the close match criteria stored in the
    // INDIVIDUAL_CONTACT_MATCH_CRITERIA and ORGANIZATION_CONTACT_MATCH_CRITERIA standard choices to check the reference
    // contact library for potential duplicates
    // takes a single peopleModel as a parameter, and will return an array of people models (peopResult)
    // returns null if there are no matches

    var fvCriteriaStdChoice = "INDIVIDUAL_CONTACT_MATCH_CRITERIA";

    //Add agency specific logic here if needed
    var fvBizDomainSR = aa.bizDomain.getBizDomain(fvCriteriaStdChoice);
    if (!fvBizDomainSR || !fvBizDomainSR.getSuccess()) {
      logDebug("Standard Choice '" + fvCriteriaStdChoice + "' not defined.");
      return null;
    }
    var fvBizDomain = fvBizDomainSR.getOutput();
    if (!fvBizDomain || fvBizDomain.size() == 0) {
      logDebug("No criteria defined in Standard Choice '" + fvCriteriaStdChoice + "'.");
      return null;
    }

    for (var fvCounter1 = 0; fvCounter1 < fvBizDomain.size(); fvCounter1++) {
      var fvCloseMatchCriteriaObj = fvBizDomain.get(fvCounter1);
      var fvCriteriaStr = fvCloseMatchCriteriaObj.getDispBizdomainValue();
      if (!fvCriteriaStr || fvCriteriaStr == "")
        continue;

      var fvPeop = aa.people.createPeopleModel().getOutput().getPeopleModel();

      var fvCriteriaArr = fvCriteriaStr.split(";");

      var fvSkipThisCriteria = false;
      for (var fvCounter2 in fvCriteriaArr) {
        var fvCriteriaFld = fvCriteriaArr[fvCounter2];
        if (ipPeop[fvCriteriaFld] == null) {
          fvSkipThisCriteria = true;
          logDebug("Value for " + fvCriteriaFld + " is null.");
          break;
        }
        fvPeop[fvCriteriaFld] = ipPeop[fvCriteriaFld];
        logDebug("Search for " + fvCriteriaFld + " " + fvPeop[fvCriteriaFld]);
      }

      if (fvSkipThisCriteria) {
        logDebug("WARNING: One or more Values for the Fields defined in this Criteria are null. Skipping this criteria.");
        continue;
      }

      var fvResult = aa.people.getPeopleByPeopleModel(fvPeop);
      if (!fvResult.getSuccess()) {
        logDebug("WARNING: Error searching for duplicate contacts : " + fvResult.getErrorMessage());
        continue;
      }

      var fvPeopResult = fvResult.getOutput();
      if (fvPeopResult.length == 0) {
        logDebug("Searched for REF contact, no matches found.");
        continue;
      }

      if (fvPeopResult.length > 0) {
        logDebug("Searched for a REF Contact, " + fvPeopResult.length + " matches found! returning the first match : " + fvPeopResult[0].getContactSeqNumber());
        return fvPeopResult[0].getContactSeqNumber();
      }
    }
    logDebug("No matches found. Returning Null.");
    return null;
  } catch (err) {
    logDebug("An error occurred in matchBySSN.");
    logDebug(err.message);
  }
}

// DPL Release C: Script ID 188.0 for CR388(Added by SKumar)
function CWM_ELP_188_ACA_PageFlow_HI_APP_checkExamResult()
{
  try 
  {
    //var vExam = getAppSpecific("Did you pass or fail the exam");
    var vExam = AInfo["Did you pass or fail the exam"];
    var vApplicationType = AInfo["Application Type:"];
    if (vExam && vApplicationType)
    {     
      if ((vApplicationType.toUpperCase().equals("REPROCITY") || vApplicationType.toUpperCase().equals("RECIPROCITY")) && vExam.toUpperCase().equals("FAIL"))
      {
        // block user from continuing with submission of the application
        cancel = true;
        showMessage = true;
        message = "";
        comment("Applicants must pass the Home Inspectors Examination. Please contact the board for further instructions.");
      }
    } else
          logDebug("Failed to get value from ASI Fields: Exam and Application Type");
  }
    
  catch(err)
    {
        showMessage=true;
    logDebug("Error in CWM_ELP_188_ACA_PageFlow_HI_APP_checkExamResult: " + err.message);
        comment("Error on function CWM_ELP_188_ACA_PageFlow_HI_APP_checkExamResult, Please contact administrator");
    }
 
} // END OF FUNCTION: CWM_ELP_188_ACA_PageFlow_HI_APP_checkExamResult()



//added by preeti for script 866
function CWM_ELP_DPL_866_ASB_ACA_validateASIForOccupationalSchool(){
try{
    logDebug("fetching value for program abb");
    var progAbb = AInfo["Program Abbreviation"];
    var progAbbValue = "";
    if(progAbb!= null ||progAbb != "" || progAbb != "undefined"){
      if(progAbb.length > 15){
        cancel = true;
        showMessage = true;
        comment("value in Program Abbreviation can not have lenght more than 15");
      }else{
        progAbbValue = progAbb.toUpperCase();
      }
    }
  }catch(err){
  logDebug("error in CWM_ELP_DPL_866_ASB_ACA_validateASIForOccupationalSchool. "+err.message);
  }
}// end of CWM_ELP_DPL_866_ASB_ACA_validateASIForOccupationalSchool
/**
 * By: debashish.barik, dt:3/4/2016
 * @description : Edit a column value of ASITable
 * @pCapId : cap id of the record
 * @pTableName :table name to alter.
 * @pColName : column name to alter.
 * @pColValue : new value for column 'pColName'
 */
function CWM_ELP_WTUA_DPL_XXX_editColumnOnASIT(pCapId,pTableName,pColName,pColValue){
  var vTname = pTableName;//"EMPLOYEE INFORMATION";
  var vLoadTable = loadASITable(vTname,pCapId);
        logDebug("Employee Information Rows: " + vTname.length);
  for (var i = 0; i < vLoadTable.length; i++) {
    editASITableRow(vLoadTable, pCapId, vTname, pColName, pColValue,i);
  }
}
// added by Ankush Kshirsagar for Script#902
function CWM_ELP_902_ACA_ASIPageFlowBusinessAmendment(){
  try{
    var myAInfo = new Array();
    loadAppSpecific4ACA(myAInfo);
    var vChangeOfBusinessEntityName = myAInfo["Change of Business Entity Name"];
    var vChangeOfMailingAddress = myAInfo["Change of Mailing Address"];
    var vChangeOfPremisesAddress = myAInfo["Change of Premises Address"];
    var vChangeOfDoingBusinessAsName = myAInfo["Change of Doing Business as Name"];
    var vDuplicateLicense = myAInfo["Duplicate License"];

    if(vChangeOfBusinessEntityName == "CHECKED" || vChangeOfMailingAddress == "CHECKED"){
      // Goto Page 2. "Contact Edit" Page
      aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '2', 'PageNumber':'1'}}"); 
    }else if(vChangeOfPremisesAddress == "CHECKED" && vChangeOfBusinessEntityName != "CHECKED" && vChangeOfMailingAddress != "CHECKED"){
      // Goto Page 2. "Premises Address Edit" Page
      aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '2', 'PageNumber':'2'}}"); 
    }else if(vChangeOfDoingBusinessAsName == "CHECKED" && vChangeOfPremisesAddress != "CHECKED" && vChangeOfBusinessEntityName != "CHECKED" && vChangeOfMailingAddress != "CHECKED"){
      // Goto Page 3. "DBA Edit" page
      aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '3', 'PageNumber':'1'}}"); 
    }else if(vDuplicateLicense == "CHECKED" && vChangeOfDoingBusinessAsName != "CHECKED" && vChangeOfPremisesAddress != "CHECKED" && vChangeOfBusinessEntityName != "CHECKED" && vChangeOfMailingAddress != "CHECKED"){
      // Goto Page 5. "E-Signature" page
      aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '5', 'PageNumber':'1'}}"); 
    }
  }catch(err){
    logDebug("Error message: "+err.message);
  } 
}

function getBoardForVerifcation(boardParam,asiLicType)
{
  var boardCode = "";
  var asiBoard = boardParam;
  
  //logic to derive the proper board for the lookup.
  if (boardParam=="Plumbers and Gas Fitters")
  {
    if (asiLicType=="Apprentice Gas Fitter" || asiLicType=="Gas Fitting Business" || asiLicType=="Journeyman Gas Fitter" || asiLicType=="Master Gas Fitter") {
      asiBoard = "Gas Fitters";
    }
    else {
      asiBoard = "Plumbers";
    }
  }
  else if (boardParam=="Electricians and Fire Alarm System Installers")
  {
    if (asiLicType=="Systems Contractor" || asiLicType=="Systems Technician") {
      asiBoard = "Fire Alarm System Installers";
    }
    else {
      asiBoard = "Electricians";
    }
  }
  else if (boardParam=="Engineers and Land Surveyors")
  {
    asiBoard = "Engineering"; 
  }
  else if (boardParam=="Real Estate Brokers and Salespersons")
  {
    asiBoard = "Real Estate Brokers & Salespersons";
  }
  else if (boardParam == "Psychology")
  {
    asiBoard = "Psychology";
  }
  else if (boardParam == "Real Estate Appraisers")
  {
    asiBoard = "Real Estate Appraisers";
  }
  else if (boardParam == "Sheet Metal Workers")
  {
    asiBoard = "Sheet Metal Workers";
  }
  else if (boardParam == "Veterinary Medicine")
  {
    asiBoard = "Veterinary Medicine";
  }
  else if (boardParam == "Health Officers")
  {
    asiBoard = "Health Officers";
  }
  else if (boardParam == "Dietitians and Nutritionists")
  {
    asiBoard = "Dietitians and Nutritionists";
  } 
  else if (boardParam == "Podiatrist")
  {
    asiBoard = "Podiatrist";
  }

  else if (boardParam == "Architect")
  {
      asiBoard = "Architects";
  }
  else if (boardParam == "Landscape Architects")
  {
  asiBoard = "Landscape Architects";
  }
  else if (boardParam == "Allied Mental Health")
  {
  asiBoard = "Allied Mental Health";
  }
  else if (boardParam == "Speech-Language Pathologists and Audiologists")
  {
  asiBoard = "Speech-Language Pathologists and Audiologists";
  }
  else if (boardParam=="Embalming and Funeral Directing"){
      if (asiLicType=="Funeral Establishment") {
      asiBoard = "Funeral Establishment";
        }
        else {
          asiBoard = "Embalming";
        }
    
  }
  else if (boardParam=="Cosmetologists"){

      if (asiLicType=="Salon Type 1 - 5" || asiLicType=="Cosmetology School" || asiLicType=="Aesthetician School" || asiLicType=="Mobile Manicuring" || asiLicType=="Advanced Training Institute"  || asiLicType=="Manicuring School") {
      asiBoard = "Cosmetologist Business";
        }
        else {
          asiBoard = "Cosmetologists";
        }
    
  } 
    else if (boardParam=="Barbers"){

      if (asiLicType=="Barber Shop" || asiLicType=="Barber School") {
      asiBoard = "Barber Shop";
        }
        else {
          asiBoard = "Barbers";
        }
    
  } 
  if (asiBoard != undefined && asiBoard != null && asiBoard != "")
  {
    boardCode = lookup("BOARDS", asiBoard);
  }
  return boardCode;
}


function CWM_ELP_8226_WTUB_DPL_checkFeePaymentForREAttBroker()    //PRD
{
  try
  {
    if(wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
    {
      var amtFee = 0;
      var amtPaid = 0;
      
      var feeResult = aa.fee.getFeeItems(capId);
      if (feeResult.getSuccess()) 
      {
        var feeObjArr = feeResult.getOutput();
        for (ff in feeObjArr)
        {
          if(feeObjArr[ff].getFeeitemStatus() == "INVOICED")
          {
            amtFee = amtFee + feeObjArr[ff].getFee();
          }
        }
      }
      //logDebug("Fee Amount: " + amtFee);
      
      var pfResult = aa.finance.getPaymentFeeItems(capId, null);
      if (pfResult.getSuccess()) 
      {
        var pfObj = pfResult.getOutput();
        for (ij in pfObj)
        {
          amtPaid = amtPaid + pfObj[ij].getFeeAllocation();
        } 
      }
      //logDebug("Amount not paid: " + amtPaid);
      
      if((amtFee - amtPaid) > 0)
      {
        cancel = true;
        showMessage = true;
        comment("All fees must be paid prior to approval of the application.");
      }   
    }
  }
  catch(err)
  {
    showMessage=true;
    comment("Error on WTUB function CWM_ELP_8226_WTUB_DPL_checkFeePaymentForREAttBroker, Please contact administrator");
  }
}

function CWM_ELP_defect_8927_copyAffBrokeronRenewal()
{
  var licCapId = getParentCapID4Renewal();
  setEndDateOnContactByType("Affiliated Broker", licCapId);
  //copyContactsByTypeWithAddress(capId, licCapId, "Affiliated Broker");
  setContactsSyncFlag("N",licCapId);

  var parentLicCapId = getParentLicenseRecord(capId);
  if (parentLicCapId)
  {
    removeLPsExceptPrimary(parentLicCapId);
  }

  //Add the new Key Individual LP
  var vTypeClass = String(lookup("lookup:LP to Type Class", "Broker" )).split(";");
  for (tc in vTypeClass) 
  {
    useAppSpecificGroupName = true;
    var keyIndLicenseNbr = getAppSpecific("KEY INDIVIDUAL.License Number");
    if(keyIndLicenseNbr)
    {
                         var refLPLic = getRefLicenseProf(parentLicCapId.getCustomID());
      var refLPOnLic = refLPLic.getStateLicense();
      logDebug("refLPOnLic : "+refLPOnLic);
      var refLP = getRefLicenseProf(keyIndLicenseNbr, "RE", vTypeClass[tc])
      if(refLP) 
      {
                                 if(refLPOnLic != keyIndLicenseNbr)
        {
            var capListResult = aa.licenseScript.associateLpWithCap(parentLicCapId, refLP);
                          var retVal = capListResult.getSuccess();
              logDebug("Linked New license LP successfully ? " + retVal);
        }
        var licNum = refLP.stateLicense + "-RE-" + refLP.businessLicense;
        var refLPFirstName = refLP.contactFirstName;
        var refLPLastName = refLP.contactLastName;
  
        logDebug("Master License: " + licNum);
        logDebug("Master Licensee: " + refLPFirstName + " " + refLPLastName);
        
        if (isDPLLicenseFormat(licNum) && refLPFirstName && refLPLastName) 
        {
          var licCapId = aa.cap.getCapID(licNum).getOutput();
          var licContacts = getPeople(licCapId);
          for (c in licContacts) 
          {
            var licContact = licContacts[c];
            var licContactModel = licContact.getCapContactModel();
            var refContactNumber = licContactModel.refContactNumber;
            var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput();
            logDebug(">> " + licContact.firstName + " " + licContact.lastName + " ref:" + refContactNumber);
            
            if (licContact.firstName && licContact.lastName && licContact.firstName.toUpperCase().equals(refLPFirstName.toUpperCase()) && licContact.lastName.toUpperCase().equals(refLPLastName.toUpperCase())) 
            {
              var getResult = aa.people.getPeople(refContactNumber);
              if (getResult.getSuccess()) 
              {
                var peopleObj = getResult.getOutput();
                var contactNbr = addRefContactFromRenToLic(peopleObj, parentLicCapId);
                var parentLicContacts = aa.people.getCapContactByCapID(parentLicCapId).getOutput();
                
                for (c in parentLicContacts) 
                {
                  var pLicContact = parentLicContacts[c];
                  if (pLicContact.getPeople().getContactSeqNumber() == contactNbr) 
                  {
                    pLicContact.getPeople().setContactType("Affiliated Broker");
                    var updateResult = aa.people.editCapContact(pLicContact.getCapContactModel());
                    if (updateResult.getSuccess()) 
                    {
                      logDebug("Contact " + contactNbr + " updated successfully");
                    } 
                    else 
                    {
                      logDebug("Contact " + contactNbr + " update failed: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                    }
                    
                     // copy addresses
                    for (add in contactAddressList) 
                    {
                      var transactionAddress = false;
                      contactAddressModel = contactAddressList[add].getContactAddressModel();
                      if (contactAddressModel.getEntityType() == "CAP_CONTACT") 
                      {
                        transactionAddress = true;
                        contactAddressModel.setEntityID(parseInt(pLicContact.getPeople().getContactSeqNumber()));
                      }
                      // Commit if transaction contact address
                      if (transactionAddress) 
                      {
                        var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                        contactAddressModel.setContactAddressPK(newPK);
                        aa.address.createCapContactAddress(parentLicCapId, contactAddressModel);
                      }
                      // Commit if reference contact address
                      else 
                      {
                        // build model
                        var Xref = aa.address.createXRefContactAddressModel().getOutput();
                        Xref.setContactAddressModel(contactAddressModel);
                        Xref.setAddressID(contactAddressList[add].getAddressID());
                        Xref.setEntityID(parseInt(pLicContactpLicContact.getPeople().getContactSeqNumber()));
                        Xref.setEntityType(contactAddressModel.getEntityType());
                        Xref.setCapID(parentLicCapId);
                        // commit address
                        aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                      }
                    }
                    break;
                  }
                }
                break; 
              }
              else 
              {
                logDebug("Can't find " + refLPFirstName + " " + refLPLastName + " reference contact number: " + refContactNumber + " : " + getResult.getErrorType() + ":" + getResult.getErrorMessage());
              }
            }
          }
        }
      }
    }
  } 
}

function addRefContactFromRenToLic(peopleObj, capId) {
    //Add the reference contact record to the current CAP
    var contactAddResult = aa.people.createCapContactWithRefPeopleModel(capId, peopleObj);
    if (contactAddResult.getSuccess()) {
        logDebug("Contact successfully added to CAP.");
        var capContactResult = aa.people.getCapContactByCapID(capId);
        if (capContactResult.getSuccess()) {
            var Contacts = capContactResult.getOutput();
            var csnArray = new Array();
            for (c in Contacts)
                csnArray.push(Contacts[c].getCapContactModel().getPeople().getContactSeqNumber());

            var contactNbr = Math.max.apply(Math, csnArray);
            logDebug("Contact Nbr = " + contactNbr);
            return contactNbr;
        } else {
            logDebug("**ERROR: Failed to get Contact Nbr: " + capContactResult.getErrorMessage());
            return false;
        }
    } else {
        logDebug("**ERROR: Cannot add contact: " + contactAddResult.getErrorMessage());
        return false;
    }
}

function CWM_ELP_DPL_229_CopyASITtoLic(newLicID) {
  try {
    var shareHolder = loadASITable("SHAREHOLDER INFORMATION", capId);
    var primaryContactName = getAppSpecific("Name of the Primray Contact");
    var primaryContactTitle = getAppSpecific("Title of the Primray Contact");
    var masterArray = new Array();
    var masterArray2 = new Array();
    var elementArray = null;

    for (row in shareHolder) {
      elementArray = new Array();
      elementArray["Name"] = shareHolder[row]["Name"];
      elementArray["Owner Type"] = shareHolder[row]["Owner Type"];
      elementArray["License #"] = shareHolder[row]["License #"];
      elementArray["Expiration Date"] = shareHolder[row]["Expiration Date"];
      elementArray["License Type"] = shareHolder[row]["License Type"];
      elementArray["Start Date"] = shareHolder[row]["Start Date"];
      elementArray["End Date"] = shareHolder[row]["End Date"];
      masterArray.push(elementArray);
    }
    addASITable("CURRENT SHAREHOLDER INFO", masterArray, newLicID);

    elementArray = new Array();
    elementArray["Name of the Primary Contact"] = primaryContactName;
    elementArray["Title of the Primary Contact"] = primaryContactTitle;
    var today = new Date();
    elementArray["Start Date"] = (today.getMonth() + 1) + "/" + today.getDate() + "/" + (today.getFullYear());
    elementArray["End Date"] = "";
    masterArray2.push(elementArray);
    addASITable("CPA OFFICER", masterArray2, newLicID);
  } catch (err) {
    logDebug("An error has occurred in CWM_ELP_DPL_229_CopyASITtoLic.");
    logDebug(err.message);
  }
}
// added by Ankush Kshirsagar for Script#902
function CWM_ELP_902_ACA_ASIPageFlowBusinessAmendmentPremisesAddressPage(){
  try{
    var myAInfo = new Array();
    loadAppSpecific4ACA(myAInfo);
    var vChangeOfBusinessEntityName = myAInfo["Change of Business Entity Name"];
    var vChangeOfMailingAddress = myAInfo["Change of Mailing Address"];
    var vChangeOfPremisesAddress = myAInfo["Change of Premises Address"];
    var vChangeOfDoingBusinessAsName = myAInfo["Change of Doing Business as Name"];
    var vDuplicateLicense = myAInfo["Duplicate License"];

    if(vChangeOfDoingBusinessAsName == "CHECKED"){
      // Goto Page 3. "DBA Edit" page
      aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '3', 'PageNumber':'1'}}"); 
    }else if(vChangeOfDoingBusinessAsName != "CHECKED"){
      // Goto Page 4. "Documents" page
      aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '4', 'PageNumber':'1'}}");
    }
  }catch(err){
    logDebug("Error message: "+err.message);
  } 
}
// added by Ankush Kshirsagar for Script#902
function CWM_ELP_902_ACA_ASIPageFlowBusinessAmendmentContactPage(){
  try{
    var myAInfo = new Array();
    loadAppSpecific4ACA(myAInfo);
    var vChangeOfPremisesAddress = myAInfo["Change of Premises Address"];
    var vChangeOfDoingBusinessAsName = myAInfo["Change of Doing Business as Name"];

    if(vChangeOfPremisesAddress == "CHECKED"){
      // Goto Page 2. "Premises Address Edit" Page
      aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '2', 'PageNumber':'2'}}"); 
    }else if(vChangeOfDoingBusinessAsName == "CHECKED" && vChangeOfPremisesAddress != "CHECKED"){
      // Goto Page 3. "DBA Edit" page
      aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '3', 'PageNumber':'1'}}"); 
    }else if(vChangeOfPremisesAddress != "CHECKED" && vChangeOfDoingBusinessAsName != "CHECKED"){
      // Goto Page 4. "Documents" page
      aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '4', 'PageNumber':'1'}}"); 
    }
  }catch(err){
    logDebug("Error message: "+err.message);
  } 
}

//Added by tofek, 3/4/2016
function CWM_ELP_202_DPL_ASB_CheckRowEmployeeInformation()
{
  var empInfoRow = 0; 
  var minRows = 1;
  var flag = 0;
  try 
  {
    if(!publicUser){
      loadASITablesBefore();
    }else if(publicUser){
      loadASITForACA();
    }
    empInfoRow = EMPLOYEEINFORMATION.length;
    for(x in EMPLOYEEINFORMATION){
      var col1 = EMPLOYEEINFORMATION[x]["Employee Name"];
      var col2 = EMPLOYEEINFORMATION[x]["Employee Position"];   
      var col3 = EMPLOYEEINFORMATION[x]["Date of Birth"];   
      var col4 = EMPLOYEEINFORMATION[x]["License Number (if applicable)"];
      var col5 = EMPLOYEEINFORMATION[x]["License Type (if applicable)"];    
      var col6 = EMPLOYEEINFORMATION[x]["Start Date"];   
      var col7 = EMPLOYEEINFORMATION[x]["End Date"];      
      if((col1.length() != 0) || (col2.length()!=0) || (col3.length()!=0) || (col4.length() != 0) || (col5.length()!=0) || (col6.length()!=0) || (col7.length()!=0)){
         flag = 1;
      }
    }
    logDebug("Number of Employee Information ASIT Row: "+empInfoRow);
  } 
  catch (ex) 
  {
    if (empInfoRow < minRows) 
    {
      flag = 0;
    }
    
  }
  if(flag == 0){
    cancel = true;
    showMessage = true;
    comment("You must add at least 1 row in License In  EMPLOYEE INFORMATION.");
  }
  
}//END OF FUNCTION: CWM_ELP_202_DPL_ASB_CheckRowEmployeeInformation


/* @desc This function unlinks the ACA Account from a particular License based on capId.
 * Added by Ankush: Release C Script#41     
*/
function unlinkACAAccountFromLic(vCapId){
  try{
    aa.cap.updateCreatedAccessBy4ACA(vCapId, "ADMIN", "Y", "N");
  }catch(err){
    logDebug("Error on unlinkACAAccountFromLic : "+err.message);
  }
}//END OF FUNCTION: unlinkACAAccountFromLic
//debashish.barik
function getCapContactModelArray(pCapId){
  var contactArray = getPeople(pCapId);
  var capContactModArr = new Array();
  if(contactArray){
    for(x in contactArray ){
      var vContactModel = contactArray[x].getCapContactModel();
      capContactModArr.push(vContactModel);   
    }
    return capContactModArr;
  }
  return false;
}

/* @desc
 * Added by Ankush: Release C Script#41.1    
*/
function CWM_ELP_DPL_41_WTUA_getParentLicAndUnlinkFromACA(){
  try{
    var vParentRecord = getAppSpecific("END EXISTING RELATIONSHIP.PT Facility License Number");
    if(vParentRecord != null && vParentRecord != ""){
      vParentRecord = vParentRecord.toString();
      if (vParentRecord.indexOf("-") < 0) {
        vParentRecord = vParentRecord + "-" + "AH" + "-" + "PF";
      }
      var vParentRecordCapId = aa.cap.getCapID(vParentRecord);
      if(vParentRecordCapId != null && vParentRecordCapId.getSuccess()){
        vParentRecordCapId = vParentRecordCapId.getOutput();
        unlinkACAAccountFromLic(vParentRecordCapId);
      }   
    }
  }catch(err){
    logDebug("Error on CWM_ELP_DPL_41_WTUA_getParentLicAndUnlinkFromACA : "+err.message);
  }
}//END OF FUNCTION: CWM_ELP_DPL_41_WTUA_getParentLicAndUnlinkFromACA

function CWM_ELP_DPL_96_103_WTUA_UpdateShareHolder() {
  if(wfTask == "Validate" && wfStatus == "Completed") {
    try {
      var newShareHolder = loadASITable("NEW SHAREHOLDER INFORMATION");
      var currentShareHolder = loadASITable("CURRENT SHAREHOLDER INFO");
      var masterArray1 = new Array();
      var masterArray2 = new Array();
      var masterArray3 = new Array();
      var elementArray = null;
      var parentID = getParent();
      var removalRows = new Array();

      for (row in newShareHolder) {
        elementArray = new Array();
        elementArray["Name"] = newShareHolder[row]["Name"];
        elementArray["Owner Type"] = newShareHolder[row]["Owner Type"];
        elementArray["License #"] = newShareHolder[row]["License #"];
        elementArray["Expiration Date"] = newShareHolder[row]["Expiration Date"];
        elementArray["License Type"] = newShareHolder[row]["License Type"];
        elementArray["Start Date"] = newShareHolder[row]["Start Date"];
        elementArray["End Date"] = newShareHolder[row]["End Date"];
        masterArray1.push(elementArray);
      }
      addASITable("CURRENT SHAREHOLDER INFO", masterArray1, parentID);

      for (row in currentShareHolder) {
        if ((currentShareHolder[row]["End Date"] != undefined) && (currentShareHolder[row]["End Date"] != null) && (currentShareHolder[row]["End Date"] != "")) {
          elementArray = new Array();
          elementArray["Name"] = currentShareHolder[row]["Name"];
          elementArray["Owner Type"] = currentShareHolder[row]["Owner Type"];
          elementArray["License #"] = currentShareHolder[row]["License #"];
          var vLicenseToRem = String(currentShareHolder[row]["License #"]);
          removalRows.push(vLicenseToRem);          
          elementArray["Expiration Date"] = currentShareHolder[row]["Expiration Date"];
          elementArray["License Type"] = currentShareHolder[row]["License Type"];
          elementArray["Start Date"] = currentShareHolder[row]["Start Date"];
          elementArray["End Date"] = currentShareHolder[row]["End Date"];
          masterArray2.push(elementArray);
        }
      }
      addASITable("FORMER SHAREHOLDER INFO", masterArray2, parentID);
logDebug("removalRows:"+removalRows);
      //Remove the row:
      var parCurrentShareHolder = loadASITable("CURRENT SHAREHOLDER INFO", parentID);
      removeASITable("CURRENT SHAREHOLDER INFO", parentID);
      for (row in parCurrentShareHolder) {
        //logDebug("LIcense #:"+parCurrentShareHolder[row]["License #"]);
        //logDebug("Removal:"+removalRows.indexOf(parCurrentShareHolder[row]["License #"]));
        var vNotIncludeLic = String(parCurrentShareHolder[row]["License #"]);
        logDebug("LIcense #:"+vNotIncludeLic);
        logDebug("Removal:"+removalRows.indexOf(vNotIncludeLic));
        if ((removalRows.indexOf(vNotIncludeLic) == -1)) { //if this row hasn't been flagged for removal
          elementArray = new Array();
          elementArray["Name"] = parCurrentShareHolder[row]["Name"];
          elementArray["Owner Type"] = parCurrentShareHolder[row]["Owner Type"];
          elementArray["License #"] = parCurrentShareHolder[row]["License #"];
          elementArray["Expiration Date"] = parCurrentShareHolder[row]["Expiration Date"];
          elementArray["License Type"] = parCurrentShareHolder[row]["License Type"];
          elementArray["Start Date"] = parCurrentShareHolder[row]["Start Date"];
          elementArray["End Date"] = parCurrentShareHolder[row]["End Date"];
          masterArray3.push(elementArray);
        }
      }
      addASITable("CURRENT SHAREHOLDER INFO", masterArray3, parentID);
    } catch (err) {
      logDebug("An error has occurred in CWM_ELP_DPL_96_103_WTUA_UpdateShareHolder.");
      logDebug(err.message);
    }
  }
}

// Added by tofek, For the script#250.
function CWM_ELP_250_DPL_ASB_ACA_CheckASIFields()
{
  try
  {
          var isCompleted = AInfo["Have you completed and submitted the Certificate of Regulatory Board?"];
  var isGoodStanding = AInfo["Have you obtained the Certificate of Good Standing issued by the Secretary of the Commonwealth?"];
    
    if (isCompleted == "No" || isCompleted == "UNCHECKED" || isCompleted == "NO" )
    {
        cancel = true;
        showMessage = true;
        message = "";
        comment("Please contact the board for further directions at accountingboard@state.ma.us");
    }
    
    if (isGoodStanding == "No" || isGoodStanding == "UNCHECKED" || isGoodStanding == "NO" )
    {
        cancel = true;
        showMessage = true;
        message = "";
        comment("Please contact the Secretary of the Commonwealth of Massachusetts to obtain your Certificate of Good Standing before submitting an application.");
    }
  }
  catch(err)
  {
           cancel = true;
    showMessage=true;
    comment("Error on ASB function CWM_ELP_250_DPL_ASB_ACA_CheckASIFields, Please contact administrator");
  }
}
function addContactToRecord(contactType,licNo,customID)
{
  logDebug("License Number: " + licNo);
  var refLP = getRefLicenseProf(customID);

  if (refLP) 
  {
    var refLPFirstName = refLP.contactFirstName;
    var refLPLastName = refLP.contactLastName;

    if (refLPFirstName && refLPLastName) 
    {
      var licCapId = aa.cap.getCapID(customID).getOutput();
      var licContacts = getPeople(licCapId); 
      for (c in licContacts) 
      {
        var licContact = licContacts[c];
        var licContactModel = licContact.getCapContactModel();
        var refContactNumber = licContactModel.refContactNumber;
        var contactAddressList = aa.address.getContactAddressListByCapContact(licContactModel).getOutput();
        logDebug("License Contact: " + licContact.firstName + " " + licContact.lastName + " ref:" + refContactNumber);
        if (licContact.firstName && licContact.lastName && licContact.firstName.toUpperCase().equals(refLPFirstName.toUpperCase()) && licContact.lastName.toUpperCase().equals(refLPLastName.toUpperCase())) 
        {
          var getResult = aa.people.getPeople(refContactNumber);
          if (getResult.getSuccess()) 
          {
            var peopleObj = getResult.getOutput();
            var parentID = getParent();
            var contactAddResult = aa.people.createCapContactWithRefPeopleModel(parentID, peopleObj);
            if (contactAddResult.getSuccess()){
              logDebug("Contact successfully added to CAP.");
            }
            
            // add the reference contact from the people object to the application record
            var contactNbr = addReferenceContactFromPeopleModel(peopleObj);
            logDebug("contact Number of new Ref contact: " + contactNbr);
            var appContacts = aa.people.getCapContactByCapID(parentID).getOutput();
            for (c in appContacts) 
            {
              var appContact = appContacts[c];
              if (appContact.getCapContactModel().getRefContactNumber() == refContactNumber) 
              {
                // change the contact type of the newly added contact
                appContact.getPeople().setContactType(contactType);
                var updateResult = aa.people.editCapContact(appContact.getCapContactModel());
                if (updateResult.getSuccess()) 
                {
                  logDebug("Contact " + contactNbr + " updated successfully");
                } 
                else 
                {
                  logDebug("Contact " + contactNbr + " update failed: " + updateResult.getErrorType() + ":" + updateResult.getErrorMessage());
                }
                // copy addresses
                for (add in contactAddressList) 
                {
                  var transactionAddress = false;
                  contactAddressModel = contactAddressList[add].getContactAddressModel();
                  if (contactAddressModel.getEntityType() == "CAP_CONTACT") 
                  {
                    transactionAddress = true;
                    contactAddressModel.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                  }
                  // Commit if transaction contact address
                  if (transactionAddress) 
                  {
                    var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                    contactAddressModel.setContactAddressPK(newPK);
                    aa.address.createCapContactAddress(capId, contactAddressModel);
                  }
                  // Commit if reference contact address
                  else 
                  {
                    // build model
                    var Xref = aa.address.createXRefContactAddressModel().getOutput();
                    Xref.setContactAddressModel(contactAddressModel);
                    Xref.setAddressID(contactAddressList[add].getAddressID());
                    Xref.setEntityID(parseInt(appContact.getPeople().getContactSeqNumber()));
                    Xref.setEntityType(contactAddressModel.getEntityType());
                    Xref.setCapID(capId);
                    // commit address
                    aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                  }
                }
                break;
              }        
            }
            break;
          }
          else 
          {
            logDebug("Can't find " + refLPFirstName + " " + refLPLastName + " reference contact number: " + refContactNumber + " : " + getResult.getErrorType() + ":" + getResult.getErrorMessage());
          }
        }       
      }
    }   
  }
  else return null; 
}
/**
By: debashish.barik,Dt:3/9/2016
@pCapId : capId model of the record
@return :object literal
Ex:
var vResult = getBoardRecordFromCapId(pCapId);
if(vResult){
var boardName = vResult.rBoarName;
var recordName = vResult.rRecordName;
}
*/
function getBoardRecordFromCapId(pCapId) {
  try {
    if (pCapId) {
      var vCapScriptModel = aa.cap.getCap(pCapId).getOutput();
      var vCapTypeString = vCapScriptModel.getCapType().toString();
      var vCapTypeStringArr = vCapTypeString.split("/");
      var vBoard = vCapTypeStringArr[1];
      var vRecord = vCapTypeStringArr[2];
      return {
        rBoarName : vBoard,
        rRecordName : vRecord
      };
    }
    logDebug("Warning! cannot get board and record from capid:" + pCapId);
    return false;
  } catch (err) {
    logDebug("Warning! in function getBoardRecordFromCapId():" + err.message);
    return false;
  }
}
//Added by Chris LJ on 3/11/16
function CWM_ELP_258_DPL_ASB_CheckMinRowOtherDPL_LicForChiro() {
  var dplRows = 0;
  var minRows = 1;
  var flag = 0;

  try {
    if (!publicUser) {
      loadASITablesBefore();
    } else if (publicUser) {
      loadASITForACA();
    }
    dplRows = CHOROTHERLICENSESINDPL.length;

    if (dplRows < minRows) {
      flag = 0;
    }
  } catch (err) {
    if (dplRows < minRows) {
      flag = 0;
    } else {
      logDebug(err.message);
    }
  }
  if (flag == 0) {
    cancel = true;
    showMessage = true;
    comment("Please indicate your license information for professional licenses within DPL.");
  }

}
function conditionExists(pType, pStatus, pDesc, pImpact,recordID) {
  // Checks to see if conditions have been added to CAP
  if (pType == null)
    var condResult = aa.capCondition.getCapConditions(recordID);
  else
    var condResult = aa.capCondition.getCapConditions(recordID, pType);
  if (condResult.getSuccess())
    var capConds = condResult.getOutput();
  else {
    logMessage("**ERROR: getting cap conditions: " + condResult.getErrorMessage());
    logDebug("**ERROR: getting cap conditions: " + condResult.getErrorMessage());
    return false;
  }
  var cStatus;
  var cDesc;
  var cImpact;
  for (cc in capConds) {
    var thisCond = capConds[cc];
    var cStatus = thisCond.getConditionStatus();
    var cDesc = thisCond.getConditionDescription();
    var cImpact = thisCond.getImpactCode();
    var cType = thisCond.getConditionType();
    if (cStatus == null)
      cStatus = " ";
    if (cDesc == null)
      cDesc = " ";
    if (cImpact == null)
      cImpact = " ";
    //Look for matching condition
    if ((pStatus == null || pStatus.toUpperCase().equals(cStatus.toUpperCase())) && (pDesc == null || pDesc.toUpperCase().equals(cDesc.toUpperCase())) && (pImpact == null || pImpact.toUpperCase().equals(cImpact.toUpperCase())))
      return true; //matching condition found
  }
  return false; //no matching condition found
}

// added by tofek khan ---Used by multiple boards
// this function will skip some page of renewal record as per value of ASI.
// this will execute only on ACA.
//updated by Sagar: Changes for script 390
//updated by tofek: Changes for script 44
function CWM_ELP_392_ACA_ASIPageFlow_SpeechLangPathologist(pcapId)
{
  
  //For Script 392
  var AInfo = new Array();
        //loadAppSpecific(AInfo, pcapId);
         loadAppSpecific4ACA(AInfo);
  
         // Added for Script#44, by tofek 
   if((appMatch("License/Allied Health/Athletic Trainer/Renewal", capId)) || (appMatch("License/Allied Health/Physical Therapist Assistant/Renewal", capId)) || (appMatch("License/Allied Health/Physical Therapist/Renewal", capId)) || (appMatch("License/Allied Health/Occupational Therapist/Renewal", capId)) ){
       currentPracticeStatus = AInfo["Current Employment Status"];
  }else{
    currentPracticeStatus = AInfo["Current Practice Status"];
  }
   if(currentPracticeStatus == "Not Practicing"){
     // Goto Page 2. "E-Signature" Page
     aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '2', 'PageNumber':'2'}}"); 
   } else if(currentPracticeStatus == "Practicing in Massachusetts"){
    // Goto Page 3. "Reinstatement" Page
    aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '2', 'PageNumber':'3'}}"); 
   }else if((currentPracticeStatus == "Practicing in another state") || (currentPracticeStatus == "Practicing in another state (must upload resume)")){
    // Goto Page 2. "E-Signature" Page
    aa.env.setValue("ReturnData", "{'PageFlow': {'StepNumber': '2', 'PageNumber':'2'}}"); 
   }
}
function CWM_ELP_RELC_isAmendmentLicenseActive() {
  try {
    //get our fields
    var boardName = getAsbAmendBoard();
    for (loopk in AppSpecificInfoModels) {
        var appSpecificObj = AppSpecificInfoModels[loopk];
        if (appSpecificObj.getCheckboxType() == "ADD NEW RELATIONSHIP") {
          if (appSpecificObj.checkboxDesc == "License Number") {
            var addLicenseNum = appSpecificObj.checklistComment;
            break;

          }
        }

      }
      for (loopk in AppSpecificInfoModels) {
        var appSpecificObj = AppSpecificInfoModels[loopk];
        if (appSpecificObj.getCheckboxType() == "END EXISTING RELATIONSHIP") {
          if (appSpecificObj.checkboxDesc == "License Number") {
            var removeLicenseNum = appSpecificObj.checklistComment;
            break;

          }
        }
      }   
      for (loopk in AppSpecificInfoModels) {
        var appSpecificObj = AppSpecificInfoModels[loopk];
        if (appSpecificObj.getCheckboxType() == "MY LICENSE") {
          if (appSpecificObj.checkboxDesc == "License Number") {
            var myLicenseNum = appSpecificObj.checklistComment;
            break;

          }
        }
      }   
      if (appMatch("License/Hearing Instrument/Amendment/Apprentice Update Sponsor")) {
        for (loopk in AppSpecificInfoModels) {
          var appSpecificObj = AppSpecificInfoModels[loopk];
          if (appSpecificObj.getCheckboxType() == "ADD NEW RELATIONSHIP") {
            if (appSpecificObj.checkboxDesc == "Sponsor License Type") {
              var addvLicType = appSpecificObj.checklistComment;
              break;

            }
          }

        }
      }
      if (appMatch("License/Hearing Instrument/Amendment/Apprentice Update Sponsor")) {
        for (loopk in AppSpecificInfoModels) {
          var appSpecificObj = AppSpecificInfoModels[loopk];
          if (appSpecificObj.getCheckboxType() == "END EXISTING RELATIONSHIP") {
            if (appSpecificObj.checkboxDesc == "Sponsor License Type") {
              var removevLicType = appSpecificObj.checklistComment;
              break;

            }
          }

        }
      } 
showMessage = true;
comment("Testing!!");
comment("addLicenseNum:"+addLicenseNum );
comment("addvLicType:"+addvLicType);
    if(addLicenseNum !="" && addLicenseNum != null){

      if (appMatch("License/Hearing Instrument/Amendment/Apprentice Update Sponsor")) {
        if (addvLicType == "Audiologist") {
          boardName = "SP";
        } else
          boardName = "HE";
      } 
      else {
      var addvLicType = lookup("lookup:amendment License Type", appTypeString);
      }
      

      logDebug("boardName:" + boardName);
      logDebug("addvLicType: " + addvLicType);
      var licNum = returnCompleteAltId(addLicenseNum, boardName, addvLicType);
      var licProfObj = getRefLicenseProf(licNum);
      if (licProfObj) {
        if (licProfObj.getPolicy() != "Current") {
          showMessage = true;
          cancel = true;
          message = "";
          comment("The License " + addLicenseNum + " is not Current, please contact the Board.");
        }

      } else {
        showMessage = true;
        cancel = true;
        message = "";
        comment("The License " + addLicenseNum + " does not exist. Please contact the board for further details.");

      }

    } 
    if(removeLicenseNum !="" && removeLicenseNum != null){
      if (appMatch("License/Hearing Instrument/Amendment/Apprentice Update Sponsor")) {
        if (removevLicType == "Audiologist") {
          boardName = "SP";
        } else{
          boardName = "HE";
          }
      } 
      else {
      var removevLicType = lookup("lookup:amendment License Type", appTypeString);
      }
      var licNum = returnCompleteAltId(removeLicenseNum, boardName, removevLicType);
      var licNumStr = licNum.split("-");
      var myLicenseNumStr = myLicenseNum.split("-");
      logDebug("removeLicenseNum: " + removeLicenseNum);
      logDebug("boardName:" + licNumStr[1]);
      logDebug("removevLicType: " + licNumStr[2]);
      //check to see if the LP being removed is linked to the currnt license
      var vCheckLP = checkRefLpExistsOnLicense(myLicenseNumStr[0],myLicenseNumStr[1],myLicenseNumStr[2],licNumStr[0],licNumStr[1],licNumStr[2]);      
      if (!vCheckLP) {
        showMessage = true;
        message = "";
        cancel = true;
        comment("The License being removed, " + removeLicenseNum + " is not valid, please contact the Board.");
      }
    }

  } catch (err) {
showMessage = true;
    comment("Error on function CWM_ELP_isAmendmentLicenseActive." + err.stack);
    comment("Error Message: " + err.message);
  }
}

/**
By: debashish.barik, Dt:3/22/2016
Then copy the ASIT "XXXXX" from the Renewal Record to the License record.
1)pOverwrite=true -->Overwrite the XXXXX ASIT that was previously on the license.
2)pOverwrite=false -->Dont Overwrite the XXXXX ASIT that was previously on the license.
 */
function copyASITFromRenewalToParentOnApproval(pCapId, pTableName, pOverwrite) {
  if (wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions")) {
    var vToParentCapId = getParentCapID4Renewal(pCapId);
    logDebug("vToParentCapId:"+vToParentCapId);
    var vSourceCapId = pCapId;
    if (pOverwrite) {//overwrite true
      copySingleASITable(pTableName, vSourceCapId, vToParentCapId);
    } else {//overwrite false
      copyASITable(vSourceCapId, vToParentCapId, pTableName);
    }
  }
}

function copyContactsByTypeWithAddressandStartDate(pFromCapId, pToCapId, pFromContactType, pToContactType, vStartDate, vSeqNum)
{
   // Copies all contacts from pFromCapId to pToCapId
   // where type == pContactType
   if (pToCapId == null)
   var vToCapId = capId;
   else
   var vToCapId = pToCapId;
   var capContactResult = aa.people.getCapContactByCapID(pFromCapId);
   var copied = 0;
   if (capContactResult.getSuccess())
   {
      var Contacts = capContactResult.getOutput();
      for (yy in Contacts)
      {
         if(Contacts[yy].getCapContactModel().getContactType() == pFromContactType)
         {
           var newContact = Contacts[yy].getCapContactModel();
      var newPeople = newContact.getPeople();
            var addressList = aa.address.getContactAddressListByCapContact(newContact).getOutput();
            newContact.setCapID(vToCapId);
      newContact.setStartDate(new Date(vStartDate));    
      newContact.setContactType(pToContactType);  
      newContact.setPrimaryFlag("N");     
            aa.people.createCapContact(newContact);
            newerPeople = newContact.getPeople();
      logDebug("new contact");
      if(vSeqNum){
      //update the branch number
      logDebug("adding branch #");
                        var capContactTemplate = newContact.template;
      var asiTemplate = aa.genericTemplate.getTemplateStructureByGroupName("CT-TR-BOFLOC").getOutput();
            setTemplateValueByForm(asiTemplate, "BRANCH CERTIFCATE NUMBER", "Branch Certifcate Number", vSeqNum);
            newContact.setTemplate(asiTemplate);  
      newContact.setPrimaryFlag("N"); 
      aa.people.editCapContact(newContact); 

      }     
            // contact address copying
            if (addressList)
            {
               for (add in addressList)
               {
                  var transactionAddress = false;
                  contactAddressModel = addressList[add].getContactAddressModel();
                  if (contactAddressModel.getEntityType() == "CAP_CONTACT")
                  {
                     transactionAddress = true;
                     contactAddressModel.setEntityID(parseInt(newerPeople.getContactSeqNumber()));
                  }
                  // Commit if transaction contact address
                  if(transactionAddress)
                  {
                     var newPK = new com.accela.orm.model.address.ContactAddressPKModel();
                     contactAddressModel.setContactAddressPK(newPK);
                     aa.address.createCapContactAddress(vToCapId, contactAddressModel);
                  }
                  // Commit if reference contact address
                  else
                  {
                     // build model
                     var Xref = aa.address.createXRefContactAddressModel().getOutput();
                     Xref.setContactAddressModel(contactAddressModel);
                     Xref.setAddressID(addressList[add].getAddressID());
                     Xref.setEntityID(parseInt(newerPeople.getContactSeqNumber()));
                     Xref.setEntityType(contactAddressModel.getEntityType());
                     Xref.setCapID(vToCapId);
                     // commit address
                     aa.address.createXRefContactAddress(Xref.getXRefContactAddressModel());
                  }
               }
               // end for
            }
            // end if
         }
  }
}

   else
   {
      logMessage("**ERROR: Failed to get contacts: " + capContactResult.getErrorMessage());
      return false;
   }

   return copied;

}
function copyLicenseNbrToASI(licenseID, renewalID) {
  try {
    var conType = "PT Compliance Officer";
    if(appMatch("License/Cosmetology/Shop/*")){
      conType = "Manager";
    }
    var conAppCon = getContactByTypeXXX(conType, licenseID);
    var licNbr = null;
    if (conAppCon) {
      var genTemplateObj = conAppCon.getTemplate();
      if (genTemplateObj) {
        var formsResult = genTemplateObj.getTemplateForms().toArray();
        if (formsResult) {
          var asiResult = formsResult[0];
          var subGroups = asiResult.getSubgroups();
          for (var i = 0; i < subGroups.size(); i++) {
            var subGroup = subGroups.get(i);
            var asiFields = subGroup.getFields();
            for (var fieldIndex = 0; fieldIndex < asiFields.size(); fieldIndex++) {
              var field = asiFields.get(fieldIndex);
              if (field.getFieldName() == "License Number") {
                licNbr = field.defaultValue;
                break;
              }
            }
          }
        }
      }
      var lpName = conAppCon.getPeople().getFirstName() + " " + conAppCon.getPeople().getLastName();
      if(appMatch("License/Cosmetology/Shop/*")){
        editAppSpecific("Manager Name", lpName, renewalID);
        editAppSpecific("Manager License Number", licNbr, renewalID);
      }
      else{
        editAppSpecific("PT Compliance Officer Name", lpName, renewalID);
        editAppSpecific("PT Compliance Officer License Number", licNbr, renewalID);
      }
    }
    var ptco = getRefLicenseProf(licNbr + "-AH-PT");
    var licStatus = null;
    if ((ptco)&&(appMatch("License/Allied Health/Physical Therapy Facility/*"))) {
      licStatus = ptco.getPolicy();
      editAppSpecific("PT Compliance Officer License Status", licStatus, renewalID);
    }

  } catch (err) {
    logDebug("EXCEPTION:An error occurred in copyLicenseNbrToASI.");
    logDebug(err.message);
  }
}

function CWM_ELP_DPL_Defect10621_addEmployeeInfo(licID,renewalID) {
  try {
    var employeeInfo = loadASITable("CURRENT EMPLOYEE INFORMATION", licID);
    var masterArray1 = new Array();
    var elementArray = null;

    for (row in employeeInfo) {
      elementArray = new Array();
      elementArray["Employee Name"] = employeeInfo[row]["Employee Name"];
      elementArray["Employee Position"] = employeeInfo[row]["Employee Position"];
      elementArray["License Number (if applicable)"] = employeeInfo[row]["License Number (if applicable)"];
      elementArray["Date of Birth"] = employeeInfo[row]["Date of Birth"];
      elementArray["License Type (if applicable)"] = employeeInfo[row]["License Type (if applicable)"];
      elementArray["Start Date"] = employeeInfo[row]["Start Date"];
      elementArray["End Date"] = employeeInfo[row]["End Date"];
      masterArray1.push(elementArray);
    }
    addASITable("EMPLOYEE INFORMATION", masterArray1, renewalID);
  } catch (err) {
    logDebug("An error occurred in CWM_ELP_DPL_Defect10621_addEmployeeInfo.");
    logDebug(err.message);
  }
}
      
// added by kpreeti. defect#10057
// checking the ASIT row.
function CWM_ELP_DEFECT_DPL_ASB_CheckMinRowEducationASIT()
{
  if(!publicUser){
    loadASITablesBefore();
  }else if(publicUser){
    loadASITables4ACA_Custom();
  }
  var nEducation = 0; 
  var minRows = 1;
  try 
  {
    nEducation = EDUCATION.length;
    logDebug("Number of rows in education: "+nEducation);
  } 
  catch (ex) 
  {
    if (nEducation < minRows) 
    {
      cancel = true;
      showMessage = true;
            logDebug("error catched , Number of nEducation: "+nEducation+ex.message);
      comment("<font color='red'><b>**Error:You must add at least 1 row in License In EDUCATION.</b></font>");
    }
    
  }
}   
function updateDBAforOS(dbaVal,parentID) {
  try {
    var org = getContactByTypeXXX("Occupational School", parentID);
    if (org) {
      org.setTradeName(dbaVal);
      aa.people.editCapContact(org);
    }
  } catch (err) {
    logDebug("An error has occurred in updateDBAforOS.");
    logDebug(err.message);
  }
}
function replaceAddress(pFromCapId, pToCapId) {
  //Copies all property addresses from pFromCapId to pToCapId
  //If pToCapId is null, copies to current CAP
  //07SSP-00037/SP5017
  //
  if (pToCapId == null)
    var vToCapId = capId;
  else
    var vToCapId = pToCapId;
  //check if target CAP has primary address
  var removeAdrID = -1;
  var capAddressResult = aa.address.getAddressByCapId(vToCapId);
  if (capAddressResult.getSuccess()) {
    Address = capAddressResult.getOutput();
    for (yy in Address) {
      if ("Y" == Address[yy].getPrimaryFlag()) {
        Address[yy].setPrimaryFlag("N");
        logDebug("Target CAP had primary address.");
      }
    removeAdrID = Address[yy].getAddressId();
    var newLong = aa.util.parseLong(removeAdrID);
    aa.address.removeAddress(pToCapId, newLong);
    logDebug("Address id:" + removeAdrID + " removed from " + pToCapId.getCustomID());
  }
  } else {
    logMessage("**ERROR: Failed to get addresses: " + capAddressResult.getErrorMessage());
    return false;
  }
  //get addresses from originating CAP
  var capAddressResult = aa.address.getAddressWithAttributeByCapId(pFromCapId);
  var copied = 0;
  if (capAddressResult.getSuccess()) {
    Address = capAddressResult.getOutput();
    for (yy in Address) {
      newAddress = Address[yy];
      newAddress.setCapID(vToCapId);
      newAddress.setPrimaryFlag("Y");
      aa.address.createAddressWithAPOAttribute(vToCapId, newAddress);
      logDebug("Copied address from " + pFromCapId.getCustomID() + " to " + vToCapId.getCustomID());
      copied++;
    }
    logDebug("Total addresses copied:" + copied);
  } else {
    logMessage("**ERROR: Failed to get addresses: " + capAddressResult.getErrorMessage());
    return false;
  }
  return copied;
}
function getLicNbrFromContactASI(contactType, id) {
  var conAppCon = getContactByTypeXXX(contactType, id);
  if (conAppCon) {
    var genTemplateObj = conAppCon.getTemplate();
    if (genTemplateObj) {
      var formsResult = genTemplateObj.getTemplateForms().toArray();
      if (formsResult) {
        var asiResult = formsResult[0];
        var subGroups = asiResult.getSubgroups();
        for (var i = 0; i < subGroups.size(); i++) {
          var subGroup = subGroups.get(i);
          var asiFields = subGroup.getFields();
          for (var fieldIndex = 0; fieldIndex < asiFields.size(); fieldIndex++) {
            var field = asiFields.get(fieldIndex);
            if (field.getFieldName() == "License Number") {
              return field.defaultValue;
            }
          }
        }
      }
    }
  }
}
function getLicNbrFromContactASI(contactType, id) {
  var conAppCon = getContactByTypeXXX(contactType, id);
  if (conAppCon) {
    var genTemplateObj = conAppCon.getTemplate();
    if (genTemplateObj) {
      var formsResult = genTemplateObj.getTemplateForms().toArray();
      if (formsResult) {
        var asiResult = formsResult[0];
        var subGroups = asiResult.getSubgroups();
        for (var i = 0; i < subGroups.size(); i++) {
          var subGroup = subGroups.get(i);
          var asiFields = subGroup.getFields();
          for (var fieldIndex = 0; fieldIndex < asiFields.size(); fieldIndex++) {
            var field = asiFields.get(fieldIndex);
            if (field.getFieldName() == "License Number") {
              return field.defaultValue;
            }
          }
        }
      }
    }
  }
}
function expirationHasPassed(){
  try{
    var parentID = getParentLicenseRecord(capId);
    var expInfo = aa.expiration.getLicensesByCapID(parentID).getOutput();
    var expDateString = String((expInfo.getExpDateString()));
    var expDateArr = expDateString.split("-");
    var expDate = new Date();
    expDate.setFullYear(expDateArr[0]);
    expDate.setMonth(expDateArr[1]-1);
    expDate.setDate(expDateArr[2]);
    var today = new Date();
    return(today > expDate);//today is after expDate
  }
  catch(err){
    logDebug("An error has occurred in expirationHasPassed:"+err.message);
  }
}
function getRefContactIDforContactType(conType, capId) {
  var capContactResult = aa.people.getCapContactByCapID(capId);
  var refContactID = null;
  if (capContactResult.getSuccess()) {
    capContactResult = capContactResult.getOutput();
    var peopleModel = null;
    for (i in capContactResult) {
      peopleModel = capContactResult[i].getPeople();
      if (peopleModel.getContactType() == conType) {
        refContactID = capContactResult[i].getCapContactModel().getRefContactNumber();
        break;
      }
    }
  }
  return refContactID;
}
function hasLicense(refID,appType) {
  var recordsList = getLicenseCapsByRefContact(refID);
  var valid = false;
  if (recordsList.length > 0) {
    for (rr in recordsList) {
      var thisCapId = recordsList[rr];
      logDebug("record id: " + thisCapId.getCustomID());
      // get License Type
      var fvCapType = aa.cap.getCapTypeModelByCapID(thisCapId).getOutput();
      logDebug(fvCapType);
      if(fvCapType.toString() == appType){
        valid = true;
        break;
      }
    }
  }
  return valid;
}
function CWM_ELP_DPL_Defect_10077_populateLic(){
  try {
    var parentLic = getParentLicenseRecord(capId);
    if (parentLic) {
      var licString = parentLic.getCustomID().toString();
      editAppSpecific("License Number", licString);
    }
  } catch (err) {
    logDebug("An error has occurred in CWM_ELP_DPL_Defect_10077_populateLic:" + err.message);
  }
}
function retrieveSeqNbr(licenseNbr,typeClass,boardCode)
{
    var retVal = null;
    var retValIndex = 0;
 
    var ds = null;
    var conn = null;
    var sStmt = null;
    var rSet = null;
    try
    {
        var selectString = "select LIC_SEQ_NBR from RSTATE_LIC where SERV_PROV_CODE = '"+servProvCode+"' and LIC_NBR = '"+licenseNbr+"' and BUS_LIC = '"+typeClass+"' and LIC_COMMENT = '"+boardCode+"'";
        if(selectString)
        {
            logDebug("Query to perform:" + selectString);
 
            var initialContext = aa.proxyInvoker.newInstance("javax.naming.InitialContext").getOutput();
            ds = initialContext.lookup("java:/AA"); 
            conn = ds.getConnection(); 
            sStmt = conn.prepareStatement(selectString);
            rSet = sStmt.executeQuery();
 
            for(var currentResult = rSet.next(); currentResult == true; currentResult = rSet.next())
            {
                if(retVal == null)
                {
                    retVal = new Array();
                    retValIndex = 0;
                }
                retVal[retValIndex] = rSet.getString("LIC_SEQ_NBR");
                logDebug("ResultSet Item:" + retValIndex + " RefLPSeqNum:" + retVal[retValIndex]);
                retValIndex++;
            }
        }
        else
        {
            logDebug("No query specified in 'ELP_CWM_REF_LP_SEARCH' standard choice for 'REFERENCE_LP_QUERY'!");
        }
    }
    catch(ex)
    {
        logDebug("ERROR : error in getAllLPsToUpdate(): " + ex);
    }
    finally
    {
        if(rSet != null)
        {
            rSet.close();
            rSet = null;
        }
 
        //Close the database connection
        conn.close();
    }
 
    return retVal;
}
function setLicNbrOnContactASI(contactType, id,licNbr) {
  var conAppCon = getContactByTypeXXX(contactType, id);
  if (conAppCon) {
    var genTemplateObj = conAppCon.getTemplate();
    if (genTemplateObj) {
      var formsResult = genTemplateObj.getTemplateForms().toArray();
      if (formsResult) {
        var asiResult = formsResult[0];
        var subGroups = asiResult.getSubgroups();
        for (var i = 0; i < subGroups.size(); i++) {
          var subGroup = subGroups.get(i);
          var asiFields = subGroup.getFields();
          for (var fieldIndex = 0; fieldIndex < asiFields.size(); fieldIndex++) {
            var field = asiFields.get(fieldIndex);
            if (field.getFieldName() == "License Number") {
               field.defaultValue = licNbr;
            }
          }
        }
      }
    }
  }
  aa.people.editCapContact(conAppCon);
}
/*
 * @By:debashish.barik
 * @Dt:5/11/2016
 * @Desc: check required documents
 * @pPocName : document name to check
 * [INCLUDES_CUSTOM]
 */
function CWM_ELP_ASB_ACA_DPL_checkDocumnets(pPocName) {
  try {
    var vDocUploaded = false;
    logDebug("Document Name:" + pPocName);
    if (!publicUser) {
      vDocUploaded = docCheckForASB(pPocName);
    } else {
      vDocUploaded = docCheck(pPocName);
    }
    logDebug("Document present ?:" + vDocUploaded);
    if (!vDocUploaded) {
      var vMessage = "The " + pPocName + " must be uploaded to proceed with this application."
        showMessage = true;
      cancel = true;
      comment(vMessage);
    }
  } catch (err) {
    logDebug("Error**CWM_ELP_ASB_ACA_DPL_checkDocumnets():" + err.message);
  }
}
//ADDED BY Ankush ON 2/24/2016
function CWM_ELP_337_DPL_ASB_CheckMinRowLicProvidingServicesAndValidateLicType()
{
  var ownershipRow = 0; 
  var minRows = 1;
  var flag = 0;
  try 
  {
    if(!publicUser){
      loadASITablesBefore();
    }else if(publicUser){
      loadASITForACA();
    }
    //Get the board code from the Std Choice list
    var vBoardCode = lookup("BOARDS", "Cosmetologists");
    var vLicenseTypeCode = "0";
    ownershipRow = LICENSEESPROVIDINGSERVICES.length;
    for(x in LICENSEESPROVIDINGSERVICES){
      var vLicenseName = LICENSEESPROVIDINGSERVICES[x]["Name of Licensee"];
      var vLicenseType = LICENSEESPROVIDINGSERVICES[x]["License Type"];   
      var vLicenseNbr = LICENSEESPROVIDINGSERVICES[x]["License Number"];  
      if((vLicenseName.length() != 0) || (vLicenseType.length()!=0) || (vLicenseNbr.length()!=0)){
         flag = 1;
         if((vLicenseType.length()!=0) && (vLicenseNbr.length()!=0))
        {
          if (vLicenseType == "Type 1 - Cosmetologist") {
            vLicenseTypeCode = "1";
          } else if (vLicenseType == "Type 2 - Cosmetologist Operator") {
            vLicenseTypeCode = "2";
          } else if  (vLicenseType == "Type 3 - Manicurist") {
            vLicenseTypeCode = "3";
          }
          else
          {
            cancel = true;
            showMessage = true;
            comment("The License Number "+vLicenseNbr+" is not a valid license or is not in a Current status.");
          } 
          if(isLicenseActive(vLicenseNbr, vBoardCode, vLicenseTypeCode)) {
            var RefLicProf = getRefLicenseProf(vLicenseNbr, vBoardCode, vLicenseTypeCode);
                        if (RefLicProf){    
                if (RefLicProf.getPolicy() != "Current") {
                  cancel = true;
                        showMessage = true;
                        comment("The License Number "+vLicenseNbr+" is not a valid license or is not in a Current status.");
                      }
                      }
              }
          else
          {
            cancel = true;
            showMessage = true;
            comment("The License Number "+vLicenseNbr+" is not a valid license or is not in a Current status.");
          }
            }
      }
    } 
    logDebug("Number of ownershipRow: "+ownershipRow);
  } 
  catch (ex) 
  {
    if (ownershipRow < minRows) 
    {
      flag = 0;
    }
    
  }
  if(flag == 0){
    cancel = true;
    showMessage = true;
    comment("At least one Licensee Providing Services must be added.");
  }
  
}//END OF FUNCTION: CWM_ELP_337_DPL_ASB_CheckMinRowLicProvidingServicesAndValidateLicType

function CWM_ELP_10158_DPL_WTUA_assignUserToValidate()
{
  var splChar = String.fromCharCode(167);
    var asiName = "1. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";

    var inComplianceGLC = getAppSpecific(asiName);
    var reportedDicipline = getAppSpecific("2. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
    var reportedPleas = getAppSpecific("3. I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.");
    var reportedAdmissions = getAppSpecific("4. I HAVE REPORTED TO THE BOARD ADMISSIONS TO SUFFICIENT FACTS.");

    asiName = "5. AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
    var reportedSSN = getAppSpecific(asiName);
    var liabilityInsurance = getAppSpecific("6. I UNDERSTAND THAT LIABILITY INSURANCE IS REQUIRED TO OBTAIN PERMITS TO PERFORM SHEET METAL WORK.");
  var criminalConvictions = getAppSpecific("6. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");
  var criminalConvictions2 = getAppSpecific("7. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");
  
  if ((criminalConvictions != null && criminalConvictions != undefined && criminalConvictions.toUpperCase().equals("NO")) || (criminalConvictions2 != null && criminalConvictions2 != undefined && criminalConvictions2.toUpperCase().equals("NO")) || (inComplianceGLC != null && inComplianceGLC != undefined && inComplianceGLC.toUpperCase().equals("NO")) || (reportedDicipline != null && reportedDicipline != undefined && reportedDicipline.toUpperCase().equals("NO")) ||
    (reportedPleas != null && reportedPleas != undefined && reportedPleas.toUpperCase().equals("NO")) || (reportedAdmissions != null && reportedAdmissions != undefined && reportedAdmissions.toUpperCase().equals("NO")) ||
    (reportedSSN != null && reportedSSN != undefined && reportedSSN.toUpperCase().equals("NO")) || (liabilityInsurance != null && liabilityInsurance != undefined && liabilityInsurance.toUpperCase().equals("NO")))
    {
      activateTask("Validate");
      updateTask("Validate", "Under Review", "Updated via script.", "Updated via script.");
      assignedToByShortNotes("Validate", "SM");
      //assignedToByShortNotes("Issuance", "SM");
    }
}
function renewSheetMetalLicense(itemCapId) {
    useAppSpecificGroupName = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
    var result = false;

    
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - START
  //----------------------------------------------------------------------------------------------
    // this to avoid a script error from special character.
  var splChar = String.fromCharCode(167);
    var asiName = "1. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";

    var inComplianceGLC = getAppSpecific(asiName);
    var reportedDicipline = getAppSpecific("2. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
    var reportedPleas = getAppSpecific("3. I HAVE REPORTED TO THE BOARD ALL PLEAS OF NOLO CONTENDERE/NO CONTEST.");
    var reportedAdmissions = getAppSpecific("4. I HAVE REPORTED TO THE BOARD ADMISSIONS TO SUFFICIENT FACTS.");

    asiName = "5. AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
    var reportedSSN = getAppSpecific(asiName);
    var liabilityInsurance = getAppSpecific("6. I UNDERSTAND THAT LIABILITY INSURANCE IS REQUIRED TO OBTAIN PERMITS TO PERFORM SHEET METAL WORK.");
  var criminalConvictions = getAppSpecific("6. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");
  var criminalConvictions2 = getAppSpecific("7. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");

  
  //----------------------------------------------------------------------------------------------
  //Get SM Attestation ASI field - END
  //----------------------------------------------------------------------------------------------  
  
  //----------------------------------------------------------------------------------------------
  //Modification to account for SM Attestation fields available in different record types - START
  //----------------------------------------------------------------------------------------------

  /*if ((appMatch("License/Sheet Metal/Apprentice/Renewal")) || (appMatch("License/Sheet Metal/Instructor/Renewal")) || (appMatch("License/Sheet Metal/School/Renewal")))
  {
    //----------------------------------------------------------------------------------------------
    // Condition to check SM Attestation - Defect 2669 - Do not check if coming from lock box
    //----------------------------------------------------------------------------------------------
    var lockBoxBatch = getAppSpecific("Lockbox Batch");
    
    //Through lock box - do not check attestation
    if (lockBoxBatch && lockBoxBatch != null && lockBoxBatch != "") 
    {
      if (renewalApproval(capId)) 
      {
        logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
        closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
        activateTask("Issuance");
        updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
        //assignedToByShortNotes("Issuance", "SM");
        result = true;
      }   else result = false;
    }
    //Not through lock box - so check attestation
    else
    {
    if ((criminalConvictions != null && criminalConvictions != undefined && criminalConvictions.toUpperCase().equals("NO")) || (criminalConvictions2 != null && criminalConvictions2 != undefined && criminalConvictions2.toUpperCase().equals("NO")) || (inComplianceGLC != null && inComplianceGLC != undefined && inComplianceGLC.toUpperCase().equals("NO")) || (reportedDicipline != null && reportedDicipline != undefined && reportedDicipline.toUpperCase().equals("NO")) ||
    (reportedPleas != null && reportedPleas != undefined && reportedPleas.toUpperCase().equals("NO")) || (reportedAdmissions != null && reportedAdmissions != undefined && reportedAdmissions.toUpperCase().equals("NO")) ||
    (reportedSSN != null && reportedSSN != undefined && reportedSSN.toUpperCase().equals("NO")) || (liabilityInsurance != null && liabilityInsurance != undefined && liabilityInsurance.toUpperCase().equals("NO"))) 
    {
        if (renewalApproval(capId)) {
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
          assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      } else {
        if (renewalApproval(capId)) {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
    }
  }*/


  //else
  {
    //----------------------------------------------------------------------------------------------
    // Condition to check SM Attestation - Defect 2669 - Do not check if coming from lock box
    //----------------------------------------------------------------------------------------------
    var lockBoxBatch = getAppSpecific("Lockbox Batch");
    
    //Through lock box - do not check attestation
    if (lockBoxBatch && lockBoxBatch != null && lockBoxBatch != "") 
    {
      if (renewalApproval(capId)) 
      {
        logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
        closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
        activateTask("Issuance");
        updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
        //assignedToByShortNotes("Issuance", "SM");
        result = true;
      }   else result = false;
    }
    //Not through lock box - so check attestation
    else
    {   
      //Updated per defect 10890 - SM Apprentice Renewals do not have the Liability Insurance question.
      if(appMatch("License/Sheet Metal/Apprentice/Renewal"))
      {
        criminalConvictions2 = "NA";
      liabilityInsurance = "NA";
        }
      else
      {
        criminalConvictions = "NA";
      }
      //End 10890 Update
      if ((criminalConvictions != null && criminalConvictions != undefined && criminalConvictions.toUpperCase().equals("NO")) || (criminalConvictions2 != null && criminalConvictions2 != undefined && criminalConvictions2.toUpperCase().equals("NO")) || (inComplianceGLC != null && inComplianceGLC != undefined && inComplianceGLC.toUpperCase().equals("NO")) || (reportedDicipline != null && reportedDicipline != undefined && reportedDicipline.toUpperCase().equals("NO")) ||
      (reportedPleas != null && reportedPleas != undefined && reportedPleas.toUpperCase().equals("NO")) || (reportedAdmissions != null && reportedAdmissions != undefined && reportedAdmissions.toUpperCase().equals("NO")) ||
      (reportedSSN != null && reportedSSN != undefined && reportedSSN.toUpperCase().equals("NO")) || (liabilityInsurance != null && liabilityInsurance != undefined && liabilityInsurance.toUpperCase().equals("NO")))
      { 
          var validateFlag = false;
          var wfTaskResult = aa.workflow.getTasks(capId);
          var taskArray;
          if (wfTaskResult.getSuccess()) 
          {
            taskArray = wfTaskResult.getOutput();
            for (var i in taskArray) 
            {
              var fTask = taskArray[i];
              var desc = fTask.getTaskDescription(); 
              var disp = fTask.getDisposition();
              if(desc == "Validate" && matches(disp, "Approved", "Approved with Conditions"))
              {
                validateFlag = true;
                break;
              }
            }
          } 
        
          //if (wfTask == "Validate" && matches(wfStatus, "Approved", "Approved with Conditions"))
          if(validateFlag)
          {
            if (renewalApproval(capId)) 
            {
              closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
              activateTask("Issuance");
              updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
              //assignedToByShortNotes("Issuance", "SM");
              result = true;
            } else result = false;
          }
          else
          {
            closeTask("Intake", "Ready for Validation", "Updated via script.", "Updated via script.");
            activateTask("Validate");
            updateTask("Validate", "Under Review", "Updated via script.", "Updated via script.");
            assignedToByShortNotes("Validate", "SM");
            //assignedToByShortNotes("Issuance", "SM");
          }
      }
      else 
      {
        if (renewalApproval(capId)) 
        {
          logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
          closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
          activateTask("Issuance");
          updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
          //assignedToByShortNotes("Issuance", "SM");
          result = true;
        } else result = false;
      }
    }
  }

  //----------------------------------------------------------------------------------------------
  //Modification to account for SM Attestation fields available in different record types - END
  //----------------------------------------------------------------------------------------------
  
    capId = tmpCapId;
    return result;
}
/*
@debashish.barik
@Dt:5/21/2016
@Desc: return valid alt id, return blank if license is a invalid i.e no LP
pLicNum : license Number (Ex: 202-MT-MF or only 202)
pBoard  : board code ( Ex: "MT")
pType   : license type code (Ex: "MF")
 */
function getLPAltId(pLicNum, pBoard, pType) {
  try {

    var vLicenseNumber = pLicNum;
    var vAltId = "";

    if (isDPLLicenseFormat(pLicNum)) { //202-MT-MF, MT,MF
      vLicenseNumber = getDPLLicenseNumber(pLicNum).toString();
      var vLicCheck = getRefLicenseProf(pLicNum);
      if (vLicCheck) {
        vAltId = vLicenseNumber + "-" + pBoard + "-" + vLicCheck.businessLicense;
      }
    } else {//202,MT,MF

      var vLicCheck = getRefLicenseProf(vLicenseNumber, pBoard, pType);
      if (vLicCheck) {
        vAltId = vLicenseNumber + "-" + pBoard + "-" + vLicCheck.businessLicense;
      }
    }
    logDebug("Alt Id #:" + vAltId);

    return vAltId;

  } catch (err) {
    logDebug("Errror**getLPAltId()" + err.message)
  }

}
function removeContactASI(targetCapId, contactType) {
try{
//for all contacts on the license, manually set all contact asi to null and re-populate only specific contact asi 
//example: Legal Structure for Businesses, License # for specific contact types
//contactType variable is an optional array and can be used to exclude a contact type from having it's contact template reset.

    //1. Get people with target CAPID.
    var targetPeople = getPeople(targetCapId);
    if (targetPeople == null || targetPeople.length == 0) {
        return;
    }

    for (loopt in targetPeople) {
        //2. Get people object
        var targetPeopleModel = targetPeople[loopt];
        var targetCapContactModel = targetPeopleModel.getCapContactModel();
        var targetContactType = targetCapContactModel.contactType;
    var targetSeqNum = targetCapContactModel.getRefContactNumber(); 
logDebug("targetSeqNum:"+targetSeqNum);
        var remove = true;
        //3. Check if not to clear a specific contact type or all contacts
    if(contactType){
      if (contactType.indexOf(targetContactType)!= -1) {
              remove = false;
      } else {
        remove = true;
      }
    }

        //4. Clear the template
        if (remove) {
            targetPeopleModel.getPeople().setTemplate(null);
            aa.people.editCapContactWithAttribute(targetPeopleModel.getCapContactModel());
            logDebug("**INFO: " + targetCapId.getCustomID() + " - Contact template for " + targetContactType + " removed.");
        
    //5. re-add the template and set specific field values
    var asiTemplate = null;
    //lookup based on contact type to get the contact template name
    var contactTemplate = lookup("LOOKUP:CONTACT_TEMPLATE", targetContactType); 
logDebug("contactTemplate:"+contactTemplate);
    if(contactTemplate){
      //set the template on the license contact
      asiTemplate = aa.genericTemplate.getTemplateStructureByGroupName(contactTemplate).getOutput();

      //lookup based on the contact template to get array of fields to copy over
      var contactFields = String(lookup("LOOKUP:CONTACT_TEMPLATE_FIELDS", contactTemplate)).split(";");
logDebug("contactFields:"+contactFields);     
      //split the contactField values on ;
      for (g in contactFields) {    
        //loop thru the array and split the value based on | to seperate subgroup and field 
        //for each value in the array, get the value from the app and copy it to the license contact

        var myGroup = contactFields[g].split("|");
        logDebug("myGroup:"+myGroup[0]);        
        logDebug("nyField:"+myGroup[1]);
        var fieldVal  = getContactASIFieldwithSeq(targetContactType, myGroup[1], capId, targetSeqNum);
        logDebug("fieldVal:"+fieldVal);
        if(setTemplateValueByForm(asiTemplate, myGroup[0], myGroup[1], fieldVal)){
        logDebug("contact asi saved to license");
        }
        else {
        logDebug("unable to save asi value");
        }
      }
            targetPeopleModel.getPeople().setTemplate(asiTemplate);
      aa.people.editCapContactWithAttribute(targetPeopleModel.getCapContactModel());
      logDebug("New contact template set");
    }
    }
    }
}
catch(err){
logDebug("error on function removeContactASI. error:"+err.message);
}
}

function getContactASIFieldwithSeq(vcontact, conASI, vCap, seqNum)  {
//looks up the value of a contact asi field 
//vcontact is the contact type, confield is the field name and vCap is the capid
if(!vCap){
vCap = capId;
}
  var fieldValue;
  var capContactResult = aa.people.getCapContactByCapID(vCap);
  if(capContactResult.getSuccess())
  {
    capContactResult=capContactResult.getOutput();
    for(yy in capContactResult)
    {
      capContact = capContactResult[yy];
      peopleModel = capContact.getPeople();
      var conAppCon = peopleModel.getContactType();
var conAppSeq = capContact.getCapContactModel().getRefContactNumber();      

    
      if (conAppCon == vcontact && conAppSeq == seqNum)
      {
      var genTemplateObj = peopleModel.getTemplate();
      if (genTemplateObj) {
            var formsResult = genTemplateObj.getTemplateForms().toArray();
            if (formsResult) {
              var asiResult = formsResult[0];
              var subGroups = asiResult.getSubgroups();
              for (var i = 0; i < subGroups.size(); i++) {
                var subGroup = subGroups.get(i);
                var asiFields = subGroup.getFields();
                for (var fieldIndex = 0; fieldIndex < asiFields.size(); fieldIndex++) {
                  var field = asiFields.get(fieldIndex);
                  if (field.getFieldName() == conASI) {
                    fieldValue = field.defaultValue;
                      logDebug("found the contact");
                      logDebug("Field Value:"+ fieldValue);
                  }

                }
              }
            }
          }
      }       
    }
  }
  return fieldValue;
}
function updateBusinessNameonFacility(){
  try { 
    var parentCapId = getParentCapID4Renewal();
    var entityNamChanged = false;
     var paltId = parentCapId.getCustomID();
      //add code to get license (Parent) entity name of the business contact
      var parBusEntityName = getContactByTypeXXX("Business", parentCapId).getBusinessName();
      var parBusRef = getContactByTypeXXX("Business", parentCapId).getRefContactNumber();
      var parBus = getContactByTypeXXX("Business", parentCapId)
      //add code to get the renewal business contact entity name
      var renBusEntityName = getContactByTypeXXX("Business", capId).getBusinessName();

      if (!parBusEntityName.toUpperCase().equals(renBusEntityName.toUpperCase()))
        entityNamChanged = true;
      
      if(entityNamChanged){
        //update the transaction contact
          logDebug("name change in progress....");
          parBus.setBusinessName(renBusEntityName);
          aa.people.editCapContact(parBus);

          //update the reference contact
        var fvRefContact = aa.people.getPeople(parBusRef).getOutput();
        fvRefContact.setBusinessName(renBusEntityName);

        var result = aa.people.editPeople(fvRefContact).getOutput();    

        //update the lp
          var licProfObj = getRefLicenseProf(paltId);
              licProfObj.setBusinessName(renBusEntityName);
         var myResult = aa.licenseScript.editRefLicenseProf(licProfObj);
          if (myResult.getSuccess()) {
          aa.print("update the LP....");
           logDebug("Successfully updated License No. " + paltId + ".");
           addToLicenseSyncSet(parentCapId);
          } else {
           logDebug("**ERROR: can't create ref lic prof: " + myResult.getErrorMessage());

          }        
      }
  }
  catch (err) {
    logDebug("An error has occurred in updateBusinessNameonFacility.");
    logDebug(err.message);
  }
}
/* Added by NPHON on 7/23/14
 *
 * This function is used to check whether a contact condition exists.
 *
 * condType: Condition Type
 * condName: Condition Name
 * contactSeqNumber: Contact Sequence Number
 */
function isContactConditionExist(type, name, contactSeqNumber) {
   var conditionExist = false;
   var conCondResult = aa.commonCondition.getCommonConditions("CONTACT", contactSeqNumber);
   if (conCondResult.getSuccess()) {
      conCondArray = conCondResult.getOutput();
      aa.print("Conditions: " + conCondArray.length);
      for (var thisConCond in conCondArray) {
         thisCond = conCondArray[thisConCond];
         if (thisCond.getConditionType() == type && thisCond.getConditionDescription() == name) {
            aa.print(thisCond.getConditionType() + ", " + thisCond.getConditionDescription());
            conditionExist = true;
            break;
         }
      }
   }

   return conditionExist;
}


// Added by tofek, for defect#12736.
function CWM_ELP_WTUA_associatedLPToLicenseHearingInstrument(pLicenseId) {
  try {
    logDebug("CWM_ELP_WTUA_associatedLPToLicenseHeadingInstrument() start");
    // get ASI::Sponsor License Number and Sponsor License Type values
    var vSpnrLicenseNbr = getAppSpecific("Sponsor License Number", capId);
    var vSpnrLicenseType = getAppSpecific("Sponsor License Type", capId);
    logDebug("Current License :" + pLicenseId);
    logDebug("vSpnrLicenseNbr :" + vSpnrLicenseNbr);
    
    var licNumberArray = vSpnrLicenseNbr.split("-");
    if(licNumberArray.length == 3){
      var vSpnrLicenseNbr = licNumberArray[0];
      var vBoardCode = licNumberArray[1];
      var vLicenseTypeCode = licNumberArray[2];
    }else{
      var vSpnrLicenseNbr = vSpnrLicenseNbr;
      if(vSpnrLicenseType == "Audiologist"){        
        var vBoardCode = "SP";
           var vLicenseTypeCode = "AU";
      }else{
        var vBoardCode = "HE";
           var vLicenseTypeCode = "A";
      }
      
    }
    
    logDebug("vSpnrLicenseNbr-"+vSpnrLicenseNbr+"-vBoardCode-"+vBoardCode+"-vLicenseTypeCode-"+vLicenseTypeCode);
        
    //Get the board code from the Std Choice list
    //var vBoardCode = lookup("BOARDS", "Hearing Instrument Specialists");
    if (vSpnrLicenseNbr != null && vSpnrLicenseNbr != "" && vSpnrLicenseNbr != "undefined") {
      // set the  LicenseTypeCode based on the input License Type
      //var vLicenseTypeCode = "A";

      //4. Create the license link to the Manager license on the licenses tab
      var vRefLP = getRefLicenseProf(vSpnrLicenseNbr, vBoardCode, vLicenseTypeCode);
      if (vRefLP && (vRefLP != null)) {
        associateLpWithCap(vRefLP, pLicenseId);
      }
      
                         var vLicenseNum = vSpnrLicenseNbr.toString();
      if (vLicenseNum.indexOf("-") < 0) {
        vLicenseNum = vLicenseNum + "-" + vBoardCode + "-" + vLicenseTypeCode;
      }
      logDebug("vLicenseNum::" + vLicenseNum);
      var vLicenseNumCapId = aa.cap.getCapID(vLicenseNum);
      if (vLicenseNumCapId != null) {
        vLicenseNumCapId = aa.cap.getCapID(vLicenseNum).getOutput();
        copyContactsByCapContactTypeWithASI(vLicenseNumCapId, pLicenseId, "Licensed Individual", "Sponser", null, vLicenseNum);
        copyContactsByCapContactTypeWithASI(vLicenseNumCapId, capId, "Licensed Individual", "Sponser", null, vLicenseNum);
      } else {
        logDebug("Warnibg** Copy contacts failed from License Cap model.");
      }
    }
  } catch (err) {
    logDebug("Error on CWM_ELP_WTUA_associatedLPToLicenseHearingInstrument, Please contact administrator:" + err.message);
  }
}

/* @desc This function waivs all the condition for PY application
 *       When workflow is update to exam approval.
 * Defect 8308
 */

function loadASITForACA() {

               //
               // Loads App Specific tables into their own array of arrays.  Creates global array objects
                //
                // Optional parameter, cap ID to load from.  If no CAP Id specified, use the capModel
                //
                var itemCap = capId;
                if (arguments.length == 1)
                                {
                                itemCap = arguments[0]; // use cap ID specified in args
                                var gm = aa.appSpecificTableScript.getAppSpecificTableGroupModel(itemCap).getOutput();
                                }
                else
                                {
                                var gm = cap.getAppSpecificTableGroupModel()
                                }

                var ta = gm.getTablesMap();


                var tai = ta.values().iterator();

                while (tai.hasNext())
                  {
                  var tsm = tai.next();

                  if (tsm.rowIndex.isEmpty()) continue;  // empty table

                  var tempObject = new Array();
                  var tempArray = new Array();
                  var tn = tsm.getTableName();

                  tn = String(tn).replace(/[^a-zA-Z0-9]+/g,'');

                  if (!isNaN(tn.substring(0,1))) tn = "TBL" + tn  // prepend with TBL if it starts with a number

                  var tsmfldi = tsm.getTableField().iterator();
                  var tsmcoli = tsm.getColumns().iterator();
                  var numrows = 1;

                  while (tsmfldi.hasNext())  // cycle through fields
                                {
                                if (!tsmcoli.hasNext())  // cycle through columns
                                                {

                                                var tsmcoli = tsm.getColumns().iterator();
                                                tempArray.push(tempObject);  // end of record
                                                var tempObject = new Array();  // clear the temp obj
                                                numrows++;
                                                }
                                var tcol = tsmcoli.next(); 
                                var tval = tsmfldi.next().toString();//vTemp.getInputValue();
                                tempObject[tcol.getColumnName()] = tval;
                                }
                  tempArray.push(tempObject);  // end of record
                  var copyStr = "" + tn + " = tempArray";
                  logDebug("ASI Table Array : " + tn + " (" + numrows + " Rows)");
                  eval(copyStr);  // move to table name
                  }

}




function CWM_ELP_8308_WTUB_DPL_waiveConditionOfApprovalOnExamApprovalWF()
{
  
  //waive the condition when all Jurisdiction Question answer is NO

  if (appMatch("License/Psychologist/Psychologist/Application"))
  {
    var condResult = aa.capCondition.getCapConditions(capId);
    if (condResult.getSuccess()) 
    {
      var capConds = condResult.getOutput();
      if(capConds!=null)
      {
        logDebug("There are " + capConds.length + " condition(s).");
        for (cc in capConds) 
        {
          var thisCond = capConds[cc];
          var cName = thisCond.getConditionDescription();
          var cStatus = thisCond.getConditionStatus();
          var cStatusType = thisCond.getConditionStatusType();
          var condType = thisCond.getConditionType();
          
          if (condType == "Application Checklist")
          {
            logDebug("Condition has been waived since Source is Exam");
            thisCond.setConditionStatus("Met");
            thisCond.setConditionStatusType("Not Applied");
            thisCond.setImpactCode("");
            aa.capCondition.editCapCondition(thisCond);
            
          }
        }
      }
    } 
    else 
    { 
      logMessage("ERROR: getting cap conditions: " + condResult.getErrorMessage());
      logDebug("ERROR: getting cap conditions: " + condResult.getErrorMessage());
    }
  }
}
 //debashish.barik
function getLPLicenceeName(pALtId) {

  try {
    var vAltId = String(pALtId);
    var vAltArr = vAltId.split("-");
    var licCapId = aa.cap.getCapID(vAltId).getOutput();
    var profLicenseCapId = aa.licenseProfessional.getLicensedProfessionalsByCapID(licCapId);
    if (profLicenseCapId && profLicenseCapId.getSuccess()) {

      var profLicense = profLicenseCapId.getOutput();
      for (var counter in profLicense) {

        var thisProfLicense = profLicense[counter];
        if (vAltArr[0] == thisProfLicense.getLicenseNbr() && vAltArr[1] == thisProfLicense.getComment() && vAltArr[2] == thisProfLicense.getBusinessLicense()) {
          var vLicenceeName = thisProfLicense.getBusinessName();
          if (vLicenceeName == null || vLicenceeName == "") {
            vLicenceeName = thisProfLicense.getContactFirstName() + " " + thisProfLicense.getContactLastName();
          }
          return vLicenceeName;
        }
      }
    }

  } catch (err) {}
}

function updateTaskNoDebug(wfstr, wfstat, wfcomment, wfnote) // optional process name, cap id
{
  var useProcess = false;
  var processName = "";
  if (arguments.length > 4) {
    if (arguments[4] != "") {
      processName = arguments[4]; // subprocess
      useProcess = true;
    }
  }
  var itemCap = capId;
  if (arguments.length == 6)
    itemCap = arguments[5]; // use cap ID specified in args
  var workflowResult = aa.workflow.getTasks(itemCap);
  if (workflowResult.getSuccess())
    var wfObj = workflowResult.getOutput();
  else {
    //logMessage("**ERROR: Failed to get workflow object: " + s_capResult.getErrorMessage());
    return false;
  }
  if (!wfstat)
    wfstat = "NA";
  for (i in wfObj) {
    var fTask = wfObj[i];
    if (fTask.getTaskDescription().toUpperCase().equals(wfstr.toUpperCase()) && (!useProcess || fTask.getProcessCode().equals(processName))) {
      var dispositionDate = aa.date.getCurrentDate();
      var stepnumber = fTask.getStepNumber();
      var processID = fTask.getProcessID();
      if (useProcess)
        aa.workflow.handleDisposition(itemCap, stepnumber, processID, wfstat, dispositionDate, wfnote, wfcomment, systemUserObj, "U");
      else
        aa.workflow.handleDisposition(itemCap, stepnumber, wfstat, dispositionDate, wfnote, wfcomment, systemUserObj, "U");
      //logDebug("Updating Workflow Task " + wfstr + " with status " + wfstat);
    }
  }
}
//INCLUDES_CUSTOM
function activateTaskNoDebug(wfstr) // optional process name
{
  var useProcess = false;
  var processName = "";
  if (arguments.length == 2) {
    processName = arguments[1]; // subprocess
    useProcess = true;
  }
  var workflowResult = aa.workflow.getTasks(capId);
  if (workflowResult.getSuccess())
    var wfObj = workflowResult.getOutput();
  else {
    //logMessage("**ERROR: Failed to get workflow object: " + s_capResult.getErrorMessage());
    return false;
  }
  for (i in wfObj) {
    var fTask = wfObj[i];
    if (fTask.getTaskDescription().toUpperCase().equals(wfstr.toUpperCase()) && (!useProcess || fTask.getProcessCode().equals(processName))) {
      var stepnumber = fTask.getStepNumber();
      var processID = fTask.getProcessID();
      if (useProcess) {
        aa.workflow.adjustTask(capId, stepnumber, processID, "Y", "N", null, null)
      } else {
        aa.workflow.adjustTask(capId, stepnumber, "Y", "N", null, null)
      }
      //logDebug("Activating Workflow Task: " + wfstr);
    }
  }
}

//INCLUDES_CUSTOM
function setTaskNoDebug(wfstr, isOpen, isComplete) // optional process name isOpen, isComplete take 'Y' or 'N'
{
  var useProcess = false;
  var processName = "";
  if (arguments.length == 4) {
    processName = arguments[3]; // subprocess
    useProcess = true;
  }
  var workflowResult = aa.workflow.getTasks(capId);
  if (workflowResult.getSuccess())
    var wfObj = workflowResult.getOutput();
  else {
    //logMessage("**ERROR: Failed to get workflow object: " + s_capResult.getErrorMessage());
    return false;
  }
  for (i in wfObj) {
    var fTask = wfObj[i];
    if (fTask.getTaskDescription().toUpperCase().equals(wfstr.toUpperCase()) && (!useProcess || fTask.getProcessCode().equals(processName))) {
      var stepnumber = fTask.getStepNumber();
      var processID = fTask.getProcessID();
      var completeFlag = fTask.getCompleteFlag();
      if (useProcess) {
        aa.workflow.adjustTask(capId, stepnumber, processID, isOpen, isComplete, null, null);
      } else {
        aa.workflow.adjustTask(capId, stepnumber, isOpen, isComplete, null, null);
      }
      //logDebug("set Workflow Task: " + wfstr);
    }
  }
}
function invoiceAllFees(itemCap) {
//invoices all new fees on a record. used by the adddplrenewal fee to make sure all fees are invoiced.
  var feeFound = false;
  var fperiod = "STANDARD";
  var feeResult = aa.fee.getFeeItems(itemCap);
  if (feeResult.getSuccess()) {
    var feeList = feeResult.getOutput();
    for (feeNum in feeList)
      if (feeList[feeNum].getFeeitemStatus().equals("NEW")) {
        var feeSeq = feeList[feeNum].getFeeSeqNbr();
        feeSeqList.push(feeSeq);
        paymentPeriodList.push(fperiod);
        feeFound = true;
        logDebug("Assessed fee " + feeSeq + " found and tagged for invoicing");
      }
  } else {
    logDebug("**ERROR: getting fee items (" + feeSeq + "): " + feeResult.getErrorMessage())
  }
  return feeFound;
}
function getRefLicenseProfForEL_board(refstlic) 
{
  var boardName = "";
  var licenseType = "";
  var licenseNumber = refstlic;

  if (arguments.length == 3) 
  {
    boardName = arguments[1];
    licenseType = arguments[2].toUpperCase();
  }

  if (isDPLLicenseFormat(refstlic)) 
  {
    licenseNumber = getDPLLicenseNumber(refstlic).toString();
    var licNumberArray = refstlic.split("-");
    boardName = licNumberArray[1];
    //added for defect 7782
    var userTC = licNumberArray[2].toUpperCase();
    //added to address issue in defect 2603
    if (licenseType != "" && licenseType != userTC) 
    {
      logDebug("ERROR The license type passed by user is not matching with M1 or M2");
      return false;
    }
    licenseType = licNumberArray[2];
  }
  //var boardNameold = getLegalBoardName(boardName);
  logDebug("Searching Ref LP refstlic = " + licenseNumber +" boardcode = " + boardName + " licenseType = " + licenseType);
  licenseNumber = licenseNumber+"-"+licenseType;
  var refLicNbr = retrieveSeqNbr(licenseNumber,licenseType,boardName);
  if((!refLicNbr)||(refLicNbr == undefined))
  {
    logDebug("Error retrieving sequence number.");
    return false;
  }
  var seqNbr = 1* refLicNbr[0];
  var lpResult = aa.licenseScript.getRefLicenseProfBySeqNbr(aa.getServiceProviderCode(), seqNbr);
  if (!lpResult.getSuccess()) 
  {
    logDebug("Error retrieving LP: " + lpResult.getErrorMessage());
       return false;
  }
  var refLicObj = null;
  refLicObj = lpResult.getOutput();
  //if we do not get a match, do a secondary check to look for LPs are part of converted duplicate data
  if (!refLicObj) 
  {
    var mergedLicNum = licenseNumber + "-" + licenseType;
    //logDebug(mergedLicNum);
    var refLicenseResult2 = aa.licenseScript.getRefLicensesProfByLicNbr(aa.getServiceProviderCode(), mergedLicNum);
    if (!refLicenseResult2.getSuccess()) 
    {
      logDebug("**ERROR retrieving Ref Lic Profs : " + refLicenseResult2.getErrorMessage());
      return false;
    }
    else
    {
      var newLicArray2 = refLicenseResult2.getOutput();
      if (!newLicArray2) 
      {
        //logDebug("Ref Lic Prof not found in converted data.");
        //return null;
      }
      //logDebug("found a match in converted data");
      //made change to have the function look for the board code in the comments field and not the board name field.
      for (var thisLic in newLicArray2) 
      {
        //logDebug("Match = " + newLicArray2[thisLic].getStateLicense() +" boardcode = " + newLicArray2[thisLic].getComment() + " licenseType = " + newLicArray2[thisLic].getBusinessLicense());
        if (mergedLicNum && mergedLicNum != null && mergedLicNum != ""
           && newLicArray2[thisLic] && newLicArray2[thisLic].getStateLicense() && mergedLicNum.toUpperCase().equals(newLicArray2[thisLic].getStateLicense().toUpperCase())
           && (boardName == "" || (newLicArray2[thisLic].getComment() && boardName.toUpperCase().equals(newLicArray2[thisLic].getComment().toUpperCase())))
           && (licenseType == "" || (newLicArray2[thisLic].getBusinessLicense() && licenseType.toUpperCase().equals(newLicArray2[thisLic].getBusinessLicense().toUpperCase())))) 
        {
          refLicObj = newLicArray2[thisLic];
          logDebug("Ref Lic Prof found by using the comment field.");
          break;
        }
      }
    }
  }
  if (refLicObj) 
  {
    //logDebug("Reference license returned: " + refLicObj.getStateLicense() +" boardcode = " + refLicObj.getLicenseBoard() + " licenseType = " + refLicObj.getBusinessLicense());
  }
  else 
  {
    logDebug("no lp found");
  }
  return refLicObj;
}
function checkActiveCEAudit(capId){
  
  var flag = false; 
  var vCap = aa.cap.getCap(capId).getOutput();
  var vCapType = vCap.getCapType().toString();

  var parentLic = getParentLicenseRecord(capId);//getParent(capId);
  logDebug("##getParentLicenseRecord :: "+parentLic);
  if(parentLic == null || parentLic == undefined || parentLic ==  "" || parentLic == false){
    parentLic = parentCapId;
    logDebug("##parentCapId :: "+parentLic);
  }
  if(parentLic == null || parentLic == undefined || parentLic ==  "" || parentLic == false){
    parentLic = getParent(capId);
    logDebug("##getParent :: "+parentLic);
  }
  if(parentLic != null && parentLic != undefined && parentLic !=  "" && parentLic != false){
    var children = getChildren("License/DPL/Continuing Education/CE Audit",parentLic); //find if the parent has an open CE Audit record
    var ceSubChild = null;

    for(var child in children)
    {
      var childID = children[child]; 
      var childCap = aa.cap.getCap(childID).getOutput();
            if(childCap.getCapStatus != "Closed"){
        flag = true;
      }                 
        }
  }
      
  return flag;    
}
//ADDED BY Ankush ON 08/30/2016
function CWM_ELP_459_WTUA_DPL_copyContactToAdjRecord(childCap) {
  try {
    var profLicenseList = aa.licenseProfessional.getLicensedProfessionalsByCapID(capId);
    var isContactCopied = false;
    if (profLicenseList.getSuccess()) {
      var profLicenseObj = profLicenseList.getOutput();
      //ELPLogging.debug(profLicenseObj.length);
      for (var counter in profLicenseObj) {
        var thisProfLicenseObj = profLicenseObj[counter];
        var childLicAltId = thisProfLicenseObj.getLicenseNbr() + "-" + thisProfLicenseObj.getComment() + "-" + thisProfLicenseObj.getBusinessLicense();
        logDebug("childLicAltId :: " + childLicAltId);
        var childLicCapId = aa.cap.getCapID(childLicAltId).getOutput();
        var capContactResult = aa.people.getCapContactByCapID(childLicCapId);
        if (capContactResult.getSuccess()) {
          var Contacts = capContactResult.getOutput();
          if (!isContactCopied) {
            for (yy in Contacts) {
              if (Contacts[yy].getCapContactModel().getContactType() == "Licensed Individual") {
                copyContactsByTypeWithAddress(childLicCapId, childCap, "Licensed Individual");
                isContactCopied = true;
                break;
              }
            }
          }
          if (!isContactCopied) {
            for (yy in Contacts) {
              if (Contacts[yy].getCapContactModel().getContactType() == "Business") {
                copyContactsByTypeWithAddress(childLicCapId, childCap, "Business");
                isContactCopied = true;
                break;
              }
            }
          }
          if (!isContactCopied) {
            for (yy in Contacts) {
              if (Contacts[yy].getCapContactModel().getContactType() == "Massage Therapy Establishment") {
                copyContactsByTypeWithAddress(childLicCapId, childCap, "Massage Therapy Establishment");
                isContactCopied = true;
                break;
              }
            }
          }
          if (!isContactCopied) {
            for (yy in Contacts) {
              if (Contacts[yy].getCapContactModel().getContactType() == "Occupational School") {
                copyContactsByTypeWithAddress(childLicCapId, childCap, "Occupational School");
                isContactCopied = true;
                break;
              }
            }
          }
          if (!isContactCopied) {
            for (yy in Contacts) {
              if (Contacts[yy].getCapContactModel().getContactType() == "Chiropractor Facility") {
                copyContactsByTypeWithAddress(childLicCapId, childCap, "Chiropractor Facility");
                isContactCopied = true;
                break;
              }
            }
          }
          if (!isContactCopied) {
            for (yy in Contacts) {
              if (Contacts[yy].getCapContactModel().getContactType() == "Physical Therapy Facility") {
                copyContactsByTypeWithAddress(childLicCapId, childCap, "Physical Therapy Facility");
                isContactCopied = true;
                break;
              }
            }
          }
          if (!isContactCopied) {
            for (cc in Contacts) {
              if (Contacts[cc].getCapContactModel().getContactType() == "Funeral Establishment") {
                copyContactsByTypeWithAddress(childLicCapId, childCap, "Funeral Establishment");
                isContactCopied = true;
                break;
              }
            }
          }
        }
      }
    }

  } catch (err) {
    logDebug("Error on WTUA function CWM_ELP_459_WTUA_DPL_copyContactToAdjRecord(), Please contact administrator :" + err.message);
  }
} //END OF FUNCTION : CWM_ELP_459_WTUA_DPL_copyContactToAdjRecord
//ADDED BY Ankush ON 09/01/2016
function CWM_ELP_459_WTUA_DPL_exposeRecordOnACA(pAdjudicationLicId) {
  try {
    aa.cap.updateAccessByACA(pAdjudicationLicId, "Y");
    //var childLicCapId = aa.cap.getCapID(childLicAltId).getOutput();
    var capContactResult = aa.people.getCapContactByCapID(pAdjudicationLicId);
    if (capContactResult.getSuccess()) {
      var Contacts = capContactResult.getOutput();
      var isLicenseLinked = false;
      if (!isLicenseLinked) {
        for (zz in Contacts) {
          if (Contacts[zz].getCapContactModel().getContactType() == "Respondent") {
            var refContactNbrRes = Contacts[zz].getCapContactModel().getRefContactNumber();
            isLicenseLinked = CWM_ELP_459_WTUA_DPL_linkRecordOnACA(pAdjudicationLicId, refContactNbrRes);
          }
        }
      }
      if (!isLicenseLinked) {
        for (zz in Contacts) {
          if (Contacts[zz].getCapContactModel().getContactType() == "Respondent Business") {
            var refContactNbrResBus = Contacts[zz].getCapContactModel().getRefContactNumber();
            isLicenseLinked = CWM_ELP_459_WTUA_DPL_linkRecordOnACA(pAdjudicationLicId, refContactNbrResBus);
          }
        }
      }
      if (!isLicenseLinked) {
        for (zz in Contacts) {
          if (Contacts[zz].getCapContactModel().getContactType() == "Licensed Individual") {
            var refContactNbrRes = Contacts[zz].getCapContactModel().getRefContactNumber();
            isLicenseLinked = CWM_ELP_459_WTUA_DPL_linkRecordOnACA(pAdjudicationLicId, refContactNbrRes);
            break;
          }
        }
      }
      if (!isLicenseLinked) {
        for (zz in Contacts) {
          if (Contacts[zz].getCapContactModel().getContactType() == "Business") {
            var refContactNbrRes = Contacts[zz].getCapContactModel().getRefContactNumber();
            isLicenseLinked = CWM_ELP_459_WTUA_DPL_linkRecordOnACA(pAdjudicationLicId, refContactNbrRes);
            break;
          }
        }
      }
      if (!isLicenseLinked) {
        for (zz in Contacts) {
          if (Contacts[zz].getCapContactModel().getContactType() == "Massage Therapy Establishment") {
            var refContactNbrRes = Contacts[zz].getCapContactModel().getRefContactNumber();
            isLicenseLinked = CWM_ELP_459_WTUA_DPL_linkRecordOnACA(pAdjudicationLicId, refContactNbrRes);
            break;
          }
        }
      }
      if (!isLicenseLinked) {
        for (zz in Contacts) {
          if (Contacts[zz].getCapContactModel().getContactType() == "Occupational School") {
            var refContactNbrRes = Contacts[zz].getCapContactModel().getRefContactNumber();
            isLicenseLinked = CWM_ELP_459_WTUA_DPL_linkRecordOnACA(pAdjudicationLicId, refContactNbrRes);
            break;
          }
        }
      }
      if (!isLicenseLinked) {
        for (zz in Contacts) {
          if (Contacts[zz].getCapContactModel().getContactType() == "Chiropractor Facility") {
            var refContactNbrRes = Contacts[zz].getCapContactModel().getRefContactNumber();
            isLicenseLinked = CWM_ELP_459_WTUA_DPL_linkRecordOnACA(pAdjudicationLicId, refContactNbrRes);
            break;
          }
        }
      }
      if (!isLicenseLinked) {
        for (zz in Contacts) {
          if (Contacts[zz].getCapContactModel().getContactType() == "Physical Therapy Facility") {
            var refContactNbrRes = Contacts[zz].getCapContactModel().getRefContactNumber();
            isLicenseLinked = CWM_ELP_459_WTUA_DPL_linkRecordOnACA(pAdjudicationLicId, refContactNbrRes);
            break;
          }
        }
      }
      if (!isLicenseLinked) {
        for (zz in Contacts) {
          if (Contacts[zz].getCapContactModel().getContactType() == "Funeral Establishment") {
            var refContactNbrRes = Contacts[zz].getCapContactModel().getRefContactNumber();
            isLicenseLinked = CWM_ELP_459_WTUA_DPL_linkRecordOnACA(pAdjudicationLicId, refContactNbrRes);
            break;
          }
        }
      }
    }
  } catch (err) {
    logDebug("Error on WTUA function CWM_ELP_459_WTUA_ABCC_exposeRecordOnACA(), Please contact administrator :" + err.message);
  }
} //END OF FUNCTION : CWM_ELP_459_WTUA_ABCC_exposeRecordOnACA
//ADDED BY Ankush ON 09/01/2016
function CWM_ELP_459_WTUA_DPL_linkRecordOnACA(pAdjudicationLicId, pRefContact) {
  try {
      var vRefContact = pRefContact;
      if (vRefContact)
      {
        var vPublicUserId = getPublicUserLinkedToRefContact(vRefContact);
        if (vPublicUserId) 
        {
          var vUserResult = aa.publicUser.getPublicUserByUserId(vPublicUserId).getOutput();
          if (vUserResult) 
          {
            var vUserSeqNum = vUserResult.getUserSeqNum();
            linkLicenseToACAAccount(pAdjudicationLicId, vUserSeqNum);
            return true;
          }else{
            return false;
          }
        }
        else{
          logDebug("**WARNING** Public user not found. Unable to link LLA Review record to ACA.");
          return false;
        }
      } 
      else 
      {
        logDebug("**WARNING** Reference contact number not found for LLA");
      }
  } catch (err) {
    logDebug("Error on WTUA function CWM_ELP_459_WTUA_DPL_linkRecordOnACA(), Please contact administrator :" + err.message);
  }
} //END OF FUNCTION : CWM_ELP_459_WTUA_DPL_linkRecordOnACA
/*
@By:ankush.s.kshirsagar
@Dt: 9/15/2016
@Desc: Link the license to a public user Account for ACA.
*/
function linkLicenseToACAAccount(pCapId, pUserSeqNum) {
  try {
    logDebug("linkLicenseToACAAccount() start");
    if (pUserSeqNum) {
      pUserSeqNum = pUserSeqNum.toString();
      var vACAPublicUserId = "";
      if (pUserSeqNum.indexOf("PUBLICUSER") < 0) {
        vACAPublicUserId = "PUBLICUSER" + pUserSeqNum;
      } else {
        vACAPublicUserId = pUserSeqNum;
      }
      logDebug("Linking License "+pCapId+" with user " + vACAPublicUserId +" started");
      aa.cap.updateCreatedAccessBy4ACA(pCapId, vACAPublicUserId, "Y", "N");
      logDebug("Linking License "+pCapId+" with user " + vACAPublicUserId +" Done");
    } else {
      logDebug("Warning**Cannot link license to ACA account for:" + pUserSeqNum);
    }
    logDebug("linkLicenseToACAAccount() exit");
  } catch (err) {
    logDebug("Error** on linkLicenseToACAAccount : " + err.message);
  }
}
function getPublicUserLinkedToRefContact(pRefContactSeqNum) {
  try {
    var vPublicUserResult = aa.publicUser.getPublicUserListByContactNBR(aa.util.parseLong(pRefContactSeqNum));

    if (vPublicUserResult.getSuccess()) {
      var fpublicUsers = vPublicUserResult.getOutput();
      if (fpublicUsers == null || fpublicUsers.size() == 0) {
        logDebug("The contact(" + pRefContactSeqNum + ") is not associated with any public user.");
        return false;
      } else {
        logDebug("The contact(" + pRefContactSeqNum + ") is associated with " + fpublicUsers.size() + " public users.");
        //Returning the user.
        var fpublicUsersArr = vPublicUserResult.getOutput().toArray();
        return fpublicUsersArr[0].getUserID();//o/p: aca login ex: debashish
      }
    } else {
      logMessage("Warning*** Failed to get public user by ref contact seq number: " + vPublicUserResult.getErrorMessage());
      return false;
    }

  } catch (err) {
    logDebug("Error**getPublicUserLinkedToRefContact():" + err.message);
  }

  return false;
}

  function addLicenseRecordToSYNCSet(licID) 
{
    var setName = "SYNCSET";
    var setExists = false;
  var setGetResult = aa.set.getSetByPK(setName);
  if (setGetResult.getSuccess())
        setExists = true;
        
    if (!setExists)
    {
        //aa.print("Set doesn't exists.");
        setDescription = setName;
        setType = "License Sync";
        setStatus = "Pending";
        var theSetResult = aa.set.createSet(setName, setDescription, setType, "");
        if (!theSetResult.getSuccess())
        {
            aa.print("**ERROR** error creating set " + setName + " : " + theSetResult.getErrorMessage);
        }
        else
        {
            setExists = true;
        }
    }
    
    if (setExists)
    {
        var setsMemberIsPartOf = aa.set.getSetHeadersListByMember(licID).getOutput();

    var doesExistInSync = false;
    for (i = 0; i < setsMemberIsPartOf.size(); i++) {

      if (setName == setsMemberIsPartOf.get(i).getSetID()) {
        doesExistInSync = true;
                break;
      }
    }

    if (!doesExistInSync)
      aa.set.add(setName, licID);
    }
}

// create a new set
function createSet(setName, setDescription) {

    //optional 3rd parameter is setType
    //optional 4th parameter is setStatus
    //optional 5th paramater is setStatusComment

    var setType = "";
    var setStatus = "";
    var setStatusComment = "";

    if (arguments.length > 2) {
        setType = arguments[2]
    }

    if (arguments.length > 3) {
        setStatus = arguments[3]
    }

    if (arguments.length > 4) {
        setStatusComment = arguments[4];
    }

    var setScript = aa.set.getSetHeaderScriptModel().getOutput();
    setScript.setSetID(setName);
    setScript.setSetTitle(setDescription);
    setScript.setSetStatusComment(setStatusComment);
    setScript.setSetStatus(setStatus);
    setScript.setRecordSetType(setType);
    setScript.setServiceProviderCode(servProvCode);
    setScript.setAuditDate(aa.date.getCurrentDate());
    setScript.setAuditID(currentUserID);

    var setCreateResult = aa.set.createSetHeader(setScript);

    return setCreateResult.getSuccess();
} // End of createSet

function CWM_ELP_EPLACE_6449_DPL_renewPLBLicense(itemCapId) {
    useAppSpecificGroupName = false;
    var tmpCapId = null;
    if (capId) {processRenewal

        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
    var result = false;


    //----------------------------------------------------------------------------------------------
    //Get Attestation ASI field - START
    //----------------------------------------------------------------------------------------------
    // this to avoid a script error from special character.
    var splChar = String.fromCharCode(167);
    var asiName = "1.  I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
    //1.  I AM IN COMPLIANCE WITH G.L.c.62C 
    var inComplianceGLC = getAppSpecific(asiName);
    var reportedDicipline = getAppSpecific("2.I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
    //2.I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.
    var reportedAdmissions = getAppSpecific("3. I HAVE REPORTED TO THE BOARD ADMISSIONS TO SUFFICIENT FACTS.");
    //3.  3. I HAVE REPORTED TO THE BOARD ADMISSIONS TO SUFFICIENT FACTS.
    asiName = "4. AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
    var reportedSSN = getAppSpecific(asiName);
    //4. AS REQUIRED BY M.G.L. C. 30A, 13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.

    //----------------------------------------------------------------------------------------------
    //Get Attestation ASI field - END
    //----------------------------------------------------------------------------------------------    

    if (inComplianceGLC.toUpperCase().equals("NO") || reportedDicipline.toUpperCase().equals("NO") ||
        reportedAdmissions.toUpperCase().equals("NO") ||
        reportedSSN.toUpperCase().equals("NO")) {
        if (renewalApproval(capId)) {
            closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
            activateTask("Issuance");
            updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
            assignedToByShortNotes("Issuance", getBoard(capId));
            result = true;
        } else result = false;
    } else {
        if (renewalApproval(capId)) {
            logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
            closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
            activateTask("Issuance");
            updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
            //assignedToByShortNotes("Issuance", "SM");
            result = true;
        } else result = false;
    }

    capId = tmpCapId;
    return result;
}

function CWM_ELP_Defect_4768_DPL_renewDPLLicense(itemCapId) {
    useAppSpecificGroupName = false;
    var result = false;
    var tmpCapId = null;
    if (capId) {
        tmpCapId = capId;
        capId = itemCapId;
    } else {
        capId = itemCapId;
    }
	
    logDebug("IN CWM_ELP_Defect_4768_DPL_renewDPLLicense");
	//----------------------------------------------------------------------------------------------
	//Get  Attestation ASI field - START
	//----------------------------------------------------------------------------------------------
    // this to avoid a script error from special character.
	var splChar = String.fromCharCode(167);
    var asiName = "A. I AM IN COMPLIANCE WITH G.L.c.62C " + splChar + splChar + "47A & 49A.";
    var educationAsi = getAppSpecific("B. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS.");

    var inComplianceGLC = getAppSpecific(asiName);
    var reportedDicipline = getAppSpecific("C. I HAVE REPORTED TO THE BOARD ALL DISCIPLINE TAKEN AGAINST ANY PROFESSIONAL LICENSE ISSUED TO ME.");
    var reportedPleas = getAppSpecific("D. I HAVE REPORTED TO THE BOARD ALL CRIMINAL CONVICTIONS OR GUILTY PLEAS.");
    var legalObligation = getAppSpecific("E. I UNDERSTAND MY LEGAL OBLIGATION TO REPORT ABUSE/NEGLECT OF CHILDREN, DISABLED PERSONS & ELDERLY.");

    asiName = "F.  AS REQUIRED BY M.G.L. C. 30A, " + splChar + "13A, I HAVE REPORTED MY SOCIAL SECURITY NUMBER.";
	
    var reportedSSN = getAppSpecific(asiName);
    var admissionFacts = getAppSpecific("G. I HAVE REPORTED TO THE BOARD ALL  ADMISSIONS TO SUFFICIENT FACTS.");
	var attestPain = getAppSpecific("I attest under the pains and penalties of perjury that the above responses are truthful & accurate.");
	
	// FA 05/07/2018 Ticket 6814. G added. if the attestation is answered with a "NO", upon submission the renewal should go to WF task and status Validate/ Attestation Review 
	//var gMassHealth = getAppSpecific("G. I HAVE SUBMITTED A APPLICATION TO BE A FULLY PARTICIPATING/NONBILLING PROVIDER TO MASSHEALTH.");
	//----------------------------------------------------------------------------------------------
	//Get SM Attestation ASI field - END
	//----------------------------------------------------------------------------------------------	
        //added for defect 625

       // if (educationAsi != undefined && educationAsi != null && educationAsi != "") {
            var haveCompleted = getAppSpecific("B. I HAVE COMPLETED ALL REQUIRED CONTINUING EDUCATION IN COMPLIANCE WITH BOARD STATUTES/REGULATIONS.").toUpperCase().equals("YES");

            if (!haveCompleted) {
				//CWM_ELP_Generic_DPL_addConditionOnCap("Renewal","Positive Renewal Attestation");
                logDebug("Have not completed.");
                closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
                updateTask("Validate", "CE Attestation Review", "Updated via script.", "Updated via script.");
                activateTask("Validate");
                assignedToByShortNotes("Validate", getBoard(capId));
            }
     //   }
	 else {
			if (inComplianceGLC.toUpperCase().equals("NO") || reportedDicipline.toUpperCase().equals("NO") ||
				reportedPleas.toUpperCase().equals("NO") || legalObligation.toUpperCase().equals("NO") ||
				reportedSSN.toUpperCase().equals("NO") || admissionFacts.toUpperCase().equals("NO") || attestPain.toUpperCase().equals("NO")) {
				if (renewalApproval(capId)) {
					/* FA 05/07/2018 Ticket 6814. -- Rule changed.
					closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
					activateTask("Issuance");
					updateTask("Issuance", "Attestation Review", "Updated via script.", "Updated via script.");
					assignedToByShortNotes("Issuance", getBoard(capId));
					*/
					closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
					activateTask("Validate");
					updateTask("Validate", "Attestation Review", "Updated via script.", "Updated via script.");
					assignedToByShortNotes("Validate", getBoard(capId));
					result = true;
				} else result = false;
			} else {
				if (renewalApproval(capId)) {
					//logDebug("Post renewal approval workflow tasks settings for " + capId.getCustomID());
					closeTask("Intake", "Submitted", "Updated via script.", "Updated via script.");
					activateTask("Issuance");
					updateTask("Issuance", "Ready for Printing", "Updated via script.", "Updated via script.");
					//assignedToByShortNotes("Issuance", "SM");
					result = true;
				} else result = false;
			}
		
	 }



	//----------------------------------------------------------------------------------------------
	//Modification to account for SM Attestation fields available in different record types - END
	//----------------------------------------------------------------------------------------------
	
    capId = tmpCapId;
    return result;
}

function getContactBirthDate(itemCap, thisContactType) {
	// var birthDate = null;
	// try {
	// 	var capContactResult = aa.people.getCapContactByCapID(capId);
	// 	if (capContactResult.getSuccess()) {
	// 		capContactResult = capContactResult.getOutput();
	// 		for (i in capContactResult) {
	// 			var peopleModel = capContactResult[i].getPeople();
	// 			var contactType = String(peopleModel.getContactType());
	// 			if (contactType.toUpperCase() == thisContactType.toUpperCase()) {
	// 				var capContactScriptModel = capContactResult[i];
	// 				var capContactModel = capContactScriptModel.getCapContactModel();
	// 				var bDate = capContactModel.getBirthDate();
	// 				if (bDate != null) {
	// 					birthDate = new Date(bDate.getTime());
	// 					logDebug("Birth date: " + (birthDate.getMonth() + 1) + "/" + birthDate.getDate() + "/" + birthDate.getFullYear());
	// 				}
	// 			}
	// 		}
	// 	}
	// } catch (error) {
	// 	showMessage = true;
	// 	comment("Error on getContactBirthDate:" + error + " Please contact administrator");
	// 	logDebug("**ERROR: In function " + arguments.callee.toString().match(/function ([^\(]+)/)[1] + ", line: " + error.lineNumber + " - " + error.message + "\r" + error.stack);
	// }

	var retVal = null;
	var retValIndex = 0;

	var ds = null;
	var conn = null;
	var sStmt = null;
	var rSet = null;
	var birthDate = null;

	try {
		if (itemCap) {
			var selectString = "select B1_BIRTH_DATE from B3CONTACT where SERV_PROV_CODE = 'DPL' and B1_CONTACT_TYPE = '" + thisContactType +
				"' and B1_PER_ID1 = '" + itemCap.getID1() + "' and B1_PER_ID2 = '" + itemCap.getID2() + "' and B1_PER_ID3 = '" + itemCap.getID3() + "'";

			logDebug("Query to perform:" + selectString);

			var initialContext = aa.proxyInvoker.newInstance("javax.naming.InitialContext").getOutput();
			ds = initialContext.lookup("java:/AA");
			conn = ds.getConnection();
			sStmt = conn.prepareStatement(selectString);
			rSet = sStmt.executeQuery();

			for (var currentResult = rSet.next(); currentResult == true; currentResult = rSet.next()) {
				birthDate = new Date(rSet.getDate("B1_BIRTH_DATE").time);
				retValIndex++;
			}
		} else {
			logDebug("**ERROR: itemCap can't be null.");
		}
	} catch (ex) {
		showMessage = true;
		comment("Error on getContactBirthDate:" + ex + " Please contact administrator");
		logDebug("**ERROR: In function " + arguments.callee.toString().match(/function ([^\(]+)/)[1] + ", line: " + ex.lineNumber + " - " + ex.message + "\r" + ex.stack);
	} finally {
		if (rSet != null) {
			rSet.close();
			rSet = null;
		}

		//Close the database connection
		conn.close();
	}

	return birthDate;
}
function setExpDateForSocialWorkersRenewal(itemCap) {
    try {
        var expDate = new Date();
        var today = new Date();
        var birthDate = getContactBirthDate(itemCap, "Licensed Individual");

        if (birthDate != null) {
            var issueDateYear = today.getFullYear();
            var nextBirthday = new Date();
            nextBirthday.setMonth(birthDate.getMonth());
            nextBirthday.setDate(birthDate.getDate());

            var licCustId = itemCap.getCustomID();
            logDebug("Retrieving the license using: " + licCustId);
            thisLic = new licenseObject(licCustId, itemCap);
            if (thisLic) logDebug("License record found: " + thisLic.licNum);
            var currentExpDate = convertDate(thisLic.b1ExpDate);
            logDebug("Current Expiration Date: " + (currentExpDate.getMonth() + 1) + "/" + currentExpDate.getDate() + "/" + currentExpDate.getFullYear());

            // FA 09/23/2018 Ticket# 7368. New exp date year should be 2 year after current exp year       
            if (nextBirthday <= currentExpDate) nextBirthday.setFullYear(nextBirthday.getFullYear()+1);

            logDebug("Next birth day : " + (nextBirthday.getMonth() + 1) + "/" + nextBirthday.getDate() + "/" + nextBirthday.getFullYear());

            expDate = nextBirthday; 

        // FA 12-28-2018. Ticket # 1065-1100-1102-1103
	// ORG CODE expDate.setFullYear(nextBirthday.getFullYear() + 2);
	expDate.setFullYear(currentExpDate.getFullYear() + 2);
			
            logDebug("Calculated expiration date: " + (expDate.getMonth() + 1) + "/" + expDate.getDate() + "/" + expDate.getFullYear());

            var expDateString = expDate.getMonth() + 1 + "/" + expDate.getDate() + "/" + expDate.getFullYear();
            thisLic.setExpiration(expDateString);

            // only activate if the expiration date is in the future.
            expDate.setHours(0, 0, 0, 0);
            if (expDate > today)
                thisLic.setStatus("Active");

            if (validateSWExpDate(itemCap)) {
                logDebug("**INFO: Expiration date validated succesfuly.");
            }
        } else {
            logDebug("**WARN: No birth date found for applicant contact type. " + itemCap.getCustomID());
        }
    } catch (error) {
        showMessage = true;
        comment("Error on setExpDateForSocialWorkersRenewal:" + error + " Please contact administrator");
        logDebug("**ERROR: In function " + arguments.callee.toString().match(/function ([^\(]+)/)[1] + ", line: " + error.lineNumber + " - " + error.message + "\r" + error.stack);
    }
}
// FA 07/23/2018 Ticket 6865. Remove all the temp renewals from the parent license.
function removeTempRecords(capID){
	try
	{
		var vParentCapID = getParent(capID);
		var recId = vParentCapID.getCustomID();
		logDebug("License record:" + recId);  
	  
		var result = aa.cap.getProjectByMasterID(vParentCapID, "Renewal", "Incomplete");
		if (result.getSuccess()) {
		  var partialProjects = result.getOutput();
		  if (partialProjects != null && partialProjects.length > 0) {
			 // loop thru all the temp records
			 for (var index in partialProjects) {
				var thisChild = partialProjects[index];
				var capIDModel = thisChild.getCapID();
				var renewalCap = aa.cap.getCap(capIDModel).getOutput();
				if (renewalCap)
					var tmpRecord = aa.cap.getCapID(capIDModel.getID1(), capIDModel.getID2(), capIDModel.getID3()).getOutput();

					logDebug ("Temp Record :" + tmpRecord.getCustomID());
					if (!tmpRecord)
					  continue;
  
					aa.cap.removeRecord(tmpRecord);
					logDebug ("Successfully removed record :" + tmpRecord);
			 }
		  }
		}
		
	}
	catch(err)
	{
	  showMessage=true;
	  comment("Error on function removeTempRecords. Can't delete record " + tmpRecord + ". Error:" + err);
	} 
}

function validateSWExpDate(itemCap) {
	var result = false;
	try {
		var birthDate = getContactBirthDate(itemCap, "Licensed Individual");

		if (birthDate != null) {

			var licCustId = itemCap.getCustomID();
			logDebug("Retrieving the license using: " + licCustId);
			thisLic = new licenseObject(licCustId, itemCap);
			if (thisLic) logDebug("License record found: " + thisLic.licNum);
			var currentExpDate = convertDate(thisLic.b1ExpDate);
			logDebug("Birth Date: " + (birthDate.getMonth() + 1) + "/" + birthDate.getDate() + "/" + birthDate.getFullYear());
			logDebug("Current Expiration Date: " + (currentExpDate.getMonth() + 1) + "/" + currentExpDate.getDate() + "/" + currentExpDate.getFullYear());

			if ((currentExpDate.getMonth() + "/" + currentExpDate.getDate()).equals(birthDate.getMonth() + "/" + birthDate.getDate())) {
				logDebug("**INFO: Current expiration date MM/DD matches birth date.");
				result = true;;
			} else {
				logDebug("**WARN: Current expiration date MM/DD doesn't matches birth date.");
	            var expDateString = (birthDate.getMonth() + 1) + "/" + birthDate.getDate() + "/" + currentExpDate.getFullYear();
	            thisLic.setExpiration(expDateString);
	            logDebug("**WARN: Expiration date updated to " + expDateString + ".");
			}
		} else {
			logDebug("**WARN: No birth date found for applicant contact type. " + itemCap.getCustomID());
		}
	} catch (error) {
		showMessage = true;
		comment("Error on validateSWExpDate:" + error + " Please contact administrator");
		logDebug("**ERROR: In function " + arguments.callee.toString().match(/function ([^\(]+)/)[1] + ", line: " + error.lineNumber + " - " + error.message + "\r" + error.stack);
	}
	return result;
}
function copyAddress(srcCapId, targetCapId)
{
	//1. Get address with source CAPID.
	var capAddresses = getAddress(srcCapId);
	if (capAddresses == null || capAddresses.length == 0)
	{
		return;
	}
	//2. Get addresses with target CAPID.
	var targetAddresses = getAddress(targetCapId);
	//3. Check to see which address is matched in both source and target.
	for (loopk in capAddresses)
	{
		sourceAddressfModel = capAddresses[loopk];
		//3.1 Set target CAPID to source address.
		sourceAddressfModel.setCapID(targetCapId);
		targetAddressfModel = null;
		//3.2 Check to see if sourceAddress exist.
		if (targetAddresses != null && targetAddresses.length > 0)
		{
			for (loop2 in targetAddresses)
			{
				if (isMatchAddress(sourceAddressfModel, targetAddresses[loop2]))
				{
					targetAddressfModel = targetAddresses[loop2];
					break;
				}
			}
		}
		//3.3 It is a matched address model.
		if (targetAddressfModel != null)
		{
		
			//3.3.1 Copy information from source to target.
			aa.address.copyAddressModel(sourceAddressfModel, targetAddressfModel);
			//3.3.2 Edit address with source address information. 
			aa.address.editAddressWithAPOAttribute(targetCapId, targetAddressfModel);
			logDebug("Copying address");
		}
		//3.4 It is new address model.
		else
		{	
			//3.4.1 Create new address.
			logDebug("Copying address");
			aa.address.createAddressWithAPOAttribute(targetCapId, sourceAddressfModel);
		}
	}
}
function getAddress(capId)
{
	capAddresses = null;
	var s_result = aa.address.getAddressByCapId(capId);
	if(s_result.getSuccess())
	{
		capAddresses = s_result.getOutput();
		if (capAddresses == null || capAddresses.length == 0)
		{
			logDebug("WARNING: no addresses on this CAP:" + capId);
			capAddresses = null;
		}
	}
	else
	{
		logDebug("Error: Failed to address: " + s_result.getErrorMessage());
		capAddresses = null;	
	}
	return capAddresses;
}
function copyASIInfo(srcCapId, targetCapId)
{
	//copy ASI infomation
	var AppSpecInfo = new Array();
	loadAppSpecific(AppSpecInfo,srcCapId);
	var recordType = "";
	
	var targetCapResult = aa.cap.getCap(targetCapId);

	if (!targetCapResult.getSuccess()) {
			logDebug("Could not get target cap object: " + targetCapId);
		}
	else	{
		var targetCap = targetCapResult.getOutput();
			targetAppType = targetCap.getCapType();		//create CapTypeModel object
			targetAppTypeString = targetAppType.toString();
			logDebug(targetAppTypeString);
		}

	var ignore = lookup("EMSE:ASI Copy Exceptions",targetAppTypeString); 
	var ignoreArr = new Array(); 
	if(ignore != null) 
	{
		ignoreArr = ignore.split("|");
		copyAppSpecificRenewal(AppSpecInfo,targetCapId, ignoreArr);
	}
	else
	{
		aa.print("something");
		copyAppSpecificRenewal(AppSpecInfo,targetCapId);

	}
}
function copyAppSpecificRenewal(AInfo,newCap) // copy all App Specific info into new Cap, 1 optional parameter for ignoreArr
{
	var ignoreArr = new Array();
	var limitCopy = false;
	if (arguments.length > 2) 
	{
		ignoreArr = arguments[2];
		limitCopy = true;
	}
	
	for (asi in AInfo){
		//Check list
		if(limitCopy){
			var ignore=false;
		  	for(var i = 0; i < ignoreArr.length; i++)
		  		if(ignoreArr[i] == asi){
		  			ignore=true;
					logDebug("Skipping ASI Field: " + ignoreArr[i]);
		  			break;
		  		}
		  	if(ignore)
		  		continue;
		}
		//logDebug("Copying ASI Field: " + asi);
		editAppSpecific(asi,AInfo[asi],newCap);
	}
}
function copyContacts3_0(srcCapId, targetCapId) {
	//1. Get people with source CAPID.
	var capPeoples = getPeople3_0(srcCapId);
	if (capPeoples == null || capPeoples.length == 0) {
		return;
	}
	//2. Get people with target CAPID.
	var targetPeople = getPeople3_0(targetCapId);
	//3. Check to see which people is matched in both source and target.
	for (loopk in capPeoples) {
		sourcePeopleModel = capPeoples[loopk];
		//3.1 Set target CAPID to source people.
		if (sourcePeopleModel.getPeople().getEndDate() == null) {
			sourcePeopleModel.getCapContactModel().setCapID(targetCapId);
			//Added by Evan Cai 11-1-2017 for PHOENIX-711 COC contact issue
			if (appMatch("License/State License/Certificate of Compliance/Renewal")
				 && sourcePeopleModel.getCapContactModel().getContactType() == "Business") {
				sourcePeopleModel.getCapContactModel().setComponentName("Applicant");
			}
			targetPeopleModel = null;
			//3.2 Check to see if sourcePeople exist.
			if (targetPeople != null && targetPeople.length > 0) {
				for (loop2 in targetPeople) {
					if (isMatchPeople3_0(sourcePeopleModel, targetPeople[loop2])) {
						targetPeopleModel = targetPeople[loop2];
						break;
					}
				}
			}
			//3.3 It is a matched people model.
			if (targetPeopleModel != null) {
				//3.3.1 Copy information from source to target.
				aa.people.copyCapContactModel(sourcePeopleModel.getCapContactModel(), targetPeopleModel.getCapContactModel());
				//3.3.2 Copy contact address from source to target.
				if (targetPeopleModel.getCapContactModel().getPeople() != null && sourcePeopleModel.getCapContactModel().getPeople()) {
					targetPeopleModel.getCapContactModel().getPeople().setContactAddressList(sourcePeopleModel.getCapContactModel().getPeople().getContactAddressList());
				}
				//3.3.3 Edit People with source People information.
				aa.people.editCapContactWithAttribute(targetPeopleModel.getCapContactModel());
			}
			//3.4 It is new People model.
			else {
				//3.4.1 Create new people.
				aa.people.createCapContactWithAttribute(sourcePeopleModel.getCapContactModel());
			}
		}
	}
}
function getPeople3_0(capId) {
    capPeopleArr = null;
    var s_result = aa.people.getCapContactByCapID(capId);
    if (s_result.getSuccess()) {
        capPeopleArr = s_result.getOutput();
        if (capPeopleArr != null || capPeopleArr.length > 0) {
            for (loopk in capPeopleArr) {
                var capContactScriptModel = capPeopleArr[loopk];
                var capContactModel = capContactScriptModel.getCapContactModel();
                var peopleModel = capContactScriptModel.getPeople();
                var contactAddressrs = aa.address.getContactAddressListByCapContact(capContactModel);
                if (contactAddressrs.getSuccess()) {
                    var contactAddressModelArr = convertContactAddressModelArr(contactAddressrs.getOutput());
                    peopleModel.setContactAddressList(contactAddressModelArr);
                }
            }
        }
        else {
            logDebug("WARNING: no People on this CAP:" + capId);
            capPeopleArr = null;
        }
    }
    else {
        logDebug("ERROR: Failed to People: " + s_result.getErrorMessage());
        capPeopleArr = null;
    }
    return capPeopleArr;
}
function getAppName() {
    var itemCap = capId;
    if (arguments.length == 1) itemCap = arguments[0]; // use cap ID specified in args

    capResult = aa.cap.getCap(itemCap)

    if (!capResult.getSuccess())
    { logDebug("**WARNING: error getting cap : " + capResult.getErrorMessage()); return false }

    capModel = capResult.getOutput().getCapModel()

    return capModel.getSpecialText()
}
/*--------------------------------------------------------------------------------------------------------------------/
| Start ETW 12/3/14 isMatchPeople3_0
/--------------------------------------------------------------------------------------------------------------------*/
function isMatchPeople3_0(capContactScriptModel, capContactScriptModel2) {
    if (capContactScriptModel == null || capContactScriptModel2 == null) {
        return false;
    }

    var contactType1 = capContactScriptModel.getCapContactModel().getPeople().getContactType();
    var contactType2 = capContactScriptModel2.getCapContactModel().getPeople().getContactType();
    var firstName1 = capContactScriptModel.getCapContactModel().getPeople().getFirstName();
    var firstName2 = capContactScriptModel2.getCapContactModel().getPeople().getFirstName();
    var lastName1 = capContactScriptModel.getCapContactModel().getPeople().getLastName();
    var lastName2 = capContactScriptModel2.getCapContactModel().getPeople().getLastName();
    var fullName1 = capContactScriptModel.getCapContactModel().getPeople().getFullName();
    var fullName2 = capContactScriptModel2.getCapContactModel().getPeople().getFullName();

    if ((contactType1 == null && contactType2 != null) || (contactType1 != null && contactType2 == null)) {
        return false;
    }

    if (contactType1 != null && !contactType1.equals(contactType2)) {
        return false;
    }

    if ((firstName1 == null && firstName2 != null) || (firstName1 != null && firstName2 == null)) {
        return false;
    }

    if (firstName1 != null && !firstName1.equals(firstName2)) {
        return false;
    }

    if ((lastName1 == null && lastName2 != null) || (lastName1 != null && lastName2 == null)) {
        return false;
    }

    if (lastName1 != null && !lastName1.equals(lastName2)) {
        return false;
    }

    if ((fullName1 == null && fullName2 != null) || (fullName1 != null && fullName2 == null)) {
        return false;
    }

    if (fullName1 != null && !fullName1.equals(fullName2)) {
        return false;
    }

    return true;
}
/*--------------------------------------------------------------------------------------------------------------------/
| End ETW 12/3/14 isMatchPeople3_0
/--------------------------------------------------------------------------------------------------------------------*/

// FA 01/07/2019. Ticket #1044. This method loads ASITs for Master Electrician Applications in ACA.
function loadASITables4ACA_4MasterElectricianApp() {
  //
   // Loads App Specific tables into their own array of arrays.  Creates global array objects
   //
   // Optional parameter, cap ID to load from.  If no CAP Id specified, use the capModel
   //
   var itemCap = capId;
   if (arguments.length == 1) {
      itemCap = arguments[0]; // use cap ID specified in args
      var gm = aa.appSpecificTableScript.getAppSpecificTableGroupModel(itemCap).getOutput();
   } else {
      var gm = cap.getAppSpecificTableGroupModel()
   }
   var ta = gm.getTablesMap();
   var tai = ta.values().iterator();
   while (tai.hasNext()) {
      var tsm = tai.next();
      if (tsm.rowIndex.isEmpty())
         continue; // empty table
      var tempObject = new Array();
      var tempArray = new Array();
      var tn = tsm.getTableName();
      tn = String(tn).replace(/[^a-zA-Z0-9]+/g, '');
      if (!isNaN(tn.substring(0, 1)))
         tn = "TBL" + tn // prepend with TBL if it starts with a number
      var tsmfldi = tsm.getTableField().iterator();
      var tsmcoli = tsm.getColumns().iterator();
      var numrows = 1;
      while (tsmfldi.hasNext()) // cycle through fields
      {
         if (!tsmcoli.hasNext()) // cycle through columns
         {
            var tsmcoli = tsm.getColumns().iterator();
            tempArray.push(tempObject); // end of record
            var tempObject = new Array(); // clear the temp obj
            numrows++;
         }
         var tcol = tsmcoli.next();
         var tval = tsmfldi.next();

         //var tval = tnxt.getInputValue();
         tempObject[tcol.getColumnName()] = tval;
      }
      tempArray.push(tempObject); // end of record
      var copyStr = "" + tn + " = tempArray";
      logDebug("ASI Table Array : " + tn + " (" + numrows + " Rows)");
      eval(copyStr); // move to table name
   }
}